#!/usr/bin/python
############################################################
# <bsn.cl fy=2013 v=onl>
# 
#        Copyright 2013, 2014 Big Switch Networks, Inc.       
# 
# Licensed under the Eclipse Public License, Version 1.0 (the
# "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
# 
#        http://www.eclipse.org/legal/epl-v10.html
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific
# language governing permissions and limitations under the
# License.
# 
# </bsn.cl>
############################################################
"""ztn-loader-preupgrade

Phase 1 of a loader upgrade

- discover the ZTN server
- download the installer manifest
- download the installer and verify it
"""

import sys, os, socket
import subprocess
import logging
import re
import urllib2, urlparse
import json
import hashlib
import time

logging.basicConfig()
logger = logging.getLogger("preupgrade")
logger.setLevel(logging.DEBUG)

args = sys.argv[1:]
intf = "ma1"
if args:
    intf = args.pop(0)
if args:
    raise SystemExit("invalid arguments")

MAC_RE = re.compile("link/ether ([0-9a-fA-F:]+)")
IPV6_NETLOC_RE = re.compile("[[]([a-fA-F0-9:]+)(%.+)?[]](:.+)?")

def getHardwareAddress(intf):
    out = subprocess.check_output(('ip', '-oneline', 'link', 'show', intf,))
    m = MAC_RE.search(out)
    if m is None:
        raise ValueError("cannot get hardware address for %s: %s"
                         % (intf, out,))
    return m.group(1)

def gatherNeighs(intf):

    neighs = []

    cmd = ('ping6', '-I', intf, '-c', '3', 'ff02::1',)
    pipe = subprocess.Popen(cmd,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT)
    pipe.communicate()
    pipe.wait()

    cmd = ('ip', '-6', 'neigh', 'show',)
    pipe = subprocess.Popen(cmd,
                            stdout=subprocess.PIPE)
    out, _ = pipe.communicate()
    pipe.wait()
    for line in out.splitlines():
        words = line.split()
        neighs.append(words[0] + '%' + words[2])

    cmd = ('ping', '-I', intf, '-w', '2', '-c', '3', '-q', '255.255.255.255',)
    pipe = subprocess.Popen(cmd,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT)
    pipe.communicate()
    pipe.wait()

    cmd = ('ip', '-4', 'neigh', 'show',)
    pipe = subprocess.Popen(cmd,
                            stdout=subprocess.PIPE)
    out, _ = pipe.communicate()
    pipe.wait()
    for line in out.splitlines():
        words = line.split()
        neighs.append(words[0])

    return neighs

mac = getHardwareAddress(intf)
logger.debug("hardware is %s", mac)

class Request(urllib2.Request):

    def __init__(self, *args, **kwargs):
        urllib2.Request.__init__(self, *args, **kwargs)

        # ha ha, urllib/urlib2 doesn't do IPv6 correctly
        rec = urlparse.urlparse(self.get_full_url())
        m = IPV6_NETLOC_RE.match(rec.netloc)
        if m:
            self.add_header('Host', '[' + m.group(1) + ']')

def getManifest(mac, neigh):

    if ':' in neigh:
        url = ("http://[%s]/ztn/switch/%s/installer_manifest"
               % (neigh, mac,))
    else:
        url = ("http://%s/ztn/switch/%s/installer_manifest"
               % (neigh, mac,))

    req = Request(url)

    logger.debug("trying %s", url)
    try:
        fd = urllib2.urlopen(req)
    except IOError:
        return None
    try:
        buf = fd.read()
    except Exception, what:
        logger.error(str(what))
        buf = None
    fd.close()

    if buf is None: return None
    if fd.code != 200: return None
    ct = fd.headers.get('content-type', '')
    if not ct.startswith('application/json'): return None

    try:
        data = json.loads(buf)
    except ValueError, what:
        logger.error(what)
        return None

    return data

def findFlash():
    """Find the flash device were we are parking ZTN files."""

    for rec in open("/proc/mounts").readlines():
        words = rec.split()
        p = os.path.join(words[1], ".ztn-onl.swi")
        if os.path.exists(p):
            return words[1]

    ##return None
    return "/tmp"

def tryInstaller(url, ck):

    logger.info("downloading installer %s", url)
    dst = "/tmp/loader0"
    if os.path.exists(dst):
        os.unlink(dst)

    req = Request(url)
    try:
        fd = urllib2.urlopen(req)
    except IOError:
        return False
    try:
        buf = fd.read()
    except Exception, what:
        logger.error(str(what))
        buf = None
    fd.close()

    if buf is None: return False
    if fd.code != 200: return False

    ck2 = hashlib.md5(buf).hexdigest()
    if ck != ck2:
        logger.error("mismatched MD5")
        return False

    dstdir = findFlash()
    if not dstdir:
        logger.error("cannot find ZTN storage device")
        return False

    dst = os.path.join(dstdir, "onie-installer")
    logger.info("saving loader to %s", dst)
    open(dst, "w").write(buf)

    dst = os.path.join(dstdir, "onie-installer.url")
    logger.info("saving loader URL to %s", dst)
    open(dst, "w").write(url)

    return True

def tryUpgrade(timeout=180):

    future = time.time() + timeout
    while True:
        now = time.time()
        if now > future:
            logger.error("timed out retrieving installer")
            return False

        neighs = gatherNeighs(intf)

        for neigh in neighs:
            logger.debug("checking neighbor %s", neigh)

            data = getManifest(mac, neigh)
            if data is None: continue

            if tryInstaller(data.get('installer_url'),
                            data.get('installer_md5')):
                return True

        logger.warn("no valid ZTN image found, backing off")
        time.sleep(5.0)

sts = tryUpgrade()
if not sts:
    raise SystemExit("cannot get upgrade image")

logger.info("ZTN loader is in place")
logger.info("try 'ztn-loader-upgrade' to upgrade")

sys.exit(0)
