From 2e93665f87589ac34479835f830ac4b2fac79581 Mon Sep 17 00:00:00 2001
From: Carlos Cardenas <carlos@cumulusnetworks.com>
Date: Sun, 5 Jul 2015 19:53:45 -0500
Subject: [PATCH] Platform support for the DELL S6000 with the Centerton S1220
 CPU module

---
 arch/x86/include/asm/emergency-restart.h |  1 +
 arch/x86/kernel/reboot.c                 | 29 +++++++++++++++
 drivers/platform/x86/Kconfig             | 13 +++++++
 drivers/platform/x86/Makefile            |  1 +
 drivers/platform/x86/dell-s6000-s1220.c  | 64 ++++++++++++++++++++++++++++++++
 5 files changed, 108 insertions(+)
 create mode 100644 drivers/platform/x86/dell-s6000-s1220.c

diff --git a/arch/x86/include/asm/emergency-restart.h b/arch/x86/include/asm/emergency-restart.h
index cc70c1c..441a910 100644
--- a/arch/x86/include/asm/emergency-restart.h
+++ b/arch/x86/include/asm/emergency-restart.h
@@ -11,6 +11,7 @@ enum reboot_type {
 	BOOT_EFI = 'e',
 	BOOT_CF9 = 'p',
 	BOOT_CF9_COND = 'q',
+	BOOT_CF9_COLD = 'd',
 };
 
 extern enum reboot_type reboot_type;
diff --git a/arch/x86/kernel/reboot.c b/arch/x86/kernel/reboot.c
index 41b2f57..8c7b45b 100644
--- a/arch/x86/kernel/reboot.c
+++ b/arch/x86/kernel/reboot.c
@@ -96,6 +96,7 @@ static int __init reboot_setup(char *str)
 		case 'k':
 		case 't':
 		case 'e':
+		case 'd':
 		case 'p':
 			reboot_type = *str;
 			break;
@@ -379,6 +380,16 @@ static int __init set_pci_reboot(const struct dmi_system_id *d)
 	return 0;
 }
 
+static int __init set_pci_cold_reboot(const struct dmi_system_id *d)
+{
+	if (reboot_type != BOOT_CF9_COLD) {
+		reboot_type = BOOT_CF9_COLD;
+		printk(KERN_INFO "%s series board detected. "
+		       "Selecting PCI COLD reboot.\n", d->ident);
+	}
+	return 0;
+}
+
 static struct dmi_system_id __initdata pci_reboot_dmi_table[] = {
 	{	/* Handle problems with rebooting on Apple MacBook5 */
 		.callback = set_pci_reboot,
@@ -510,6 +521,14 @@ static struct dmi_system_id __initdata pci_reboot_dmi_table[] = {
 			DMI_MATCH(DMI_PRODUCT_NAME, "C6100"),
 		},
 	},
+	{	/* Handle problems with warm rebooting on the S6000. */
+		.callback = set_pci_cold_reboot,
+		.ident = "Dell S6000",
+		.matches = {
+			DMI_MATCH(DMI_SYS_VENDOR, "Dell Inc"),
+			DMI_MATCH(DMI_PRODUCT_NAME, "S6000"),
+		},
+	},
 	{ }
 };
 
@@ -667,6 +686,16 @@ static void native_machine_emergency_restart(void)
 			}
 			reboot_type = BOOT_KBD;
 			break;
+		case BOOT_CF9_COLD:
+			{
+				u8 cf9 = inb(0xcf9) & ~6;
+				outb(cf9|0x8, 0xcf9); /* Request cold reboot */
+				udelay(50);
+				outb(cf9|0xc, 0xcf9); /* Actually do the reset */
+				udelay(50);
+				reboot_type = BOOT_KBD;
+			}
+			break;
 		}
 	}
 }
diff --git a/drivers/platform/x86/Kconfig b/drivers/platform/x86/Kconfig
index 7f43cf8..5f82ba4 100644
--- a/drivers/platform/x86/Kconfig
+++ b/drivers/platform/x86/Kconfig
@@ -779,4 +779,17 @@ config SAMSUNG_Q10
 	  This driver provides support for backlight control on Samsung Q10
 	  and related laptops, including Dell Latitude X200.
 
+config DELL_S6000_S1220
+	tristate "DELL S6000_S1220 Platform Support"
+	depends on X86 && PCI
+	select I2C_ISCH
+	select I2C_ISMT
+	select GPIO_SCH
+	select MFD_CORE
+	select LPC_SCH
+	---help---
+	 Enable support for DELL S6000 switching platform.  This
+	 platform has a S1220 Atom (Centerton) CPU module, a Broadcom
+	 Trident2 switch ASIC and 32x40G QSFP ports.
+
 endif # X86_PLATFORM_DEVICES
diff --git a/drivers/platform/x86/Makefile b/drivers/platform/x86/Makefile
index 293a320..08ca7e9 100644
--- a/drivers/platform/x86/Makefile
+++ b/drivers/platform/x86/Makefile
@@ -45,3 +45,4 @@ obj-$(CONFIG_MXM_WMI)		+= mxm-wmi.o
 obj-$(CONFIG_INTEL_MID_POWER_BUTTON)	+= intel_mid_powerbtn.o
 obj-$(CONFIG_INTEL_OAKTRAIL)	+= intel_oaktrail.o
 obj-$(CONFIG_SAMSUNG_Q10)	+= samsung-q10.o
+obj-$(CONFIG_DELL_S6000_S1220)	+= dell-s6000-s1220.o
diff --git a/drivers/platform/x86/dell-s6000-s1220.c b/drivers/platform/x86/dell-s6000-s1220.c
new file mode 100644
index 0000000..3d7aac9
--- /dev/null
+++ b/drivers/platform/x86/dell-s6000-s1220.c
@@ -0,0 +1,64 @@
+/*
+ * dell-s6000.c - DELL S6000-S1220 Platform Support.
+ *
+ * Author: Curt Brune (curt@cumulusnetworks.com)
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ *  General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ *  02110-1301, USA.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/gpio.h>
+#include <linux/i2c.h>
+
+#define DRIVER_NAME	"dell_s6000_s1220"
+#define DRIVER_VERSION	"0.1"
+
+static struct gpio dell_s6000_i2c_mux_gpios[] = {
+	{1, GPIOF_OUT_INIT_LOW, "I2C_MUX_0" },
+	{2, GPIOF_OUT_INIT_LOW, "I2C_MUX_1" },
+};
+
+static int __init dell_s6000_init(void)
+{
+	int err = 0;
+
+	err = gpio_request_array(dell_s6000_i2c_mux_gpios,
+				 ARRAY_SIZE(dell_s6000_i2c_mux_gpios));
+	if (err) {
+		pr_err("gpio request array failed\n");
+		return err;
+	}
+	pr_info(DRIVER_NAME": version "DRIVER_VERSION" successfully loaded\n");
+	return 0;
+}
+
+static void __exit dell_s6000_cleanup(void)
+{
+	gpio_free_array(dell_s6000_i2c_mux_gpios, ARRAY_SIZE(
+				dell_s6000_i2c_mux_gpios));
+	pr_err("Driver unloaded\n");
+}
+
+module_init(dell_s6000_init);
+module_exit(dell_s6000_cleanup);
+
+MODULE_AUTHOR("Curt Brune (curt@cumulusnetworks.com)");
+MODULE_DESCRIPTION("DELL S6000-S1220 Platform Support");
+MODULE_VERSION(DRIVER_VERSION);
+MODULE_LICENSE("GPL");
-- 
2.1.4
