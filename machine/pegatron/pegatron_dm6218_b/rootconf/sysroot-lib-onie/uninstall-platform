# U-Boot specific uninstall routine

#  Copyright (C) 2014,2015 Curt Brune <curt@cumulusnetworks.com>
#  Copyright (C) 2016 david_yang <david_yang@accton.com>
#
#  SPDX-License-Identifier:     GPL-2.0

[ -r "$lib_dir/onie-uninstaller-common" ] || {
    echo "ERROR: Unable to find onie-uninstaller-common"
    exit 1
}
. $lib_dir/onie-uninstaller-common

check_sata_device()
{
    local tmp_sata_device="";
    local mountables_partitions=$(cat /proc/partitions | grep -v "^major" | grep -v ram | grep -v mtd | grep -v mmc | awk '{{print $4}}')
    for block_device_name in ${mountables_partitions}
    do
        block_device_link=$(find /sys/bus /sys/class /sys/block/ -name ${block_device_name})
        for first_block_device_link in ${block_device_link}
        do
            if [ -e ${first_block_device_link}/device ]; then
                is_sata=$(readlink ${first_block_device_link} | grep ata)
                if [ ! -z $is_sata ]; then
                    tmp_sata_device="${block_device_name}"
                    break
                fi
            fi
        done
        
        if [ ! -z $tmp_sata_device ] ; then
            break
        fi
    done
    
    if [ -n "$tmp_sata_device" ]; then
        echo -n "$tmp_sata_device"
    else
        echo -n ""
    fi
}

uninstall_emmc_partition()
{
    mmc_device="/dev/mmcblk0"
    mmc_device_partition_list=$(ls -r /dev/mmcblk0p*)
    mmc_partition_type=$(/usr/sbin/parted $mmc_device print | grep "Partition Table" | awk -F: '{print $2}' | sed 's/ //g')
    # Find ONIE partition
    mmc_onie_partition=$(blkid | grep ONIE-BOOT | awk -F: '{print $1}')
    diag_partition=$(blkid | grep PEGATRON-DIAG | awk -F: '{print $1}')

    # Delete all partition except ONIE and PEGATRON-DIAG
    for f in ${mmc_device_partition_list} ; do
        if [ "${f}" != "${mmc_onie_partition}" ] && [ "${f}" != "${diag_partition}" ] ; then
            part_num=$(echo "${f}" | sed -e 's/\/dev\/mmcblk0p//')
            if [ "${mmc_partition_type}" = "gpt" ]; then
                sgdisk -d ${part_num} -s ${mmc_device} > /dev/null 2>&1
            else
                parted -s $mmc_device rm $part_num > /dev/null 2>&1
            fi
        fi
    done
    partprobe
}

uninstall_sata_partition()
{
    sata_device_name=$(check_sata_device)
    if [ ! -z "${sata_device_name}" ] ; then
        sata_device="/dev/${sata_device_name}"
        sata_device_partition_list=$(ls -r ${sata_device}*)
        sata_partition_type=$(/usr/sbin/parted $sata_device print | grep "Partition Table" | awk -F: '{print $2}' | sed 's/ //g')
        for f in ${sata_device_partition_list} ; do
            part_num=$(echo "${f}" | sed -e "s|${sata_device}||")
            if [ ! -z "${part_num}" ] ; then
                if [ "${sata_partition_type}" = "gpt" ]; then
                    sgdisk -d ${part_num} -s ${sata_device} > /dev/null 2>&1
                else
                    parted -s $sata_device rm $part_num > /dev/null 2>&1
                fi
            fi
        done
        partprobe
    fi
}

uninstall_system()
{
    uninstall_emmc_partition
    uninstall_sata_partition
    
    # erase u-boot env NOR flash region
    # do this even during testing
    if [ -h /dev/mtd-uboot-env ] ; then
        printf "${log_pre}Erasing 'nos_bootcmd' in u-boot environment NOR flash region\n"
        fw_setenv -f nos_bootcmd echo > /dev/null 2>&1
    fi

    return 0
}

# Local Variables:
# mode: shell-script
# eval: (sh-set-shell "/bin/sh" t nil)
# End:
