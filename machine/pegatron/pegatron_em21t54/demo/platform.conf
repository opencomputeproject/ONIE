# Pegatron EM21T54 specific info

# over ride default behaviour
[ -r /etc/machine.conf ] && . /etc/machine.conf

mmc_device="${onie_mmc_device}"
mmc_device_partition="${onie_mmc_device}3"
demo_volume_label="ONIE-DEMO-OS"

create_demo_gpt_partition()
{
    blk_dev="$1"

    # See if demo partition already exists -- look for the filesystem
    # label.
    part_info="$(blkid | grep $demo_volume_label | awk -F: '{print $1}')"
    if [ -n "$part_info" ] ; then
        # delete existing partition
        demo_part="$(echo -n $part_info | sed -e s#${blk_dev}p##)"
        sgdisk -d ${demo_part} -s ${blk_dev} || {
            echo "Error: Unable to delete partition $demo_part on $blk_dev"
            exit 1
        }
        partprobe
    fi

    # Find next available partition
    last_part_info=$(sgdisk -p ${blk_dev} | tail -n 1)
    last_part_num=$(echo "${last_part_info}" | awk '{print $1}')
    last_part_end=$(echo "${last_part_info}" | awk '{print $3}')
    demo_part=$(( $last_part_num + 1 ))
    demo_part_start=$(( $last_part_end + 1 ))
    # sectors_per_mb = (1024 * 1024) / 512 = 2048
    sectors_per_mb=2048
    demo_part_end=$(( $demo_part_start + 128 * $sectors_per_mb ))
    demo_attr_bitmask="0x0"
    demo_blk_dev="${onie_mmc_device}${demo_part}"

    # Create new partition
    echo "Creating new demo partition ${blk_dev}p$demo_part ..."
    sgdisk --new=${demo_part}::${demo_part_end} \
        --attributes=${demo_part}:=:$demo_attr_bitmask \
        --change-name=${demo_part}:$demo_volume_label "$blk_dev" || {
        echo "Error: Unable to create partition $demo_part on $blk_dev"
        exit 1
    }
    partprobe

    mkfs.ext4 -F -L $demo_volume_label $demo_blk_dev || {
        echo "Error: Unable to create file system on $blk_dev"
        exit 1
    }

    blkid
}

create_demo_msdos_partition()
{
    blk_dev="$1"

    # See if demo partition already exists -- look for the filesystem
    # label.
    part_info="$(blkid | grep $demo_volume_label | awk -F: '{print $1}')"
    if [ -n "$part_info" ] ; then
        # delete existing partition
        demo_part="$(echo -n $part_info | sed -e s#${blk_dev}p##)"
        parted -s $blk_dev rm $demo_part || {
            echo "Error: Unable to delete partition $demo_part on $blk_dev"
            exit 1
        }
        partprobe
    fi

    # Find next available partition
    last_part_info="$(parted -s -m $blk_dev unit s print | tail -n 1)"
    last_part_num="$(echo -n $last_part_info | awk -F: '{print $1}')"
    last_part_end="$(echo -n $last_part_info | awk -F: '{print $3}')"
    # Remove trailing 's'
    last_part_end=${last_part_end%s}
    demo_part=$(( $last_part_num + 1 ))
    demo_part_start=$(( $last_part_end + 1 ))
    # sectors_per_mb = (1024 * 1024) / 512 = 2048
    sectors_per_mb=2048
    demo_part_end=$(( $demo_part_start + ( 128 * $sectors_per_mb ) - 1 ))
    demo_blk_dev="${onie_mmc_device}${demo_part}"

    # Create new partition
    echo "Creating new demo partition ${blk_dev}p$demo_part ..."
    parted -s --align optimal $blk_dev unit s \
      mkpart primary $demo_part_start $demo_part_end set $demo_part boot on || {
        echo "ERROR: Problems creating demo msdos partition $demo_part on: $blk_dev"
        exit 1
    }
    partprobe

    mkfs.ext4 -F -L $demo_volume_label $demo_blk_dev || {
        echo "Error: Unable to create file system on $blk_dev"
        exit 1
    }

    blkid
}

create_demo_part() {
    echo "INFO: Create Demo NOS Partition"

    local part_table_type=$(/usr/sbin/parted $mmc_device print | grep "Partition Table" | awk -F: '{print $2}' | sed 's/ //g')

    # Create ONIE Demo OS partition
    if [ "${part_table_type}" = "gpt" ] ; then
        create_demo_gpt_partition $mmc_device
    else
        create_demo_msdos_partition $mmc_device
    fi
}

install_uimage() {
    create_demo_part

    demo_part_info="$(blkid | grep ${demo_volume_label} | awk -F: '{print $1}')"

    # Copy demo-pegatron-dm2118.itb to demo partition.
    tmp_dir=$(mktemp -d)
    mount ${mmc_device_partition} ${tmp_dir} > /dev/null 2>&1
    cp -f demo-${platform}.itb ${tmp_dir}/demo-onie-os.itb
    sync ; sync
    umount ${tmp_dir}
}

hw_load() {
    echo "ext4load usb 0:3 \$loadaddr demo-onie-os.itb && run onie_args"
}
