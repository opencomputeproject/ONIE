Quanta Common P2020 CPU board Support

diff --git a/arch/powerpc/boot/dts/quanta_common_p2020.dts b/arch/powerpc/boot/dts/quanta_common_p2020.dts
new file mode 100644
index 0000000..28e5c8b
--- /dev/null
+++ b/arch/powerpc/boot/dts/quanta_common_p2020.dts
@@ -0,0 +1,177 @@
+/*
+ * Quanta Computer Common P2020 CPU board Device Tree Source
+ *
+ * Copyright 2014 Quanta Computer, Inc.
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+/include/ "p2020si.dtsi"
+
+/ {
+	model = "quanta,common_p2020";
+	compatible = "quanta,common_p2020";
+
+	aliases {
+		ethernet0 = &enet0;
+		ethernet1 = &enet1;
+		ethernet2 = &enet2;
+		serial0 = &serial0;
+		serial1 = &serial1;
+		pci0 = &pci0;
+		pci1 = &pci1;
+		pci2 = &pci2;
+	};
+
+	memory {
+		device_type = "memory";
+	};
+
+	bcm_dma {
+		compatible = "early-dma-alloc";
+		// 64MB DMA region, aligned to 1MB
+		region_size = <0x04000000>;
+		alignment   = <0x00100000>;
+	};
+
+	mass_storage {
+		device = "mmcblk0";
+	};
+
+	localbus@ffe05000 {
+		compatible = "fsl,elbc", "simple-bus";
+		ranges = <0x0 0x0 0x0 0xec000000 0x04000000
+		          0x1 0x0 0x0 0xe8000000 0x04000000>;
+
+		nor@0,0 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			compatible = "cfi-flash";
+			reg = <0x0 0x0 0x04000000>;
+			bank-width = <2>;
+			partition@0 {
+				/* Entire flash minus (u-boot + onie) */
+				reg = <0x00000000 0x03b60000>;
+				label = "open";
+			};
+			partition@1 {
+				/* 4MB onie */
+				reg = <0x03b60000 0x00400000>;
+				label = "onie";
+			};
+			partition@2 {
+				/* 128KB, 1 sector */
+				reg = <0x03f60000 0x00020000>;
+				label = "uboot-env";
+				env_size = <0x2000>;
+			};
+			partition@3 {
+				/* 512KB u-boot */
+				reg = <0x03f80000 0x00080000>;
+				label = "uboot";
+			};
+		};
+
+		nor@1,0 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			compatible = "cfi-flash";
+			reg = <0x1 0x0 0x04000000>;
+			bank-width = <2>;
+			partition@0 {
+				reg = <0x00000000 0x04000000>;
+				label = "open2";
+			};
+                };
+	};
+
+	soc@ffe00000 {
+		i2c@3000 {
+			#address-cells = <1>;
+			#size-cells = <0>;
+			rtc@68 {
+				compatible = "dallas,ds1339";
+				reg = <0x68>;
+			};
+		};
+
+		usb@22000 {
+			#address-cells = <1>;
+			#size-cells = <0>;
+			compatible = "fsl-usb2-dr";
+			reg = <0x22000 0x1000>;
+			interrupt-parent = <&mpic>;
+			interrupts = <28 0x2>;
+			phy_type = "ulpi";
+		};
+
+		serial1: serial@4600 {
+			status = "disabled";
+		};
+
+		mdio@24520 {
+			phy0: ethernet-phy@5 {
+				reg = <0x5>;
+			};
+		};
+
+		mdio@25520 {
+			tbi0: tbi-phy@11 {
+				reg = <0x11>;
+				device_type = "tbi-phy";
+			};
+		};
+
+		enet0: ethernet@24000 {
+			status = "disabled";
+		};
+
+		enet1: ethernet@25000 {
+			tbi-handle = <&tbi0>;
+			phy-handle = <&phy0>;
+			phy-connection-type = "sgmii";
+		};
+
+		enet2: ethernet@26000 {
+			status = "disabled";
+		};
+	};
+
+	pci0: pcie@ffe08000 {
+                status = "disabled";
+	};
+
+	pci1: pcie@ffe09000 {
+		status = "disabled";
+	};
+
+	pci2: pcie@ffe0a000 {
+		ranges = <0x2000000 0x0 0xc0000000 0 0xc0000000 0x0 0x20000000
+			  0x1000000 0x0 0x00000000 0 0xffc20000 0x0 0x10000>;
+		interrupt-map-mask = <0xf800 0x0 0x0 0x7>;
+		interrupt-map = <
+			/* IDSEL 0x0 */
+			0000 0x0 0x0 0x1 &mpic 0x0 0x1
+			0000 0x0 0x0 0x2 &mpic 0x1 0x1
+			0000 0x0 0x0 0x3 &mpic 0x2 0x1
+			0000 0x0 0x0 0x4 &mpic 0x3 0x1
+			>;
+
+		pcie@0 {
+			reg = <0x0 0x0 0x0 0x0 0x0>;
+			#size-cells = <2>;
+			#address-cells = <3>;
+			device_type = "pci";
+			ranges = <0x2000000 0x0 0xc0000000
+				  0x2000000 0x0 0xc0000000
+				  0x0 0x20000000
+
+				  0x1000000 0x0 0x0
+				  0x1000000 0x0 0x0
+				  0x0 0x10000>;
+		};
+	};
+};
diff --git a/arch/powerpc/platforms/85xx/Kconfig b/arch/powerpc/platforms/85xx/Kconfig
index d7946be..01ee674 100644
--- a/arch/powerpc/platforms/85xx/Kconfig
+++ b/arch/powerpc/platforms/85xx/Kconfig
@@ -222,6 +222,12 @@ config P4080_DS
 	help
 	  This option enables support for the P4080 DS board
 
+config QUANTA_COMMON_P2020
+	bool "Quanta Computer Common P2020"
+	select DEFAULT_UIMAGE
+	help
+          Enable support for the Quanta Computer Common P2020 CPU board networking platform
+
 endif # PPC32
 
 config P5020_DS
diff --git a/arch/powerpc/platforms/85xx/Makefile b/arch/powerpc/platforms/85xx/Makefile
index bc5acb9..72401c4 100644
--- a/arch/powerpc/platforms/85xx/Makefile
+++ b/arch/powerpc/platforms/85xx/Makefile
@@ -25,3 +25,4 @@ obj-$(CONFIG_SBC8548)     += sbc8548.o
 obj-$(CONFIG_SOCRATES)    += socrates.o socrates_fpga_pic.o
 obj-$(CONFIG_KSI8560)	  += ksi8560.o
 obj-$(CONFIG_XES_MPC85xx) += xes_mpc85xx.o
+obj-$(CONFIG_QUANTA_COMMON_P2020)  += quanta_common_p2020.o
diff --git a/arch/powerpc/platforms/85xx/quanta_common_p2020.c b/arch/powerpc/platforms/85xx/quanta_common_p2020.c
new file mode 100644
index 0000000..75c893f
--- /dev/null
+++ b/arch/powerpc/platforms/85xx/quanta_common_p2020.c
@@ -0,0 +1,203 @@
+/*
+ * Copyright 2014 Quanta Computer, Inc.
+ *
+ * Common P2020 CPU board setup and early boot code.
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+#include <linux/stddef.h>
+#include <linux/kernel.h>
+#include <linux/pci.h>
+#include <linux/kdev_t.h>
+#include <linux/delay.h>
+#include <linux/seq_file.h>
+#include <linux/interrupt.h>
+#include <linux/of_platform.h>
+#include <linux/i2c.h>
+#include <linux/of_i2c.h>
+
+#include <asm/system.h>
+#include <asm/time.h>
+#include <asm/machdep.h>
+#include <asm/pci-bridge.h>
+#include <mm/mmu_decl.h>
+#include <asm/prom.h>
+#include <asm/udbg.h>
+#include <asm/mpic.h>
+
+#include <sysdev/fsl_soc.h>
+#include <sysdev/fsl_pci.h>
+
+#undef DEBUG
+
+#ifdef DEBUG
+#define DBG(fmt, args...) printk(KERN_ERR "%s: " fmt, __func__, ## args)
+#else
+#define DBG(fmt, args...)
+#endif
+
+/*******************************************************************************
+ *
+ * Platform initialization functions
+ *
+ *******************************************************************************
+*/
+
+/*
+ * Initialize the interrupt controller
+ */
+static void __init quanta_common_p2020_pic_init(void)
+{
+	struct mpic *mpic;
+	struct resource r;
+	struct device_node *np;
+
+	np = of_find_node_by_type(NULL, "open-pic");
+	if (np == NULL) {
+		printk(KERN_ERR "Could not find open-pic node\n");
+		return;
+	}
+
+	if (of_address_to_resource(np, 0, &r)) {
+		printk(KERN_ERR "Failed to map mpic register space\n");
+		of_node_put(np);
+		return;
+	}
+
+	mpic = mpic_alloc(np, r.start,
+		  MPIC_PRIMARY | MPIC_WANTS_RESET |
+		  MPIC_BIG_ENDIAN | MPIC_BROKEN_FRR_NIRQS |
+		  MPIC_SINGLE_DEST_CPU,
+		  0, 256, " OpenPIC  ");
+
+	BUG_ON(mpic == NULL);
+	of_node_put(np);
+
+	mpic_init(mpic);
+}
+
+/*
+ * Setup the architecture
+ */
+#ifdef CONFIG_SMP
+extern void __init mpc85xx_smp_init(void);
+#endif
+
+static void __init quanta_common_p2020_setup_arch(void)
+{
+	struct device_node *cpu;
+	const unsigned int *fp;
+#ifdef CONFIG_PCI
+	struct device_node *np;
+#endif
+
+	if (ppc_md.progress)
+		ppc_md.progress("quanta_common_p2020_setup_arch()", 0);
+
+        cpu = of_find_node_by_type(NULL, "cpu");
+        if (cpu != 0) {
+	     fp = of_get_property(cpu, "clock-frequency", NULL);
+	     if (fp != 0)
+		  loops_per_jiffy = *fp / HZ;
+	     else
+		  loops_per_jiffy = 500000000 / HZ;
+	     of_node_put(cpu);
+        }
+
+#ifdef CONFIG_PCI
+	for_each_node_by_type(np, "pci") {
+		if (of_device_is_compatible(np, "fsl,mpc8548-pcie"))
+			fsl_add_bridge(np, 0);
+	}
+#endif
+
+#ifdef CONFIG_SMP
+	mpc85xx_smp_init();
+#endif
+
+	printk(KERN_INFO "Quanta Common P2020 CPU board from Quanta Computer, Inc.\n");
+}
+
+
+
+static struct of_device_id __initdata quanta_common_p2020_ids[] = {
+	{ .type = "soc", },
+	{ .compatible = "soc", },
+	{ .compatible = "simple-bus", },
+	{ .compatible = "gianfar", },
+	{},
+};
+
+
+
+static int __init quanta_common_p2020_publish_devices(void)
+{
+	return of_platform_bus_probe(NULL, quanta_common_p2020_ids, NULL);
+}
+machine_device_initcall(quanta_common_p2020, quanta_common_p2020_publish_devices);
+
+
+
+static void quanta_common_p2020_show_cpuinfo(struct seq_file *m)
+{
+	uint pvid, svid, phid1;
+	uint memsize = total_memory;
+
+	pvid = mfspr(SPRN_PVR);
+	svid = mfspr(SPRN_SVR);
+
+	seq_printf(m, "Vendor\t\t: Freescale Semiconductor\n");
+	seq_printf(m, "PVR\t\t: 0x%x\n", pvid);
+	seq_printf(m, "SVR\t\t: 0x%x\n", svid);
+
+	/* Display cpu PLL setting */
+	phid1 = mfspr(SPRN_HID1);
+	seq_printf(m, "PLL setting\t: 0x%x\n", ((phid1 >> 24) & 0x3f));
+
+	/* Display the amount of memory */
+	seq_printf(m, "Memory\t\t: %d MB\n", memsize / (1024 * 1024));
+}
+
+
+/*
+ * Called very early, device-tree isn't unflattened
+ */
+static int __init quanta_common_p2020_probe(void)
+{
+	unsigned long root = of_get_flat_dt_root();
+	const char *compat_prefix = "quanta,";
+	const char *compat_suffix = "_p2020";
+	char *compat = of_get_flat_dt_prop(root, "compatible", NULL);
+	char *temp = compat + strlen(compat) - strlen(compat_suffix);
+
+	if(memcmp(compat, compat_prefix, strlen(compat_prefix)) == 0
+			&& memcmp(temp, compat_suffix, strlen(compat_suffix)) == 0) {
+		printk(KERN_INFO "%s: %s matches\n", __FUNCTION__, compat);
+		return 1;
+	}
+
+	if (of_flat_dt_is_compatible(root, "quanta,common_p2020"))
+		return 1;
+
+	return 0;
+}
+
+define_machine(quanta_common_p2020) {
+	.name		= "Quanta Computer, Inc. Common P2020 CPU board",
+	.probe		= quanta_common_p2020_probe,
+	.setup_arch	= quanta_common_p2020_setup_arch,
+	.init_IRQ	= quanta_common_p2020_pic_init,
+	.show_cpuinfo	= quanta_common_p2020_show_cpuinfo,
+#ifdef CONFIG_PCI
+	.pcibios_fixup_bus	= fsl_pcibios_fixup_bus,
+#endif
+	.get_irq	= mpic_get_irq,
+	.power_save	= e500_idle,
+	.restart	= fsl_rstcr_restart,
+	.calibrate_decr = generic_calibrate_decr,
+	.progress	= udbg_progress,
+};
