diff --git a/miscutils/sys_eeprom_i2c.c b/miscutils/sys_eeprom_i2c.c
index ed3235b..4ef918a 100644
--- a/miscutils/sys_eeprom_i2c.c
+++ b/miscutils/sys_eeprom_i2c.c
@@ -2,6 +2,7 @@
 #include "onie_tlvinfo.h"
 #include "sys_eeprom.h"
 #include "24cXX.h"
+#include <linux/i2c-dev.h>
 
 #if SYS_EEPROM_I2C_MEM_ADDR_BITS == 8
     #define EEPROM_TYPE EEPROM_TYPE_8BIT_ADDR
@@ -16,24 +17,48 @@
  */
 int read_sys_eeprom(void *eeprom_data, int offset, int len)
 {
-    int ret = 0;
+    //mcp2221 read cmd, two bytes header. Always write two bytes first before reaad().
+    unsigned char start[2] =  {0x00, 0x00}; 
+    int status;
+    unsigned char rbuf[SYS_EEPROM_SIZE];
+
     struct eeprom e;
-    int i = 0;
     u_int8_t *c;
     int addr = SYS_EEPROM_OFFSET + offset;
-
     c = eeprom_data;
-    if (eeprom_open(SYS_EEPROM_I2C_DEVICE, SYS_EEPROM_I2C_ADDR,
-		    EEPROM_TYPE, &e)) {
-	printf("ERROR: Cannot open I2C device\n");
-	return -1;
+    int fd = open(SYS_EEPROM_I2C_DEVICE, O_RDWR);
+    if (fd < 0) {
+        printf("ERROR: open(%d) failed\n", fd);
+        return -1;
+    }
+    //printf("\nSUCCESS: open(%d) passed\n", fd);
+
+    // SETTING EEPROM ADDR
+    status = ioctl(fd, I2C_SLAVE, SYS_EEPROM_I2C_ADDR);
+    if (status < 0)
+    {
+        printf("ERROR: ioctl(fd, I2C_SLAVE, 0x%02X) failed\n", SYS_EEPROM_I2C_ADDR);
+        close(fd);
+        return -1;
+    }
+
+    //printf("\nSUCCESS: ioctl(fd, I2C_SLAVE=%d, 0x%02X) passed\n", I2C_SLAVE, SYS_EEPROM_I2C_ADDR);
+    //printf ("Performing EEPROM Read operation\n\n");
+
+    if(write(fd,start,2)!=2){
+        printf("ERROR: buffer pointer initialization of read() step 2+ failed\n");
+        close(fd);
+        return -1;
     }
-    for (i = 0; i < len; i++) {
-	*c = eeprom_read_byte(&e, addr);
-	c++; addr++;
+    if(read(fd,rbuf,(len+addr))!=(len+addr))
+    {
+        printf("EEPROM read error, return -1. \n");
+        close(fd);
+        return -1;
     }
-    eeprom_close(&e);
-    return ret;
+    memcpy(c,rbuf+addr,len);
+    close(fd);
+    return 0;
 }
 
 /*
@@ -41,23 +66,37 @@ int read_sys_eeprom(void *eeprom_data, int offset, int len)
  */
 int write_sys_eeprom(void *eeprom_data, int len)
 {
-    int ret = 0;
+    //mcp2221 write cmd, two bytes header. Always two bytes ahead datas. 
+    //Second byte also can decide write start addrress. Here is 0x00, no address shift with EEPROM.
+    unsigned char tmp[SYS_EEPROM_SIZE+2] = {0x00, 0x00};
+
     struct eeprom e;
-    int i = 0;
     u_int8_t *c;
-    u_int16_t  addr = SYS_EEPROM_OFFSET;
-
     c = eeprom_data;
-    for (i = 0; i < len; i++) {
-	if (eeprom_open(SYS_EEPROM_I2C_DEVICE, SYS_EEPROM_I2C_ADDR,
-			EEPROM_TYPE, &e)) {
-	    printf("ERROR: Cannot open I2C device\n");
-	    return -1;
-	}
-	eeprom_write_byte(&e, addr, *c);
-	eeprom_close(&e);
-	c++; addr++;
+    int fd = open(SYS_EEPROM_I2C_DEVICE, O_RDWR);
+    if (fd < 0) {
+        printf("ERROR: open(%d) failed\n", fd);
+        return -1;
     }
+    //printf("\nSUCCESS: open(%d) passed\n", fd);
 
-    return ret;
+    int status;
+    // SETTING EEPROM ADDR
+    status = ioctl(fd, I2C_SLAVE, SYS_EEPROM_I2C_ADDR);
+    if (status < 0)
+    {
+        printf("ERROR: ioctl(fd, I2C_SLAVE, 0x%02X) failed\n", SYS_EEPROM_I2C_ADDR);
+        close(fd);
+        return -1;
+    }
+
+    memcpy(tmp+2, c, len);
+    if(write(fd,tmp, len+2) != (len+2))
+    {
+        printf("EEPROM write error, return -1. \n");
+        close(fd);
+        return -1;
+    }
+    close(fd);
+    return 0;
 }
