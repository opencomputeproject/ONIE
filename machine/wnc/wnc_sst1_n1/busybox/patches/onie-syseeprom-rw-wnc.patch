diff --git a/miscutils/sys_eeprom_i2c.c b/miscutils/sys_eeprom_i2c.c
index 4ef918a..0eb73dc 100644
--- a/miscutils/sys_eeprom_i2c.c
+++ b/miscutils/sys_eeprom_i2c.c
@@ -17,10 +17,11 @@
  */
 int read_sys_eeprom(void *eeprom_data, int offset, int len)
 {
-    //mcp2221 read cmd, two bytes header. Always write two bytes first before reaad().
-    unsigned char start[2] =  {0x00, 0x00}; 
+    //mcp2221 read cmd, two bytes header. Always write two bytes first before reaad() to decide what address to start read.
+    unsigned char start_addr[2] =  {0x00, 0x00}; // value format:{high byte, low byte}
     int status;
-    unsigned char rbuf[SYS_EEPROM_SIZE];
+    unsigned char buf[16] = {0};
+    int i;
 
     struct eeprom e;
     u_int8_t *c;
@@ -31,7 +32,6 @@ int read_sys_eeprom(void *eeprom_data, int offset, int len)
         printf("ERROR: open(%d) failed\n", fd);
         return -1;
     }
-    //printf("\nSUCCESS: open(%d) passed\n", fd);
 
     // SETTING EEPROM ADDR
     status = ioctl(fd, I2C_SLAVE, SYS_EEPROM_I2C_ADDR);
@@ -42,21 +42,24 @@ int read_sys_eeprom(void *eeprom_data, int offset, int len)
         return -1;
     }
 
-    //printf("\nSUCCESS: ioctl(fd, I2C_SLAVE=%d, 0x%02X) passed\n", I2C_SLAVE, SYS_EEPROM_I2C_ADDR);
-    //printf ("Performing EEPROM Read operation\n\n");
-
-    if(write(fd,start,2)!=2){
-        printf("ERROR: buffer pointer initialization of read() step 2+ failed\n");
-        close(fd);
-        return -1;
-    }
-    if(read(fd,rbuf,(len+addr))!=(len+addr))
+    for(i=0; i<len; i+=16)
     {
-        printf("EEPROM read error, return -1. \n");
-        close(fd);
-        return -1;
+        int read_num = (len-i)>15?16:(len-i);
+        start_addr[0] = (u_int8_t)((i+addr)/256);
+        start_addr[1] = i+addr;
+
+        if(write(fd,start_addr,2)!=2){
+            printf("ERROR: buffer pointer initialization of read() step 2+ failed\n");
+            close(fd);
+            return -1;
+        }
+        if (read(fd,buf,read_num) != read_num) {
+            printf("ERROR: read() failed\n");
+            close(fd);
+            return -1;
+        }
+        memcpy(c+i,buf,read_num);
     }
-    memcpy(c,rbuf+addr,len);
     close(fd);
     return 0;
 }
@@ -66,19 +69,20 @@ int read_sys_eeprom(void *eeprom_data, int offset, int len)
  */
 int write_sys_eeprom(void *eeprom_data, int len)
 {
-    //mcp2221 write cmd, two bytes header. Always two bytes ahead datas. 
-    //Second byte also can decide write start addrress. Here is 0x00, no address shift with EEPROM.
-    unsigned char tmp[SYS_EEPROM_SIZE+2] = {0x00, 0x00};
+    //mcp2221 write cmd, two bytes for header.
+    //First two byte decide write start addrress with EEPROM. Here is 0x0000, no address shift by default.
+    unsigned char tmp[18] = {0};
+    unsigned int i;
 
     struct eeprom e;
     u_int8_t *c;
     c = eeprom_data;
+
     int fd = open(SYS_EEPROM_I2C_DEVICE, O_RDWR);
     if (fd < 0) {
         printf("ERROR: open(%d) failed\n", fd);
         return -1;
     }
-    //printf("\nSUCCESS: open(%d) passed\n", fd);
 
     int status;
     // SETTING EEPROM ADDR
@@ -90,13 +94,40 @@ int write_sys_eeprom(void *eeprom_data, int len)
         return -1;
     }
 
-    memcpy(tmp+2, c, len);
-    if(write(fd,tmp, len+2) != (len+2))
+    //write 16 bytes everytime. first 2 bytes are write addresses.
+    for(i = 0; i < len; i+=16)
     {
-        printf("EEPROM write error, return -1. \n");
-        close(fd);
-        return -1;
+        int write_num = (len-i)>15?16:(len-i);
+        tmp[0] = (u_int8_t)(i/256);
+        tmp[1] = i;
+        memcpy(tmp+2, c+i, write_num);
+
+        if(write(fd,tmp,18)!=18){
+            printf("ERROR: buffer pointer initialization of read() step 2+ failed\n");
+            close(fd);
+            return -1;
+        }
+    }
+
+    /*
+    // for get and dump values if needed.
+    unsigned char buf[1] = {0};
+    for(i = 0; i<11; i++)
+    {
+        tmp[0] = (u_int8_t)(i/256);
+        tmp[1] = i & 0x00ff;
+
+        if(write(fd,tmp,2)!=2){
+        printf("ERROR: buffer pointer initialization of read() step 2+ failed\n");
+        }
+
+        if (read(fd,buf,1) != 1) {
+        printf("ERROR: read() failed\n");
+        }
+        printf("%d=0x%02X(%d) \r\n", i, buf[0],buf[0]);
     }
+    */
+    
     close(fd);
     return 0;
 }
