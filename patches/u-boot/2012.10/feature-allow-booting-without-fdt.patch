allow to boot without FDT

diff --git a/common/image.c b/common/image.c
index f084d2b..d3ea426 100644
--- a/common/image.c
+++ b/common/image.c
@@ -1402,10 +1402,14 @@ int boot_get_fdt(int flag, int argc, char * const argv[],
 	const void	*data;
 	size_t		size;
 #endif
+	const char	*select = NULL;
+	int		ok_no_fdt = 0;
 
 	*of_flat_tree = NULL;
 	*of_size = 0;
 
+	if (argc > 3)
+		select = argv[3];
 	if (argc > 3 || genimg_has_config(images)) {
 #if defined(CONFIG_FIT)
 		if (argc > 3) {
@@ -1491,7 +1495,7 @@ int boot_get_fdt(int flag, int argc, char * const argv[],
 					fdt_addr);
 			fdt_hdr = image_get_fdt(fdt_addr);
 			if (!fdt_hdr)
-				goto error;
+				goto no_fdt;
 
 			/*
 			 * move image data to the load address,
@@ -1651,7 +1655,7 @@ int boot_get_fdt(int flag, int argc, char * const argv[],
 		default:
 			puts("ERROR: Did not find a cmdline Flattened Device "
 				"Tree\n");
-			goto error;
+			goto no_fdt;
 		}
 
 		printf("   Booting using the fdt blob at 0x%p\n", fdt_blob);
@@ -1678,8 +1682,8 @@ int boot_get_fdt(int flag, int argc, char * const argv[],
 			printf("   Booting using the fdt at 0x%p\n", fdt_blob);
 
 			if (fdt_check_header(fdt_blob) != 0) {
-				fdt_error("image is not a fdt");
-				goto error;
+				printf("   Image is not a fdt\n");
+				goto no_fdt;
 			}
 
 			if (fdt_totalsize(fdt_blob) != fdt_len) {
@@ -1688,11 +1692,11 @@ int boot_get_fdt(int flag, int argc, char * const argv[],
 			}
 		} else {
 			debug("## No Flattened Device Tree\n");
-			return 0;
+			goto no_fdt;
 		}
 	} else {
 		debug("## No Flattened Device Tree\n");
-		return 0;
+		goto no_fdt;
 	}
 
 	*of_flat_tree = fdt_blob;
@@ -1702,9 +1706,15 @@ int boot_get_fdt(int flag, int argc, char * const argv[],
 
 	return 0;
 
+no_fdt:
+	ok_no_fdt = 1;
 error:
 	*of_flat_tree = 0;
 	*of_size = 0;
+	if (!select && ok_no_fdt) {
+		printf("   Continuing to boot without FDT\n");
+		return 0;
+	}
 	return 1;
 }
 #endif /* CONFIG_OF_LIBFDT */
