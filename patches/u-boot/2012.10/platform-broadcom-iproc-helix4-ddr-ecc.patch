Add changes from Broadcom LDK 3.5.5-RC1 with modified DDR initialization functions that support ECC (required for AS4610-54P)

diff --git a/Makefile b/Makefile
old mode 100644
new mode 100755
index be2589f..4017993
--- a/Makefile
+++ b/Makefile
@@ -199,7 +199,11 @@ ifndef LDSCRIPT
 		LDSCRIPT := $(TOPDIR)/$(CPUDIR)/u-boot.lds
 	endif
 	ifeq ($(wildcard $(LDSCRIPT)),)
-		LDSCRIPT := $(TOPDIR)/arch/$(ARCH)/cpu/u-boot.lds
+		ifdef CONFIG_SYS_BIG_ENDIAN
+			LDSCRIPT := $(TOPDIR)/arch/$(ARCH)/cpu/u-boot-be.lds
+		else
+			LDSCRIPT := $(TOPDIR)/arch/$(ARCH)/cpu/u-boot.lds
+		endif	
 		# We don't expect a Makefile here
 		LDSCRIPT_MAKEFILE_DIR =
 	endif
@@ -208,6 +212,7 @@ $(error could not find linker script)
 	endif
 endif
 
+
 #########################################################################
 # U-Boot objects....order is important (i.e. start must be first)
 
@@ -311,6 +316,7 @@ LIBS-y += lib/libfdt/libfdt.o
 LIBS-y += api/libapi.o
 LIBS-y += post/libpost.o
 LIBS-y += test/libtest.o
+LIBS-y += drivers/d1w/libds1wm.o
 
 ifneq ($(CONFIG_AM33XX)$(CONFIG_OMAP34XX)$(CONFIG_OMAP44XX)$(CONFIG_OMAP54XX),)
 LIBS-y += $(CPUDIR)/omap-common/libomap-common.o
@@ -338,6 +344,24 @@ LIBS-y += $(CPUDIR)/iproc/mde/libmde.o
 endif
 endif
 
+ifeq ($(SOC), $(findstring $(SOC), northstar cygnus))
+LIBS-y += $(CPUDIR)/iproc/libiproc.o
+ifeq ($(SOC), cygnus)
+LIBS-y += $(CPUDIR)/iproc7/libiproc7.o
+LIBS-y += $(CPUDIR)/iproc7/ui/libiproc7-ui.o
+LIBS-y += $(CPUDIR)/iproc7/security/libiproc7-security.o
+LIBS-y += $(CPUDIR)/iproc/shmoo_and28/libshmoo_and28.o
+ifdef CONFIG_CYGNUS_BOARD_DIAGS
+LIBS-y += halapis/libhalapis.o
+LIBS-y += halapis/libdmu.a
+endif
+endif
+ifdef CONFIG_RUN_DDR_SHMOO
+LIBS-y += $(CPUDIR)/iproc/shmoo/libshmoo.o
+LIBS-y += $(CPUDIR)/iproc/mde/libmde.o
+endif
+endif
+
 ifeq ($(SOC),helix4)
 LIBS-y += $(CPUDIR)/iproc/libiproc.o
 LIBS-y += $(CPUDIR)/iproc/shmoo2/libshmoo2.o
@@ -358,6 +382,20 @@ LIBS-y += $(CPUDIR)/iproc/libiproc.o
 LIBS-y += $(CPUDIR)/iproc/shmoo2/libshmoo2.o
 endif
 
+ifeq ($(SOC),greyhound)
+LIBS-y += $(CPUDIR)/iproc/libiproc.o
+ifndef CONFIG_IPROC_NO_DDR
+LIBS-y += $(CPUDIR)/iproc/shmoo_and28/libshmoo_and28.o
+endif
+endif
+
+ifeq ($(SOC),saber2)
+LIBS-y += $(CPUDIR)/iproc/libiproc.o
+ifndef CONFIG_IPROC_NO_DDR
+LIBS-y += $(CPUDIR)/iproc/shmoo_and28/libshmoo_and28.o
+endif
+endif
+
 #
 # MDK library
 #
@@ -440,7 +478,7 @@ ALL-y += $(obj)u-boot-iproc.bin
 endif
 endif
 
-all:		$(ALL-y) $(SUBDIR_EXAMPLES)
+all:		$(ALL-y) 
 
 $(obj)u-boot.dtb:	$(obj)u-boot
 		$(MAKE) -C dts binary
@@ -589,6 +627,9 @@ endif
 
 $(obj)u-boot:	depend \
 		$(SUBDIR_TOOLS) $(OBJS) $(LIBBOARD) $(LIBS) $(LDSCRIPT) $(obj)u-boot.lds
+ifdef CONFIG_CYGNUS_BOARD_DIAGS
+		cp $(TOPDIR)/halapis/dmu/libdmu.a $(obj)halapis/libdmu.a
+endif
 		$(GEN_UBOOT)
 ifeq ($(CONFIG_KALLSYMS),y)
 		smap=`$(call SYSTEM_MAP,$(obj)u-boot) | \
diff --git a/arch/arm/cpu/armv7/helix4/lowlevel_init.S b/arch/arm/cpu/armv7/helix4/lowlevel_init.S
index b5cf2b7..7669a1c 100644
--- a/arch/arm/cpu/armv7/helix4/lowlevel_init.S
+++ b/arch/arm/cpu/armv7/helix4/lowlevel_init.S
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  */
 #include "asm/arch/socregs.h" 
 #include "config.h"
@@ -1277,7 +1265,7 @@ poll_ddr_ctrl:
     MCR	p15,0,r1,c5,c0,0   /* DFSR */
     MCR	p15,0,r1,c5,c0,1   /* IFSR */
     MCR	p15,0,r1,c6,c0,0   /* DFAR */
-    MCR	p15,0,r1,c6,c0,1   /* WFAR */
+    MCR	p15,0,r1,c6,c0,2   /* IFAR */
 	
 	@ Disable MMU
 	MRC p15, 0, r1, c1, c0, 0 @ Read Control Register configuration data
@@ -1340,6 +1328,7 @@ set_loop:
 	MCR p15, 0, r1, c8, c7, 0	
 
 
+#if 0 /* Bump up the CPU clock */
 set_cru_policy7:
 	ldr	r0,=IHOST_PROC_CLK_WR_ACCESS
 	ldr	r1,=0xa5a501
@@ -1394,13 +1383,29 @@ poll_ccu:
 	cmp	r1,r3
 	bne	poll_ccu
 poll_ccu_done:
+#endif /* bump up the CPU clock */
 
+#if 1
 /* Setup CCA UART clock divider to 2*/
         LDR     r1, =ChipcommonA_ClkDiv
         LDR     r2, [r1]
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
         AND     r2, r2, #0xFFFFFF00
         ORR     r2, r2, #0x2 
+#else
+        AND     r2, r2, #0x00FFFFFF
+        ORR     r2, r2, #0x02000000 
+#endif
+        STR     r2, [r1]
+#else 
+/* Setup CCA UART clock to APB clock  */       
+        LDR     r1, =ChipcommonA_CoreCtrl
+        LDR     r2, [r1]
+        AND     r2, r2, #0xFFFFFFF7 /* Disable UART clock */        
+        STR     r2, [r1]        
+        ORR     r2, r2, #0x9 /* Enable and set it to APB clock(bit 0) */ 
         STR     r2, [r1]
+#endif
 
 
 coreo_init_done:
diff --git a/arch/arm/cpu/armv7/iproc/Makefile b/arch/arm/cpu/armv7/iproc/Makefile
old mode 100644
new mode 100755
index 12407ac..dd02f68
--- a/arch/arm/cpu/armv7/iproc/Makefile
+++ b/arch/arm/cpu/armv7/iproc/Makefile
@@ -21,16 +21,35 @@ include $(TOPDIR)/config.mk
 
 LIB	= $(obj)libiproc.o
 SOBJS	+= cache.o
-COBJS	+= timer.o reset.o gic.o l2cache.o benchscreen.o genpll.o pwrctl.o armpll.o
+COBJS	+= shmoo_sig.o timer.o reset.o gic.o l2cache.o benchscreen.o genpll.o pwrctl.o armpll.o 
+
+ifdef CONFIG_CYGNUS
+COBJS += shmoo_and28_reuse.o
+ifndef CONFIG_CYGNUS_EMULATION
+COBJS += ddr_init.o
+endif
+endif
+
+ifndef CONFIG_CYGNUS
+
 ifdef CONFIG_SPL_BUILD
 COBJS   += iproc-spl.o
 endif
-ifndef CONFIG_HURRICANE2_ROMCODE
-COBJS	+= ddr_init.o
+
+ifndef CONFIG_IPROC_NO_DDR
+ifdef CONFIG_SHMOO_AND28_REUSE
+COBJS += shmoo_and28_reuse.o
 endif
-ifndef CONFIG_HURRICANE2_ROMCODE
+COBJS += ddr_init.o
+endif
+
+endif #end of CONFIG_CYGNUS
+
+ifeq (${CONFIG_IPROC_NAND},y)
 COBJS	+= iproc_nand.o
 endif
+
+
 SRCS	:= $(START:.o=.S) $(SOBJS:.o=.S) $(COBJS:.o=.c)
 
 OBJS	:= $(addprefix $(obj),$(COBJS) $(SOBJS))
diff --git a/arch/arm/cpu/armv7/iproc/NS_SVK_DDR2_auto_calib.txt b/arch/arm/cpu/armv7/iproc/NS_SVK_DDR2_auto_calib.txt
index 8b49580..aa95e0b 100644
--- a/arch/arm/cpu/armv7/iproc/NS_SVK_DDR2_auto_calib.txt
+++ b/arch/arm/cpu/armv7/iproc/NS_SVK_DDR2_auto_calib.txt
@@ -169,4 +169,4 @@ Out:   serial
 Err:   serial
 Net:   Board Net Initialization Failed
 No ethernet found.
-u-boot> 
+u-boot> 
\ No newline at end of file
diff --git a/arch/arm/cpu/armv7/iproc/NS_SVK_DDR3_auto_calib.txt b/arch/arm/cpu/armv7/iproc/NS_SVK_DDR3_auto_calib.txt
index 0b2fda7..f69c380 100644
--- a/arch/arm/cpu/armv7/iproc/NS_SVK_DDR3_auto_calib.txt
+++ b/arch/arm/cpu/armv7/iproc/NS_SVK_DDR3_auto_calib.txt
@@ -221,4 +221,4 @@ u-boot> md 0x80000000
 800000d0: 40620104 80688040 80914041 40c74404    ..b@@.h.A@...D.@
 800000e0: 002004c6 00050818 0502050c 50d3000e    .. ............P
 800000f0: 00000042 85880180 01400094 00020203    B.........@.....
-u-boot> 
+u-boot> 
\ No newline at end of file
diff --git a/arch/arm/cpu/armv7/iproc/armpll.c b/arch/arm/cpu/armv7/iproc/armpll.c
old mode 100644
new mode 100755
index 78d0b52..bd7004a
--- a/arch/arm/cpu/armv7/iproc/armpll.c
+++ b/arch/arm/cpu/armv7/iproc/armpll.c
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved. 
- *  
- * Permission to use, copy, modify, and/or distribute this software for any 
- * purpose with or without fee is hereby granted, provided that the above 
- * copyright notice and this permission notice appear in all copies. 
- *  
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY 
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION 
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
+ * $Copyright Open Broadcom Corporation$ 
  */
 #include <config.h>
 #include <common.h>
@@ -19,10 +7,11 @@
 #include "asm/arch/socregs.h"
 #include "asm/iproc/reg_utils.h"
 
+#define mb() __asm__ __volatile__ ("" : : : "memory")
 
 unsigned int armpll_clk_tab[] = {
 	/*  mode,	ndiv_int,	ndiv_frac,	pdiv,	freqid */
-		25,		64,			1,			1,		0,	
+		25,	64,			1,			1,		0,	
 		100,	64,			1,			1,		2,	
 		400,	64,			1,			1,		6,	
 		448,	71,			713050,		1,		6,	
@@ -38,6 +27,119 @@ unsigned int armpll_clk_tab[] = {
 		0xffffffff
 };
 
+#if (defined(CONFIG_CYGNUS) || defined(CONFIG_IPROC_P7))
+
+#define ARM_FREQ_1500 1500
+#define ARM_FREQ_1250 1250
+#define ARM_FREQ_1000 1000
+#define ARM_FREQ_600  600
+#define ARM_FREQ_400  400
+#define ARM_FREQ_200  200
+
+uint32_t iproc_config_armpll_v7(uint32_t mode)
+{
+    int i_loop  ;
+
+    // Before PLL locking change the Frequency ID to 2 'default'  
+
+    mb();
+    reg32_write((volatile uint32_t *)IHOST_PROC_CLK_WR_ACCESS, 0xA5A501);    // Write KPROC_CLK_MGR_REG_WR_ACCESS = 32'h00A5A501 to enable clk manager access. 
+    reg32_write((volatile uint32_t *)IHOST_PROC_CLK_POLICY_FREQ, 0x82020202);   // Select the frequency ID =2 for all policies
+    reg32_write((volatile uint32_t *)IHOST_PROC_CLK_POLICY_CTL , (1 << IHOST_PROC_CLK_POLICY_CTL__GO) | ( 1 << IHOST_PROC_CLK_POLICY_CTL__GO_AC)); 
+    // Set the GO and GO_AC bit 
+    while ((reg32_read((volatile uint32_t *)IHOST_PROC_CLK_POLICY_CTL) & (1 << IHOST_PROC_CLK_POLICY_CTL__GO) ) != 0);   // Wait for Go bit to get clear 
+
+    if (mode ==  ARM_FREQ_1250) {
+         // Reset the PLL and post-divider
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMA , 0x1006400);
+         for (i_loop =0 ; i_loop < 5 ; i_loop++) {
+         }
+         // crystal_clk=25 MHz , MDIV=4 , H_MDIV=2 , PDIV=1 therefore pll_h_clk= (((crystal_clk/pdiv)* ndiv)/h_mdiv) = 1250
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMCTRL5 , (reg32_read((volatile uint32_t *)IHOST_PROC_CLK_PLLARMCTRL5) & 0xffffff00) | 0x2);  
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMC, (reg32_read((volatile uint32_t *)IHOST_PROC_CLK_PLLARMC) & 0xffffff00) | 0x4); 
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMA , 0x1006401);   
+    } else if (mode == ARM_FREQ_1000) {
+         // Reset the PLL and post-divider
+//         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMA , 0x1005000);
+         for (i_loop =0 ; i_loop < 5 ; i_loop++) ;  // Dummy loop for reste propagation
+         // crystal_clk=25 MHz , MDIV=4 , H_MDIV=2 , PDIV=1 therefore pll_h_clk= (((crystal_clk/pdiv)* ndiv)/h_mdiv) = 1000
+//         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMCTRL5 , (reg32_read((volatile uint32_t *)IHOST_PROC_CLK_PLLARMCTRL5) & 0xffffff00) | 0x2); 
+//         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMC, (reg32_read((volatile uint32_t *)IHOST_PROC_CLK_PLLARMC) & 0xffffff00) | 0x4); 
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMA , 0x1005001);
+    } else if (mode == ARM_FREQ_600) {
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMA , 0x1006000);
+         for (i_loop=0; i_loop < 5; i_loop++) {
+         }
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMCTRL5 , (reg32_read((volatile uint32_t *)IHOST_PROC_CLK_PLLARMCTRL5) & 0xffffff00) | 0x4);
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMC, (reg32_read((volatile uint32_t *)IHOST_PROC_CLK_PLLARMC) & 0xffffff00) | 0x4);
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMA , 0x1006001);
+    } else if (mode == ARM_FREQ_400)  { // 400 MHz
+         //VCO Frequency should be in between 1568.00/4080.00 MHz, set by vco_range = High
+ 
+         // Reset the PLL and post-divider
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMA, 1002000);
+         for (i_loop =0 ; i_loop < 5 ; i_loop++) ;  // Dummy loop for reste propagation
+         // crystal_clk=25 MHz , MDIV=8 , H_MDIV=4 , PDIV=1 therefore pll_h_clk= (((crystal_clk/pdiv)* ndiv)/h_mdiv) = 400
+         // SBL config is not right - ndiv = 32, pdiv =1, hmdiv needs to be 2!!!
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMCTRL5 , (reg32_read((volatile uint32_t *)IHOST_PROC_CLK_PLLARMCTRL5) & 0xffffff00) | 0x2);  
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMC, (reg32_read((volatile uint32_t *)IHOST_PROC_CLK_PLLARMC) & 0xffffff00) | 0x8);  
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMA , 0x1004001);
+    } else if (mode == ARM_FREQ_200)   {
+          // 200 MHz
+         //VCO Frequency should be in between 1568.00/4080.00 MHz, set by vco_range = High
+
+         // Reset the PLL and post-divider
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMA , 1002000);
+         for (i_loop =0 ; i_loop < 5 ; i_loop++) ;  // Dummy loop for reste propagation
+         // crystal_clk=25 MHz , MDIV=8 , H_MDIV=4 , PDIV=1 therefore pll_h_clk= (((crystal_clk/pdiv)* ndiv)/h_mdiv) = 200
+         // SBL config is not right - ndiv = 32, pdiv =1, hmdiv needs to be 4!!!
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMCTRL5 , (reg32_read((volatile uint32_t *)IHOST_PROC_CLK_PLLARMCTRL5) & 0xffffff00) | 0x4);  
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMC, (reg32_read((volatile uint32_t *)IHOST_PROC_CLK_PLLARMC) & 0xffffff00) | 0x10);  
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMA , 0x1004001);
+    } else if (mode == ARM_FREQ_1500) {
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMA , 0x1007800);
+         for (i_loop=0; i_loop < 5; i_loop++) {
+         }
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMCTRL5 , (reg32_read((volatile uint32_t *)IHOST_PROC_CLK_PLLARMCTRL5) & 0xffffff00) | 0x2);
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMC, (reg32_read((volatile uint32_t *)IHOST_PROC_CLK_PLLARMC) & 0xffffff00) | 0x2);
+         reg32_write((volatile uint32_t *)IHOST_PROC_CLK_PLLARMA , 0x1007801);
+    } else {
+         printf("mode is not correct\n");
+ 
+         return(-1);
+    }
+
+    while ( !(reg32_read((volatile uint32_t *)IHOST_PROC_CLK_PLLARMA) & (1 <<IHOST_PROC_CLK_PLLARMA__pllarm_lock)) ) {
+           // Wait for PLL lock to be set 
+           
+    }
+    reg32_set_bits((volatile uint32_t *)IHOST_PROC_CLK_PLLARMA, 1 << IHOST_PROC_CLK_PLLARMA__pllarm_soft_post_resetb);
+    reg32_write((volatile uint32_t *)IHOST_PROC_CLK_POLICY_FREQ, 0x87070707);  // Switch to frequency ID 7 
+    reg32_write((volatile uint32_t *)IHOST_PROC_CLK_POLICY_CTL , (1 << IHOST_PROC_CLK_POLICY_CTL__GO) | ( 1 << IHOST_PROC_CLK_POLICY_CTL__GO_AC));  
+    // Set the GO and GO_AC bit 
+    while ((reg32_read((volatile uint32_t *)IHOST_PROC_CLK_POLICY_CTL) & (1 << IHOST_PROC_CLK_POLICY_CTL__GO) ) != 0) {
+          // Wait for Go bit to get clear 
+    }
+#ifdef CONFIG_SABER2
+    /* Disable dynamic clock gating [Bit 1] in addition */
+    reg32_write((volatile uint32_t *)IHOST_PROC_CLK_CORE0_CLKGATE ,         0x00000303);
+    reg32_write((volatile uint32_t *)IHOST_PROC_CLK_CORE1_CLKGATE ,         0x00000303);
+    reg32_write((volatile uint32_t *)IHOST_PROC_CLK_ARM_SWITCH_CLKGATE, 0x00000303);
+    reg32_write((volatile uint32_t *)IHOST_PROC_CLK_ARM_PERIPH_CLKGATE, 0x00000303);
+    reg32_write((volatile uint32_t *)IHOST_PROC_CLK_APB0_CLKGATE ,          0x00000303);
+#else
+    reg32_write((volatile uint32_t *)IHOST_PROC_CLK_CORE0_CLKGATE ,         0x00000301);
+    reg32_write((volatile uint32_t *)IHOST_PROC_CLK_CORE1_CLKGATE ,         0x00000301);
+    reg32_write((volatile uint32_t *)IHOST_PROC_CLK_ARM_SWITCH_CLKGATE, 0x00000301);
+    reg32_write((volatile uint32_t *)IHOST_PROC_CLK_ARM_PERIPH_CLKGATE, 0x00000301);
+    reg32_write((volatile uint32_t *)IHOST_PROC_CLK_APB0_CLKGATE ,          0x00000303);
+#endif
+    mb();
+    return 0;
+}
+
+#endif /* CONFIG_CYGNUS || CONFIG_IPROC_P7 */
+
 /*
 ** 
 ** 
@@ -48,6 +150,11 @@ uint32_t iproc_config_armpll(uint32_t clkmhz)
    uint32_t status = 0, freqid;
    int i = 0, j = 0;
 
+#if defined(CONFIG_IPROC_P7)
+	iproc_config_armpll_v7(clkmhz);
+	return status;
+#endif
+
 	while(1) {
 		if(armpll_clk_tab[i] == clkmhz)
 			break;
@@ -153,3 +260,4 @@ armpll_config_done:
 
 	return(status);
 }
+
diff --git a/arch/arm/cpu/armv7/iproc/benchscreen.c b/arch/arm/cpu/armv7/iproc/benchscreen.c
old mode 100644
new mode 100755
index 52c6dec..3349837
--- a/arch/arm/cpu/armv7/iproc/benchscreen.c
+++ b/arch/arm/cpu/armv7/iproc/benchscreen.c
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved. 
- *  
- * Permission to use, copy, modify, and/or distribute this software for any 
- * purpose with or without fee is hereby granted, provided that the above 
- * copyright notice and this permission notice appear in all copies. 
- *  
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY 
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION 
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
+ * $Copyright Open Broadcom Corporation$ 
  */
 #include <common.h>
 #include <config.h>
@@ -40,10 +28,14 @@ void bench_screen_test1(void)
 	printf("IPROC_XGPLL_STATUS: 0x%08x\n", val);
 	val = ((val >> 4) & 0xFF); /* bits 11:4 */
 	printf("DCO code: %d\n", val);
+#if 0
 	if(val > 14)
 		printf("PASS\n");
 	else
 		printf("FAIL\n");
+#endif
 	printf("=========================================\n");
 }
 #endif
+
+
diff --git a/arch/arm/cpu/armv7/iproc/cache.S b/arch/arm/cpu/armv7/iproc/cache.S
index 60cfffd..be07081 100644
--- a/arch/arm/cpu/armv7/iproc/cache.S
+++ b/arch/arm/cpu/armv7/iproc/cache.S
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved. 
- *  
- * Permission to use, copy, modify, and/or distribute this software for any 
- * purpose with or without fee is hereby granted, provided that the above 
- * copyright notice and this permission notice appear in all copies. 
- *  
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY 
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION 
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
+ * $Copyright Open Broadcom Corporation$ 
  */
 .align 5
 .global invalidate_dcache
diff --git a/arch/arm/cpu/armv7/iproc/ddr_init.c b/arch/arm/cpu/armv7/iproc/ddr_init.c
old mode 100644
new mode 100755
index c0a7eec..fc06121
--- a/arch/arm/cpu/armv7/iproc/ddr_init.c
+++ b/arch/arm/cpu/armv7/iproc/ddr_init.c
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved. 
- *  
- * Permission to use, copy, modify, and/or distribute this software for any 
- * purpose with or without fee is hereby granted, provided that the above 
- * copyright notice and this permission notice appear in all copies. 
- *  
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY 
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION 
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
+ * $Copyright Open Broadcom Corporation$ 
  */
 #include <config.h>
 #include <common.h>
@@ -24,11 +12,14 @@
 #include <asm/arch/iproc_regs.h>
 #include "asm/arch/socregs.h"
 #include "asm/iproc/reg_utils.h"
+#include "asm/iproc/iproc_common.h"
 #include "asm/iproc/ddr40_phy_init.h"
 #include "asm/iproc/shmoo_public.h"
+#include "shmoo_sig.h"
 
 extern unsigned int ddr_init_tab[];
 extern unsigned int ddr2_init_tab[];
+extern unsigned int ddr2_init_tab_400[];
 extern unsigned int ddr2_init_tab_667[];
 extern unsigned int ddr2_init_tab_800[];
 extern unsigned int ddr2_init_tab_1066[];
@@ -45,7 +36,8 @@ extern unsigned int ddr_clk_tab[];
 extern unsigned int ddr_phy_ctl_ovrd_tab[];
 extern unsigned int ddr_phy_wl0_tab[];
 
-#if defined(CONFIG_IPROC_DDR_ECC)
+
+#if defined(CONFIG_IPROC_DDR_ECC) && !defined(CONFIG_IPROC_P7)
 void iproc_ddr_ovrd_ecc_lane(void)
 {
 	uint32_t val;
@@ -143,6 +135,37 @@ void iproc_ddr_ovrd_ecc_lane(void)
 		reg32_write((volatile uint32_t *)DDR_PHY_ECC_LANE_VDL_OVRIDE_BYTE_BIT_RD_EN, val);
 		val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
 
+#if 0
+		val = reg32_read((volatile uint32_t *)DDR_PHY_WORD_LANE_0_DYN_VDL_OVRIDE_BYTE0_R_P);
+		val = SET_OVR_STEP(val & 0xff);
+		reg32_write((volatile uint32_t *)DDR_PHY_ECC_LANE_DYN_VDL_OVRIDE_BYTE_R_P, val);
+		val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
+
+		val = reg32_read((volatile uint32_t *)DDR_PHY_WORD_LANE_0_DYN_VDL_OVRIDE_BYTE0_R_N);
+		val = SET_OVR_STEP(val & 0xff);
+		reg32_write((volatile uint32_t *)DDR_PHY_ECC_LANE_DYN_VDL_OVRIDE_BYTE_R_N, val);
+		val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
+
+		val = reg32_read((volatile uint32_t *)DDR_PHY_WORD_LANE_0_DYN_VDL_OVRIDE_BYTE0_BIT_R_P);
+		val = SET_OVR_STEP(val & 0xff);
+		reg32_write((volatile uint32_t *)DDR_PHY_ECC_LANE_DYN_VDL_OVRIDE_BYTE_BIT_R_P, val);
+		val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
+
+		val = reg32_read((volatile uint32_t *)DDR_PHY_WORD_LANE_0_DYN_VDL_OVRIDE_BYTE0_BIT_R_N);
+		val = SET_OVR_STEP(val & 0xff);
+		reg32_write((volatile uint32_t *)DDR_PHY_ECC_LANE_DYN_VDL_OVRIDE_BYTE_BIT_R_N, val);
+		val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
+
+		val = reg32_read((volatile uint32_t *)DDR_PHY_WORD_LANE_0_DYN_VDL_OVRIDE_BYTE0_W);
+		val = SET_OVR_STEP(val & 0xff);
+		reg32_write((volatile uint32_t *)DDR_PHY_ECC_LANE_DYN_VDL_OVRIDE_BYTE_W, val);
+		val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
+
+		val = reg32_read((volatile uint32_t *)DDR_PHY_WORD_LANE_0_DYN_VDL_OVRIDE_BYTE0_BIT_W);
+		val = SET_OVR_STEP(val & 0xff);
+		reg32_write((volatile uint32_t *)DDR_PHY_ECC_LANE_DYN_VDL_OVRIDE_BYTE_BIT_W, val);
+		val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
+#endif
 		val = reg32_read((volatile uint32_t *)DDR_PHY_WORD_LANE_0_READ_DATA_DLY);
 		reg32_write((volatile uint32_t *)DDR_PHY_ECC_LANE_READ_DATA_DLY, val);
 		val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
@@ -159,9 +182,19 @@ void iproc_ddr_ovrd_ecc_lane(void)
 		val = reg32_read((volatile uint32_t *)DDR_PHY_WORD_LANE_0_DRIVE_PAD_CTL);
 		reg32_write((volatile uint32_t *)DDR_PHY_ECC_LANE_DRIVE_PAD_CTL, val);
 		val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
+#if 0
+		val = reg32_read((volatile uint32_t *)DDR_PHY_WORD_LANE_0_CLOCK_PAD_DISABLE);
+		reg32_write((volatile uint32_t *)DDR_PHY_ECC_LANE_CLOCK_PAD_DISABLE, val);
+		val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
+#endif	
 		val = reg32_read((volatile uint32_t *)DDR_PHY_WORD_LANE_0_WR_PREAMBLE_MODE);
 		reg32_write((volatile uint32_t *)DDR_PHY_ECC_LANE_WR_PREAMBLE_MODE, val);
 		val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
+#if 0
+		val = reg32_read((volatile uint32_t *)DDR_PHY_WORD_LANE_0_PHYBIST_VDL_ADJ);
+		reg32_write((volatile uint32_t *)DDR_PHY_ECC_LANE_PHYBIST_VDL_ADJ, val);
+		val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
+#endif
 		__udelay(200);
 		reg32_write((volatile uint32_t *)DDR_PHY_ECC_LANE_READ_FIFO_CLEAR, 0x1);
 		val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
@@ -180,6 +213,17 @@ uint32_t iproc_read_ecc_syndrome(void)
 void iproc_clear_ecc_syndrome(void)
 {
 	uint32_t val;
+#if 0
+	val = reg32_read((volatile uint32_t *)DDR_DENALI_CTL_69);
+	val = reg32_read((volatile uint32_t *)DDR_DENALI_CTL_70);
+	val = reg32_read((volatile uint32_t *)DDR_DENALI_CTL_71);
+	val = reg32_read((volatile uint32_t *)DDR_DENALI_CTL_72);
+	val = reg32_read((volatile uint32_t *)DDR_DENALI_CTL_73);
+	val = reg32_read((volatile uint32_t *)DDR_DENALI_CTL_74);
+	val = reg32_read((volatile uint32_t *)DDR_DENALI_CTL_75);
+	val = reg32_read((volatile uint32_t *)DDR_DENALI_CTL_76);
+	val = reg32_read((volatile uint32_t *)DDR_DENALI_CTL_77);
+#endif
 	/* Clear the interrupts, bits 6:3 */
 	reg32_write((volatile uint32_t *)DDR_DENALI_CTL_213, (1 << 5) | (1<< 3));
 	__udelay(1000);
@@ -197,7 +241,7 @@ uint32_t iproc_get_ddr3_clock_mhz(uint32_t unit)
 		ddrclk +=1;
 	return(ddrclk);
 }
-#elif defined(CONFIG_NS_PLUS)
+#elif (defined(CONFIG_NS_PLUS))
 uint32_t iproc_get_ddr3_clock_mhz(uint32_t unit)
 {
 	uint32_t ndiv, mdiv, ddrclk;
@@ -211,7 +255,7 @@ uint32_t iproc_get_ddr3_clock_mhz(uint32_t unit)
 	printf("%s ndiv(0x%x) mdiv(0x%x) ddrclk(0x%x)\n", __FUNCTION__, ndiv, mdiv, ddrclk);
 	return(ddrclk);
 }
-#elif defined(CONFIG_KATANA2)
+#elif (defined(CONFIG_KATANA2))
 uint32_t iproc_get_ddr3_clock_mhz(uint32_t unit)
 {
 	uint32_t ndiv, mdiv, ddrclk;
@@ -233,11 +277,111 @@ uint32_t iproc_get_ddr3_clock_mhz(uint32_t unit)
 	printf("%s ndiv(0x%x) mdiv(0x%x) ddrclk(0x%x)\n", __FUNCTION__, ndiv, mdiv, ddrclk);
 	return(ddrclk);
 }
+#elif (defined(CONFIG_CYGNUS) || defined(CONFIG_GREYHOUND))
+uint32_t iproc_get_ddr3_clock_mhz(uint32_t unit)
+{
+    uint32_t ndiv, mdiv, pdiv, ddrclk, data;
+
+    data = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_PLL_DIVIDERS);
+      
+    ndiv = data >> DDR_PHY_CONTROL_REGS_PLL_DIVIDERS__NDIV_INT_R;
+    ndiv &= (2^DDR_PHY_CONTROL_REGS_PLL_DIVIDERS__NDIV_INT_WIDTH) - 1;
+
+    pdiv = data >> DDR_PHY_CONTROL_REGS_PLL_DIVIDERS__PDIV_R;
+    pdiv &= (2^DDR_PHY_CONTROL_REGS_PLL_DIVIDERS__PDIV_WIDTH) - 1;
+
+    mdiv = data >> DDR_PHY_CONTROL_REGS_PLL_DIVIDERS__MDIV_R;
+    mdiv &= (2^DDR_PHY_CONTROL_REGS_PLL_DIVIDERS__MDIV_WIDTH) - 1;
+
+    /* read ndiv pdiv and mdiv */
+    ddrclk = (25 * ndiv * 2 * pdiv) / mdiv;
+    printf("%s DDR PHY PLL divisor: ndiv(0x%x) mdiv(0x%x) ddrclk(0x%x)\n", __FUNCTION__, ndiv, mdiv, ddrclk);
+
+    return(ddrclk);
+}
+
+#endif
+
+#if defined(CONFIG_CYGNUS)
+
+int cygnus_phy_powerup(void)
+{
+    int data;
+    int count = 15;
+	
+    data = reg32_read((volatile uint32_t *)CRMU_DDR_PHY_AON_CTRL);
+
+#if defined(CONFIG_CYGNUS)
+	if(reg32_read((volatile uint32_t *)CRMU_IHOST_POR_WAKEUP_FLAG)==0)
+	{
+#endif
+	    /* Step 1: POWRON */
+		data |= 0x8;// assert power ON
+	    reg32_write((volatile uint32_t *)CRMU_DDR_PHY_AON_CTRL, data);
+
+	    __udelay(2);
+
+	    /* Step 2: POWROK */
+	    data |= 0x10;// assert power OK
+	    reg32_write((volatile uint32_t *)CRMU_DDR_PHY_AON_CTRL, data);
+
+	    while(count--)
+	        __udelay(2);
+#if defined(CONFIG_CYGNUS)
+	}
+	else
+	{
+		printf("DeepSleep wakeup: ddr phy init bypassed 1\n");
+	}
+#endif
+
+    /* Step 3: DFI normal mode */
+    data &= ~(0x04);// remove DFI isolation
+    reg32_write((volatile uint32_t *)CRMU_DDR_PHY_AON_CTRL, data);
+
+
+    /* Step 4: Enable register access */
+    data &= ~(0x02);// remove PHY register isolation
+    reg32_write((volatile uint32_t *)CRMU_DDR_PHY_AON_CTRL, data);
+
+    data &= ~(0x01);// remove PLL isolation
+    reg32_write((volatile uint32_t *)CRMU_DDR_PHY_AON_CTRL, data);
+
+    count = 20;
+    while(count--)
+        __udelay(2);
+
+#if defined(CONFIG_CYGNUS)
+	if(reg32_read((volatile uint32_t *)CRMU_IHOST_POR_WAKEUP_FLAG)==0)
+	{
+#endif
+	    /* Step 5: release reset */
+	    data |= 0x20;// de-assert reset
+	    reg32_write((volatile uint32_t *)CRMU_DDR_PHY_AON_CTRL, data);
+#if defined(CONFIG_CYGNUS)
+	}
+	else
+	{
+		printf("DeepSleep wakeup: ddr phy init bypassed 2\n");
+	}
+#endif
+
+    while((reg32_read((volatile uint32_t *)DDR_S1_IDM_IO_STATUS) & 0x08) != 0x08) {
+        //poll DDR_S1_IDM_IO_STATUS__o_phy_pwrup_rsb
+    }
+
+	return 0;
+}
 
 #endif
+
 uint32_t change_ddr_clock(uint32_t clk)
 {
-	int i = 0;
+
+#ifndef CONFIG_CYGNUS
+int i = 0;
+#endif
+
 #if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_KATANA2))
 	uint32_t val;
 #endif /* (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_KATANA2)) */
@@ -348,6 +492,9 @@ uint32_t change_ddr_clock(uint32_t clk)
 
 	reg32_set_bits((volatile uint32_t *)IPROC_DDR_PLL_CTRL_REGISTER_5, 
 		       (1<<IPROC_DDR_PLL_CTRL_REGISTER_5__IPROC_DDR_PLL_POST_RESETB));
+#elif defined(CONFIG_CYGNUS)
+//     cygnus_set_phy_pll(10000, clk);
+//     cygnus lcpll is configured to be 50 MHZ. Phy pll is configured by phy init code - we don't do anything here.
 #endif
 
 	return(0);
@@ -355,6 +502,21 @@ uint32_t change_ddr_clock(uint32_t clk)
 
 void dump_phy_regs(void)
 {
+#if 0	
+	int i;
+	printf("\n PHY register dump: Control registers\n");
+	for(i = 0; i <= 0xc4; i+=4)
+	{
+		printf("0x%03x,\t0x%08x,\n", i, *(volatile uint32_t *)(DDR_PHY_CONTROL_REGS_REVISION + i));
+	}
+
+	printf("\n PHY register dump: Wordlane0 registers\n");
+	for(i = 0; i <= 0x1b0; i+=4)
+	{
+		printf("0x%03x,\t0x%08x,\n", i, *(volatile uint32_t *)(DDR_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE_RD_EN + i));
+	}
+
+#endif	
 }
  
 void ddr_init_regs(unsigned int * tblptr)
@@ -364,7 +526,11 @@ void ddr_init_regs(unsigned int * tblptr)
 
 	while(offset != 0xffffffff) {
 		++tblptr;
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 		addr[offset] = *tblptr;
+#else
+		addr[offset] = swap_u32(*tblptr);
+#endif
 		++tblptr;
 		offset = *tblptr;
 	}
@@ -378,7 +544,11 @@ void ddr_phy_ctl_regs_ovrd(unsigned int * tblptr)
 
 	while(offset != 0xffffffff) {
 		++tblptr;
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 		addr[offset/4] = *tblptr;
+#else
+		addr[offset/4] = swap_u32(*tblptr);
+#endif
 		val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
 		if (val) ;
 		++tblptr;
@@ -388,6 +558,7 @@ void ddr_phy_ctl_regs_ovrd(unsigned int * tblptr)
 
 void ddr_phy_wl_regs_ovrd(unsigned int * tblptr)
 {
+#if !(defined(CONFIG_CYGNUS) || defined(CONFIG_GREYHOUND) || defined(CONFIG_SABER2))
 	unsigned int offset = *tblptr;
 	unsigned int *addr = (unsigned int *)DDR_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE_RD_EN;
 	unsigned int val;
@@ -395,23 +566,65 @@ void ddr_phy_wl_regs_ovrd(unsigned int * tblptr)
 	while(offset != 0xffffffff) {
 		++tblptr;
 		if(offset < 0x118) {
-		addr[offset/4] = *tblptr | (1 << 17);
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
+		    addr[offset/4] = *tblptr | (1 << 17);
+#else
+		    addr[offset/4] = swap_u32(*tblptr | (1 << 17));
+#endif
 		}
 		else {
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 			addr[offset/4] = *tblptr;
+#else
+			addr[offset/4] = swap_u32(*tblptr);
+#endif
 		}
 		val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
 		if (val) ;
 		++tblptr;
 		offset = *tblptr;
 	}
+#endif 
 }
 
 /*DDR_SHMOO_RELATED_CHANGE*/
+#if 0
+uint32_t ddr_write_mode_regs(uint32_t * tblptr) {
+	int i, j;
+
+	reg32_clear_bits((volatile uint32_t *)DDR_DENALI_CTL_89, 1 << 18);
+	for(i = 0; i < 4; i++) {
+		reg32_write_masked((volatile uint32_t *)DDR_DENALI_CTL_47, 0xffff << 16, tblptr[i] << 16); // CS0
+		reg32_write_masked((volatile uint32_t *)DDR_DENALI_CTL_51, 0xffff << 16, tblptr[i] << 16); // CS1
+		reg32_write_masked((volatile uint32_t *)DDR_DENALI_CTL_55, 0xffff << 16, tblptr[i] << 16); // CS2
+		reg32_write_masked((volatile uint32_t *)DDR_DENALI_CTL_59, 0xffff << 16, tblptr[i] << 16); // CS3
+		/* Set mode register for single write for all chip selects */
+		reg32_write((volatile uint32_t *)DDR_DENALI_CTL_43, 1 << 23 | 1 << 24 | i); 
+		/* Trigger Mode Register Write(MRW) sequence */
+		reg32_set_bits((volatile uint32_t *)DDR_DENALI_CTL_43, 1 << 25);
+		j = 100;
+		do {
+			if(reg32_read((volatile uint32_t *)DDR_DENALI_CTL_89) & (1 << 18))
+				break;
+			--j;
+		}while(j);
+		if (j == 0 && (reg32_read((volatile uint32_t *)DDR_DENALI_CTL_89) & (1 << 18)) == 0) {
+			printf("Error: DRAM mode register write failed\n");
+			return(1);
+		}
+	}
+	return(0);
+}
+#endif
 
+#ifdef CONFIG_RUN_DDR_SHMOO
 int ReWriteModeRegisters( void )
 {
     /*DDR_SHMOO_RELATED_CHANGE: comment out calling ddr_write_mode_regs(), and add new implementation*/	
+#if 0	
+    unsigned int nRet = ddr_write_mode_regs( ddr3_mode_reg_tab );
+    return nRet;
+#endif    
     int nRet = 0;
     int j = 100;
 
@@ -437,20 +650,142 @@ int ReWriteModeRegisters( void )
 
     return nRet;
 }
+#endif /* CONFIG_RUN_DDR_SHMOO */
+
+#if (defined(CONFIG_NORTHSTAR) || defined(CONFIG_NS_PLUS))
+
+void ProgramCoreRailVoltageFromOTPAVSCode(int chipType)
+{
+#define MDC_DIV 0x8
+#define ROW_NUMBER 8
+#define AVS_CODE_RS 17
+#define AVS_CODE_MASK 7
+#define DIGITAL_POWER_CORE_VOLTAGE_1_POINT_5V	0x520E0030
+#define DIGITAL_POWER_CORE_VOLTAGE_1V			0x520E0020
+#define DIGITAL_POWER_CORE_VOLTAGE_POINT_975V	0x520E0018
+#define DIGITAL_POWER_CORE_VOLTAGE_POINT_9625V	0x520E0014
+#define DIGITAL_POWER_CORE_VOLTAGE_POINT_95V	0x520E0010
+#define DIGITAL_POWER_CORE_VOLTAGE_POINT_9375V	0x520E000C
+#define DIGITAL_POWER_CORE_VOLTAGE_POINT_925V	0x520E0008
+#define DIGITAL_POWER_CORE_VOLTAGE_POINT_9125V	0x520E0004
+#define DIGITAL_POWER_CORE_VOLTAGE_POINT_9V		0x520E0000
+#ifdef CONFIG_NORTHSTAR
+#define PCU_MDIO_MGT PCU_MDIO_MGT_OFFSET
+#define PCU_MDIO_MGT_CMD PCU_MDIO_CMD_OFFSET
+#endif
+		uint32_t bogus = 0, avs_code, status;
+
+		printf("ProgramCoreRailVoltageFromOTPAVSCode entry\n");
+		status = get_otp_mem(ROW_NUMBER, &avs_code);
+		if (status != 0)
+		{
+			printf("OTP status check failed\n");
+			return;
+		}
+
+
+		/* before doing any pll configuration set the core rail voltages */
+		printf("avs_code programmed %08x\n", avs_code);
+		avs_code = (avs_code >> AVS_CODE_RS) & AVS_CODE_MASK;
+		printf("avs_code programmed right shifted %08x %08x\n", AVS_CODE_RS, avs_code);
+		reg32_write(PCU_MDIO_MGT, MDC_DIV);
+
+		/* add delay */
+		__udelay(500);
+
+		if (chipType == 1)
+		{
+			if ((avs_code != 0) && (avs_code != 1) && (avs_code != 4))
+			{
+				printf("%s: %d unrecognized avs_code %d\n", __FUNCTION__, __LINE__, avs_code);
+				return;
+			}
+		}
+
+		if (status == 0)
+		{
+			switch (avs_code)
+			{
+				case 0:
+					/* this is 1 V */
+					printf("Setting core voltage  %08x %d\n", DIGITAL_POWER_CORE_VOLTAGE_1V, avs_code);
+					reg32_write(PCU_MDIO_MGT_CMD, DIGITAL_POWER_CORE_VOLTAGE_1V);
+					break;
+				case 1:
+					if (chipType == 1)
+					{
+						/* this is 0.95 V */
+						printf("Setting core voltage  %08x %d\n", DIGITAL_POWER_CORE_VOLTAGE_POINT_95V, avs_code);
+						reg32_write(PCU_MDIO_MGT_CMD, DIGITAL_POWER_CORE_VOLTAGE_POINT_95V);
+					}
+					else if (chipType == 0)
+					{
+						/* this is 0.975 V */
+						printf("Setting core voltage  %08x %d\n", DIGITAL_POWER_CORE_VOLTAGE_POINT_975V, avs_code);
+						reg32_write(PCU_MDIO_MGT_CMD, DIGITAL_POWER_CORE_VOLTAGE_POINT_975V);
+					}
+					break;
+				case 2:
+					/* this is 0.9625 V */
+					printf("Setting core voltage  %08x %d\n", DIGITAL_POWER_CORE_VOLTAGE_POINT_9625V, avs_code);
+					reg32_write(PCU_MDIO_MGT_CMD, DIGITAL_POWER_CORE_VOLTAGE_POINT_9625V);
+					break;
+				case 3:
+					/* this is 0.95 V */
+					printf("Setting core voltage  %08x %d\n", DIGITAL_POWER_CORE_VOLTAGE_POINT_95V, avs_code);
+					reg32_write(PCU_MDIO_MGT_CMD, DIGITAL_POWER_CORE_VOLTAGE_POINT_95V);
+					break;
+				case 4:
+					if (chipType == 1)
+					{
+						/* this is 1.5 V */
+						printf("Setting core voltage  %08x %d\n", DIGITAL_POWER_CORE_VOLTAGE_1_POINT_5V, avs_code);
+						reg32_write(PCU_MDIO_MGT_CMD, DIGITAL_POWER_CORE_VOLTAGE_1_POINT_5V);
+					}
+					else if (chipType == 0)
+					{
+						/* this is 0.9375 V */
+						printf("Setting core voltage  %08x %d\n", DIGITAL_POWER_CORE_VOLTAGE_POINT_9375V, avs_code);
+						reg32_write(PCU_MDIO_MGT_CMD, DIGITAL_POWER_CORE_VOLTAGE_POINT_9375V);
+					}
+					break;
+				case 5:
+					/* this is 0.925 V */
+					printf("Setting core voltage  %08x %d\n", DIGITAL_POWER_CORE_VOLTAGE_POINT_925V, avs_code);
+					reg32_write(PCU_MDIO_MGT_CMD, DIGITAL_POWER_CORE_VOLTAGE_POINT_925V);
+					break;
+				case 6:
+					/* this is 0.9125 V */
+					printf("Setting core voltage  %08x %d\n", DIGITAL_POWER_CORE_VOLTAGE_POINT_9125V, avs_code);
+					reg32_write(PCU_MDIO_MGT_CMD, DIGITAL_POWER_CORE_VOLTAGE_POINT_9125V);
+					break;
+				case 7:
+					/* this is 0.9 V */
+					printf("Setting core voltage  %08x %d\n", DIGITAL_POWER_CORE_VOLTAGE_POINT_9V, avs_code);
+					reg32_write(PCU_MDIO_MGT_CMD, DIGITAL_POWER_CORE_VOLTAGE_POINT_9V);
+					break;
+				default:
+					printf("%s: %d unrecognized avs_code %d\n", __FUNCTION__, __LINE__, avs_code);
+					break;
+			}
+		}
+		printf("ProgramCoreRailVoltageFromOTPAVSCode exit\n");
+}
+#endif
 
 int is_ddr_32bit(void)
 {
 	int			ddr32 = 0;
-#if defined(CONFIG_NS_PLUS)
+#if (defined(CONFIG_NS_PLUS))
 	uint32_t	status, otp_status;
 #endif /* (defined(CONFIG_NS_PLUS)) */
 
-#if CONFIG_SHMOO_REUSE_DDR_32BIT
+#if (CONFIG_SHMOO_REUSE_DDR_32BIT)
 	ddr32=1;
 #endif /* (CONFIG_SHMOO_REUSE_DDR_32BIT) */
 
-#if defined(CONFIG_NS_PLUS)
-#if defined(CONFIG_DDR32)
+#if (defined(CONFIG_NS_PLUS))
+#if (defined(CONFIG_DDR32))
 	ddr32=1;
 #endif /* (defined(CONFIG_DDR32)) */
 	/* get device id from OTP */
@@ -467,16 +802,28 @@ int is_ddr_32bit(void)
 	}
 #endif /* (defined(CONFIG_NS_PLUS)) */
 
+#ifdef CONFIG_GREYHOUND
+#ifdef CONFIG_DDR32
+	ddr32 = 1;
+#else
+	ddr32 = 0;
+#endif
+#endif 
+
+#ifdef CONFIG_SABER2
+  ddr32 = 0;
+#endif
+
 	return ddr32;
 }
 
-
+#if !(defined(CONFIG_CYGNUS) || defined(CONFIG_GREYHOUND) || defined(CONFIG_SABER2))
 void ddr_init(void)
 {
 	int i;
 	volatile unsigned int val;
 	int ddr_type;
-	uint32_t params, connect, ovride, status, otp_status = 0, sku_id, ddr_clk, dev_id;
+	uint32_t params, connect, ovride, status, otp_status = 0, sku_id, ddr_clk, dev_id, rev_id;
 	uint32_t wire_dly[4] = {0};
 
     /* Assert S1 and S2 reset, and wait for DDR power to be stabilized */
@@ -490,6 +837,9 @@ void ddr_init(void)
 	printf("DEV ID= %08x\n", dev_id);
 	dev_id &= 0x0000ffff;
 
+	rev_id = ((reg32_read((volatile uint32_t *)ChipcommonA_ChipID)) >> 16) & 0xf;
+	printf("REV ID= %08x\n", rev_id);
+
 	sku_id = (reg32_read((volatile uint32_t *)ROM_S0_IDM_IO_STATUS) >> 2) & 0x03;
 	printf("SKU ID = %d\n", sku_id);
 #ifdef CONFIG_NORTHSTAR
@@ -507,16 +857,18 @@ void ddr_init(void)
 	printf("OTP status: %x\n", otp_status);
 	/* Adjust the core volatage */
 	/* Set MII clock to 125/8 MHz */
-	reg32_write((volatile uint32_t *)PCU_MDIO_MGT_OFFSET, 8);
+	reg32_write((volatile uint32_t *)PCU_MDIO_MGT_OFFSET, 8); // Fixme - or 0x88
 	if(sku_id != 0) {
 		/* not high sku, set it to 0.9V */
 		reg32_write((volatile uint32_t *)PCU_MDIO_CMD_OFFSET, 1 << 30 | 1 << 28 | 4 << 23 | 3 << 18 | 2 << 16 | 0); 
 	}
+	ProgramCoreRailVoltageFromOTPAVSCode(0);
 #endif
 
 	ddr_type = reg32_read((volatile uint32_t *)DDR_S1_IDM_IO_STATUS) & 0x1; 
 
 #ifdef CONFIG_NORTHSTAR
+	/* Workaround to configure DDR3 voltage to 1.5v */
 	if(ddr_type) {
 		reg32_write((volatile uint32_t *)PCU_1V8_1V5_VREGCNTL_OFFSET, 1 << 9);
 	}
@@ -526,8 +878,15 @@ void ddr_init(void)
        otp_status=1;     
 
 	if( !otp_status || (sku_id == 2)) {
-		/* Mid SKU or non-OTP programmed, Data rate 1066*/
-		ddr_clk = 533;
+		/* Mid SKU or non-OTP programmed */
+		if(ddr_type) {
+			/* NS A0, BCM953011K has DDR3, set Data rate to 1066 */
+			ddr_clk = 533;
+		}
+		else {
+			/* Northstar B0, BCM953011K has DDR2 */
+			ddr_clk = 400;
+		}
 	}
 	else if(sku_id == 1){
 		/* Low SKU, Data rate 800 */
@@ -591,8 +950,10 @@ void ddr_init(void)
     // PHY init parameters
 #ifdef CONFIG_DDR_LONG_PREAMBLE    
     params = DDR40_PHY_PARAM_USE_VTT |
+		/*
              DDR40_PHY_PARAM_DIS_ODT |
              DDR40_PHY_PARAM_DIS_DQS_ODT |
+		*/
              DDR40_PHY_PARAM_ODT_LATE |
              DDR40_PHY_PARAM_ADDR_CTL_ADJUST_0 |
              DDR40_PHY_PARAM_ADDR_CTL_ADJUST_1 |
@@ -600,8 +961,10 @@ void ddr_init(void)
              DDR40_PHY_PARAM_LONG_PREAMBLE;
 #else
      params = DDR40_PHY_PARAM_USE_VTT |
+		/*
              DDR40_PHY_PARAM_DIS_ODT |
              DDR40_PHY_PARAM_DIS_DQS_ODT |
+		*/
              DDR40_PHY_PARAM_ODT_LATE |
              DDR40_PHY_PARAM_ADDR_CTL_ADJUST_0 |
              DDR40_PHY_PARAM_ADDR_CTL_ADJUST_1 |
@@ -717,6 +1080,10 @@ void ddr_init(void)
 	}
 
 	if(reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_VDL_CALIB_STATUS) & 0x2) {
+#if 0
+		printf("PHY register dump after the auto calibration\n");
+		dump_phy_regs();
+#endif
 		goto ddr_cntrl_prog;
 	}
         
@@ -881,12 +1248,18 @@ ddr_cntrl_prog:
 	ddr_init_regs(ddr_init_tab);
 #ifdef CONFIG_NORTHSTAR
 	if( !otp_status || (sku_id == 2)) {
-		/* Mid SKU or non-OTP programmed, Data rate 1066*/
-		ddr_init_regs(ddr3_init_tab);
+		/* Mid SKU or non-OTP programmed */
+		if(ddr_type) {
+			/* DDR3, Data rate 1066, on NS A0 board */
+			ddr_init_regs(ddr3_init_tab);
+		}
+		else {
+			/* DDR2, Data rate 800, on NS B0 board */
+			ddr_init_regs(ddr2_init_tab_400);
+		}
 	}
 	else if(sku_id == 1){
 		/* Low SKU, Data rate 800 */
-		extern unsigned int ddr2_init_tab_400[];
 		ddr_init_regs(ddr2_init_tab_400);
 	}
 	else {
@@ -963,6 +1336,23 @@ poll_ddr_ctrl:
 #ifdef CONFIG_RUN_DDR_SHMOO
 
 /*DDR_SHMOO_RELATED_CHANGE: mark out mode register update as it should already be programmed before "turnon"*/
+#if 0
+	/* Program DDR controller mode registers */
+	if(ddr_type) {
+		/* DDR3 */	
+		if(ddr_write_mode_regs(ddr3_mode_reg_tab)) {
+			printf("Error: DRAM mode register write failed\n");
+			return;
+		}
+	}
+	else {
+		/* DDR2 */	
+		if(ddr_write_mode_regs(ddr2_mode_reg_tab)) {
+			printf("Error: DRAM mode register write failed\n");
+			return;
+		}
+	}
+#endif
 
 	printf("PHY register dump after mode register write\n");
 	dump_phy_regs();
@@ -983,15 +1373,15 @@ poll_ddr_ctrl:
 		volatile unsigned int tmp=10000; //1000 is also OK
 		extern unsigned mde_entry (void);
 
-		*(unsigned int *)(0x1800c180) = 0xea68;                             // unlock
-		*(unsigned int *)(0x1800c154) = 0x83c00000;     // write bit31=1 , sel_SW_setting
+	    reg32_write((volatile uint32_t *)0x1800c180, 0x0000ea68); // unlock
+	    reg32_write((volatile uint32_t *)0x1800c154, 0x83c00000); // write bit31=1 , sel_SW_setting
 		while(tmp--);  //delay for correct read
-		tmp = *(unsigned int *)(0x1800c15c);
+		tmp = reg32_read((unsigned int *)0x1800c15c);
 		if( tmp & (1<<4) ) { //bit 4 is set as 1 by "shmoo" command
 			//restore to original value
-			*(unsigned int *)(0x1800c180) = 0xea68;                        // unlock
-			*(unsigned int *)(0x1800c15c) = 0x0003060c;               // bit[7:4]: reset indicator
-			*(unsigned int *)(0x1800c154) = 0x83c00000;               // write bit31=1 , sel_SW_setting
+	        reg32_write((volatile uint32_t *)0x1800c180, 0x0000ea68); // unlock
+	        reg32_write((volatile uint32_t *)0x1800c15c, 0x0003060c); // bit[7:4]: reset indicator
+	        reg32_write((volatile uint32_t *)0x1800c154, 0x83c00000); // write bit31=1 , sel_SW_setting
 			#warning: MDE to run in non-relocated space in FLASH....
 			printf ("Forcing to MDE entry at %08x\n", (unsigned) mde_entry );
 			mde_entry ();
@@ -999,8 +1389,8 @@ poll_ddr_ctrl:
 	}
 #endif /*CONFIG_MDE_BUILD_RW_EYE*/
 #endif /* CONFIG_RUN_DDR_SHMOO */
-
 }
+#endif /* CONFIG_CYGNUS */
 
 static uint32_t get_ddr_clock(uint32_t sku_id, int ddr_type)
 {
@@ -1017,40 +1407,99 @@ static uint32_t get_ddr_clock(uint32_t sku_id, int ddr_type)
 	ddr_clk = 800;
 #elif defined(CONFIG_HURRICANE2)
 	/* Set the defaults according to SKU */
-	if(sku_id == 0x8344) {
-		ddr_clk = 400; /* Wolfhound - BCM53344 */
-	}
-	else if(sku_id == 0xb151 || sku_id == 0x8394) {
-		ddr_clk = 400; /* Deerhound */
+	if(sku_id == 0xb151  || sku_id == 0x8342 || sku_id == 0x8343 || sku_id == 0x8344 || 
+	   sku_id == 0x8346 || sku_id == 0x8347 || sku_id == 0x8393 || 
+	   sku_id == 0x8394) {
+	   /* Wolfhound/Deerhound */
+		ddr_clk = 400;
 	}
 	else {
-		ddr_clk = 667; /* Hurricane2 - BCM56150 */
+		ddr_clk = 667; /* Hurricane2 - BCM5615x */
 	}
 #elif defined(CONFIG_KATANA2)
 	if(ddr_type) 
 		ddr_clk = 800; //ddr3 
 	else
 		ddr_clk = 400; //ddr2 
+#elif defined(CONFIG_CYGNUS)
+    if(ddr_type) {
+    #ifdef CONFIG_DRAM_FREQ
+        ddr_clk = CONFIG_DRAM_FREQ; //ddr3
+    #else
+        ddr_clk = 800; //ddr3
+    #endif
+    } else {
+        ddr_clk = 400; //ddr2
+    }
+#elif defined(CONFIG_GREYHOUND)
+    if ((sku_id & 0xfff0) == 0xb060) {
+        /* Ranger2 - 5606x: CPU 1250MHz, AXI 400MHz, DDR 800MHz */
+        ddr_clk = 800;
+    } else {
+        /* Greyhound - 5341x: CPU 600MHz, AXI 200MHz, DDR 667MHz */
+        ddr_clk = 667; 
+    }
+#elif defined(CONFIG_SABER2)
+#if defined(CONFIG_IPROC_EMULATION)
+    ddr_clk = 400;
+#else
+    ddr_clk = 800;
+#endif  /* defined(CONFIG_IPROC_EMULATION) */
 #endif
 	return ddr_clk;
 #endif
 }
 
-#if defined(CONFIG_RUN_DDR_SHMOO2) && defined(CONFIG_SHMOO_REUSE)
+#if defined(CONFIG_SHMOO_REUSE) || defined(CONFIG_SHMOO_AND28_REUSE)
 
-#define SHMOO_HEADER_MAGIC      "SHMO"
-#define SHMOO_MIN_BLOCK_SIZE    0x10000
+#define RAND_MAGIC_1    0x0000444BUL
+#define RAND_MAGIC_2    0x88740000UL
+#define RAND_MAGIC_3    69069UL
+#define RAND_SEED       0x5301beef
+#define RAND_SEED_2     ((RAND_SEED << 21) + (RAND_SEED << 14) + (RAND_SEED << 7))
+#define RAND_C_INIT     (((RAND_SEED_2 + RAND_MAGIC_1) << 1) + 1)
+#define RAND_T_INIT     ((RAND_SEED_2 << (RAND_SEED_2 & 0xF)) + RAND_MAGIC_2)
 
-struct shmoo_sig_t {
-    char            magic[4];
+static int simple_memory_test(void *start, uint32_t len)
+{
+    register uint32_t rand_c_value, rand_t_value, rand_value;
+    register uint32_t i;
+    register volatile uint32_t *paddr;
     
-    uint32_t        dev_id:16;
-    uint32_t        sku_id:16;
+    len /= 4;
+    paddr = (volatile uint32_t *)start;
+    rand_c_value = RAND_C_INIT;
+    rand_t_value = RAND_T_INIT;
+    for(i=0; i<len; i++, paddr++) {
+        rand_c_value *= RAND_MAGIC_3;
+        rand_t_value ^= rand_t_value >> 15;
+        rand_t_value ^= rand_t_value << 17;
+        rand_value = rand_t_value ^ rand_c_value;
+        *paddr = rand_value;
+    }
     
-    uint32_t        ddr_type:2;
-    uint32_t        ddr_clock:12;
-    uint32_t        reserved1:18;
-};
+    paddr = (volatile uint32_t *)start;
+    rand_c_value = RAND_C_INIT;
+    rand_t_value = RAND_T_INIT;
+    for(i=0; i<len; i++, paddr++) {
+        rand_c_value *= RAND_MAGIC_3;
+        rand_t_value ^= rand_t_value >> 15;
+        rand_t_value ^= rand_t_value << 17;
+        rand_value = rand_t_value ^ rand_c_value;
+        if (*paddr != rand_value) {
+            return -1;
+        }
+    }
+
+    return 0;
+}
+
+#endif /* CONFIG_SHMOO_REUSE || CONFIG_SHMOO_AND28_REUSE */
+
+#if defined(CONFIG_RUN_DDR_SHMOO2) && defined(CONFIG_SHMOO_REUSE)
+
+#define SHMOO_HEADER_MAGIC      "SHMO"
+#define SHMOO_MIN_BLOCK_SIZE    0x10000
 
 static const uint16_t ddr_phy_ctl_regs[] = {
     0x030,
@@ -1146,7 +1595,7 @@ static const uint16_t ddr_phy_wl_regs[] = {
     0x1ac,
     0x1b0
 };
-#ifdef CONFIG_IPROC_DDR_ECC
+#if defined(CONFIG_IPROC_DDR_ECC) && !defined(CONFIG_IPROC_P7)
 static const uint16_t ddr_phy_eccl_regs[] = {
 DDR_PHY_ECC_LANE_VDL_OVRIDE_BYTE_RD_EN_BASE,
 DDR_PHY_ECC_LANE_VDL_OVRIDE_BYTE_W_BASE,
@@ -1173,8 +1622,7 @@ DDR_PHY_ECC_LANE_DRIVE_PAD_CTL_BASE,
 DDR_PHY_ECC_LANE_WR_PREAMBLE_MODE_BASE,
 };
 #endif
-#if defined(CONFIG_IPROC_NAND) && defined(CONFIG_ENV_IS_IN_NAND) && \
-	CONFIG_ENV_IS_IN_NAND
+#if defined(CONFIG_IPROC_NAND) && defined(CONFIG_ENV_IS_IN_NAND) && CONFIG_ENV_IS_IN_NAND
 
 static int write_shmoo_to_flash(void *buf, int length)
 {
@@ -1223,8 +1671,7 @@ static int write_shmoo_to_flash(void *buf, int length)
     return ret;
 }
 
-#elif defined(CONFIG_SPI_FLASH) && defined(CONFIG_ENV_IS_IN_SPI_FLASH) && \
-	CONFIG_ENV_IS_IN_SPI_FLASH
+#elif defined (CONFIG_SPI_FLASH) && defined(CONFIG_ENV_IS_IN_SPI_FLASH) && CONFIG_ENV_IS_IN_SPI_FLASH
 
 static int write_shmoo_to_flash(void *buf, int length)
 {
@@ -1282,7 +1729,7 @@ static int write_shmoo_to_flash(void *buf, int length)
     return ret;
 }
 
-#elif defined(CONFIG_ENV_IS_IN_FLASH)
+#elif defined (CONFIG_ENV_IS_IN_FLASH)
 
 static int write_shmoo_to_flash(void *buf, int length)
 {
@@ -1329,55 +1776,13 @@ static int write_shmoo_to_flash(void *buf, int length)
  #error Flash (SPI or NAND) must be enabled 
 #endif
 
-#define RAND_MAGIC_1    0x0000444BUL
-#define RAND_MAGIC_2    0x88740000UL
-#define RAND_MAGIC_3    69069UL
-#define RAND_SEED       0x5301beef
-#define RAND_SEED_2     ((RAND_SEED << 21) + (RAND_SEED << 14) + (RAND_SEED << 7))
-#define RAND_C_INIT     (((RAND_SEED_2 + RAND_MAGIC_1) << 1) + 1)
-#define RAND_T_INIT     ((RAND_SEED_2 << (RAND_SEED_2 & 0xF)) + RAND_MAGIC_2)
-
-static int simple_memory_test(void *start, uint32_t len)
-{
-    register uint32_t rand_c_value, rand_t_value, rand_value;
-    register uint32_t i;
-    register volatile uint32_t *paddr;
-    
-    len /= 4;
-    paddr = (volatile uint32_t *)start;
-    rand_c_value = RAND_C_INIT;
-    rand_t_value = RAND_T_INIT;
-    for(i=0; i<len; i++, paddr++) {
-        rand_c_value *= RAND_MAGIC_3;
-        rand_t_value ^= rand_t_value >> 15;
-        rand_t_value ^= rand_t_value << 17;
-        rand_value = rand_t_value ^ rand_c_value;
-        *paddr = rand_value;
-    }
-    
-    paddr = (volatile uint32_t *)start;
-    rand_c_value = RAND_C_INIT;
-    rand_t_value = RAND_T_INIT;
-    for(i=0; i<len; i++, paddr++) {
-        rand_c_value *= RAND_MAGIC_3;
-        rand_t_value ^= rand_t_value >> 15;
-        rand_t_value ^= rand_t_value << 17;
-        rand_value = rand_t_value ^ rand_c_value;
-        if (*paddr != rand_value) {
-            return -1;
-        }
-    }
-    
-    return 0;
-}
-
 /* Return flash pointer; or NULL if validation failed */
-static volatile uint32_t *validate_flash_shmoo_values(struct shmoo_sig_t *psig, int *ppairs)
+static volatile uint32_t *validate_flash_shmoo_values(struct shmoo_signature *psig, int *ppairs)
 {
 	uint32_t dev_id, sku_id, ddr_type, ddr_clk;
     volatile uint32_t *ptr;
     volatile uint32_t *flptr;
-    struct shmoo_sig_t sig;
+    struct shmoo_signature sig;
     uint32_t checksum, pairs, length;
     uint32_t chksum;
     int offset;
@@ -1404,7 +1809,7 @@ static volatile uint32_t *validate_flash_shmoo_values(struct shmoo_sig_t *psig,
     /* Read SHMOO data from NAND */
     flptr = (volatile uint32_t *)(IPROC_NAND_MEM_BASE + CONFIG_SHMOO_REUSE_NAND_OFFSET);
     offset = (CONFIG_SHMOO_REUSE_NAND_RANGE - 1) / SHMOO_MIN_BLOCK_SIZE * SHMOO_MIN_BLOCK_SIZE;
-#elif defined(CONFIG_ENV_IS_IN_FLASH) 
+#elif defined (CONFIG_ENV_IS_IN_FLASH) 
     /* Read SHMOO data from NOR */
     flptr = (volatile uint32_t *)(IPROC_NOR_MEM_BASE + CONFIG_SHMOO_REUSE_NOR_OFFSET);
     offset = 0;
@@ -1413,7 +1818,7 @@ static volatile uint32_t *validate_flash_shmoo_values(struct shmoo_sig_t *psig,
     flptr = (volatile uint32_t *)(IPROC_QSPI_MEM_BASE + CONFIG_SHMOO_REUSE_QSPI_OFFSET);
     offset = 0;
 #endif
-    
+
     /* Get chip type and DDR type/clock */
     dev_id = (reg32_read((volatile uint32_t *)ChipcommonA_ChipID)) & 0x0000ffff;
 #ifdef CONFIG_HURRICANE2
@@ -1430,7 +1835,6 @@ static volatile uint32_t *validate_flash_shmoo_values(struct shmoo_sig_t *psig,
     sig.sku_id = sku_id;
     sig.ddr_type = ddr_type;
     sig.ddr_clock = ddr_clk;
-    sig.reserved1 = 0;
     
     /* Provide signature data to caller */
     if (psig) {
@@ -1440,21 +1844,23 @@ static volatile uint32_t *validate_flash_shmoo_values(struct shmoo_sig_t *psig,
     /* Check signature (in min-blocks from bottom) */
     while (offset >= 0) {
         ptr = flptr + offset;
-        if (!memcmp((void *)ptr, &sig, sizeof(sig))) {
+        if (!shmoo_sigmemcmp(&sig,(void *)ptr)) {
             break;
         }
         offset -= SHMOO_MIN_BLOCK_SIZE;
     }
     if (offset < 0) {
+        printf(" Signature mismatch ");
         return NULL;
     }
-    ptr += sizeof(sig) / 4;
+    ptr += 3;
     
     /* Verify checksum */
     checksum = *ptr++;
     length = *ptr++;
     if (pairs != length) {
         /* Pair count unmatched */
+        printf(" Pair count mismatch pairs %x length %x",pairs, length);
         return NULL;
     }
     chksum = 0;
@@ -1462,6 +1868,7 @@ static volatile uint32_t *validate_flash_shmoo_values(struct shmoo_sig_t *psig,
         chksum += *ptr;
     }
     if (chksum != checksum) {
+        printf(" Checksum mismatch cksum: %x checksum:%x",chksum,checksum);
         return NULL;
     }
     
@@ -1471,9 +1878,10 @@ static volatile uint32_t *validate_flash_shmoo_values(struct shmoo_sig_t *psig,
 static int try_restore_shmoo(void)
 {
     int invalid = 0;
-    struct shmoo_sig_t sig;
+    struct shmoo_signature sig;
     volatile uint32_t *flptr;
     volatile uint32_t *reg;
+    uint32_t val;
     int pairs, i;
     
     /* Validate values in flash */
@@ -1525,11 +1933,24 @@ static int try_restore_shmoo(void)
     
     /* Restore values from flash */
     printf("Restoring Shmoo parameters from flash ..... ");
-    flptr += sizeof(struct shmoo_sig_t) / 4 + 2;
+    flptr += 5;
     for(i=0; i<pairs; i++) {
-        reg = (volatile uint32_t *)(*flptr++);
-        *reg = *flptr++;
-        (void)*reg; /* Dummy read back */
+        reg = (uint32_t *)(*flptr++);
+        val = (uint32_t *)(*flptr++);
+	if( (((uint32_t)reg >= DDR_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE_RD_EN) && ((uint32_t)reg <= (DDR_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE_RD_EN + 0x114)))
+#if (CONFIG_SHMOO_REUSE_DDR_32BIT || defined(CONFIG_NS_PLUS))
+		|| (((uint32_t)reg >= DDR_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE_RD_EN) && ((uint32_t)reg <= (DDR_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE_RD_EN + 0x114)))
+#endif
+#ifdef CONFIG_IPROC_DDR_ECC
+		|| (((uint32_t)reg >= (DDR_DENALI_CTL_00 + DDR_PHY_ECC_LANE_VDL_OVRIDE_BYTE_RD_EN_BASE)) && ((uint32_t)reg <= (DDR_DENALI_CTL_00 + DDR_PHY_ECC_LANE_VDL_OVRIDE_BYTE_BIT_RD_EN_BASE)))
+#endif
+	) {
+		val |= (1 << 17); /* Force Override */
+	}
+        // printf("Writing 0x%x to 0x%x\n",val,reg);
+        reg32_write(reg,val);
+
+        reg32_read(reg); /* Dummy read back */
     }
     printf("done\n");
     
@@ -1554,7 +1975,7 @@ void iproc_save_shmoo_values(void)
     uint32_t *buffer, *ptr;
     volatile uint32_t *flptr;
     uint32_t reg, val;
-    struct shmoo_sig_t sig;
+    struct shmoo_signature sig;
     int pairs, length;
     uint32_t chksum;
     int i;
@@ -1563,23 +1984,23 @@ void iproc_save_shmoo_values(void)
     flptr = validate_flash_shmoo_values(&sig, &pairs);
     if (flptr != NULL) {
         /* Check if the flash data are the same as current DDR PHY values */
-        flptr += sizeof(struct shmoo_sig_t) / 4 + 2;
-		for(i=0; i<pairs; i++) {
-			reg = *flptr++;
-			val = *flptr++;
-			if (*(volatile uint32_t *)reg != val) {
-				break;
-			}
-		}
-		if (i == pairs) {
-			/* No difference found; Saving skipped */
-			return;
-		}
+        flptr += 5;
+	for(i=0; i<pairs; i++) {
+	    reg = *flptr++;
+	    val = *flptr++;
+            if (val != reg32_read(reg)) {
+                break;
+            }
+
+	}
+	if (i == pairs) {
+		/* No difference found; Saving skipped */
+	    return;
+	}
     }
     
     /* Calculate size of buffer */
-    length = 
-        sizeof(struct shmoo_sig_t) + 
+    length = 12 + 
         sizeof(uint32_t) * 2 + 
         sizeof(uint32_t) * pairs * 2;
         
@@ -1592,8 +2013,8 @@ void iproc_save_shmoo_values(void)
     ptr = buffer;
     
     /* Fill signature */
-    memcpy(ptr, &sig, sizeof(sig));
-    ptr += sizeof(struct shmoo_sig_t) / 4 + 2;
+    shmoo_sig2mem(&sig,ptr);
+    ptr += 5;
     
     /* Copy registers and values to buffer */
     chksum = 0;
@@ -1601,7 +2022,8 @@ void iproc_save_shmoo_values(void)
         reg = (uint32_t)DDR_PHY_CONTROL_REGS_REVISION + ddr_phy_ctl_regs[i];
         *ptr++ = reg;
         chksum += reg;
-        val = *(volatile uint32_t *)reg;
+        // val = *(volatile uint32_t *)reg;
+        val = reg32_read((volatile uint32_t *)reg);
         *ptr++ = val;
         chksum += val;
     }
@@ -1609,8 +2031,9 @@ void iproc_save_shmoo_values(void)
         reg = (uint32_t)DDR_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE_RD_EN + ddr_phy_wl_regs[i];
         *ptr++ = reg;
         chksum += reg;
-        val = *(volatile uint32_t *)reg;
-        *ptr++ = val;
+        // val = *(volatile uint32_t *)reg;
+        val = reg32_read((volatile uint32_t *)reg);
+	*ptr++ = val;
         chksum += val;
     }
 #if (CONFIG_SHMOO_REUSE_DDR_32BIT || defined(CONFIG_NS_PLUS))
@@ -1619,8 +2042,9 @@ void iproc_save_shmoo_values(void)
 	        reg = (uint32_t)DDR_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE_RD_EN + ddr_phy_wl_regs[i];
 	        *ptr++ = reg;
 	        chksum += reg;
-	        val = *(volatile uint32_t *)reg;
-	        *ptr++ = val;
+	        // val = *(volatile uint32_t *)reg;
+		val = reg32_read((volatile uint32_t *)reg);
+		*ptr++ = val;
 	        chksum += val;
 	    }
 	}
@@ -1630,15 +2054,16 @@ void iproc_save_shmoo_values(void)
         reg = (uint32_t)DDR_DENALI_CTL_00 + ddr_phy_eccl_regs[i];
         *ptr++ = reg;
         chksum += reg;
-        val = *(volatile uint32_t *)reg;
-        *ptr++ = val;
+        // val = *(volatile uint32_t *)reg;
+        val = reg32_read((volatile uint32_t *)reg);
+	*ptr++ = val;
         chksum += val;
     }
 #endif
 
     /* Fill checksum and length */
-    buffer[sizeof(struct shmoo_sig_t) / 4] = chksum;
-    buffer[sizeof(struct shmoo_sig_t) / 4 + 1] = pairs;
+    buffer[3] = chksum;
+    buffer[4] = pairs;
     
     /* Write to flash */
     printf("Writing Shmoo values into flash .....\n");
@@ -1650,21 +2075,26 @@ void iproc_save_shmoo_values(void)
 
 #endif /* CONFIG_RUN_DDR_SHMOO2 && CONFIG_SHMOO_REUSE */
 
-#if !defined(CONFIG_NORTHSTAR)
+#if !(defined(CONFIG_NORTHSTAR))
 #include "asm/iproc/ddr40.h"
 #include "asm/iproc/shmoo_ddr40.h"
 #include "asm/iproc/ddr_bist.h"
+#include "shmoo_and28/shmoo_and28.h"
 
-
+#ifdef CONFIG_IPROC_DDR_ECC
 static int clear_ddr(uint32_t offset, uint32_t size)
 {
 	unsigned long start;
 	unsigned int i, val;
 
-	*(unsigned int *)(0x18010400) &= ~0x1;
+    reg32_write((uint32_t *)DDR_BistConfig,reg32_read((uint32_t *)DDR_BistConfig) & ~0x1);
 
     for( i = 0; i < 1000; i++);
+
+#if !defined(CONFIG_IPROC_P7)
 	reg32_write((volatile uint32_t *)DDR_DENALI_CTL_213, 0x00FFFFFF);
+#endif
+
 	reg32_write((volatile uint32_t *)DDR_BistConfig, 0x00000002);
 	reg32_write((volatile uint32_t *)DDR_BistConfig, 0x00000003);
 	reg32_write((volatile uint32_t *)DDR_BistConfig, 0x0000C003);
@@ -1712,19 +2142,95 @@ static int clear_ddr(uint32_t offset, uint32_t size)
 		printf("clear_ddr: Error occured\n");
 	return(1);
 }
+#endif /* CONFIG_IPROC_DDR_ECC */
+
+#if defined(CONFIG_SHMOO_AND28_REUSE)
+extern void restore_shmoo_config(and28_shmoo_config_param_t *shmoo_control_para);
+#endif
+
+#if defined(CONFIG_CYGNUS)
+static int simple_ddr_crc32_check(void)
+{
+	return 0;
+	register uint32_t crc_mcu = 0;
+	register uint32_t crc = 0, offset = 0;
+	register volatile uint32_t *buf = (uint32_t *)0x60000000;
+	register uint32_t len = 0x00100000;//in word
+
+	printf("Checking simple DDR CRC, word start 0x%p, len 0x%08x...\n", buf, len);
+	
+	for(offset=0; offset<len; offset++)
+	{
+		crc ^= *buf++;
+	}
+
+	crc_mcu = reg32_read((volatile uint32_t *)0x03012A00);
+
+	if(crc != crc_mcu)
+	{
+		printf("DDR CRC NOT match, old=0x%08x, new=0x%08x!\n", crc_mcu, crc);
+		return -1;
+	}
+	else
+	{
+		printf("DDR CRC 0x%08x, match!\n", crc);
+		return 0;
+	}
+}
+#endif
 
 void ddr_init2(void)
 {
 	int i;
 	volatile unsigned int val;
 	int ddr_type;
-	uint32_t params, connect, ovride, status, otp_status, sku_id, ddr_clk, dev_id;
-	uint32_t wire_dly[4] = {0};
+	uint32_t status, sku_id, ddr_clk, dev_id;
 	uint32_t unit = 0;
+	uint32_t skip_shmoo = 0;
+#if defined(CONFIG_CYGNUS)
+	uint32_t resume_entry = reg32_read((volatile uint32_t *)CRMU_IHOST_SW_PERSISTENT_REG4);
+	uint32_t pwrctli0 = reg32_read((volatile uint32_t *)IHOST_SCU_POWER_STATUS)  & 0x3;
+	skip_shmoo = reg32_read((volatile uint32_t *)CRMU_IHOST_POR_WAKEUP_FLAG) & 0x1;
+	volatile int temp=1;
+	
+	if(pwrctli0==2)
+	{
+		goto wakeup;
+	}
+	else if(pwrctli0==3)
+	{
+		skip_shmoo = 1;
+		reg32_write(IHOST_GTIM_GLOB_CTRL, reg32_read(IHOST_GTIM_GLOB_CTRL)| 0x1);
+	}
+#endif	/* defined(CONFIG_CYGNUS) */
+
+#if (defined(CONFIG_CYGNUS) || defined(CONFIG_GREYHOUND) || defined(CONFIG_SABER2))
+	and28_shmoo_dram_info_t sdi;
+	and28_shmoo_config_param_t config_param;
+#endif /* (defined(CONFIG_CYGNUS) || defined(CONFIG_GREYHOUND)) */
 
+#ifndef CONFIG_CYGNUS
 	dev_id = (reg32_read((volatile uint32_t *)ChipcommonA_ChipID)) & 0x0000ffff;
+#else
+    dev_id = 0x5800;
+    cygnus_phy_powerup();
+#endif	/* CONFIG_CYGNUS */
+
+#if (defined(CONFIG_HURRICANE2) || defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_GREYHOUND) || defined(CONFIG_SABER2))
+	sku_id = (reg32_read((volatile uint32_t *)CMIC_DEV_REV_ID)) & 0x0000ffff;
+#elif defined(CONFIG_CYGNUS)
+	sku_id = (reg32_read((volatile uint32_t *)ROM_S0_IDM_IO_STATUS) >> 8) & 0x0f;
+#else
+	sku_id = (reg32_read((volatile uint32_t *)ROM_S0_IDM_IO_STATUS) >> 2) & 0x03;
+#endif /* (defined(CONFIG_HURRICANE2) || defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_GREYHOUND)) */
+	/* See if it is KATANA2, KATANA2 doesn't have right chip ID in ChipcommonA_ChipID */
+	if(((sku_id & 0xfff0) == 0xa450) || ((sku_id & 0xfff0) == 0xb450) || sku_id == 0xb248) {
+		dev_id = 56450; /* KATANA2 */
+	}
+
 	printf("DEV ID = 0x%x\n", dev_id);
-#if defined(CONFIG_NS_PLUS)
+#if (defined(CONFIG_NS_PLUS))
+	uint32_t otp_status = 0;
 	/* get device id from OTP */
 	/* Write 0 to 0x18012120 (PAXB_0_CONFIG_IND_ADDR) */
 	reg32_write((volatile uint32_t *)PAXB_0_CONFIG_IND_ADDR, 0);
@@ -1732,7 +2238,7 @@ void ddr_init2(void)
 	dev_id = reg32_read((volatile uint32_t *)PAXB_0_CONFIG_IND_DATA) >> 16;
 	/* 0x8022:53022; 0x8023:53023; 0x8025:53025 */
 	printf("PCIE CFG DEV ID = 0x%x\n", dev_id);
-
+	if (otp_status) ;
 	for (i=8; i<=0xf; i++) {
 		status = get_otp_mem(i, &otp_status);
 		if (status) {
@@ -1741,22 +2247,32 @@ void ddr_init2(void)
 		}
 		printf("OTP offset(0x%x): 0x%x\n", i, otp_status);
 	}
+	ProgramCoreRailVoltageFromOTPAVSCode(1);
 	if (is_ddr_32bit()) {
 		printf("NSP25 32bit DDR\n");
 	}
 
 #endif /* (defined(CONFIG_NS_PLUS)) */
 
-
-#ifdef CONFIG_HURRICANE2
-	sku_id = (reg32_read((volatile uint32_t *)CMIC_DEV_REV_ID)) & 0x0000ffff;
-#else
-	sku_id = (reg32_read((volatile uint32_t *)ROM_S0_IDM_IO_STATUS) >> 2) & 0x03;
-#endif
 	printf("SKU ID = 0x%x\n", sku_id);
 
+#if defined(CONFIG_IPROC_P7)
+	val = reg32_read((volatile uint32_t *)DDR_S1_IDM_IO_STATUS) & 0x3;
+	if (val == 0) {
+		ddr_type = 1;
+	} else if (val == 1) {
+		ddr_type = 2;
+	} else {
+		printf("Unsupported DDR type: %d\n", val);
+		return;
+	}
+    printf("DDR type: DDR%d\n", (ddr_type == 1)? 3 : 4);
+#elif defined(CONFIG_CYGNUS)
+    ddr_type = 1;
+#else
 	ddr_type = reg32_read((volatile uint32_t *)DDR_S1_IDM_IO_STATUS) & 0x1; 
 	printf("DDR type: DDR%d\n", (ddr_type) ? 3 : 2);
+#endif /* defined(CONFIG_IPROC_P7) */
     
 	ddr_clk = get_ddr_clock(sku_id, ddr_type);
 	printf("MEMC 0 DDR speed = %dMHz\n", ddr_clk);
@@ -1767,17 +2283,110 @@ void ddr_init2(void)
 		return;
 	}
 
+#if defined(CONFIG_IPROC_P7)
+#if defined(CONFIG_SABER2) && defined(CONFIG_IPROC_EMULATION)
+  /* pll bypass */
+  reg32_write_masked((volatile uint32_t *)DDR_S2_IDM_IO_CONTROL_DIRECT, 0x00000080, 0x00000080);
+#endif
+
+	val = reg32_read((volatile uint32_t *)CRU_ddrphy_pwr_ctrl);
+	
+	/* assert power ON */
+	val |= 1 << CRU_ddrphy_pwr_ctrl__i_pwronin_phy;
+	reg32_write((volatile uint32_t *)CRU_ddrphy_pwr_ctrl, val);
+	
+	/* assert power OK */
+	__udelay(10);
+	val |= 1 << CRU_ddrphy_pwr_ctrl__i_pwrokin_phy;
+	reg32_write((volatile uint32_t *)CRU_ddrphy_pwr_ctrl, val);
+	
+	/* remove DFI isolation */
+	__udelay(150);
+	val &= ~(1 << CRU_ddrphy_pwr_ctrl__i_iso_phy_dfi);
+	reg32_write((volatile uint32_t *)CRU_ddrphy_pwr_ctrl, val);
+
+#if !defined(CONFIG_SABER2)
+	/* remove PHY register isolation */
+	val &= ~(1 << CRU_ddrphy_pwr_ctrl__i_iso_phy_regs);
+	reg32_write((volatile uint32_t *)CRU_ddrphy_pwr_ctrl, val);
+	
+	/* remove PLL isolation */
+	val &= ~(1 << CRU_ddrphy_pwr_ctrl__i_iso_phy_pll);
+	reg32_write((volatile uint32_t *)CRU_ddrphy_pwr_ctrl, val);
+	
+	/* de-assert reset */
+	__udelay(200);
+	val |= 1 << CRU_ddrphy_pwr_ctrl__i_hw_reset_n;
+	reg32_write((volatile uint32_t *)CRU_ddrphy_pwr_ctrl, val);
+
+	/* Wait for PHY power up */
+	for(i=0; i < 0x19000; i++) {
+		val = reg32_read((volatile uint32_t *)DDR_S1_IDM_IO_STATUS);
+		if((val & (1 << DDR_S1_IDM_IO_STATUS__o_phy_pwrup_rsb)))
+			break;
+	}
+	if(i == 0x19000) {
+		printf("DDR PHY not power up\n");
+		return;
+	}
+#endif
+#endif /* defined(CONFIG_IPROC_P7) */
+
+#if defined(CONFIG_CYGNUS) || defined(CONFIG_IPROC_P7)
 	/* Get the DDR S1 and S2 out of reset */
 	reg32_write((volatile uint32_t *)DDR_S1_IDM_RESET_CONTROL, 0);
 	reg32_write((volatile uint32_t *)DDR_S2_IDM_RESET_CONTROL, 0);
+
+#if !defined(CONFIG_SABER2)
+	__udelay(1000);
+	reg32_write((volatile uint32_t *)DDR_S0_IDM_RESET_CONTROL, 0);
 	/* Set the ddr_ck to 400 MHz, 2x memc clock */
 	reg32_write_masked((volatile uint32_t *)DDR_S1_IDM_IO_CONTROL_DIRECT, 0xfff << 16, /*ddr_clk*/ 0x190 << 16);     
+#endif
+#else
+    reg32_write((volatile uint32_t *)DDR_S1_IDM_RESET_CONTROL, 0);
+    reg32_write((volatile uint32_t *)DDR_S2_IDM_RESET_CONTROL, 0);
+    /* Set the ddr_ck to 400 MHz, 2x memc clock */
+    reg32_write_masked((volatile uint32_t *)DDR_S1_IDM_IO_CONTROL_DIRECT, 0xfff << 16, /*ddr_clk*/ 0x190 << 16);
+#endif /* defined(CONFIG_CYGNUS) || defined(CONFIG_IPROC_P7) */
+
+#if defined(CONFIG_IPROC_P7)
+	if (is_ddr_32bit()) {
+		reg32_write_masked(
+			(volatile uint32_t *)DDR_S2_IDM_IO_CONTROL_DIRECT, 
+				1 << DDR_S2_IDM_IO_CONTROL_DIRECT__mode_32b,
+				1 << DDR_S2_IDM_IO_CONTROL_DIRECT__mode_32b
+				);
+	}
+
+	/* Wait for PHY ready */
+	for(i=0; i < 0x19000; i++) {
+		val = reg32_read((volatile uint32_t *)DDR_S1_IDM_IO_STATUS);
+		if((val & (1 << DDR_S1_IDM_IO_STATUS__o_phy_ready)))
+			break; /* DDR PHY is up */
+	}
+
+	if(i == 0x19000) {
+		printf("DDR PLL not locked\n");
+		return;
+	}
+
+	/* Get the DDR S0 out of reset */
+	reg32_write((volatile uint32_t *)DDR_S0_IDM_RESET_CONTROL, 0);
+#endif /* defined(CONFIG_IPROC_P7) */
+
+#if defined(CONFIG_SABER2)
+   // Power up DQ/DQS receivers: PDN0~3=0, DAC0~1=32
+   reg32_write_masked((volatile uint32_t *)DDR_PHY_CONTROL_REGS_VREF_DAC_CONTROL, 0xffffffff, 0x0001f820);
+#endif
 
 	/* Wait for DDR PHY up */
 	for(i=0; i < 0x19000; i++) {
 		val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
-		if( val != 0)
+		if( val != 0) {
+            printf("PHY revision version: 0x%08x\n", val);
 			break; /* DDR PHY is up */
+        }
 	}
 	
 	if(i == 0x19000) {
@@ -1792,8 +2401,8 @@ void ddr_init2(void)
 	/* ECC =1, DRAM type = 1 i.e DDR3, AL = 3, write recovery = 0, write latency = 9, CAS read latency = 13 */
 	reg32_write((volatile uint32_t *)DDR_PHY_CONTROL_REGS_STRAP_CONTROL2, 0x0036048d);
 	val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
-#endif
-#if defined(CONFIG_HURRICANE2)
+#endif /* (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2)) */
+#if (defined(CONFIG_HURRICANE2))
 	/* mhz = 0x190, 16 bit bus, 16 bit chip width, 1.35v vddq, 8Gb chip size, jedec type = 25 (DDR3-1866M) */
 	reg32_write((volatile uint32_t *)DDR_PHY_CONTROL_REGS_STRAP_CONTROL, 0x0190d4f3);
 	val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
@@ -1801,8 +2410,8 @@ void ddr_init2(void)
 	/* DRAM type = 1 i.e DDR3, AL = 3, write recovery = 0, write latency = 9, CAS read latency = 13 */
 	reg32_write((volatile uint32_t *)DDR_PHY_CONTROL_REGS_STRAP_CONTROL2, 0x0016048d);
 	val = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_REVISION);
-#endif
-#if defined(CONFIG_NS_PLUS)
+#endif /* (defined(CONFIG_HURRICANE2)) */
+#if (defined(CONFIG_NS_PLUS))
 	if (is_ddr_32bit()) {
 		/* mhz = 0x190, 32 bit bus, 16 bit chip width, 1.35v vddq, 8Gb chip size, jedec type = 25 (DDR3-1866M) */
 		reg32_write((volatile uint32_t *)DDR_PHY_CONTROL_REGS_STRAP_CONTROL, 0x0190c4f3);
@@ -1822,38 +2431,231 @@ void ddr_init2(void)
 	}
 #endif /* (defined(CONFIG_NS_PLUS)) */
 
-	printf("ddr_init2: Calling soc_ddr40_set_shmoo_dram_config\n");
 #if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2))
+	printf("ddr_init2: Calling soc_ddr40_set_shmoo_dram_config\n");
 	soc_ddr40_set_shmoo_dram_config(unit, ((uint32) 0xFFFFFFFF) >> (32 - 2));
-#elif defined(CONFIG_HURRICANE2)
+#elif (defined(CONFIG_HURRICANE2))
+	printf("ddr_init2: Calling soc_ddr40_set_shmoo_dram_config\n");
 	soc_ddr40_set_shmoo_dram_config(unit, ((uint32) 0xFFFFFFFF) >> (32 - 1));
-#elif defined(CONFIG_NS_PLUS)
+#elif (defined(CONFIG_NS_PLUS))
+	printf("ddr_init2: Calling soc_ddr40_set_shmoo_dram_config\n");
 	if (is_ddr_32bit())
 		soc_ddr40_set_shmoo_dram_config(unit, ((uint32) 0xFFFFFFFF) >> (32 - 2));
 	else
 		soc_ddr40_set_shmoo_dram_config(unit, ((uint32) 0xFFFFFFFF) >> (32 - 1));
+#elif defined(CONFIG_CYGNUS)
+	if(!skip_shmoo)
+	{
+		printf("ddr_init2: Calling soc_and28_shmoo_dram_info_set\n");
+	    /* Cygnus clock speed:
+    	 *
+	     *    clock       rate
+    	 *    400         800
+	     *    533         1066
+    	 *    667         1333
+	     *    800         1600
+    	 */
+
+	    sdi.ref_clk_mhz = 50;
+    	sdi.ctl_type = SHMOO_AND28_CTL_TYPE_1;
+	    sdi.dram_type = SHMOO_AND28_DRAM_TYPE_DDR3;
+    	sdi.dram_bitmap = 0x00000001;
+	    sdi.interface_bitwidth = 16;
+    	sdi.num_columns = 1024;
+	    sdi.num_rows = 65536;
+    	sdi.num_banks = 8;
+	    sdi.refi = 7800;
+    	sdi.command_parity_latency = 0;
+	    sdi.data_rate_mbps = (ddr_clk == 667) ? 1333 : (ddr_clk * 2);
+    	sdi.sim_system_mode = 0;
+	    printf("ddr_init2: Calling soc_and28_shmoo_dram_info_set\n");
+    	soc_and28_shmoo_dram_info_set(unit, &sdi);
+	}
+	else
+	{
+		printf("DeepSleep wakeup: ddr init bypassed 1\n");
+	}
+#elif defined(CONFIG_GREYHOUND)
+	printf("ddr_init2: Calling soc_and28_shmoo_dram_info_set\n");
+	sdi.data_rate_mbps = (ddr_clk == 667) ? 1333 : (ddr_clk * 2);
+	sdi.ref_clk_mhz = 50;
+	sdi.ctl_type = SHMOO_AND28_CTL_TYPE_1;
+	sdi.dram_type = SHMOO_AND28_DRAM_TYPE_DDR3;
+	sdi.dram_bitmap = 0x00000001;
+	if (is_ddr_32bit()) {
+		sdi.interface_bitwidth = 32;
+	} else {
+  #if defined(CONFIG_IPROC_DDR_ECC)
+		/* Initialize 32-bit PHY for 16+2 bits with ECC */
+		sdi.interface_bitwidth = 32;
+  #else
+		sdi.interface_bitwidth = 16;
+  #endif /* defined(CONFIG_IPROC_DDR_ECC) */
+	}
+	sdi.num_columns = (1 << CONFIG_DDR_COL_BITS);
+	sdi.num_rows = (1 << CONFIG_DDR_ROW_BITS);
+	sdi.num_banks = (1 << CONFIG_DDR_BANK_BITS);
+	sdi.refi = 7800;
+	sdi.command_parity_latency = 0;
+	sdi.sim_system_mode = 0;
+    
+	soc_and28_shmoo_dram_info_set(unit, &sdi);
+#elif defined(CONFIG_SABER2)
+    printf("ddr_init2: Calling soc_and28_shmoo_dram_info_set\n");
+    sdi.data_rate_mbps = ddr_clk * 2;
+    sdi.ref_clk_mhz = 50;
+    sdi.ctl_type = SHMOO_AND28_CTL_TYPE_1;
+    sdi.dram_type = SHMOO_AND28_DRAM_TYPE_DDR3;
+    sdi.dram_bitmap = 0x00000001;
+    if (is_ddr_32bit()) {
+        sdi.interface_bitwidth = 32;
+    } else {
+#if defined(CONFIG_IPROC_DDR_ECC)
+		/* Initialize 32-bit PHY for 16+2 bits with ECC */
+		sdi.interface_bitwidth = 32;
 #else
-#error "DRAM config is not set"
+		sdi.interface_bitwidth = 16;
 #endif
-
+	}
+	sdi.num_columns = (1 << CONFIG_DDR_COL_BITS);
+	sdi.num_rows = (1 << CONFIG_DDR_ROW_BITS);
+	sdi.num_banks = (1 << CONFIG_DDR_BANK_BITS);
+	sdi.refi = 7800;
+	sdi.command_parity_latency = 0;
+	sdi.sim_system_mode = 0;
+  
+	soc_and28_shmoo_dram_info_set(unit, &sdi);
+#else
+#error "DRAM config is not set"
+#endif /* (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2)) */
+
+#if defined(CONFIG_SABER2)
+  unsigned int r, bl, maxbl = 2;  /* if (DDR_BUS_WIDTH == 32 bits) maxbl=4 else maxbl = 2 */
+  unsigned int rd_en_cyc, steps_in_bit, step_size, total_steps0, total_steps1;
+  
+  /* DDR PHY DFI auto calibration */
+  reg32_write_masked((volatile uint32_t *)DDR_PHY_CONTROL_REGS_STANDBY_CONTROL, 0x00000001, 0x0);
+  reg32_write_masked((volatile uint32_t *)DDR_PHY_CONTROL_REGS_DFI_CNTRL, 0x00000005, 0x0);
+  
+  /* When DDR_BUS_WIDTH != 32 */
+  reg32_write_masked((volatile uint32_t *)DDR_PHY_CONTROL_REGS_DRAM_CONFIG, 0x06000000, 0x06000000);
+  r = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_DRAM_CONFIG);
+  printf("DDR_PHY_CONTROL_REGS_DRAM_CONFIG = 0x%x\n", r);
+  
+  /* Adjust PHY PLL for the specified frequency */
+  /* Power up DQ/DQS receivers: PDN0~3=0, DAC0~1=32 */
+  reg32_write_masked((volatile uint32_t *)DDR_PHY_CONTROL_REGS_VREF_DAC_CONTROL, 0x0001ffff, 0x00000820);
+  
+  /* Perform VDL Calibration */
+  reg32_write((volatile uint32_t *)DDR_PHY_CONTROL_REGS_VDL_CALIBRATE, 0x00000019);
+  for (i = 0; i < 4000; i++) {
+      if ((reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_VDL_CALIB_STATUS1) & 0x00000001) == 1) {
+         break;
+      }
+  }
+  if (i == 4000) {
+		printf("VDL calibration timeout!\n");
+		return;
+	}
+	reg32_write((volatile uint32_t *)DDR_PHY_CONTROL_REGS_VDL_CALIBRATE, 0x00000000);
+	/* CKE adjustment */
+	r = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_VDL_CONTROL_CKE);
+	r |= 0x10000;
+	r += 2;
+	reg32_write((volatile uint32_t *)DDR_PHY_CONTROL_REGS_VDL_CONTROL_CKE, r);
+	/* PAR adjustment */
+	reg32_write((volatile uint32_t *)DDR_PHY_CONTROL_REGS_VDL_CONTROL_PAR, 0x00000000);
+	r = reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_VDL_CONTROL_PAR);
+	r |= 0x10000;
+	r += 2;
+	reg32_write((volatile uint32_t *)DDR_PHY_CONTROL_REGS_VDL_CONTROL_PAR, r);
+	
+	/* Perform VDL Override */
+	r = (reg32_read((volatile uint32_t *)DDR_PHY_CONTROL_REGS_VDL_CALIB_STATUS1) >> 8) & 0x3ff;
+  printf("----- cal_steps = 0x%x\n", r);
+  step_size = 25000 / r;
+  if ((step_size % 10) >= 5)
+    step_size = ((step_size / 10) + 1);
+  else 
+    step_size = ((step_size / 10) + 0);
+  steps_in_bit = (2500 + step_size) / (step_size * 2);
+  if (steps_in_bit > 160) 
+    steps_in_bit = 160;
+  rd_en_cyc = 0;
+  for (bl = 0; bl < maxbl; bl++) {
+  	total_steps0 = reg32_read((volatile uint32_t *)(DDR_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0 + 0x200 * bl));
+  	total_steps1 = reg32_read((volatile uint32_t *)(DDR_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1 + 0x200 * bl));
+  	total_steps0 = (total_steps0 + (10 / step_size) + (2 * 18));
+    total_steps1 = (total_steps1 + (10 / step_size) + (2 * 18));
+    reg32_write((volatile uint32_t *)(DDR_PHY_BYTE_LANE_0_RD_EN_DLY_CYC + 0x200 * bl), 0x10100 | rd_en_cyc | rd_en_cyc << 4);
+    reg32_write((volatile uint32_t *)(DDR_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0 + 0x200 * bl), 0x10000|(total_steps0 % steps_in_bit));
+    reg32_write((volatile uint32_t *)(DDR_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1 + 0x200 * bl), 0x10000|(total_steps1 % steps_in_bit));
+  }
+  
+  /* Perform calibration ZQ */
+  reg32_write((volatile uint32_t *)DDR_PHY_CONTROL_REGS_DRIVE_PAD_CTL, 31 | (31 << 5) | (6 <<10) | (6 << 15));
+  for (bl = 0; bl < maxbl; bl++) {
+    reg32_write((volatile uint32_t *)(DDR_PHY_BYTE_LANE_0_DRIVE_PAD_CTL + 0x200 * bl), 0x00031bff);
+  }
+  r = reg32_read((volatile uint32_t *)DDR_PHY_BYTE_LANE_0_DQSP_DRIVE_PAD_CTL);
+  r |= 31 | (31 << 5);
+  reg32_write((volatile uint32_t *)DDR_PHY_BYTE_LANE_0_DQSP_DRIVE_PAD_CTL, r);
+  for (bl = 0; bl < maxbl; bl++) {
+    reg32_write((volatile uint32_t *)(DDR_PHY_BYTE_LANE_0_DQSP_DRIVE_PAD_CTL + 0x200 * bl), 0x00031bff);
+    reg32_write((volatile uint32_t *)(DDR_PHY_BYTE_LANE_0_DQSN_DRIVE_PAD_CTL + 0x200 * bl), 0x00031bff);
+    reg32_write((volatile uint32_t *)(DDR_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL + 0x200 * bl),
+                   31 | (31 << 5) | (31 <<10) | (31 << 15));
+  }
+  /* PHY misc init */
+  reg32_write_masked((volatile uint32_t *)DDR_PHY_CONTROL_REGS_STATIC_PAD_CTL, 0x08000000, 0x08000000);
+  for (bl = 0; bl < maxbl; bl++) {
+    reg32_write((volatile uint32_t *)(DDR_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE + 0x200 * bl), 0x000001c2);
+  }
+  
+#elif !(defined(CONFIG_CYGNUS) || defined(CONFIG_GREYHOUND))
 	printf("ddr_init2: Calling soc_ddr40_phy_calibrate\n");
-    if(soc_ddr40_phy_calibrate(unit, 0, DDR_PHYTYPE_ENG, 0) != SOC_E_NONE) {
+	if(soc_ddr40_phy_calibrate(unit, 0, DDR_PHYTYPE_ENG, 0) != SOC_E_NONE) {
 
 		printf("DDR phy calibration failed\n");
 		return;
+	} else {
+		printf("DDR phy calibration passed\n");
+    }
+#else
+	if(!skip_shmoo)
+	{
+		printf("ddr_init2: Calling soc_and28_shmoo_phy_init\n");
+		if(soc_and28_shmoo_phy_init(unit, 0) != SOC_E_NONE) {
+
+			printf("DDR PHY initialization failed\n");
+			return;
+		}
+	}
+	else
+	{
+		printf("DeepSleep wakeup: ddr init bypassed 2\n");
 	}
+#endif /* !(defined(CONFIG_CYGNUS) || defined(CONFIG_GREYHOUND)) */
+
+#if defined(CONFIG_SABER2)
+  reg32_write_masked((volatile uint32_t *)DDR_PHY_CONTROL_REGS_STANDBY_CONTROL, 0x00000008, 0x0);
+#endif
 
-ddr_cntrl_prog:
 #ifdef CONFIG_RUN_DDR_SHMOO
 	printf("PHY register dump after DDR PHY init\n");
 	dump_phy_regs();
 #endif
+
+#if !(defined(CONFIG_SABER2) && defined(CONFIG_IPROC_EMULATION))
 	printf("Programming controller register\n");
 	ddr_init_regs(ddr_init_tab);
+#endif
+
+    ddr_type = 1;
 	if(ddr_type) {
 		/* DDR3 */	
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_NS_PLUS) || \
-	defined(CONFIG_KATANA2))
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_NS_PLUS) || defined(CONFIG_KATANA2) \
+	|| defined(CONFIG_CYGNUS) || defined(CONFIG_GREYHOUND)  || defined(CONFIG_SABER2))
 		switch(ddr_clk) {
 			case 333:
 				ddr_init_regs(ddr3_init_tab_667);
@@ -1861,9 +2663,11 @@ ddr_cntrl_prog:
 			case 400:
 				ddr_init_regs(ddr3_init_tab_800);
 				break;
+/*
 			case 467:
 				ddr_init_regs(ddr3_init_tab_933);
 				break;
+*/
 			case 533:
 				ddr_init_regs(ddr3_init_tab_1066);
 				break;
@@ -1877,7 +2681,8 @@ ddr_cntrl_prog:
 		}
 #else
 		ddr_init_regs(ddr3_init_tab_667);
-#endif
+#endif	/* (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_NS_PLUS) || defined(CONFIG_KATANA2) \ */
+		/* 	|| defined(CONFIG_CYGNUS) || defined(CONFIG_GREYHOUND))	                                                     */
 	}
 	else {
 		/* DDR2 */	
@@ -1895,7 +2700,7 @@ ddr_cntrl_prog:
 		}
 #else
 		ddr_init_regs(ddr2_init_tab);
-#endif
+#endif	/* (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_KATANA2)) */
 	}
 #if defined(CONFIG_HELIX4)
 	if(ddr_clk == 750) {
@@ -1903,57 +2708,185 @@ ddr_cntrl_prog:
 		val = val * 750 / 800;
 		reg32_write_masked((volatile uint32_t *)DDR_DENALI_CTL_22, 0x3fff, val);     
 	}
-#endif
-#if defined(CONFIG_NS_PLUS)
+#endif /* defined(CONFIG_HELIX4) */
+#if (defined(CONFIG_NS_PLUS))
 	if (is_ddr_32bit()) {
 		reg32_set_bits(  (volatile uint32_t *)DDR_DENALI_CTL_85, 0x02000000);
 		reg32_clear_bits((volatile uint32_t *)DDR_DENALI_CTL_86, 0x0e000000);
 		reg32_clear_bits((volatile uint32_t *)DDR_DENALI_CTL_87, 0x00000100);
 	}
 #endif /* (defined(CONFIG_NS_PLUS)) */
-turnon:
+
 	/* Start the DDR */
 	reg32_set_bits((volatile uint32_t *)DDR_DENALI_CTL_00, 0x01);
 
-poll_ddr_ctrl:
+
+#if !(defined(CONFIG_CYGNUS) || defined(CONFIG_GREYHOUND))
+#if defined(CONFIG_SABER2)
+  /*---------- TO DO in the future ----------*/
+  if ((skip_shmoo == 0) || (unit == 0))
+  {  /* this statement is to reduce compile error */
+  }
+#else
 	while(!(reg32_read((volatile uint32_t *)DDR_DENALI_CTL_89) & 0x100));
-	printf("ddr_init2: Calling soc_ddr40_shmoo_ctl\n");
+	printf("ddr_init2: MemC initialization complete\n");
 	
 	/* Srini - Write to DDR controller registers */
-	*(unsigned int *)(0x18010354) = 0x00FFFFFF;
-	*(unsigned int *)(0x18010400) = 0x00000002;
-	*(unsigned int *)(0x18010400) = 0x00000003;
-	*(unsigned int *)(0x18010400) = 0x0000C003;
-	*(unsigned int *)(0x18010408) = 0x00000020;
-#ifdef CONFIG_RUN_DDR_SHMOO2
-
-#ifdef CONFIG_SHMOO_REUSE
-    if (try_restore_shmoo()) 
-#endif /* CONFIG_SHMOO_REUSE */
-    {
-        soc_ddr40_shmoo_ctl(unit, 0, 2, 2, 0, 1);
-    }
-#if defined(CONFIG_IPROC_DDR_ECC)
+	reg32_write((unsigned int *)0x18010354, 0x00FFFFFF);
+	reg32_write((unsigned int *)0x18010400, 0x00000002);
+	reg32_write((unsigned int *)0x18010400, 0x00000003);
+	reg32_write((unsigned int *)0x18010400, 0x0000C003);
+	reg32_write((unsigned int *)0x18010408, 0x00000020);
+    
+  #ifdef CONFIG_SHMOO_REUSE
+	if (try_restore_shmoo()) 
+  #endif /* CONFIG_SHMOO_REUSE */
+	{
+		printf("ddr_init2: Calling soc_ddr40_shmoo_ctl\n");
+		soc_ddr40_shmoo_ctl(unit, 0, 2, 2, 0, 1);
+	}
+#endif  /* defined(CONFIG_SABER2) */
+#else
+	if(!skip_shmoo)
+	{
+		while(!(reg32_read((volatile uint32_t *)DDR_DENALI_CTL_175) & 0x100));
+		printf("ddr_init2: MemC initialization complete\n");
+
+		reg32_set_bits((unsigned int *)DDR_DENALI_CTL_177, 0x00100);
+		reg32_write((unsigned int *)DDR_BistConfig, 0x00000002);
+		reg32_write((unsigned int *)DDR_BistConfig, 0x00000003);
+		reg32_write((unsigned int *)DDR_BistConfig, 0x0000C003);
+		reg32_write((unsigned int *)DDR_BistGeneralConfigurations, 0x00000020);
+
+		printf("ddr_init2: Calling soc_and28_shmoo_ctl\n");
+  #if defined(CONFIG_SHMOO_AND28_REUSE)
+		if (is_shmoo_data_valid()) {
+			restore_shmoo_config(&config_param);
+			soc_and28_shmoo_ctl(unit, 0, SHMOO_AND28_SHMOO_RSVP, 0, 1, SHMOO_AND28_ACTION_RESTORE, &config_param);
+			
+    #if defined(CONFIG_SHMOO_REUSE_MEMTEST_LENGTH)
+			/* Perform memory test to see if the stored SHMMO values work */
+			if (CONFIG_SHMOO_REUSE_MEMTEST_LENGTH > 0) {
+				/* Release DDR to AXI for memory testing */
+				reg32_clear_bits((volatile uint32_t *)DDR_BistConfig, 1 << DDR_BistConfig__axi_port_sel);
+
+				printf("Running simple memory test ..... ");
+				i = simple_memory_test(
+					(void *)CONFIG_SHMOO_REUSE_MEMTEST_START,
+					CONFIG_SHMOO_REUSE_MEMTEST_LENGTH);
+				if (i) {
+					printf("failed!\n");
+					
+					/* Connect DDR controller to BIST for SHMOO */
+					reg32_set_bits((volatile uint32_t *)DDR_BistConfig, 1 << DDR_BistConfig__axi_port_sel);
+					
+					/* Perform full SHMOO since stored values don't work */
+					soc_and28_shmoo_ctl(unit, 0, SHMOO_AND28_SHMOO_RSVP, 0, 1, SHMOO_AND28_ACTION_RUN, &config_param);
+				} else {
+					printf("OK\n");
+				}
+			}
+    #endif /* defined(CONFIG_SHMOO_REUSE_MEMTEST_LENGTH) */
+			
+		} else {
+			soc_and28_shmoo_ctl(unit, 0, SHMOO_AND28_SHMOO_RSVP, 0, 1, SHMOO_AND28_ACTION_RUN, &config_param);
+		}
+  #else
+		soc_and28_shmoo_ctl(unit, 0, SHMOO_AND28_SHMOO_RSVP, 0, 1, SHMOO_AND28_ACTION_RUN, &config_param);
+  #endif /* CONFIG_SHMOO_AND28_REUSE */
+	}
+#endif /* !(defined(CONFIG_CYGNUS) || defined(CONFIG_GREYHOUND)) */
+	else
+	{
+		printf("DeepSleep wakeup: ddr init bypassed 3\n");
+	}
+
+#if defined(CONFIG_IPROC_P7) && defined(CONFIG_IPROC_DDR_ECC)
+	printf("Enabling DDR ECC correcting and reporting\n");
+    
+	/* Clear DDR ECC interrupts if any */
+	reg32_set_bits((volatile uint32_t *)DDR_DENALI_CTL_177, 
+		DDR_DENALI_CTL_177_ECC_MASK);
+
+	/* Disable auto corruption */
+	reg32_set_bits((volatile uint32_t *)DDR_DENALI_CTL_148, 
+		1 << DDR_DENALI_CTL_148__ECC_DISABLE_W_UC_ERR);
+
+	/* Enable ECC correction and reporting */
+	reg32_set_bits((volatile uint32_t *)DDR_DENALI_CTL_146,
+		1 << DDR_DENALI_CTL_146__ECC_EN);
+
+	/* Initialize DDR so that uninitialized reads won't report ecc error */
+	clear_ddr(0, CONFIG_PHYS_SDRAM_1_SIZE);
+#elif defined(CONFIG_IPROC_DDR_ECC)
 	printf("Enabling DDR ECC reporting\n");
 	/* Clear DDR interrupts if any */
 	*(unsigned int *)(DDR_DENALI_CTL_213) = 0x00FFFFFF;
 	__udelay(1000);
 	reg32_set_bits((volatile uint32_t *)DDR_DENALI_CTL_67, 0x01); //Disable auto correction
 	reg32_set_bits((volatile uint32_t *)DDR_DENALI_CTL_66, 0x01); //Enable ECC
-
+    
 	clear_ddr(0, CONFIG_PHYS_SDRAM_1_SIZE);
 	printf("Enabling DDR ECC correction\n");
 	reg32_set_bits((volatile uint32_t *)DDR_DENALI_CTL_66, 1 << 1); //Enable ECC correction
-#endif
-#else
-	ddr_phy_ctl_regs_ovrd(ddr_phy_ctl_ovrd_tab);
-	ddr_phy_wl_regs_ovrd(ddr_phy_wl0_tab);
-#endif
+#endif /* defined(CONFIG_IPROC_P7) && defined(CONFIG_IPROC_DDR_ECC) */
+
 	/* Release DDR slave port to AXI */
 	reg32_clear_bits((volatile uint32_t *)DDR_BistConfig, 1 << DDR_BistConfig__axi_port_sel);
-	printf("DDR Tune Completed\n");
+	printf("DDR Interface Ready\n");
 
 	//dump_phy_regs();
+
+#if defined(CONFIG_CYGNUS)
+	/* SRX */
+	if(skip_shmoo)
+	{
+		// Enter Self refresh (dummy) , to keep Denali happy
+		reg32_write((unsigned int *)DDR_DENALI_CTL_56, 0x0a050505);
+
+		__udelay(200);
+		printf("\nDDR self refresh exit \n");
+
+		// Assert DFI request from PHY to mask any interaction with MEMC
+		reg32_write((unsigned int *)DDR_PHY_CONTROL_REGS_DFI_CNTRL, 0xe0);
+		reg32_write((unsigned int *)DDR_PHY_CONTROL_REGS_DFI_CNTRL, 0);
+
+		// Exit Self refresh
+		reg32_write((unsigned int *)DDR_DENALI_CTL_56, 0x09050505);
+	}
+
+	/* Clear iHOST flag */
+	reg32_write((unsigned int *)CRMU_IHOST_POR_WAKEUP_FLAG, 0x0);
+	printf("IHOST POR WAKEUP FLAG cleared\n");
+
+//	iproc_dump_ddr_regs();
+
+	if(pwrctli0==0)
+		return;
+	
+wakeup:
+	printf("Wakeup from %s\n", pwrctli0==2 ? "SLEEP":"DEEPSLEEP");
+
+	if(pwrctli0==3)
+	{
+		__udelay(10000);
+		if(simple_ddr_crc32_check()<0)
+		{
+			printf("Die...\n");
+			while(1);
+		}
+	}
+	
+	/* CRMU_IHOST_SW_PERSISTENT_REG4 = 0x03024c64 */
+	asm(
+		"movw	r3, #0x4c64\n"
+		"movt	r3, #0x0302\n"
+		"ldr 	r5, [r3]\n"
+		"mov	lr, #0\n"
+		"mov	pc, r5\n");
+#endif /* defined(CONFIG_CYGNUS) */
+
 }
 
 #endif /*!(defined(CONFIG_NORTHSTAR)) */
+
diff --git a/arch/arm/cpu/armv7/iproc/genpll.c b/arch/arm/cpu/armv7/iproc/genpll.c
old mode 100644
new mode 100755
index dd678b0..9792dc4
--- a/arch/arm/cpu/armv7/iproc/genpll.c
+++ b/arch/arm/cpu/armv7/iproc/genpll.c
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved. 
- *  
- * Permission to use, copy, modify, and/or distribute this software for any 
- * purpose with or without fee is hereby granted, provided that the above 
- * copyright notice and this permission notice appear in all copies. 
- *  
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY 
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION 
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
+ * $Copyright Open Broadcom Corporation$ 
  */
 #include <config.h>
 #include <common.h>
@@ -46,14 +34,18 @@ unsigned int genpll_clk_tab[] = {
 		0xffffffff
 };
 #endif
+#if defined(CONFIG_GREYHOUND)
+unsigned int genpll_clk_tab[] = {
+	/*  mode,	ndiv,	MDIV
+						0	1	2	3	4	5 */
+		0,		96,		12,	0,	80,	6,	5,	40,		/* 400 MHz AXI */
+		1,		96,		12,	0,	80,	12,	5,	40,		/* 200 MHz AXI */
+		0xffffffff
+};
+#endif
 
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2))
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_GREYHOUND))
 
-/*
-** 
-** 
-**
-*/
 uint32_t iproc_config_genpll(uint32_t mode)
 {
    volatile uint32_t addr;
@@ -71,6 +63,11 @@ uint32_t iproc_config_genpll(uint32_t mode)
 		i += 8;
 	}
 
+   // Clear Load_en Channel3 & Channel4
+   rdata = reg32_read((volatile uint32_t *)IPROC_WRAP_GEN_PLL_CTRL3);
+   rdata &= 0xffc0ffff;
+   reg32_write((volatile uint32_t *)IPROC_WRAP_GEN_PLL_CTRL3,rdata);
+
 	// Write fast_lock =1
    rdata = reg32_read((volatile uint32_t *)IPROC_WRAP_GEN_PLL_CTRL0);
    rdata |= (1<<IPROC_WRAP_GEN_PLL_CTRL0__FAST_LOCK);
@@ -110,7 +107,7 @@ uint32_t iproc_config_genpll(uint32_t mode)
 
 uint32_t iproc_get_axi_clk(uint32_t refclk)
 {
-#if defined(CONFIG_HURRICANE2_EMULATION)
+#if defined(CONFIG_HURRICANE2_EMULATION) || defined(CONFIG_IPROC_EMULATION)
 	return(IPROC_AXI_CLK); /* return the emulator clock defined in configuration file */
 #else
    uint32_t ndiv, mdiv, pdiv;
@@ -130,7 +127,7 @@ uint32_t iproc_get_axi_clk(uint32_t refclk)
    if(mdiv == 0)
 	   mdiv = 1 << IPROC_WRAP_GEN_PLL_CTRL2__CH3_MDIV_WIDTH;
 
-	return((refclk / (pdiv * mdiv)) * ndiv);
+	return refclk * ndiv / pdiv / mdiv;
 #endif
 }
 #endif
@@ -138,9 +135,36 @@ uint32_t iproc_get_axi_clk(uint32_t refclk)
 #if defined(CONFIG_KATANA2)
 uint32_t iproc_get_axi_clk(uint32_t refclk)
 {
+#if defined(CONFIG_KATANA2_EMULATION)
+	return(IPROC_AXI_CLK); /* return the emulator clock defined in configuration file */
+#else
 	return(495000000);
+#endif
+}
+#endif
+
+#if defined(CONFIG_SABER2)
+uint32_t iproc_get_axi_clk(uint32_t refclk)
+{
+#if defined(CONFIG_IPROC_EMULATION)
+    return (IPROC_AXI_CLK); /* return clock defined in configuration file */
+#else
+    uint32_t ndiv, mdiv, pdiv;
+
+    ndiv = (reg32_read((volatile uint32_t *)IPROC_WRAP_IPROC_PLL_CTRL_3) >> IPROC_WRAP_IPROC_PLL_CTRL_3__NDIV_INT_R) &
+			((1 << IPROC_WRAP_IPROC_PLL_CTRL_3__NDIV_INT_WIDTH) -1);
+
+    mdiv = (reg32_read((volatile uint32_t *)IPROC_WRAP_IPROC_PLL_CTRL_5) >> IPROC_WRAP_IPROC_PLL_CTRL_5__CH1_MDIV_R) &
+			((1 << IPROC_WRAP_IPROC_PLL_CTRL_5__CH1_MDIV_WIDTH) -1);
+
+    pdiv = (reg32_read((volatile uint32_t *)IPROC_WRAP_IPROC_PLL_CTRL_1) >> IPROC_WRAP_IPROC_PLL_CTRL_1__PDIV_R) &
+			((1 << IPROC_WRAP_IPROC_PLL_CTRL_1__PDIV_WIDTH) -1);
+
+    return refclk * ndiv / pdiv / mdiv;
+#endif
 }
 #endif
+
 #if defined(CONFIG_NS_PLUS)
 unsigned int genpll_clk_tab[] = {
 	/* VCO Frequency 1500MHz */
@@ -228,6 +252,7 @@ uint32_t iproc_get_axi_clk(uint32_t refclk)
 #endif
 
 #if defined(CONFIG_NORTHSTAR)
+/* Fixme: Currently using fixed values, to be improved later */
 uint32_t iproc_get_axi_clk(uint32_t refclk)
 {
 		unsigned int sku_id;
@@ -241,14 +266,18 @@ uint32_t iproc_get_axi_clk(uint32_t refclk)
 }
 #endif
 
-
-
+#if !defined(CONFIG_CYGNUS)
 uint32_t iproc_get_uart_clk(uint32_t uart)
 {
 	uint32_t uartclk, uartclkovr, uartclksel; 
-
+	
+#if defined(CONFIG_SABER2)
+    uartclk = iproc_get_axi_clk(CONFIG_IPROC_PLL_REF_CLK) / 4; /* APB clock */
+#else
 	uartclk = iproc_get_axi_clk(CONFIG_SYS_REF_CLK) / 4; /* APB clock */
+#endif
 
+#if (!defined(CONFIG_GREYHOUND) && !defined(CONFIG_SABER2))
 	if (uart < 2) {
 		/* CCA UART */
 		uartclkovr = (reg32_read((volatile uint32_t *)ChipcommonA_CoreCtrl) >> ChipcommonA_CoreCtrl__UARTClkOvr) & 0x01;
@@ -267,5 +296,41 @@ uint32_t iproc_get_uart_clk(uint32_t uart)
 			}
 		}
 	}
+#endif /* !CONFIG_GREYHOUND && !CONFIG_SABER2 */
+    
 	return(uartclk);
 }
+#endif
+
+#if defined(CONFIG_CYGNUS)
+
+uint32_t iproc_get_axi_clk(uint32_t refclk)
+{
+   uint32_t ndiv, mdiv, pdiv, axi, num;
+
+   ndiv = reg32_read((volatile uint32_t *)IHOST_PROC_CLK_PLLARMC) & 0x000000ff;
+   if(ndiv == 0) {
+       ndiv = 1;
+   }
+
+   pdiv = (reg32_read((volatile uint32_t *)IHOST_PROC_CLK_PLLARMA) >> IHOST_PROC_CLK_PLLARMA__pllarm_pdiv_R) & 
+              ((1 << IHOST_PROC_CLK_PLLARMA__pllarm_pdiv_WIDTH) - 1);
+
+   if(pdiv == 0) {
+       pdiv = 1;
+   }
+
+   mdiv = reg32_read((volatile uint32_t *)IHOST_PROC_CLK_PLLARMCTRL5) & 0x000000ff;
+   if(mdiv == 0) {
+       mdiv = 1;
+   }
+  
+   num = (refclk / (pdiv * mdiv)) * ndiv;
+        /* round to nearest 1000000 */
+   axi = ((num+500000)/1000000)*1000000;
+   printf("%s: refclk(0x%x), ndiv(0x%x) pdiv(0x%x) mdiv(0x%x): AXICLK:(0x%x)\n",
+                __FUNCTION__, refclk, ndiv, pdiv, mdiv, axi);
+   return(axi);
+}
+
+#endif /* Enf of CONFIG_CYGNUS */
diff --git a/arch/arm/cpu/armv7/iproc/gic.c b/arch/arm/cpu/armv7/iproc/gic.c
index af049e3..b1a8034 100644
--- a/arch/arm/cpu/armv7/iproc/gic.c
+++ b/arch/arm/cpu/armv7/iproc/gic.c
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved. 
- *  
- * Permission to use, copy, modify, and/or distribute this software for any 
- * purpose with or without fee is hereby granted, provided that the above 
- * copyright notice and this permission notice appear in all copies. 
- *  
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY 
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION 
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
+ * $Copyright Open Broadcom Corporation$ 
  */
 #include <config.h>
 #include <common.h>
@@ -205,6 +193,7 @@ void gic_init(void)
 	return;
 }
 
+#ifdef CONFIG_USE_IRQ
 void do_irq (struct pt_regs *pt_regs)
 {
 	intr_data_struct intdata;
@@ -233,6 +222,7 @@ void do_irq (struct pt_regs *pt_regs)
 
 	ci_reg_ptr->eoir |= intdata.intid;
 }
+#endif
 
 void irq_install_handler (int irq, interrupt_handler_t handle_irq, void *data)
 {
@@ -244,10 +234,12 @@ void irq_install_handler (int irq, interrupt_handler_t handle_irq, void *data)
 		IRQ_HANDLER[0][irq].m_data = data;
 		IRQ_HANDLER[0][irq].m_func = handle_irq;
 	}
+#if (IPROC_NUM_CPUS > 1)
 	else if(cur_cpuid == 1) {
 		IRQ_HANDLER[1][irq].m_data = data;
 		IRQ_HANDLER[1][irq].m_func = handle_irq;
 	}
+#endif
 }
 
 int arch_interrupt_init (void)
diff --git a/arch/arm/cpu/armv7/iproc/iproc-spl.c b/arch/arm/cpu/armv7/iproc/iproc-spl.c
old mode 100644
new mode 100755
index 9c6dc5f..72d730f
--- a/arch/arm/cpu/armv7/iproc/iproc-spl.c
+++ b/arch/arm/cpu/armv7/iproc/iproc-spl.c
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved. 
- *  
- * Permission to use, copy, modify, and/or distribute this software for any 
- * purpose with or without fee is hereby granted, provided that the above 
- * copyright notice and this permission notice appear in all copies. 
- *  
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY 
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION 
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
+ * $Copyright Open Broadcom Corporation$ 
  */
 #include <common.h>
 #include <spl.h>
@@ -49,6 +37,8 @@ void board_init_f(ulong dummy)
     /* Console initialization */
     preloader_console_init();
     timer_init();
+	/* added for fixing boot failure in "change_ddr_clock" */
+	iproc_config_armpll(1000); 
     dram_init();
     board_init_r(NULL, 0);
 }
diff --git a/arch/arm/cpu/armv7/iproc/iproc_nand.c b/arch/arm/cpu/armv7/iproc/iproc_nand.c
old mode 100644
new mode 100755
index 4357e12..dc14845
--- a/arch/arm/cpu/armv7/iproc/iproc_nand.c
+++ b/arch/arm/cpu/armv7/iproc/iproc_nand.c
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved. 
- *  
- * Permission to use, copy, modify, and/or distribute this software for any 
- * purpose with or without fee is hereby granted, provided that the above 
- * copyright notice and this permission notice appear in all copies. 
- *  
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY 
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION 
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
+ * $Copyright Open Broadcom Corporation$ 
  */
 
 /******************************************************************************
@@ -25,6 +13,8 @@
 *   Intended for use with u-boot .
 *****************************************************************************/
 
+// #define NAND_INFO 1
+
 #include <asm/errno.h>
 
 #include <config.h>
@@ -114,6 +104,19 @@ struct nand_strap_type_t {
     uint16_t    spare_size;
 };
 
+#if defined(CONFIG_CYGNUS)
+static const struct nand_strap_type_t iproc_nand_strap_types[] = {
+    { 0,  0, 16 },
+    { 0,  1, 16 },
+    { 0,  4, 16 },
+    { 0,  8, 16 },
+    { 0,  8, 27 },
+    { 0, 12, 27 },
+    { 1, 24, 27 },
+    { 1, 30, 27 },
+    { 1, 40, 45 },
+};
+#else
 static const struct nand_strap_type_t iproc_nand_strap_types[] = {
     { 0,  0, 16 },
     { 0, 15, 16 },
@@ -125,10 +128,17 @@ static const struct nand_strap_type_t iproc_nand_strap_types[] = {
     { 1, 15, 27 },
     { 1, 20, 45 },
 };
+#endif
 
+#if defined(CONFIG_CYGNUS)
+static const uint32_t iproc_nand_strap_page_sizes[] = { 
+    1024, 2048, 4096, 8192 
+};
+#else
 static const uint32_t iproc_nand_strap_page_sizes[] = { 
     2048, 2048, 4096, 8192 
 };
+#endif
 
 #define CHIPSELECT_MAX_COUNT    2
 
@@ -178,17 +188,31 @@ INAND *inand = NULL;
 /***************************************************************************
  * Functions to read and write IPROC registers
  *******************************i******************************************/
-static uint32_t readl(uint32_t a) 
+
+static uint32_t readl(uint32_t a)
 {
-    volatile uint32_t *reg = (uint32_t *)a; 
-    return (*reg); 
+    volatile uint32_t *reg = (uint32_t *)a;
+    uint32_t rc = *reg;
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
+    // printf("nand readl(0x%x) = 0x%x\n",a,rc);
+    return (rc);
+#else
+    // printf("nand readl(0x%x) = 0x%x\n",a,swap_u32(rc));
+    return swap_u32(rc);
+#endif
 }
 
-static uint32_t writel(uint32_t a, uint32_t b) 
+static uint32_t writel(uint32_t a, uint32_t b)
 {
-    volatile uint32_t *reg = (uint32_t *)a; 
+    volatile uint32_t *reg = (uint32_t *)a;
+    // printf("nand writel reg 0x%x = 0x%x\n",a,b);
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
     *reg = b;
-    return *reg; 
+    return *reg;
+#else
+    *reg = swap_u32(b);
+    return swap_u32(*reg);
+#endif
 }
 
 /***************************************************************************
@@ -210,6 +234,23 @@ static void iproc_nand_ecc_status_cmd (
     return;
 }
 
+#if 0
+/***************************************************************************
+ * iproc_nand_spare_area_read
+ *******************************i******************************************/
+static void iproc_nand_spare_area_read (
+    int      bytes,
+    uint32_t *dst) 
+{
+    int byte_count = bytes & ~0x03;
+    int n = 0;
+
+    while ((n*4 < byte_count) && (n < SPARE_AREA_WORDS))  
+        *dst = readl(IPROC_R_NAND_SPARE_AREA_READ_OFS_0 + n++);
+
+    return;
+}
+#endif
 
 /***************************************************************************
  * iproc_check_nand_done
@@ -233,6 +274,7 @@ static int iproc_check_nand_done(
 		mask = mask & ~(reg_data & mask);
         current_time = get_timer(0);
 		reg_data = readl(IPROC_R_NAND_INTFC_STATUS_ADDR);
+#ifndef CONFIG_IPROC_EMULATION
         /* Check if the operation has timed out */
         if ((current_time - start_time) >= timeout){
 #ifdef IPROC_NAND_WARNING
@@ -240,6 +282,7 @@ static int iproc_check_nand_done(
 #endif
             return NAND_TIMEOUT_ERROR;
         }
+#endif
 		/* Check if the operation has failed */
         if (reg_data & IPROC_NAND_INTFC_STATUS_READY_BIT) {
             if (reg_data & IPROC_NAND_INTFC_STATUS_FAIL_BIT) {
@@ -344,7 +387,6 @@ static int iproc_nand_config (
 	 * It is needed because timers are not yet configured 
 	 */
     printf(" ");
-
 	if (cs >= CHIPSELECT_MAX_COUNT)
 		return NAND_CONFIG_PARAM;
 
@@ -357,13 +399,19 @@ static int iproc_nand_config (
 
     /* Is the NAND initialization a success */
     reg_data = readl(IPROC_R_NAND_INIT_STATUS_ADDR);
-    if (!(reg_data & IPROC_NAND_INIT_SUCCESS_BIT))
+    if (!(reg_data & IPROC_NAND_INIT_SUCCESS_BIT)) {
+        printf("Autoconfig Fail\n");
         return NAND_AUTOCONFIG_FAIL;
+    }
 
     /* read device ID */
+    printf("NAND_FLASH_DEVICE_ID_ADDR = %X\n", IPROC_R_NAND_FLASH_DEVICE_ID_ADDR);
 	reg_data = readl(IPROC_R_NAND_FLASH_DEVICE_ID_ADDR);
-	if (!reg_data)
+    printf("Done that\n");
+	if (!reg_data) {
+        printf("NAND AutoConfig Fail!\n");
         return NAND_AUTOCONFIG_FAIL;
+    }
 	inand[cs].device_id = reg_data;
 #ifdef NAND_INFO
 	printf("cs %d dev_id word 0 %x\n", cs, reg_data);
@@ -408,7 +456,7 @@ static int iproc_nand_config (
         uint32_t oobsize;
 		int n;
 
-        uint8_t param_page[256 * 4];
+        uint32_t param_page[256];
         struct nand_onfi_params *params = (struct nand_onfi_params *)param_page;
 
         /* check if ONFI flash */
@@ -433,10 +481,21 @@ static int iproc_nand_config (
             name[20] = 0;
             printf("%s, ", name);
         }
-        
+#ifdef CONFIG_IPROC_EMULATION
+        inand[cs].page_size = iproc_chip_list[i].writesize;
+        inand[cs].block_size = iproc_chip_list[i].erasesize;
+        inand[cs].device_size = iproc_chip_list[i].chipsize;
+        inand[cs].device_width = 8;
+        oobsize = iproc_chip_list[i].oobsize;
+        inand[cs].spare_area_bytes = oobsize / (inand[cs].page_size / IPROC_FLASH_CACHE_SIZE);
+        block_addr = 3;
+        col_addr = 2;
+#else
+  #if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
         /* Calculate device config based on the ONFI parameters */
         inand[cs].page_size = params->byte_per_page;
         inand[cs].block_size = params->pages_per_block * inand[cs].page_size;
+        printf("blocks per lun: %x lun count: %x\n",params->blocks_per_lun, params->lun_count);
         block_count = params->blocks_per_lun * params->lun_count;
         inand[cs].device_size = 
             block_count * (inand[cs].block_size / 1024) / 1024;
@@ -446,8 +505,38 @@ static int iproc_nand_config (
             oobsize / (inand[cs].page_size / IPROC_FLASH_CACHE_SIZE);
         block_addr = params->addr_cycles & 0x0f;
         col_addr = (params->addr_cycles >> 4) & 0x0f;
-            
+  #else
+        // because of the way the onfi parms are byte ordered we
+        // let readl swap the bytes, then unflip what we need
+        // otherwise the field positions of the single bytes 
+        // and words in params will be wrong
+
+        /* Calculate device config based on the ONFI parameters */
+        inand[cs].page_size = swap_u32(params->byte_per_page);
+        inand[cs].block_size = swap_u32(params->pages_per_block) * inand[cs].page_size;
+        printf("blocks per lun: %x lun count: %x\n",params->blocks_per_lun, params->lun_count);
+        block_count = swap_u32(params->blocks_per_lun) * params->lun_count;
+        inand[cs].device_size = 
+            block_count * (inand[cs].block_size / 1024) / 1024;
+        inand[cs].device_width = (swap_u16(params->features) & 1)? 16 : 8;
+        oobsize = swap_u16(params->spare_bytes_per_page);
+        inand[cs].spare_area_bytes = 
+            oobsize / (inand[cs].page_size / IPROC_FLASH_CACHE_SIZE);
+        block_addr = params->addr_cycles & 0x0f;
+        col_addr = (params->addr_cycles >> 4) & 0x0f;
+  #endif
+#endif            
 #ifdef NAND_INFO
+        {
+            char *cp = &inand[cs];
+            int i;
+            printf("dumping inand[cs=%d] addr[%X]\n",cs,cp);
+            for (i=0;i<sizeof(INAND);i++) {
+                printf("%02x ",*cp++);
+                if ((i != 0) && (i % 8 == 0)) printf("\n");
+            }
+        }
+            
         printf("\nONFI info: device %dMB, page %dB, oobsize %dB, block %dKB, \n"
                  "           col-addr %d, row-addr %d, %s\n", 
                inand[cs].device_size,
@@ -497,18 +586,17 @@ static int iproc_nand_config (
         return NAND_AUTOCONFIG_FAIL;
 	}
     
-	/* Read NAND strap settings */
+	/* Read NAND strap settings  */ 
 	reg_data = readl(IPROC_R_STRAPS_CONTROL_ADDR);
 	strap_type = (reg_data & IPROC_NAND_STRAP_TYPE_MASK) >> IPROC_NAND_STRAP_TYPE_SHIFT;
-    strap_page = (reg_data & IPROC_NAND_STRAP_PAGE_MASK) >> IPROC_NAND_STRAP_PAGE_SHIFT;
-    
+	strap_page = (reg_data & IPROC_NAND_STRAP_PAGE_MASK) >> IPROC_NAND_STRAP_PAGE_SHIFT;
     /* Validate strap settings */
 #ifdef NAND_INFO
     printf("Found strap type 0x%x strap page 0x%x\n", strap_type, strap_page);
 #endif
     if (strap_type == 0 || 
         strap_type >= sizeof(iproc_nand_strap_types) / sizeof(struct nand_strap_type_t) ||
-        iproc_nand_strap_types[strap_type].spare_size >= inand[cs].spare_area_bytes ||
+        iproc_nand_strap_types[strap_type].spare_size > inand[cs].spare_area_bytes ||
         iproc_nand_strap_page_sizes[strap_page] != inand[cs].page_size) {
         
         /* Strap options are invalid */
@@ -546,6 +634,10 @@ static int iproc_nand_config (
 
 	reg_data |= ecc_level << IPROC_NAND_ECC_LEVEL_SHIFT; 
 	reg_data |= inand[cs].spare_area_bytes;
+#ifdef ENABLE_NAND_SUBPAGE
+        reg_data |=  1 << 26;   //PARTIAL_PAGE_EN
+        reg_data |=  1 << 28;   //FAST_PGM_RDIN
+#endif
     writel(REG_ACC_CONTROL(cs), reg_data);
 #ifdef NAND_INFO
 	printf("REG_ACC_CONTROL %x spare_area_bytes %x ecc_level %x eccbytes %x steps %x\n", 
@@ -704,19 +796,20 @@ static int _iproc_nand_one_page_read(
         status =  iproc_check_nand_done(NAND_TIMEOUT, IPROC_NAND_CACHE_VALID_BIT);
         if (status != NAND_STATUS_OK)
             return status;
-
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 		/* Change Little Endian mode before reading data */
 		reg_data = readl (IPROC_R_IDM_IDM_IO_CONTROL_DIRECT);
 		writel (IPROC_R_IDM_IDM_IO_CONTROL_DIRECT, reg_data | IPROC_NAND_IDM_IO_CONTROL_APB_LE_MODE_BIT);
-
+#endif
         /* flash is ready: read word by word from the cache */
         for ( j = 0 ; j < (IPROC_FLASH_CACHE_SIZE / 4) ; j++) {
             *(dst++) = readl((IPROC_R_NAND_FLASH_CACHE_0_ADDR + j*4));
         }
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 		/* Revert Little Endian bit */
 		reg_data = readl (IPROC_R_IDM_IDM_IO_CONTROL_DIRECT);
 		writel (IPROC_R_IDM_IDM_IO_CONTROL_DIRECT, reg_data & ~IPROC_NAND_IDM_IO_CONTROL_APB_LE_MODE_BIT);
-
+#endif
         page_addr += IPROC_FLASH_CACHE_SIZE;
     }
 
@@ -726,7 +819,7 @@ static int _iproc_nand_one_page_read(
         reg_data = readl(IPROC_R_NAND_UNCORR_ERROR_ADDRESS_ADDR);
 #ifdef IPROC_NAND_WARNING
 		printf("%d ecc_errors after reading %llx:%x\n", ecc_errors, page_addr - page_size, reg_data);
-#endif	
+#endif
 	}
 
 	if (ecc_errors)
@@ -748,6 +841,10 @@ static int _iproc_nand_page_read(
 	uint32_t read_len = 0;
 	uint32_t data_read = 0;
 
+#if 0	
+    if (data_len > inand[cs].page_size)
+        iproc_nand_ecc_set_config(cs, IPROC_NAND_PREFETCH_EN);
+#endif	
 	while (data_read < data_len) {
 		/* read a full page by default */
 		read_len = inand[cs].page_size;
@@ -762,6 +859,10 @@ static int _iproc_nand_page_read(
 		dst_addr += inand[cs].page_size;
 		page_addr += inand[cs].page_size;
 	}
+#if 0	
+    if (data_len > inand[cs].page_size)
+        iproc_nand_ecc_set_config(cs, 0); 
+#endif	
 	return rv;
 }
 
@@ -812,19 +913,20 @@ static int _iproc_nand_page_program(
         /* set address before writing data to cache */
         writel(IPROC_R_NAND_CMD_EXT_ADDRESS_ADDR, (cs << 16) | ((page_addr >> 32) & 0xFFFF));
         writel(IPROC_R_NAND_CMD_ADDRESS_ADDR, (uint32_t)page_addr);
-
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 		/* Change Little Endian mode before writing data */
 		reg_data = readl (IPROC_R_IDM_IDM_IO_CONTROL_DIRECT);
 		writel (IPROC_R_IDM_IDM_IO_CONTROL_DIRECT, reg_data | IPROC_NAND_IDM_IO_CONTROL_APB_LE_MODE_BIT);
-
+#endif
         /* write the flash cache word by word */
         for (j = 0 ; j <  (IPROC_FLASH_CACHE_SIZE / 4) ; j++) {
             writel((IPROC_R_NAND_FLASH_CACHE_0_ADDR + j*4), *(src + j));
         }
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 		/* Revert Little Endian bit */
 		reg_data = readl (IPROC_R_IDM_IDM_IO_CONTROL_DIRECT);
 		writel (IPROC_R_IDM_IDM_IO_CONTROL_DIRECT, reg_data & ~IPROC_NAND_IDM_IO_CONTROL_APB_LE_MODE_BIT);
-        
+#endif
         /* Clear WP (Write Protect) bit */
         reg_data = readl(IPROC_R_NAND_CS_NAND_SELECT_ADDR);
         writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data & ~IPROC_NAND_WRITE_PROCTECT_BIT);
@@ -969,6 +1071,19 @@ static int iproc_nand_block_bad(struct mtd_info *mtd, loff_t ofs, int getchip)
 #endif
 	}
 
+	
+	/*There might be ECC error with PAGE_READ command, so reset ECC error if any*/
+	{
+		size_t ecc_errors = 0;	
+		iproc_nand_ecc_status_cmd (&ecc_errors);
+		if (ecc_errors) {
+			reg_data = readl(IPROC_R_NAND_UNCORR_ERROR_ADDRESS_ADDR);
+#ifdef IPROC_NAND_DEBUG_CALLS
+			printf("%s..:%s..:%d ecc_errors when reading at %x\n", __FILE__, __func__, ecc_errors, reg_data);
+#endif
+		}	
+	}
+
     reg_data = readl(IPROC_R_NAND_SPARE_AREA_READ_OFS_0);
 	if ((reg_data & mask) != mask) {
 #ifdef NAND_INFO
@@ -976,19 +1091,31 @@ static int iproc_nand_block_bad(struct mtd_info *mtd, loff_t ofs, int getchip)
 #endif
 		return 1;
 	}
+	
+	/*restore register IPROC_R_NAND_SPARE_AREA_WRITE_OFS_0 to default */
+	writel(IPROC_R_NAND_SPARE_AREA_WRITE_OFS_0, 0xffffffff);
+     
 	return 0;
 }
 
 static int iproc_nand_mark_bad(struct mtd_info *mtd, loff_t ofs)
 {
-    uint32_t reg_data;
-    uint32_t block = (unsigned long)ofs;
-    int status;
-
+		
 #ifdef IPROC_NAND_DEBUG_CALLS
-    printf("%s: called block %x \n", __func__, block); 
+    printf("%s: called block %x \n", __func__, (unsigned long)ofs); 
 #endif
 
+#if 1
+    printf("this operation is not supported\n"); 
+#else
+	uint32_t reg_data;		
+	int status;
+	uint32_t block = (unsigned long)ofs;
+	if (block % inand[0].block_size) {
+		printf("address not aligned to a block boundary\n");
+		return NAND_BLOCK_ALIGN;
+	}	
+
     writel(IPROC_R_NAND_CMD_ADDRESS_ADDR, block);
 
     /* Clear WP (Write Protect) bit */
@@ -1010,6 +1137,7 @@ static int iproc_nand_mark_bad(struct mtd_info *mtd, loff_t ofs)
     /* Set back WP (Write Protect) bit */
     reg_data = readl(IPROC_R_NAND_CS_NAND_SELECT_ADDR);
     writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data | IPROC_NAND_WRITE_PROCTECT_BIT);
+#endif
 
 	return 0;
 }
@@ -1267,6 +1395,8 @@ static int nand_dev_ready(struct mtd_info *mtd)
 	return _iproc_nand_dev_ready();
 }
 
+extern void iproc_nand_iomux(int);
+
 /* ======================== Public Functions =============================== */
 int board_nand_init(struct nand_chip *nand)
 {
@@ -1278,10 +1408,14 @@ int board_nand_init(struct nand_chip *nand)
 #ifdef IPROC_NAND_DEBUG_CALLS
     printf("%s: called\n", __func__);
 #endif
+
+#if defined(CONFIG_CYGNUS)
+    iproc_nand_iomux(1);
+#endif
 	/* Initialize the contorller parameters */
     rv = iproc_nand_init(cs);
     if (rv) {
-        printf(KERN_ERR "iProc NAND chip could not be initialized\n");
+        printf(KERN_ERR "rv=%d iProc NAND chip could not be initialized\n", rv);
         return -EIO;
     }
 
@@ -1296,8 +1430,11 @@ int board_nand_init(struct nand_chip *nand)
     this->chip_delay = 100;
 
     this->dev_ready = nand_dev_ready;
+#ifdef ENABLE_NAND_SUBPAGE
+    this->options = NAND_NO_AUTOINCR | NAND_SKIP_BBTSCAN;
+#else
     this->options = NAND_NO_SUBPAGE_WRITE | NAND_NO_AUTOINCR | NAND_SKIP_BBTSCAN;
-
+#endif
     this->cmd_ctrl = iproc_nand_cmd_ctrl;
     this->cmdfunc = iproc_nand_command;
 
@@ -1359,7 +1496,8 @@ int iproc_nand_init(
 
     /* Global initialization */
     if (inand == NULL) {
-        
+
+#if !defined(CONFIG_IPROC_P7) || !CONFIG_IPROC_P7
         /* read the strap information first to see if it supports NAND */
         reg_data = readl(ROM_S0_IDM_IO_STATUS);
         if (((reg_data & IPROC_IDM_SKU_MASK) >> IPROC_IDM_SKU_SHIFT) == IDM_SKU_BCM953010) {
@@ -1367,6 +1505,7 @@ int iproc_nand_init(
             printf("NAND not supported on this iProc board\n");
             return NAND_NOT_SUPPORTED;
         }
+#endif /* !CONFIG_IPROC_P7 */
 
         inand = (INAND *)malloc (sizeof(INAND) * CHIPSELECT_MAX_COUNT);
         if (!inand) {
@@ -1381,17 +1520,25 @@ int iproc_nand_init(
             return NAND_ALLOC;
         }
         memset(mlocal, 0, sizeof(struct mtd_local));
-        
+/////#ifdef CONFIG_IPROC_SPL
+////#ifndef CONFIG_SPL_BUILD
         /* Take the NAND block out of reset */
         writel(IPROC_R_IDM_IDM_RESET_CONTROL_ADDR, 0x1);
         writel(IPROC_R_IDM_IDM_RESET_CONTROL_ADDR, 0x0);
         reg_data = readl(IPROC_R_NAND_CS_NAND_SELECT_ADDR);
-         
+        
+        /* try to send null cmd */
+        writel(IPROC_R_NAND_CMD_EXT_ADDRESS_ADDR, 0 << 16);
+        writel(IPROC_R_NAND_CMD_START_ADDR, 0);
+		    udelay(10000);
+
         /* Set the autoconfig bit */
         reg_data &= ~(IPROC_NAND_SELECT_AUTO_DEVICE_ID_BIT | IPROC_NAND_SELECT_AUTO_DEVID_CONFIG_BIT);
         writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data);
         reg_data |= IPROC_NAND_SELECT_AUTO_DEVICE_ID_BIT | IPROC_NAND_SELECT_AUTO_DEVID_CONFIG_BIT;
         writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data);
+////#endif
+////#endif
     }
 
     if (inand && (inand[cs].initialized == IPROC_INIT_MAGIC))
@@ -1408,7 +1555,6 @@ int iproc_nand_init(
         reg_data &= ~IPROC_NAND_SELECT_AUTO_DEVID_CONFIG_BIT;
         writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data);
     }
-
 	return rv;
 }
 
@@ -1448,8 +1594,25 @@ int iproc_nand_onfi_parameter_pages(
         param_page[128+i] = readl((IPROC_R_NAND_FLASH_CACHE_0_ADDR + i*4));
     }
 
-    /* convert data to little endian since hardware stores it in Cache as big endian */
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
     iproc_endian_swap (param_page , (128+64));
+#endif
+
+#if 0
+    printf("--------------------------- page data --------------------\n");
+    for (i=0;i<128+64;i+=8) {
+        printf("0x%X 0x%X 0x%X 0x%X 0x%X 0x%X 0x%X 0x%X\n",
+            param_page[i],
+            param_page[i+1],
+            param_page[i+2],
+            param_page[i+3],
+            param_page[i+4],
+            param_page[i+5],
+            param_page[i+6],
+            param_page[i+7]);
+    }
+    printf("--------------------------- end --------------------\n");
+#endif
 
     return NAND_STATUS_OK;
 }
diff --git a/arch/arm/cpu/armv7/iproc/iproc_nand.c.merge b/arch/arm/cpu/armv7/iproc/iproc_nand.c.merge
new file mode 100755
index 0000000..f42fed4
--- /dev/null
+++ b/arch/arm/cpu/armv7/iproc/iproc_nand.c.merge
@@ -0,0 +1,1892 @@
+/*
+ * $Copyright Open Broadcom Corporation$ 
+ */
+
+/******************************************************************************
+*  @file    iproc_nand.c
+*
+*  @brief   One NAND driver for bcm53010
+*
+*  @note
+*
+*   These routines provide basic NAND functionality. 
+*   Intended for use with u-boot .
+*****************************************************************************/
+
+#include <asm/errno.h>
+
+#include <config.h>
+#include <common.h>
+#include <nand.h>
+
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/nand.h>
+
+#include <asm/arch/iproc_regs.h>
+#include <asm/iproc/reg_utils.h>
+#include <asm/arch/bcmutils.h>
+#include <asm/iproc/iproc_nand.h>
+
+#define REG_ACC_CONTROL(cs)    (cs ? IPROC_R_NAND_ACC_CONTROL_CS1_ADDR : IPROC_R_NAND_ACC_CONTROL_CS0_ADDR)
+#define REG_CONFIG(cs)         (cs ? IPROC_R_NAND_CONFIG_CS1_ADDR : IPROC_R_NAND_CONFIG_CS0_ADDR)
+
+static const uint32_t page_sizes[]   = {512, 2048, 4096, 8192 };
+static const uint32_t block_sizes[]  = {8, 16, 128, 256, 512, 1024, 2048};
+static const uint32_t device_sizes[] = {4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 
+                                            4096, 8192, 16384, 32768, 65536, 131072};
+struct iproc_nand_chips {
+    const char     *name;
+    uint8_t        id[7];
+    int            idlen; /* usable */
+    unsigned int   chipsize; /* MB */
+    unsigned int   writesize; /* B */
+    unsigned int   erasesize; /* B */
+    unsigned int   oobsize; /* B per page */
+    int            chipoptions;
+    int            badblockpos;
+};
+#define IPROC_NAND_CHIP_LIST_COUNT   14
+
+static struct iproc_nand_chips iproc_chip_list[IPROC_NAND_CHIP_LIST_COUNT] = {
+    {"Micron MT29F2G08ABAEA",  
+		{0x2C, 0xDA, 0x90, 0x95, 0x64, 0x00, 0x00}, 
+		5, 0x00100, 2048, 0x020000, 64},                                                          
+    {"Micron MT29F8G08ABACA",  
+		{0x2C, 0xD3, 0x90, 0xA6, 0x64, 0x00, 0x00}, 
+		5, 0x00400, 4096, 0x040000, 224},                                                          
+    {"Micron MT29F16G08ABABA", 
+		{0x2C, 0x48, 0x00, 0x26, 0x89, 0x00, 0x00}, 
+		5, 0x00800, 4096, 0x080000, 224},                                                          
+    {"Micron MT29F16G08CBABA", 
+		{0x2C, 0x48, 0x04, 0x46, 0x85, 0x00, 0x00}, 
+		5, 0x00800, 4096, 0x100000, 224},                                                          
+    {"Micron MT29F16G08CBACA", 
+		{0x2C, 0x48, 0x04, 0x4A, 0xA5, 0x00, 0x00}, 
+		5, 0x00800, 4096, 0x100000, 224},                                                          
+    {"Micron MT29F16G08MAA",   
+		{0x2C, 0xD5, 0x94, 0x3E, 0x74, 0x00, 0x00}, 
+		5, 0x00800, 4096, 0x080000, 218},                                                          
+    {"Micron MT29F32G08CBACA", 
+		{0x2C, 0x68, 0x04, 0x4A, 0xA9, 0x00, 0x00}, 
+		5, 0x01000, 4096, 0x100000, 224},                                                          
+    {"Micron MT29F64G08CBAAA", 
+		{0x2C, 0x88, 0x04, 0x4B, 0xA9, 0x00, 0x00}, 
+		5, 0x02000, 8192, 0x200000, 448},                                                          
+    {"Micron MT29F256G08CJAAA",
+		{0x2C, 0xA8, 0x05, 0xCB, 0xA9, 0x00, 0x00}, 
+		5, 0x08000, 8192, 0x200000, 448},     
+    {"Micron MT29F1G08ABADA",
+		{0x2C, 0xF1, 0x80, 0x95, 0x02, 0x00, 0x00}, 
+		4, 0x00400, 2048, 0x020000, 224},                                                          
+    {"Micron MT29F1G08ABBDA",
+		{0x2C, 0xA1, 0x80, 0x15, 0x02, 0x00, 0x00}, 
+		4, 0x00400, 2048, 0x020000, 224},                                                          
+    {"Micron MT29F1G16ABBDA",
+		{0x2C, 0xB1, 0x80, 0x55, 0x02, 0x00, 0x00}, 
+		4, 0x00400, 2048, 0x020000, 224},     
+    {"Micron MT29F128G08AJAAA",
+		{0x2C, 0x88, 0x01, 0xA7, 0xA9, 0x00, 0x00}, 
+		5, 0x02000, 8192, 0x100000, 448},
+	{NULL,}
+};
+
+/* ECC bytes required per 512B */
+static const uint8_t nand_iproc_ecc_bytes[] = {
+    0, 2, 4, 6, 7, 9, 11, 13, 14, 16, 18, 20, 21, 23, 25,
+    27 /* or 3 if SPARE_AREA_SIZE == 16 and SECTOR_SIZE_1K == 0*/
+};
+
+struct nand_strap_type_t {
+    uint8_t     sector_1k;
+    uint8_t     ecclevel;
+    uint16_t    spare_size;
+};
+
+#if defined(CONFIG_CYGNUS)
+static const struct nand_strap_type_t iproc_nand_strap_types[] = {
+    { 0,  0, 16 },
+    { 0,  1, 16 },
+    { 0,  4, 16 },
+    { 0,  8, 16 },
+    { 0,  8, 27 },
+    { 0, 12, 27 },
+    { 1, 24, 27 },
+    { 1, 30, 27 },
+    { 1, 40, 45 },
+};
+#else
+static const struct nand_strap_type_t iproc_nand_strap_types[] = {
+    { 0,  0, 16 },
+    { 0, 15, 16 },
+    { 0,  4, 16 },
+    { 0,  8, 16 },
+    { 0,  8, 27 },
+    { 0, 12, 27 },
+    { 1, 12, 27 },
+    { 1, 15, 27 },
+    { 1, 20, 45 },
+};
+#endif
+
+#if defined(CONFIG_CYGNUS)
+static const uint32_t iproc_nand_strap_page_sizes[] = { 
+    1024, 2048, 4096, 8192 
+};
+#else
+static const uint32_t iproc_nand_strap_page_sizes[] = { 
+    2048, 2048, 4096, 8192 
+};
+#endif
+
+#define CHIPSELECT_MAX_COUNT    2
+
+#define IPROC_INIT_MAGIC        0xbeefdead
+
+#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
+
+#define NAND_TIMEOUT 5 
+
+#define IPROC_NAND_WARNING
+#define SIMULATE_MTD_CALLS
+#undef IPROC_NAND_DEBUG_CALLS
+
+typedef struct {
+    uint32_t initialized;
+    uint32_t onfi_status;
+    uint32_t onfi_param;
+    uint32_t device_id; 
+    uint32_t block_size; 
+    uint32_t page_size;
+    uint32_t device_size; 
+    uint32_t device_width; 
+    uint32_t spare_area_bytes;
+    uint32_t col_addr_bytes;
+    uint32_t blk_addr_bytes;
+    uint32_t full_addr_bytes;
+    uint32_t sector_size_1k;
+    struct iproc_nand_chips *chip_ptr;
+} INAND;
+
+struct mtd_local {
+    uint32_t last_cmd;
+    uint32_t last_byte;
+    uint32_t last_word;
+    uint32_t last_addr;
+};
+
+struct mtd_local *mlocal;
+
+static struct nand_ecclayout iproc_nand_oob_layout;
+
+/* global NAND structure */
+INAND *inand = NULL;
+
+/* ======================== Static Functions ============================== */
+
+/***************************************************************************
+ * Functions to read and write IPROC registers
+ *******************************i******************************************/
+static uint32_t readl(uint32_t a) 
+{
+    volatile uint32_t *reg = (uint32_t *)a; 
+    return (*reg); 
+}
+
+static uint32_t writel(uint32_t a, uint32_t b) 
+{
+    volatile uint32_t *reg = (uint32_t *)a; 
+    *reg = b;
+    return *reg; 
+}
+
+/***************************************************************************
+ * iproc_nand_ecc_status_cmd
+ *******************************i******************************************/
+static void iproc_nand_ecc_status_cmd (
+    uint32_t *error) 
+{
+
+    uint32_t reg_data;
+
+    reg_data = readl(IPROC_R_NAND_UNCORR_ERROR_COUNT_ADDR);
+
+    if(reg_data != 0){
+        *error = reg_data;
+        /* reset un-correctable error counter */
+        writel(IPROC_R_NAND_UNCORR_ERROR_COUNT_ADDR, 0);
+    }
+    return;
+}
+
+#if 0
+/***************************************************************************
+ * iproc_nand_spare_area_read
+ *******************************i******************************************/
+static void iproc_nand_spare_area_read (
+    int      bytes,
+    uint32_t *dst) 
+{
+    int byte_count = bytes & ~0x03;
+    int n = 0;
+
+    while ((n*4 < byte_count) && (n < SPARE_AREA_WORDS))  
+        *dst = readl(IPROC_R_NAND_SPARE_AREA_READ_OFS_0 + n++);
+
+    return;
+}
+#endif
+
+/***************************************************************************
+ * iproc_check_nand_done
+ *******************************i******************************************/
+static int iproc_check_nand_done(
+    ulong timeout,
+	uint32_t bits)
+{
+    ulong start_time;
+    ulong current_time;
+    volatile uint32_t reg_data;
+    uint32_t mask;
+
+    start_time = get_timer(0);
+    
+    mask =  IPROC_NAND_FLASH_READY_BIT | IPROC_NAND_CONTROL_READY_BIT | bits;
+    reg_data = readl(IPROC_R_NAND_INTFC_STATUS_ADDR);
+    while ((reg_data & mask) != mask) {
+        __udelay(1);
+		/* remove the bits that are done from the mask */
+		mask = mask & ~(reg_data & mask);
+        current_time = get_timer(0);
+		reg_data = readl(IPROC_R_NAND_INTFC_STATUS_ADDR);
+        /* Check if the operation has timed out */
+        if ((current_time - start_time) >= timeout){
+#ifdef IPROC_NAND_WARNING
+            printf("NAND command timeout INTFC status %x\n", reg_data);
+#endif
+            return NAND_TIMEOUT_ERROR;
+        }
+		/* Check if the operation has failed */
+        if (reg_data & IPROC_NAND_INTFC_STATUS_READY_BIT) {
+            if (reg_data & IPROC_NAND_INTFC_STATUS_FAIL_BIT) {
+#ifdef IPROC_NAND_WARNING
+                printf("NAND command INTFC operation failed %x\n", reg_data);
+#endif
+                return NAND_OPERATION_FAIL;
+            }
+        }
+    }
+
+	/* Wait for the interrupts for an operation complete 
+	 * This should not be needed but 
+	 * Omitting it results in partial data reads and writes 
+	 */
+    reg_data = readl(IPROC_R_NAND_RO_CTRL_READY_ADDR);
+    while (!(reg_data & 1)) { 
+        __udelay(1);
+        reg_data = readl(IPROC_R_NAND_RO_CTRL_READY_ADDR);
+        current_time = get_timer(0);
+
+        if ((current_time - start_time) >= timeout){
+#ifdef IPROC_NAND_WARNING
+           printf("NAND command timeout RO_CTRL status %x\n", reg_data);
+#endif
+           return NAND_TIMEOUT_ERROR;
+        }
+    }
+
+    /* clear NAND_RO_CRTL_READY bit */
+    writel(IPROC_R_NAND_RO_CTRL_READY_ADDR, 1);
+    
+    return NAND_STATUS_OK;
+}
+
+/***************************************************************************
+ * iproc_nand_onfi_parameters_cmd
+ *
+ * This handles "PARAMETER PAGE" Commands
+ *******************************i******************************************/
+static int iproc_nand_onfi_parameters_cmd(
+    uint8_t state)
+{
+    if (!state) {
+        /* get first two pages of ONFI parameter pages */
+        writel(IPROC_R_NAND_CMD_ADDRESS_ADDR, 0x00000000);
+        writel(IPROC_R_NAND_CMD_START_ADDR, PARAMETER_READ);
+
+        /* give the flash some time to execute "PARAMETER PAGE" */
+        return iproc_check_nand_done(NAND_TIMEOUT, 0);
+    }
+    else {
+        /* get the third page */
+        writel(IPROC_R_NAND_CMD_ADDRESS_ADDR, 0x00000200);
+        writel(IPROC_R_NAND_CMD_START_ADDR, PARAMETER_CHANGE_COL);
+
+        /* give the flash some time to execute "PARAMETER PAGE" */
+        return iproc_check_nand_done(NAND_TIMEOUT, 0);
+    }
+    return NAND_STATUS_OK;
+}
+
+/***************************************************************************
+ * iproc_endian_swap
+ *******************************i******************************************/
+static void iproc_endian_swap (
+    uint32_t *param_page , 
+    uint8_t size) 
+{
+    uint32_t page_data;
+    int i;
+
+    for ( i = 0 ; i < size ; i++) {
+        page_data = param_page[i];
+
+        param_page[i] = (((page_data & 0x000000FF) << 24) | 
+                         ((page_data & 0x0000FF00) << 8)  |
+                         ((page_data & 0x00FF0000) >> 8)  | 
+                         ((page_data & 0xFF000000) >> 24));
+    }
+
+    return;
+}
+
+/***************************************************************************
+ * iproc_nand_config
+ *******************************i******************************************/
+static int iproc_nand_config (
+    int cs) 
+{
+    volatile uint32_t reg_data;
+	uint32_t ecc_level;
+	uint8_t steps;
+    uint32_t strap_type;
+    uint32_t strap_page;
+	uint8_t eccbytes;
+    uint32_t full_addr;
+	int i;
+
+	/* 
+	 * Do not remove the printf below
+	 * It is needed because timers are not yet configured 
+	 */
+    printf(" ");
+
+	if (cs >= CHIPSELECT_MAX_COUNT)
+		return NAND_CONFIG_PARAM;
+
+    if (inand && (inand[cs].initialized == IPROC_INIT_MAGIC))
+        return NAND_STATUS_OK;
+
+	/* Do a flash reset */
+    writel(IPROC_R_NAND_CMD_EXT_ADDRESS_ADDR, cs << 16);
+    writel(IPROC_R_NAND_CMD_START_ADDR, FLASH_RESET);
+
+    /* Is the NAND initialization a success */
+    reg_data = readl(IPROC_R_NAND_INIT_STATUS_ADDR);
+    if (!(reg_data & IPROC_NAND_INIT_SUCCESS_BIT))
+        return NAND_AUTOCONFIG_FAIL;
+
+    /* read device ID */
+	reg_data = readl(IPROC_R_NAND_FLASH_DEVICE_ID_ADDR);
+	if (!reg_data)
+        return NAND_AUTOCONFIG_FAIL;
+	inand[cs].device_id = reg_data;
+#ifdef NAND_INFO
+	printf("cs %d dev_id word 0 %x\n", cs, reg_data);
+#endif
+	/* Identify the chip */
+
+    for (i = 0; i < IPROC_NAND_CHIP_LIST_COUNT; i++) {
+		uint32_t devid;
+        struct iproc_nand_chips *ch;
+
+		ch = &iproc_chip_list[i];
+		devid = ch->id[0] << 24 | ch->id[1] << 16 | ch->id[2] << 8 | ch->id[3];
+		if (devid == inand[cs].device_id) {
+		    inand[cs].chip_ptr = &iproc_chip_list[i];
+		    break;
+		}
+	}
+	/* have we identified the chip? */
+	if (!inand[cs].chip_ptr) {
+	    /* 
+		 * Do not remove the printf below
+	     * It is needed because timers are not yet configured 
+	     */
+		printf ("(ONFI), ");
+	} else {
+		printf ("%s, ", iproc_chip_list[i].name);
+	}
+
+    reg_data = readl(IPROC_R_NAND_INIT_STATUS_ADDR);
+    if (!(reg_data & IPROC_NAND_INIT_SUCCESS_BIT))
+        return NAND_AUTOCONFIG_FAIL;
+
+    /* Check for ONFI comaptibility */
+    if (reg_data & IPROC_NAND_ONFI_INIT_BIT) {
+    
+        uint32_t block_count;
+        uint32_t block_mask = 0;
+        uint32_t device_mask = 0;
+        uint32_t page_mask = 0;
+        uint32_t block_addr;
+        uint32_t col_addr;
+        uint32_t oobsize;
+		int n;
+
+        uint32_t param_page[256];
+        struct nand_onfi_params *params = (struct nand_onfi_params *)param_page;
+
+        /* check if ONFI flash */
+        reg_data = readl(IPROC_R_NAND_ONFI_STATUS_ADDR);
+        if (!(reg_data & IPROC_NAND_ONFI_STRING_DETECTED)) {
+			/* should not be here */
+            return NAND_AUTOCONFIG_FAIL;
+		}
+	    inand[cs].onfi_status = TRUE;
+        
+		/* read the ONFI device parameters */
+        n = iproc_nand_onfi_parameter_pages(cs, (uint32_t *)param_page);
+        if (n != NAND_STATUS_OK) {
+            printf ("ONFI: failed to read parameter pages!");
+            return NAND_AUTOCONFIG_FAIL;
+        }
+        
+        /* Get device model name from ONFI */
+        if (!inand[cs].chip_ptr) {
+            char name[21];
+            memcpy(name, params->model, 20);
+            name[20] = 0;
+            printf("%s, ", name);
+        }
+        
+        /* Calculate device config based on the ONFI parameters */
+        inand[cs].page_size = params->byte_per_page;
+        inand[cs].block_size = params->pages_per_block * inand[cs].page_size;
+        block_count = params->blocks_per_lun * params->lun_count;
+        inand[cs].device_size = 
+            block_count * (inand[cs].block_size / 1024) / 1024;
+        inand[cs].device_width = (params->features & 1)? 16 : 8;
+        oobsize = params->spare_bytes_per_page;
+        inand[cs].spare_area_bytes = 
+            oobsize / (inand[cs].page_size / IPROC_FLASH_CACHE_SIZE);
+        block_addr = params->addr_cycles & 0x0f;
+        col_addr = (params->addr_cycles >> 4) & 0x0f;
+            
+#ifdef NAND_INFO
+        printf("\nONFI info: device %dMB, page %dB, oobsize %dB, block %dKB, \n"
+                 "           col-addr %d, row-addr %d, %s\n", 
+               inand[cs].device_size,
+               inand[cs].page_size, 
+               oobsize, 
+               inand[cs].block_size / 1024, 
+               col_addr, block_addr,
+               inand[cs].device_width == 8? "8-bit" : "16-bit");
+#endif
+
+		/* Adjust the page size, device size and block size accoring to ONFI */
+        for (n = 0; n < ARRAY_SIZE(block_sizes); n++) {
+			if (inand[cs].block_size == 1024 * block_sizes[n]) { 
+                block_mask = n << IPROC_NAND_BLOCK_SIZE_SHIFT;
+			    break;
+			}
+		}
+
+        for (n = 0; n < ARRAY_SIZE(device_sizes); n++) {
+			if (inand[cs].device_size == device_sizes[n]) {
+                device_mask = n << IPROC_NAND_DEVICE_SIZE_SHIFT;
+			    break;
+			}
+		}
+
+        for (n = 0; n < ARRAY_SIZE(page_sizes); n++) {
+			if (inand[cs].page_size == page_sizes[n]) { 
+                page_mask = n << IPROC_NAND_PAGE_SIZE_SHIFT;
+			    break;
+			}
+		}
+        
+		reg_data = 0;
+		reg_data |= page_mask | device_mask | block_mask ;
+		full_addr =  block_addr + col_addr;
+		reg_data |= full_addr << IPROC_NAND_FULL_ADDR_BYTE_SHIFT;
+		reg_data |= block_addr << IPROC_NAND_BLOCK_ADDR_BYTE_SHIFT;
+		reg_data |= col_addr << IPROC_NAND_COLUMN_ADDR_BYTE_SHIFT;
+
+	    if (inand[cs].device_width == 16) 
+            reg_data |= IPROC_NAND_DEVICE_WIDTH_MASK;
+
+        writel(REG_CONFIG(cs), reg_data);
+
+    } else { 
+		/* Fail if not ONFI */
+        return NAND_AUTOCONFIG_FAIL;
+	}
+    
+	/* Read NAND strap settings  */ 
+	reg_data = readl(IPROC_R_STRAPS_CONTROL_ADDR);
+	strap_type = (reg_data & IPROC_NAND_STRAP_TYPE_MASK) >> IPROC_NAND_STRAP_TYPE_SHIFT;
+	strap_page = (reg_data & IPROC_NAND_STRAP_PAGE_MASK) >> IPROC_NAND_STRAP_PAGE_SHIFT;
+    /* Validate strap settings */
+#ifdef NAND_INFO
+    printf("Found strap type 0x%x strap page 0x%x\n", strap_type, strap_page);
+#endif
+    if (strap_type == 0 || 
+        strap_type >= sizeof(iproc_nand_strap_types) / sizeof(struct nand_strap_type_t) ||
+        iproc_nand_strap_types[strap_type].spare_size >= inand[cs].spare_area_bytes ||
+        iproc_nand_strap_page_sizes[strap_page] != inand[cs].page_size) {
+        
+        /* Strap options are invalid */
+        printf("\n*ERROR* Invalid strap options for this NAND: page=%d type=%d\n",
+            strap_page, strap_type);
+            
+        /* Trying to fit with available strap options */
+        if (inand[cs].spare_area_bytes >= 27) {
+            if (inand[cs].page_size >= 2048)
+                strap_type = 6;
+            else 
+                strap_type = 5;
+        } else if (inand[cs].spare_area_bytes > 16) {
+            strap_type = 3;
+        } else {
+            strap_type = 2;
+        }
+        
+        printf("Overriding invalid strap options: strap_type=%d\n", strap_type);
+    }
+
+	/* Calculate the REG_ACC_CONTROL */
+	reg_data = IPROC_NAND_PAGE_HIT_EN;
+	reg_data |= IPROC_NAND_ECC_READ_EN;
+	reg_data |= IPROC_NAND_ECC_WRITE_EN;
+
+    ecc_level = iproc_nand_strap_types[strap_type].ecclevel;
+ 	inand[cs].sector_size_1k = iproc_nand_strap_types[strap_type].sector_1k;
+	inand[cs].spare_area_bytes = iproc_nand_strap_types[strap_type].spare_size;
+    steps = inand[cs].page_size/IPROC_FLASH_CACHE_SIZE >> inand[cs].sector_size_1k;
+    eccbytes = nand_iproc_ecc_bytes[ecc_level] << inand[cs].sector_size_1k;
+    iproc_nand_oob_layout.eccbytes = eccbytes * steps;
+	if (inand[cs].sector_size_1k)
+        reg_data |= IPROC_NAND_1K_SECTOR;
+
+	reg_data |= ecc_level << IPROC_NAND_ECC_LEVEL_SHIFT; 
+	reg_data |= inand[cs].spare_area_bytes;
+    writel(REG_ACC_CONTROL(cs), reg_data);
+#ifdef NAND_INFO
+	printf("REG_ACC_CONTROL %x spare_area_bytes %x ecc_level %x eccbytes %x steps %x\n", 
+			reg_data, inand[cs].spare_area_bytes, ecc_level, eccbytes, steps);
+#endif	
+
+    reg_data = readl(REG_CONFIG(cs));
+#ifdef NAND_INFO
+	printf("REG_CONFIG %x\n", reg_data);
+#endif	
+
+    inand[cs].initialized = IPROC_INIT_MAGIC;
+
+	printf("%u KiB blocks, %u KiB pages, %uB OOB, %u-bit\n", 
+		inand[cs].block_size/1024, 
+		inand[cs].page_size/1024, inand[cs].spare_area_bytes, 
+	    inand[cs].device_width);
+        
+    /* clear NAND_RO_CRTL_READY bit */
+    writel(IPROC_R_NAND_RO_CTRL_READY_ADDR, 1);
+
+    /* Create oobfree for storing user OOB data */
+    if (inand[cs].spare_area_bytes > eccbytes) {
+        struct nand_oobfree *free = iproc_nand_oob_layout.oobfree;
+        unsigned spare_size;
+        uint8_t i, count;
+
+        /* Special case: using Hamming code when ecc_level == 15 */
+        if (ecc_level == 15) {
+            if (inand[cs].spare_area_bytes == 16 && inand[cs].sector_size_1k) {
+                eccbytes = 3;
+            }
+        }
+        
+        spare_size = inand[cs].spare_area_bytes;
+
+        if (steps > MTD_MAX_OOBFREE_ENTRIES) {
+            steps = MTD_MAX_OOBFREE_ENTRIES;
+        }
+        for(i = 0, count = 0; i < steps && count < MTD_MAX_OOBFREE_ENTRIES; i++) {
+            
+            if (eccbytes == 3) {
+                /* Hamming code: ECC bytes are 6~8; First part here. */
+                free->offset = i * spare_size;
+                free->length = 6;
+                
+            } else {
+            
+                /* BCH: ECC bytes at the bottom */
+                free->offset = i * spare_size;
+                free->length = spare_size - eccbytes;
+            }
+            
+            /* Reserve the first two bytes of the page */
+            if (i == 0) {
+                if (free->length <= 2) {
+                    /* Don't claim this entry if less than 2 bytes */
+                    continue;
+                }
+                free->offset += 2;
+                free->length -= 2;
+            }
+            
+            if (eccbytes == 3) {
+                /* Hamming code: the 2nd free part */
+                free++;
+                count++;
+                if (count < MTD_MAX_OOBFREE_ENTRIES) {
+                    free->offset = i * spare_size + 9;
+                    free->length = 7;
+                } else {
+                    /* The structure limits us. */
+                    break;
+                }
+            }
+            
+            free++;
+            count++;
+        }
+        if (count < MTD_MAX_OOBFREE_ENTRIES) {
+            /* Terminator */
+            free->length = 0;
+        }
+            
+        /* Print out oob space information */
+        free = iproc_nand_oob_layout.oobfree;
+        if (free->length) {
+            spare_size = 0;
+            while(free->length) {
+                spare_size += free->length;
+                free++;
+            }
+#ifdef NAND_INFO
+        printf("NAND:    user oob per page: %u bytes (%u steps)\n", spare_size, steps);
+#endif		
+        }
+
+    }
+
+	printf("NAND:   chipsize ");  /* will be filled in by u-boot */
+
+    return NAND_STATUS_OK;
+}
+
+/***************************************************************************
+ * iproc_nand_one_page_read
+ *******************************i******************************************/
+static int _iproc_nand_one_page_read(
+    int cs,
+    uint64_t page_addr,
+    uint8_t *dst_addr,
+    uint32_t data_len)
+{
+    int i , j;
+    uint32_t *dst;
+    uint32_t ecc_errors;
+    uint32_t num_of_buffers;
+    uint32_t page_size; 
+    uint32_t reg_data; 
+    NAND_STATUS status;
+
+    if (!inand || (inand[cs].initialized != IPROC_INIT_MAGIC))
+        return NAND_UNINITIALIZED;
+
+    dst = (uint32_t*) dst_addr;
+    page_size = inand[cs].page_size;
+
+    num_of_buffers = page_size / IPROC_FLASH_CACHE_SIZE;
+
+    /* see if data len (required) is less than a complete page */
+    if ((data_len < page_size) && (page_size > IPROC_FLASH_CACHE_SIZE)) {
+        for (i = 1 ; i < num_of_buffers ; i++) {
+            if (data_len <= (i * IPROC_FLASH_CACHE_SIZE)) {
+                num_of_buffers = i;
+                break;
+            }
+        }
+    }
+
+	if (page_addr & IPROC_FLASH_CACHE_SIZE) {
+#ifdef IPROC_NAND_WARNING
+		printf("page_read %llx not %x aligned\n", page_addr, IPROC_FLASH_CACHE_SIZE);
+#endif	
+		return NAND_PAGE_ALIGNMENT;
+	}
+
+    /* get data from device */
+    for (i = 0 ; i < num_of_buffers; i++) {
+        /*write the address for read */
+        writel(IPROC_R_NAND_CMD_EXT_ADDRESS_ADDR, (cs << 16) | ((page_addr >> 32) & 0xFFFF));
+        writel(IPROC_R_NAND_CMD_ADDRESS_ADDR, (uint32_t)page_addr);
+        /* write the opcode in cmd start reg */
+        writel(IPROC_R_NAND_CMD_START_ADDR, PAGE_READ);
+
+        /* give the flash some time to execute page read */
+        status =  iproc_check_nand_done(NAND_TIMEOUT, IPROC_NAND_CACHE_VALID_BIT);
+        if (status != NAND_STATUS_OK)
+            return status;
+
+		/* Change Little Endian mode before reading data */
+		reg_data = readl (IPROC_R_IDM_IDM_IO_CONTROL_DIRECT);
+		writel (IPROC_R_IDM_IDM_IO_CONTROL_DIRECT, reg_data | IPROC_NAND_IDM_IO_CONTROL_APB_LE_MODE_BIT);
+
+        /* flash is ready: read word by word from the cache */
+        for ( j = 0 ; j < (IPROC_FLASH_CACHE_SIZE / 4) ; j++) {
+            *(dst++) = readl((IPROC_R_NAND_FLASH_CACHE_0_ADDR + j*4));
+        }
+		/* Revert Little Endian bit */
+		reg_data = readl (IPROC_R_IDM_IDM_IO_CONTROL_DIRECT);
+		writel (IPROC_R_IDM_IDM_IO_CONTROL_DIRECT, reg_data & ~IPROC_NAND_IDM_IO_CONTROL_APB_LE_MODE_BIT);
+
+        page_addr += IPROC_FLASH_CACHE_SIZE;
+    }
+
+    ecc_errors = 0;
+    iproc_nand_ecc_status_cmd (&ecc_errors);
+	if (ecc_errors) {
+        reg_data = readl(IPROC_R_NAND_UNCORR_ERROR_ADDRESS_ADDR);
+#ifdef IPROC_NAND_WARNING
+		printf("%d ecc_errors after reading %llx:%x\n", ecc_errors, page_addr - page_size, reg_data);
+#endif	
+	}
+
+	if (ecc_errors)
+        return NAND_UNCOR_ECC_ERROR;
+
+    return NAND_STATUS_OK;;
+}
+
+/***************************************************************************
+ * iproc_nand_page_read
+ *******************************i******************************************/
+static int _iproc_nand_page_read(
+    int cs,
+    uint64_t page_addr,
+    uint8_t *dst_addr,
+    uint32_t data_len)
+{
+	int rv = 0;
+	uint32_t read_len = 0;
+	uint32_t data_read = 0;
+
+#if 0	
+    if (data_len > inand[cs].page_size)
+        iproc_nand_ecc_set_config(cs, IPROC_NAND_PREFETCH_EN);
+#endif	
+	while (data_read < data_len) {
+		/* read a full page by default */
+		read_len = inand[cs].page_size;
+		if ((data_len - data_read) < read_len) {
+			read_len = data_len - data_read;
+		}
+        rv = _iproc_nand_one_page_read(cs, page_addr, dst_addr, read_len);
+	    if (rv) {
+			return rv;
+		}
+		data_read += inand[cs].page_size;
+		dst_addr += inand[cs].page_size;
+		page_addr += inand[cs].page_size;
+	}
+#if 0	
+    if (data_len > inand[cs].page_size)
+        iproc_nand_ecc_set_config(cs, 0); 
+#endif	
+	return rv;
+}
+
+/***************************************************************************
+ * iproc_nand_page_program
+ *******************************i******************************************/
+static int _iproc_nand_page_program(
+    int cs,
+    uint64_t page_addr,
+    uint8_t* src_addr,
+    uint32_t data_len)
+{
+    NAND_STATUS status;
+    int i , j;
+    uint32_t num_of_buffers;
+    uint32_t *src = (uint32_t*)src_addr;
+	uint32_t reg_data;
+
+    if (!inand || (inand[cs].initialized != IPROC_INIT_MAGIC))
+        return NAND_UNINITIALIZED;
+        
+    /*
+     * Don't write this page if it contains only FFs (to avoid generating ECC)
+     * since we consider it as an empty page (data could be written later).
+     */ 
+    if (src_addr && data_len == inand[cs].page_size) {
+        uint8_t *p = src_addr;
+        for(i=0; i<data_len; i++, p++) {
+            if (*p != 0xFF) {
+                break;
+            }
+        }
+        if (i == data_len) {
+            return NAND_STATUS_OK;
+        }
+    }
+
+    num_of_buffers = data_len / IPROC_FLASH_CACHE_SIZE;
+
+	if (page_addr & IPROC_FLASH_CACHE_SIZE) {
+#ifdef IPROC_NAND_WARNING
+		printf("page_program %llx not %x aligned\n", page_addr, IPROC_FLASH_CACHE_SIZE);
+#endif	
+		return NAND_PAGE_ALIGNMENT;
+	}
+
+    for (i = 0 ; i < num_of_buffers; i++) {
+        /* set address before writing data to cache */
+        writel(IPROC_R_NAND_CMD_EXT_ADDRESS_ADDR, (cs << 16) | ((page_addr >> 32) & 0xFFFF));
+        writel(IPROC_R_NAND_CMD_ADDRESS_ADDR, (uint32_t)page_addr);
+
+		/* Change Little Endian mode before writing data */
+		reg_data = readl (IPROC_R_IDM_IDM_IO_CONTROL_DIRECT);
+		writel (IPROC_R_IDM_IDM_IO_CONTROL_DIRECT, reg_data | IPROC_NAND_IDM_IO_CONTROL_APB_LE_MODE_BIT);
+
+        /* write the flash cache word by word */
+        for (j = 0 ; j <  (IPROC_FLASH_CACHE_SIZE / 4) ; j++) {
+            writel((IPROC_R_NAND_FLASH_CACHE_0_ADDR + j*4), *(src + j));
+        }
+		/* Revert Little Endian bit */
+		reg_data = readl (IPROC_R_IDM_IDM_IO_CONTROL_DIRECT);
+		writel (IPROC_R_IDM_IDM_IO_CONTROL_DIRECT, reg_data & ~IPROC_NAND_IDM_IO_CONTROL_APB_LE_MODE_BIT);
+        
+        /* Clear WP (Write Protect) bit */
+        reg_data = readl(IPROC_R_NAND_CS_NAND_SELECT_ADDR);
+        writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data & ~IPROC_NAND_WRITE_PROCTECT_BIT);
+
+        /* write it the flash write command and wait for it to execute */
+        writel(IPROC_R_NAND_CMD_START_ADDR, PROGRAM_PAGE);
+
+        /* give the flash some time to execute "Page Program" */
+        status = iproc_check_nand_done(NAND_TIMEOUT, 0);
+
+        /* Set back WP (Write Protect) bit */
+        reg_data = readl(IPROC_R_NAND_CS_NAND_SELECT_ADDR);
+        writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data | IPROC_NAND_WRITE_PROCTECT_BIT);
+        
+        if (status) {
+#ifdef IPROC_NAND_WARNING
+	        printf("%s returned %d\n", __func__, status);
+#endif
+            return status;
+        }
+
+        page_addr += IPROC_FLASH_CACHE_SIZE;
+        src += (IPROC_FLASH_CACHE_SIZE / 4);
+    }
+
+    return NAND_STATUS_OK;
+}
+
+/***************************************************************************
+ * iproc_nand_block_erase
+ *******************************i******************************************/
+static int _iproc_nand_block_erase(
+    int cs,
+    uint64_t block_address) 
+{
+    int status;
+	uint32_t reg_data;
+
+    if (!inand || (inand[cs].initialized != IPROC_INIT_MAGIC))
+        return NAND_UNINITIALIZED;
+
+    block_address &= ~(inand[cs].block_size - 1);
+
+    writel(IPROC_R_NAND_CMD_EXT_ADDRESS_ADDR, (cs << 16) | ((block_address >> 32) & 0xFFFF));
+    writel(IPROC_R_NAND_CMD_ADDRESS_ADDR, (uint32_t)block_address);
+    
+    /* Clear WP (Write Protect) bit */
+    reg_data = readl(IPROC_R_NAND_CS_NAND_SELECT_ADDR);
+    writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data & ~IPROC_NAND_WRITE_PROCTECT_BIT);
+
+    writel(IPROC_R_NAND_CMD_START_ADDR, BLOCK_ERASE);
+
+    /* Give the flash some time to execute */
+    status = iproc_check_nand_done(20*NAND_TIMEOUT, 0);
+    
+    /* Set back WP (Write Protect) bit */
+    reg_data = readl(IPROC_R_NAND_CS_NAND_SELECT_ADDR);
+    writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data | IPROC_NAND_WRITE_PROCTECT_BIT);
+	
+#ifdef IPROC_NAND_WARNING
+	if (status) {
+		printf("%s returned %d\n", __func__, status);
+	}
+#endif
+    return status;
+}
+
+static int _iproc_nand_dev_ready(void)
+{
+    ulong start_time;
+    ulong current_time;
+    volatile uint32_t reg_data;
+
+#ifdef IPROC_NAND_DEBUG_CALLS
+    printf("%s: called\n", __func__);
+#endif
+    start_time = get_timer(0);
+    
+    reg_data = readl(IPROC_R_NAND_INTFC_STATUS_ADDR);
+    while (!(reg_data & (IPROC_NAND_FLASH_READY_BIT))) {
+        __udelay(1);
+        reg_data = readl(IPROC_R_NAND_INTFC_STATUS_ADDR);
+        current_time = get_timer(0);
+
+        if ((current_time - start_time) >= NAND_TIMEOUT){
+#ifdef IPROC_NAND_WARNING
+           printf("NAND command timeout INTFC %x\n", reg_data);
+#endif
+           return NAND_TIMEOUT_ERROR;
+        }
+    }
+	return 0;
+}
+
+/* ======================== Interface to MTD  =============================== */
+
+static uint8_t iproc_nand_read_byte(struct mtd_info *mtd);
+
+static void iproc_nand_read_buf(struct mtd_info *mtd, u_char * buf, int len)
+{
+    int i;
+
+#ifdef IPROC_NAND_DEBUG_CALLS
+    printf("%s: called add %x buf %x len %d\n", __func__, mlocal->last_addr, (unsigned)buf, len);
+#endif
+
+    for(i=0; i<len; i++, buf++)
+        *buf = iproc_nand_read_byte(mtd);
+}
+
+static int 
+iproc_nand_waitfunc(struct mtd_info *mtd, struct nand_chip *chip)
+{
+#ifdef IPROC_NAND_DEBUG_CALLS
+    printf("%s: called\n", __func__); 
+#endif
+	return 0;
+}
+
+static int iproc_nand_block_bad(struct mtd_info *mtd, loff_t ofs, int getchip)
+{
+    uint32_t reg_data;
+    uint32_t mask;
+    uint64_t block = (uint64_t)ofs;
+    int cs = (int)((struct nand_chip *)mtd->priv)->priv;
+	int status;
+    
+#ifdef IPROC_NAND_DEBUG_CALLS
+    printf("%s: called block %llx \n", __func__, block); 
+#endif
+    writel(IPROC_R_NAND_CMD_EXT_ADDRESS_ADDR, (cs << 16) | ((block >> 32) & 0xFFFF));
+    writel(IPROC_R_NAND_CMD_ADDRESS_ADDR, (uint32_t)block);
+	writel(IPROC_R_NAND_CMD_START_ADDR, PAGE_READ);
+	mask = IPROC_NAND_8bit_BAD_BLOCK_MASK;
+    if (inand[0].device_width == 16) {
+        mask = IPROC_NAND_16bit_BAD_BLOCK_MASK;
+	}
+    status = iproc_check_nand_done(NAND_TIMEOUT, IPROC_NAND_CACHE_VALID_BIT);
+    if (status != NAND_STATUS_OK) { 
+#ifdef IPROC_NAND_WARNING
+        printf("iproc_check_nand_done error %d\n", status);
+#endif
+	}
+
+	
+	/*There might be ECC error with PAGE_READ command, so reset ECC error if any*/
+	{
+		size_t ecc_errors = 0;	
+		iproc_nand_ecc_status_cmd (&ecc_errors);
+		if (ecc_errors) {
+			reg_data = readl(IPROC_R_NAND_UNCORR_ERROR_ADDRESS_ADDR);
+#ifdef IPROC_NAND_DEBUG_CALLS
+			printf("%s..:%s..:%d ecc_errors when reading at %x\n", __FILE__, __func__, ecc_errors, reg_data);
+#endif
+		}	
+	}
+
+    reg_data = readl(IPROC_R_NAND_SPARE_AREA_READ_OFS_0);
+	if ((reg_data & mask) != mask) {
+#ifdef NAND_INFO
+		printf("NAND%d bad block 0x%llx\n", cs, block);
+#endif
+		return 1;
+	}
+	
+	/*restore register IPROC_R_NAND_SPARE_AREA_WRITE_OFS_0 to default */
+	writel(IPROC_R_NAND_SPARE_AREA_WRITE_OFS_0, 0xffffffff);
+     
+	return 0;
+}
+
+static int iproc_nand_mark_bad(struct mtd_info *mtd, loff_t ofs)
+{
+    uint32_t reg_data;
+    uint32_t block = (unsigned long)ofs;
+    int status;
+
+#ifdef IPROC_NAND_DEBUG_CALLS
+    printf("%s: called block %x \n", __func__, block); 
+#endif
+
+#if 1
+    printf("this operation is not supported\n"); 
+#else
+	if (block % inand[0].block_size) {
+		printf("address not aligned to a block boundary\n");
+		return NAND_BLOCK_ALIGN;
+	}	
+
+    writel(IPROC_R_NAND_CMD_ADDRESS_ADDR, block);
+
+    /* Clear WP (Write Protect) bit */
+    reg_data = readl(IPROC_R_NAND_CS_NAND_SELECT_ADDR);
+    writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data & ~IPROC_NAND_WRITE_PROCTECT_BIT);
+
+    writel(IPROC_R_NAND_SPARE_AREA_WRITE_OFS_0, 0);
+
+    writel(IPROC_R_NAND_CMD_START_ADDR, PROGRAM_SPARE_AREA);
+
+    /* Give the flash some time to execute */
+    status = iproc_check_nand_done(20*NAND_TIMEOUT, 0);
+    if (status != NAND_STATUS_OK) { 
+#ifdef IPROC_NAND_WARNING
+        printf("iproc_check_nand_done error %d\n", status);
+#endif
+	}
+    
+    /* Set back WP (Write Protect) bit */
+    reg_data = readl(IPROC_R_NAND_CS_NAND_SELECT_ADDR);
+    writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data | IPROC_NAND_WRITE_PROCTECT_BIT);
+#endif
+
+	return 0;
+}
+
+/***************************************************************************
+* Reads every block of the chip and marks those that are bad
+* Use with caution, takes long time to complete
+***************************************************************************/
+int iproc_nand_scan_bad_blocks(int cs)
+{
+    uint64_t block;
+	uint64_t total_size;
+    uint32_t page_addr;
+    uint32_t start;
+	uint8_t *buf;
+	int rv;
+
+	buf = (uint8_t *)malloc(inand[cs].page_size);
+	if (!buf)
+		return -1;
+
+	total_size = inand[cs].device_size * 1024 * 1024; 
+    for (block = 0; block < total_size; block += inand[cs].block_size) {
+		writel(IPROC_R_NAND_CMD_EXT_ADDRESS_ADDR, (cs << 16) | ((block >> 32) & 0xFFFF));
+		start = (uint32_t)block;
+		for (page_addr = start; page_addr < start + inand[cs].block_size; page_addr += inand[cs].page_size) { 
+			rv = _iproc_nand_one_page_read(cs, page_addr, buf, inand[cs].page_size);
+			if (rv) {
+				printf("NAND%d bad block 0x%llx\n", cs, block);
+				iproc_nand_mark_bad(NULL, (loff_t) block);
+			}
+		}
+	}
+    free (buf);
+	return 0;
+}
+
+static int iproc_nand_read_page(struct mtd_info *mtd, struct nand_chip *chip, uint8_t *buf, int page)
+{
+	int rv;
+	uint64_t page_addr = (uint64_t)page * inand[0].page_size;
+    
+#ifdef IPROC_NAND_DEBUG_CALLS
+    printf("%s: called page %x page_addr %llx\n", __func__, (unsigned)page, page_addr);
+#endif
+	rv = iproc_nand_page_read(0, page_addr, (uint8_t*)buf, inand[0].page_size);
+	if (rv) {
+#ifdef IPROC_NAND_WARNING
+		printf("%s returned %d\n", __func__, rv);
+#endif
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static void iproc_nand_write_page_hwecc(struct mtd_info *mtd, struct nand_chip *chip, const uint8_t *buf)
+{
+	uint64_t page_addr = (uint64_t)mlocal->last_word * inand[0].page_size;
+	int rv;
+    
+#ifdef IPROC_NAND_DEBUG_CALLS
+    printf("%s: called page_addr %llx\n", __func__, page_addr);
+#endif
+	rv = iproc_nand_page_program(0, page_addr, (uint8_t*)buf, inand[0].page_size);
+	if (rv) {
+#ifdef IPROC_NAND_WARNING
+		printf("%s returned %d\n", __func__, rv);
+#endif
+	}
+}
+
+static int iproc_nand_write_page(struct mtd_info *mtd, struct nand_chip *chip, const uint8_t *buf, int page, int cached, int raw)
+{
+	uint64_t page_addr = (uint64_t)page * inand[0].page_size;
+	int rv;
+    
+#ifdef IPROC_NAND_DEBUG_CALLS
+    printf("%s: called page %x page_addr %llx cached %x raw %x\n", __func__, (unsigned)page, page_addr, cached, raw);
+#endif
+	rv = iproc_nand_page_program(0, page_addr, (uint8_t*)buf, inand[0].page_size);
+	if (rv) {
+		printf("%s returned %d\n", __func__, rv);
+		return 1;
+	}
+	return 0;
+}
+
+static void iproc_nand_command(struct mtd_info *mtd, unsigned cmd, int column, int page_addr)
+{
+    int iproc_cmd = 0;
+    uint32_t addr = column;
+	int rv;
+    int cs = (int)((struct nand_chip *)mtd->priv)->priv;
+
+#ifdef IPROC_NAND_DEBUG_CALLS
+    printf("%s: called cmd %x, addr %x page %x\n", __func__, cmd, addr, page_addr);
+#endif
+    switch (cmd) {
+    case NAND_CMD_RESET:
+        iproc_cmd = FLASH_RESET;
+        break;
+    case NAND_CMD_STATUS:
+        iproc_cmd = STATUS_READ;
+        break;
+    case NAND_CMD_READID:
+        iproc_cmd = DEVICE_ID_READ;
+        break;
+    case NAND_CMD_PARAM:
+        iproc_cmd = PARAMETER_READ;
+        break;
+    case NAND_CMD_READOOB:
+        iproc_cmd = SPARE_AREA_READ;
+        break;
+    case NAND_CMD_ERASE1:
+        iproc_cmd = BLOCK_ERASE;
+        break;
+	case NAND_CMD_SEQIN:
+		/* just capture the page address */
+        mlocal->last_word = page_addr;
+        break;
+	}
+
+    mlocal->last_cmd = iproc_cmd;
+    mlocal->last_byte = 0;
+    mlocal->last_addr = addr;
+
+	/* Issue the command to the chip */
+	/* should call the following function but only after the timer has been initialized
+	 * timer initialization is performed later than NAND initialization 
+     iproc_nand_dev_ready();
+	 */
+     
+	switch(iproc_cmd) {
+	case DEVICE_ID_READ:
+        writel(IPROC_R_NAND_CMD_EXT_ADDRESS_ADDR, cs << 16);
+        writel(IPROC_R_NAND_CMD_ADDRESS_ADDR, column);
+		writel(IPROC_R_NAND_CMD_START_ADDR, iproc_cmd);
+        iproc_check_nand_done(NAND_TIMEOUT, 0);
+	    mlocal->last_word = readl(IPROC_R_NAND_FLASH_DEVICE_ID_ADDR);
+	    break; 
+	case PARAMETER_READ:
+        writel(IPROC_R_NAND_CMD_EXT_ADDRESS_ADDR, cs << 16);
+        writel(IPROC_R_NAND_CMD_ADDRESS_ADDR, column);
+		writel(IPROC_R_NAND_CMD_START_ADDR, iproc_cmd);
+        iproc_check_nand_done(NAND_TIMEOUT, 0);
+	    break; 
+    case STATUS_READ:
+		/* just read the current status */
+        writel(IPROC_R_NAND_CMD_EXT_ADDRESS_ADDR, cs << 16);
+		writel(IPROC_R_NAND_CMD_START_ADDR, iproc_cmd);
+        iproc_check_nand_done(NAND_TIMEOUT, 0);
+	    mlocal->last_word = readl(IPROC_R_NAND_INTFC_STATUS_ADDR);
+		mlocal->last_word |= 0x80;
+	    break; 
+    case BLOCK_ERASE:
+		/* perform block erase */
+        rv = iproc_nand_block_erase(0, (uint64_t)page_addr * inand[0].page_size);
+		if (rv) {
+			printf("erase block %llx failed %x\n", (uint64_t)page_addr*inand[0].page_size, rv);
+		}
+	    break; 
+	case FLASH_RESET:
+		/* we just made a reset during initialization */
+		/* don't want to do another because timers may not yet be working */
+		break;
+	}
+}	
+
+static uint8_t iproc_nand_read_byte(struct mtd_info *mtd)
+{
+    uint32_t val = 0;
+	uint32_t offset;
+
+    switch (mlocal->last_cmd) {
+    case DEVICE_ID_READ:
+        switch (mlocal->last_byte) {
+		case 0:
+			mlocal->last_word = readl(IPROC_R_NAND_FLASH_DEVICE_ID_ADDR);
+            val = (mlocal->last_word & 0xFF000000) >> 24;
+			break;
+		case 1:
+            val = (mlocal->last_word & 0xFF0000) >> 16;
+			break;
+		case 2:
+            val = (mlocal->last_word & 0xFF00) >> 8;
+			break;
+		case 3:
+            val = mlocal->last_word & 0xFF;
+			break;
+		case 4:
+			mlocal->last_word = readl(IPROC_R_NAND_FLASH_DEVICE_ID_EXT_ADDR);
+            val = (mlocal->last_word & 0xFF000000) >> 24;
+			break;
+		case 5:
+            val = (mlocal->last_word & 0xFF0000) >> 16;
+			break;
+		case 6:
+            val = (mlocal->last_word & 0xFF00) >> 8;
+			break;
+		case 7:
+            val = mlocal->last_word & 0xFF;
+			break;
+		}
+        mlocal->last_byte++;
+        break;
+
+    case SPARE_AREA_READ:
+        offset  = mlocal->last_byte;
+        /* read the spare area at this offset */
+        val = readl(IPROC_R_NAND_SPARE_AREA_READ_OFS_0 + (offset & ~0x03));
+        val >>= (24 - ((offset & 0x03) << 3));
+        break;
+
+    case STATUS_READ:
+        val = mlocal->last_word & IPROC_NAND_INTFC_STATUS_MASK;
+        break;
+
+    case PARAMETER_READ:
+        if (mlocal->last_byte < IPROC_FLASH_CACHE_SIZE) {
+            offset = mlocal->last_byte;
+            val = readl(IPROC_R_NAND_FLASH_CACHE_0_ADDR + (offset & ~0x03));
+            val >>= (24 - ((offset & 0x03) << 3));
+        } else {
+            val = 0xFF;
+        }
+        mlocal->last_byte++;
+        break;
+    }
+
+#ifdef IPROC_NAND_DEBUG_CALLS
+    printf("%s: value 0x%02x\n", __func__, val & 0xFF);
+#endif
+    return (uint8_t)val;
+}
+
+static int iproc_nand_verify_buf(struct mtd_info *mtd, const uint8_t *buf, int len)
+{
+#ifdef IPROC_NAND_DEBUG_CALLS
+    printf("%s: called buf %x len %x\n", __func__, (unsigned)buf, len);
+#endif
+	return 0;
+}
+
+static void iproc_nand_cmd_ctrl(struct mtd_info *mtd, int cmd, unsigned int ctrl)
+{
+#ifdef IPROC_NAND_DEBUG_CALLS
+    printf("%s: called cmd %x ctrl %x\n", __func__, cmd, ctrl);
+#endif
+	/* deliberately left as NOOP */
+}
+
+static int nand_dev_ready(struct mtd_info *mtd)
+{
+	return _iproc_nand_dev_ready();
+}
+
+extern void iproc_nand_iomux(int);
+
+/* ======================== Public Functions =============================== */
+int board_nand_init(struct nand_chip *nand)
+{
+    int rv;
+    struct nand_chip *this;
+    
+    static int cs = 0;
+
+#ifdef IPROC_NAND_DEBUG_CALLS
+    printf("%s: called\n", __func__);
+#endif
+
+#if defined(CONFIG_CYGNUS)
+    iproc_nand_iomux(1);
+#endif
+	/* Initialize the contorller parameters */
+    rv = iproc_nand_init(cs);
+    if (rv) {
+        printf(KERN_ERR "rv=%d iProc NAND chip could not be initialized\n", rv);
+        return -EIO;
+    }
+
+    /* Get pointer to private data */
+    this = (struct nand_chip *) nand;
+
+    /* Set address of NAND IO lines , do not let mtd access */
+    this->IO_ADDR_W = (void __iomem *) 0xdeadbeef; 
+    this->IO_ADDR_R = (void __iomem *) 0xdeadbeef; 
+
+    /* Assign the device ready function, if available */
+    this->chip_delay = 100;
+
+    this->dev_ready = nand_dev_ready;
+    this->options = NAND_NO_SUBPAGE_WRITE | NAND_NO_AUTOINCR | NAND_SKIP_BBTSCAN;
+
+    this->cmd_ctrl = iproc_nand_cmd_ctrl;
+    this->cmdfunc = iproc_nand_command;
+
+    this->read_buf = iproc_nand_read_buf;
+    this->read_byte = iproc_nand_read_byte;
+
+    /* for writing buffers to flash */
+    this->write_page = iproc_nand_write_page;
+	this->block_bad = iproc_nand_block_bad;
+	this->block_markbad = iproc_nand_mark_bad;
+    this->verify_buf = iproc_nand_verify_buf; 
+    this->waitfunc = iproc_nand_waitfunc;
+
+    this->ecc.mode = NAND_ECC_HW;
+    this->ecc.size = 512;
+    this->ecc.layout = &iproc_nand_oob_layout;
+    this->ecc.bytes = iproc_nand_oob_layout.eccbytes / (inand[0].page_size/IPROC_FLASH_CACHE_SIZE);
+    this->ecc.write_page = iproc_nand_write_page_hwecc;
+    this->ecc.read_page = iproc_nand_read_page;
+    
+    /* Store chip select in priv of nand_chip */
+    this->priv = (void *)cs;
+    cs++;
+
+    return 0;
+}
+
+/***************************************************************************
+ * iproc_nand_set_cs_select
+ **************************************************************************/
+int iproc_nand_set_cs_select (int cs_select)
+{
+    if (cs_select < CHIPSELECT_MAX_COUNT) {
+        /* set up cs chosen, either cs0 or cs1 */
+        writel(IPROC_R_NAND_CMD_EXT_ADDRESS_ADDR, cs_select);
+        return NAND_STATUS_OK;
+    }
+
+    return NAND_CONFIG_PARAM;
+}
+
+/***************************************************************************
+ * iproc_nand_init
+ *
+ * This should be the first function to be called to initialize NAND Controller 
+ * and the connected flash
+ *******************************i******************************************/
+int iproc_nand_init(
+    uint32_t cs)
+{
+    volatile uint32_t reg_data;
+	int rv;
+
+#ifdef IPROC_NAND_DEBUG_CALLS
+    printf("%s: called\n", __func__);
+#endif
+	if (cs >= CHIPSELECT_MAX_COUNT)
+		return NAND_CONFIG_PARAM;
+
+    /* Global initialization */
+    if (inand == NULL) {
+
+#if !defined(CONFIG_IPROC_P7) || !CONFIG_IPROC_P7
+        /* read the strap information first to see if it supports NAND */
+        reg_data = readl(ROM_S0_IDM_IO_STATUS);
+        if (((reg_data & IPROC_IDM_SKU_MASK) >> IPROC_IDM_SKU_SHIFT) == IDM_SKU_BCM953010) {
+            /* this is bcm953010 which does not have a NAND flash */
+            printf("NAND not supported on this iProc board\n");
+            return NAND_NOT_SUPPORTED;
+        }
+#endif /* !CONFIG_IPROC_P7 */
+
+        inand = (INAND *)malloc (sizeof(INAND) * CHIPSELECT_MAX_COUNT);
+        if (!inand) {
+            printf("Error allocating memory for inand\n");
+            return NAND_ALLOC;
+        }
+        memset(inand, 0, sizeof(INAND)* CHIPSELECT_MAX_COUNT);
+
+        mlocal = (struct mtd_local *)malloc (sizeof(struct mtd_local));
+        if (!mlocal) {
+            printf("Error allocating memory for mlocal\n");
+            return NAND_ALLOC;
+        }
+        memset(mlocal, 0, sizeof(struct mtd_local));
+/////#ifdef CONFIG_IPROC_SPL
+////#ifndef CONFIG_SPL_BUILD
+        /* Take the NAND block out of reset */
+        writel(IPROC_R_IDM_IDM_RESET_CONTROL_ADDR, 0x1);
+        writel(IPROC_R_IDM_IDM_RESET_CONTROL_ADDR, 0x0);
+        reg_data = readl(IPROC_R_NAND_CS_NAND_SELECT_ADDR);
+        /* try to send null cmd */
+		
+		writel(IPROC_R_NAND_CMD_EXT_ADDRESS_ADDR, 0 << 16);
+        writel(IPROC_R_NAND_CMD_START_ADDR, 0);
+		
+		udelay(10000);
+		
+        /* Set the autoconfig bit */
+        reg_data &= ~(IPROC_NAND_SELECT_AUTO_DEVICE_ID_BIT | IPROC_NAND_SELECT_AUTO_DEVID_CONFIG_BIT);
+        writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data);
+        reg_data |= IPROC_NAND_SELECT_AUTO_DEVICE_ID_BIT | IPROC_NAND_SELECT_AUTO_DEVID_CONFIG_BIT;
+        writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data);
+<<<<<<< HEAD
+#endif
+=======
+////#endif
+////#endif
+    }
+
+>>>>>>> cygnus_bringup_sync
+    if (inand && (inand[cs].initialized == IPROC_INIT_MAGIC))
+        return NAND_STATUS_OK;
+
+    rv = iproc_nand_config(cs);
+<<<<<<< HEAD
+#ifndef CONFIG_SPL_BUILD
+=======
+
+////#ifdef CONFIG_IPROC_SPL
+////#ifndef CONFIG_SPL_BUILD
+>>>>>>> cygnus_bringup_sync
+    if (cs == CONFIG_SYS_MAX_NAND_DEVICE - 1) {
+        /* Clear the autoconfig bit to indiciate to indicate the NAND has been configured manually 
+         * This is the sign to the Linux NAND driver that the bootloader performed NAND configuration
+         */
+        reg_data = readl(IPROC_R_NAND_CS_NAND_SELECT_ADDR);
+        /* clear the autoconfig bit */
+        reg_data &= ~IPROC_NAND_SELECT_AUTO_DEVID_CONFIG_BIT;
+        writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data);
+    }
+<<<<<<< HEAD
+#endif
+	return rv;
+#endif
+    }
+=======
+////#endif
+////#endif
+>>>>>>> cygnus_bringup_sync
+
+    /* Take the NAND block out of reset */
+    writel(IPROC_R_IDM_IDM_RESET_CONTROL_ADDR, 0x1);
+    writel(IPROC_R_IDM_IDM_RESET_CONTROL_ADDR, 0x0);
+    reg_data = readl(IPROC_R_NAND_CS_NAND_SELECT_ADDR);
+     
+    /* Set the autoconfig bit */
+    reg_data &= ~(IPROC_NAND_SELECT_AUTO_DEVICE_ID_BIT | IPROC_NAND_SELECT_AUTO_DEVID_CONFIG_BIT);
+    writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data);
+    reg_data |= IPROC_NAND_SELECT_AUTO_DEVICE_ID_BIT | IPROC_NAND_SELECT_AUTO_DEVID_CONFIG_BIT;
+    writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data);
+
+    if (inand && (inand[cs].initialized == IPROC_INIT_MAGIC))
+        return NAND_STATUS_OK;
+
+    rv = iproc_nand_config(cs);
+
+    if (cs == CONFIG_SYS_MAX_NAND_DEVICE - 1) {
+        /* Clear the autoconfig bit to indiciate to indicate the NAND has been configured manually 
+         * This is the sign to the Linux NAND driver that the bootloader performed NAND configuration
+         */
+        reg_data = readl(IPROC_R_NAND_CS_NAND_SELECT_ADDR);
+        /* clear the autoconfig bit */
+        reg_data &= ~IPROC_NAND_SELECT_AUTO_DEVID_CONFIG_BIT;
+        writel(IPROC_R_NAND_CS_NAND_SELECT_ADDR, reg_data);
+    }
+	return rv;
+}
+
+/***************************************************************************
+ * iproc_nand_onfi_parameters_pages
+ *
+ * To be called after initializing ONFI device
+ *******************************i******************************************/
+int iproc_nand_onfi_parameter_pages(
+    int cs,
+    uint32_t *param_page)
+{
+    uint8_t i;
+    uint8_t state = 0;
+    NAND_STATUS status = NAND_STATUS_OK;
+
+    /* Chip select */
+    writel(IPROC_R_NAND_CMD_EXT_ADDRESS_ADDR, cs << 16);
+    
+    /* get first two pages */
+    status = iproc_nand_onfi_parameters_cmd(state++);
+    if (status != NAND_STATUS_OK) {
+        return status;
+    }
+
+    for (i = 0; i <  128; i++) {
+        param_page[i] = readl((IPROC_R_NAND_FLASH_CACHE_0_ADDR + i*4));
+    }
+
+    /* get third one */
+    status = iproc_nand_onfi_parameters_cmd(state);
+    if (status != NAND_STATUS_OK) {
+        return status;
+    }
+
+    for (i = 0; i <  64; i++) {
+        param_page[128+i] = readl((IPROC_R_NAND_FLASH_CACHE_0_ADDR + i*4));
+    }
+
+    /* convert data to little endian since hardware stores it in Cache as big endian */
+    iproc_endian_swap (param_page , (128+64));
+
+    return NAND_STATUS_OK;
+}
+
+/***************************************************************************
+ * iproc_nand_ecc_set_config
+ *******************************i******************************************/
+int iproc_nand_ecc_set_config(
+    uint32_t cs, 
+    uint32_t ecc_config)
+{
+    uint32_t reg_data;
+    uint32_t acc_ctl_reg;
+
+    if (inand[cs].initialized != IPROC_INIT_MAGIC)
+        return NAND_UNINITIALIZED;
+
+    acc_ctl_reg = REG_ACC_CONTROL(cs);
+    reg_data = readl(acc_ctl_reg);
+    reg_data &= 0xFFF0001F;
+    reg_data |= ecc_config;
+
+    writel(acc_ctl_reg, reg_data);
+
+    return NAND_STATUS_OK;
+}
+
+/***************************************************************************
+ * iproc_nand_onfi_ecc_update
+ *******************************i******************************************/
+uint32_t iproc_nand_onfi_ecc_update (
+    int cs,
+    uint32_t ecc_corr_bits)
+{
+    uint32_t ecc_config;
+    uint32_t ecc_level;
+    uint32_t ecc_bytes_req;
+    uint32_t page_size; 
+
+    if (inand[cs].initialized != IPROC_INIT_MAGIC)
+        return NAND_UNINITIALIZED;
+
+    page_size = inand[cs].page_size; 
+
+    /* check spare area limits. */
+    ecc_config = inand[cs].spare_area_bytes;
+    if (ecc_config > 0x40) ecc_config = 0x40;
+        else if (ecc_config < 0x10)
+            /* controller does not handle spare area less than 16 bytes. */
+            return 0;
+
+    /* make sure spare area number is even for 16 bit devices */
+    if ((ecc_config & 0x01) && (inand[cs].device_width == 16)) ecc_config += 0x01;
+
+    if (ecc_corr_bits == 0){
+        return ecc_config;
+    }
+
+    /* For 1 bit correction we have two choices depending on the */
+    /* size of spare area */
+    if ((ecc_corr_bits == 1) && (ecc_config == 0x10)) {
+        /* use hamming code */
+        ecc_level = 0x000F0000;
+        ecc_config |= ecc_level;
+        return ecc_config;
+    }
+
+    else if ((ecc_corr_bits == 1) && (ecc_config != 0x10)) {
+        /* use BCH code */
+        ecc_level = 0x00010000;
+        ecc_config |= ecc_level;
+        return ecc_config;
+    }
+
+    /* At this point if 'n' bit correction < 8, we roughly have */
+    /* enough spare area size that can support that */
+    else if (ecc_corr_bits < 8) {
+        ecc_level = ecc_corr_bits;
+        ecc_level <<= 16;
+        ecc_config |= ecc_level;
+        return ecc_config;
+    }
+
+    /* we need to check to see if we have enough spare area for */
+    /* the required ECC level. */
+    else if (ecc_corr_bits < 18){
+        /* check spare bytes required for ECC level */
+        ecc_bytes_req = (ecc_corr_bits * 14 / 8) + 2;
+        if (ecc_bytes_req > inand[cs].spare_area_bytes)
+            /* we can not handle the required ECC level */
+            /* with spare area size we have. */
+            return 0;
+
+        ecc_level = ecc_corr_bits;
+        ecc_level <<= 16;
+        ecc_config |= ecc_level;
+        return ecc_config;
+    }
+
+    /* if ECC level is higher than 17 we have to use bigger */
+    /* sector size */
+    else
+    {
+        if (page_size == IPROC_FLASH_CACHE_SIZE)
+        {
+            /* page size does not fit bigger sector */
+            return 0;
+        }
+
+        else
+        {
+            ecc_bytes_req = ((ecc_corr_bits * 14 / 8) + 2) / 2;
+            if (ecc_bytes_req > inand[cs].spare_area_bytes)
+                /* we can not handle the required ECC level */
+                /* with spare area size we have. */
+                return 0;
+
+            ecc_level = ((ecc_corr_bits >> 1) << 16) | (IPROC_NAND_1K_SECTOR);
+            ecc_config |= ecc_level;
+            return ecc_config;
+        }
+    }
+}
+
+/***************************************************************************
+ * iproc_nand_get_config
+ *******************************i******************************************/
+int iproc_nand_get_config (
+    int cs) 
+{
+    uint32_t reg_data = 0;
+    uint32_t block_code = 0; 
+    uint32_t page_code = 0;
+    uint32_t device_code = 0;
+    int i, found;
+
+    /* read the register configuartion */
+    reg_data = readl(REG_CONFIG(cs));
+#ifdef NAND_INFO
+    printf("cs %d REG_CONFIG %x read\n", cs, reg_data);
+#endif
+
+    memset(&inand[cs], 0, sizeof(INAND));
+    block_code = ((reg_data & IPROC_NAND_BLOCK_SIZE_MASK) >> IPROC_NAND_BLOCK_SIZE_SHIFT);
+#ifdef NAND_INFO
+    printf("cs %d block_code %x\n", cs, block_code);
+#endif
+
+    for (i = 0, found = 0; i < ARRAY_SIZE(block_sizes); i++) {
+        if (i == block_code) {
+            inand[cs].block_size = block_sizes[i];
+            found = 1;
+            break;
+        }
+    }
+    if (!found)
+        return NAND_CONFIG_UNKNOWN;
+#ifdef NAND_INFO
+    printf("cs %d block size %d KB\n", cs, inand[cs].block_size);
+#endif
+
+    page_code = ((reg_data & IPROC_NAND_PAGE_SIZE_MASK) >> IPROC_NAND_PAGE_SIZE_SHIFT);
+    for (i = 0, found = 0; i < ARRAY_SIZE(page_sizes); i++) {
+        if (i == page_code) {
+            inand[cs].page_size = page_sizes[i];
+            found = 1;
+            break;
+        }
+    }
+    if (!found)
+        return NAND_CONFIG_UNKNOWN;
+#ifdef NAND_INFO
+    printf("cs %d page size %d bytes\n", cs, inand[cs].page_size);
+#endif
+
+    device_code = ((reg_data & IPROC_NAND_DEVICE_SIZE_MASK) >> IPROC_NAND_DEVICE_SIZE_SHIFT);
+    for (i = 0, found = 0; i < ARRAY_SIZE(device_sizes); i++) {
+        if (i == device_code) {
+            inand[cs].device_size = device_sizes[i];
+            found = 1;
+            break;
+        }
+    }
+    if (!found)
+        return NAND_CONFIG_UNKNOWN;
+#ifdef NAND_INFO
+    printf("cs %d device size %d MB\n", cs, inand[cs].device_size);
+#endif
+
+    inand[cs].device_width = 8;
+    if (reg_data & IPROC_NAND_SELECT_AUTO_DEVID_CONFIG_BIT)
+        inand[cs].device_width = 16;
+#ifdef NAND_INFO
+    printf("cs %d device width %d bit\n", cs, inand[cs].device_width);
+#endif
+    inand[cs].initialized = IPROC_INIT_MAGIC;
+
+#ifdef NAND_INFO
+    printf("NAND: %d MiB total, %u KiB blocks, %u KiB pages, %uB OOB, %u-bit\n", 
+            inand[cs].device_size, inand[cs].block_size/1024, 
+            inand[cs].page_size/1024, inand[cs].spare_area_bytes, 
+            inand[cs].device_width);
+#endif
+
+    return NAND_STATUS_OK;
+}
+
+/***************************************************************************
+ * iproc_nand_ecc_get_config
+ *******************************i******************************************/
+int iproc_nand_ecc_get_config(
+    uint32_t cs, 
+    uint32_t *ecc_level)
+{
+    uint32_t rdata;
+    uint32_t acc_ctl_reg;
+
+    acc_ctl_reg = REG_ACC_CONTROL(cs);
+    rdata = readl(acc_ctl_reg);
+
+    *ecc_level = (rdata & IPROC_NAND_ECC_LEVEL_MASK) >> IPROC_NAND_ECC_LEVEL_SHIFT;
+
+    return NAND_STATUS_OK;
+}
+
+/***************************************************************************
+ * iproc_nand_page_program
+ *******************************i******************************************/
+int iproc_nand_page_program(
+    int cs,
+    uint64_t page_addr,
+    uint8_t* src_addr,
+    uint32_t data_len)
+{
+    int rv;
+	uint64_t block_addr;
+	uint32_t data_written = 0;
+	uint32_t len;
+    
+    if (!inand || (inand[cs].initialized != IPROC_INIT_MAGIC)) {
+        rv = iproc_nand_config(cs);
+		if (rv) {
+			printf ("NAND config error %d\n", rv);
+			return rv;
+		}
+	}
+
+#ifdef IPROC_NAND_DEBUG_CALLS
+    printf("%s: called page_addr %llx len %x from %x\n", __func__, page_addr, data_len, (unsigned)src_addr);
+#endif
+
+	while (data_written < data_len) {
+		/* write it one block at a time */
+		len = inand[cs].page_size;
+
+		if (data_len - data_written < inand[cs].page_size) 
+		    len = data_len - data_written;
+
+		block_addr = page_addr & (~(inand[cs].block_size - 1));
+		if (page_addr == block_addr) {
+			iproc_nand_block_erase (cs, block_addr);
+		}
+
+        rv = _iproc_nand_page_program(cs, page_addr, src_addr, len); 
+		if (rv) {
+#ifdef IPROC_NAND_WARNING
+			printf ("_iproc_nand_page_program returned %d\n", rv);
+#endif
+			return rv;
+		}
+		data_written += inand[cs].page_size;
+		page_addr += inand[cs].page_size;
+	}
+    return 0; 
+}
+
+/***************************************************************************
+ * iproc_nand_page_read
+ *******************************i******************************************/
+int iproc_nand_page_read(
+    int cs,
+    uint64_t page_addr,
+    uint8_t *dst_addr,
+    uint32_t data_len)
+{
+    int rv;
+    
+    if (!inand || (inand[cs].initialized != IPROC_INIT_MAGIC)) {
+        rv = iproc_nand_config(cs);
+		if (rv) {
+			printf ("NAND config error %d\n", rv);
+			return rv;
+		}
+	}
+
+    rv =  _iproc_nand_page_read(cs, page_addr, dst_addr, data_len); 
+    return rv;
+}
+
+/***************************************************************************
+ * iproc_nand_block_erase
+ *******************************i******************************************/
+int iproc_nand_block_erase(
+    int cs,
+    uint64_t block_address) 
+{
+    int rv;
+    
+#ifdef IPROC_NAND_DEBUG_CALLS
+    printf("%s: called block_addr %llx\n", __func__, block_address);
+#endif
+    if (!inand || (inand[cs].initialized != IPROC_INIT_MAGIC)) {
+        rv = iproc_nand_config(cs);
+		if (rv) {
+			printf ("NAND config error %d\n", rv);
+			return rv;
+		}
+	}
+
+    return _iproc_nand_block_erase(cs, block_address); 
+}
diff --git a/arch/arm/cpu/armv7/iproc/l2cache.c b/arch/arm/cpu/armv7/iproc/l2cache.c
index 030cd9b..ea4051a 100644
--- a/arch/arm/cpu/armv7/iproc/l2cache.c
+++ b/arch/arm/cpu/armv7/iproc/l2cache.c
@@ -1,30 +1,18 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved. 
- *  
- * Permission to use, copy, modify, and/or distribute this software for any 
- * purpose with or without fee is hereby granted, provided that the above 
- * copyright notice and this permission notice appear in all copies. 
- *  
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY 
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION 
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
+ * $Copyright Open Broadcom Corporation$ 
  */
 #include <common.h>
 #include <config.h>
 #include <asm/arch/iproc.h>
 #include <asm/system.h>
 
-void scu_disable() {
+void scu_disable(void) {
 	scu_reg_struct_ptr scu_ptr = (scu_reg_struct_ptr)IPROC_PERIPH_SCU_REG_BASE;
 
 	scu_ptr->control &= ~IPROC_SCU_CTRL_SCU_EN;
 }
 
-void scu_enable() {
+void scu_enable(void) {
 	scu_reg_struct_ptr scu_ptr = (scu_reg_struct_ptr)IPROC_PERIPH_SCU_REG_BASE;
 
 	scu_ptr->invalidate = 0xFF;
@@ -34,7 +22,7 @@ void scu_enable() {
 
 }
 
-void l2cc_init() 
+void l2cc_init(void)
 {
 	uint32_t regval;
 	l2cc_reg_struct_ptr l2cc_ptr = (l2cc_reg_struct_ptr)IPROC_L2CC_REG_BASE;
@@ -48,7 +36,7 @@ void l2cc_init()
 
 }
 
-void l2cc_invalidate() 
+void l2cc_invalidate(void)
 {
 	l2cc_reg_struct_ptr l2cc_ptr = (l2cc_reg_struct_ptr)IPROC_L2CC_REG_BASE;
 	
@@ -56,7 +44,7 @@ void l2cc_invalidate()
 	l2cc_ptr->inv_way = 0x0000FFFF;
 }
 
-void l2cc_unlock() 
+void l2cc_unlock(void)
 {
 	l2cc_reg_struct_ptr l2cc_ptr = (l2cc_reg_struct_ptr)IPROC_L2CC_REG_BASE;
 	
@@ -65,7 +53,7 @@ void l2cc_unlock()
 }
 
 
-int l2cc_enable() 
+int l2cc_enable(void)
 {
 	int i;
 	l2cc_reg_struct_ptr l2cc_ptr = (l2cc_reg_struct_ptr)IPROC_L2CC_REG_BASE;
@@ -95,9 +83,10 @@ int l2cc_enable()
 	//asm("isb sy"); 
 	//asm("dsb sy");
 */
+	return 0;
 }
 
-int l2cc_disable()
+int l2cc_disable(void)
 {
 	int i;
 	l2cc_reg_struct_ptr l2cc_ptr = (l2cc_reg_struct_ptr)IPROC_L2CC_REG_BASE;
@@ -114,9 +103,10 @@ int l2cc_disable()
 		return (-1);
 	}
 	l2cc_ptr->control = 0;
+	return 0;
 }
 
-#if 0
+#if 0 /* Enable if needed for NetBSD */
 void cpu_cache_initialization(void)
 {
 	v7_outer_cache_enable();
diff --git a/arch/arm/cpu/armv7/iproc/mde/cde_local_memc_ddr_0.h b/arch/arm/cpu/armv7/iproc/mde/cde_local_memc_ddr_0.h
index c419499..18b15a1 100644
--- a/arch/arm/cpu/armv7/iproc/mde/cde_local_memc_ddr_0.h
+++ b/arch/arm/cpu/armv7/iproc/mde/cde_local_memc_ddr_0.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /***************************************************************************
  *     Copyright (c) 1999-2011, Broadcom Corporation
diff --git a/arch/arm/cpu/armv7/iproc/mde/cde_local_memc_gen_0.h b/arch/arm/cpu/armv7/iproc/mde/cde_local_memc_gen_0.h
index 73f4302..f172370 100644
--- a/arch/arm/cpu/armv7/iproc/mde/cde_local_memc_gen_0.h
+++ b/arch/arm/cpu/armv7/iproc/mde/cde_local_memc_gen_0.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /***************************************************************************
  *     Copyright (c) 1999-2011, Broadcom Corporation
diff --git a/arch/arm/cpu/armv7/iproc/mde/ddr40_phy_control_regs.h b/arch/arm/cpu/armv7/iproc/mde/ddr40_phy_control_regs.h
index ca282d1..14faef6 100644
--- a/arch/arm/cpu/armv7/iproc/mde/ddr40_phy_control_regs.h
+++ b/arch/arm/cpu/armv7/iproc/mde/ddr40_phy_control_regs.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /***************************************************************************
  *     Copyright (c) 1999-2011, Broadcom Corporation
diff --git a/arch/arm/cpu/armv7/iproc/mde/ddr40_phy_word_lane_0.h b/arch/arm/cpu/armv7/iproc/mde/ddr40_phy_word_lane_0.h
index e23eb54..29f0f1c 100644
--- a/arch/arm/cpu/armv7/iproc/mde/ddr40_phy_word_lane_0.h
+++ b/arch/arm/cpu/armv7/iproc/mde/ddr40_phy_word_lane_0.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /***************************************************************************
  *     Copyright (c) 1999-2011, Broadcom Corporation
diff --git a/arch/arm/cpu/armv7/iproc/mde/local_ddr23_ctl_regs_0.h b/arch/arm/cpu/armv7/iproc/mde/local_ddr23_ctl_regs_0.h
index 8a59289..9a4bb02 100644
--- a/arch/arm/cpu/armv7/iproc/mde/local_ddr23_ctl_regs_0.h
+++ b/arch/arm/cpu/armv7/iproc/mde/local_ddr23_ctl_regs_0.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /***************************************************************************
  *     Copyright (c) 1999-2011, Broadcom Corporation
diff --git a/arch/arm/cpu/armv7/iproc/mde/local_memc_arb_0.h b/arch/arm/cpu/armv7/iproc/mde/local_memc_arb_0.h
index 644efce..e47ac34 100644
--- a/arch/arm/cpu/armv7/iproc/mde/local_memc_arb_0.h
+++ b/arch/arm/cpu/armv7/iproc/mde/local_memc_arb_0.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /***************************************************************************
  *     Copyright (c) 1999-2011, Broadcom Corporation
diff --git a/arch/arm/cpu/armv7/iproc/mde/local_pri_arb_msa_regs.h b/arch/arm/cpu/armv7/iproc/mde/local_pri_arb_msa_regs.h
index d1366d5..fd91a43 100644
--- a/arch/arm/cpu/armv7/iproc/mde/local_pri_arb_msa_regs.h
+++ b/arch/arm/cpu/armv7/iproc/mde/local_pri_arb_msa_regs.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /***************************************************************************
  *     Copyright (c) 1999-2011, Broadcom Corporation
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde.h b/arch/arm/cpu/armv7/iproc/mde/mde.h
index f80d1ef..01e75c9 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde.h
+++ b/arch/arm/cpu/armv7/iproc/mde/mde.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_cmd.c b/arch/arm/cpu/armv7/iproc/mde/mde_cmd.c
index cc1da91..244662c 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_cmd.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_cmd.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
@@ -325,3 +307,4 @@ MDE_CMD *mdeParseCmds ( sMde_t *mde)
   }
   return (MDE_CMD*)&mdeNoSuch;
 }
+
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_code_head.c b/arch/arm/cpu/armv7/iproc/mde/mde_code_head.c
index ce487cf..0748d98 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_code_head.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_code_head.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 
 const char cde_text_head [] = "cde_text_head";
@@ -25,3 +7,4 @@ extern void cde_code_head (void);
 void cde_code_head (void)
 {
 }
+
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_code_tail.c b/arch/arm/cpu/armv7/iproc/mde/mde_code_tail.c
index 3d34589..f4f6573 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_code_tail.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_code_tail.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 const char cde_text_tail [] = "cde_text_tail";
 extern void cde_code_tail (void);
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_common_headers.h b/arch/arm/cpu/armv7/iproc/mde/mde_common_headers.h
index e785305..a735690 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_common_headers.h
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_common_headers.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_def.h b/arch/arm/cpu/armv7/iproc/mde/mde_def.h
index 8e872d4..86f3023 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_def.h
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_def.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_dev.c b/arch/arm/cpu/armv7/iproc/mde/mde_dev.c
index f93de65..c794c7f 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_dev.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_dev.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
@@ -163,6 +145,9 @@ void mdeInit (sMde_t *mde)
 
   // setup find_dq handling according to PHY data width
   // unless specified, default is 32
+#if 0
+  host_printf ("Skipping set up chip specific init for now\n");
+#else
   host_printf ("set up find_dq handlers for %d-bit PHY\n", PHY_WIDTH);
 #if PHY_WIDTH == 16
   mde->fdq_log_error    = find_all_errors_all_16;
@@ -178,4 +163,6 @@ void mdeInit (sMde_t *mde)
 
   // DDR frequency calcuation
   mde->ddr_frequency = mde_do_ana_pll_calc ( mde );
+#endif
 }
+
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_find_dq.c b/arch/arm/cpu/armv7/iproc/mde/mde_find_dq.c
index 47e9d83..03345b4 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_find_dq.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_find_dq.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_find_dq_passthrough.c b/arch/arm/cpu/armv7/iproc/mde/mde_find_dq_passthrough.c
index fc2cfae..3db56a1 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_find_dq_passthrough.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_find_dq_passthrough.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_local_cmd.c b/arch/arm/cpu/armv7/iproc/mde/mde_local_cmd.c
index 49cb7ba..c7444f9 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_local_cmd.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_local_cmd.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_local_defs.h b/arch/arm/cpu/armv7/iproc/mde/mde_local_defs.h
index 0185c6b..2466208 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_local_defs.h
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_local_defs.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
@@ -115,13 +97,23 @@
  */
 
 /// NORTHSTAR specific implementation
+#if 0
+extern void     putc (unsigned val);
+extern unsigned getc (void);
+extern unsigned tstc (void);
+extern unsigned printf (const char *fmt, ...);
+#else
 #include <common.h>
+#endif
 
 #define host_console_write    putc
 #define host_console_read     getc
 #define host_console_rx_ready tstc
 #define host_printf           printf
 
+#if 0
+extern unsigned get_timer ();
+#endif
 //define host_get_elapsed_msec() get_timer(0)
 
 #define NORTHSTAR_REG_BASE    0x18010800
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_local_headers.h b/arch/arm/cpu/armv7/iproc/mde/mde_local_headers.h
index 755c0e8..e8e04e4 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_local_headers.h
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_local_headers.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 #if PLATFORM == HOST_LINUX
 //#include <linux/stdio.h>
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_main.c b/arch/arm/cpu/armv7/iproc/mde/mde_main.c
index 5606321..a57d621 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_main.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_main.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_mem.c b/arch/arm/cpu/armv7/iproc/mde/mde_mem.c
index 95ef273..02072f7 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_mem.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_mem.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
@@ -212,3 +194,4 @@ unsigned mdeMemVerify ( sMde_t *mde )
 
   return DIAG_RET_OK;
 }
+
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_mem_buffered.c b/arch/arm/cpu/armv7/iproc/mde/mde_mem_buffered.c
index 95ef273..02072f7 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_mem_buffered.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_mem_buffered.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
@@ -212,3 +194,4 @@ unsigned mdeMemVerify ( sMde_t *mde )
 
   return DIAG_RET_OK;
 }
+
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_mem_direct.c b/arch/arm/cpu/armv7/iproc/mde/mde_mem_direct.c
index a7d1a8a..bb671d4 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_mem_direct.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_mem_direct.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_mt.c b/arch/arm/cpu/armv7/iproc/mde/mde_mt.c
index f616d74..46afc19 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_mt.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_mt.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
@@ -291,7 +273,7 @@ unsigned mtMode1Handler ( sMde_t *mde )
 
 unsigned mtMode2Handler ( sMde_t *mde )
 {
-#if 0 //    // for NS - 
+#if 0 //// for NS - 
 #define BITFLIP_LOOP_LIM        20
 #define DEFAULT_ADDRCHUNK_SIZE  64
 #define CHUNK_END_POS           27
@@ -458,6 +440,17 @@ unsigned mtMode3Handler ( sMde_t *mde )
 	
 	// The failing addresses are cacheable addresses 
 	// There is no need to translate as in case 0 and 1
+#if 0
+	if ( mde -> memtester[this_mt].uAddrFailCnt > ADDR_FAIL_CNT)
+	  mde -> memtester[this_mt].uAddrFailCnt = ADDR_FAIL_CNT;
+	
+	// translate uncached to cached address
+	cache_to_uncache_address_offset = mde->memtester[this_mt].start_addr_cached - mde->memtester[this_mt].start_addr_uncached;
+	
+	for (ii = 0; ii < mde -> memtester[this_mt].uAddrFailCnt; ii++)  {
+		mde->memtester[this_mt].uAddxFail [ii] = mde->memtester[this_mt].uAddxFail[ii] + cache_to_uncache_address_offset; 
+	}
+#endif
 
   }
   
@@ -666,3 +659,4 @@ unsigned mtRunTest ( sMde_t *mde )
   return DIAG_RET_OK;
   
 }
+
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_mt.h b/arch/arm/cpu/armv7/iproc/mde/mde_mt.h
index c88e68b..daa9a64 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_mt.h
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_mt.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /* ========================================================================== */
 /*                                                                            */
@@ -36,3 +18,6 @@
 #define get_random_seed  host_get_elapsed_msec
 
 #endif // MDE_MT_H
+
+
+
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_mt_buffered_rw.c b/arch/arm/cpu/armv7/iproc/mde/mde_mt_buffered_rw.c
index 7bff78c..8f1656a 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_mt_buffered_rw.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_mt_buffered_rw.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*
   This file is a part of mde_mt
@@ -189,6 +171,7 @@ uint32_t TmtMemWriteAndVerify ( uint32_t    uStartAddx,
 #define SPINNER_LIMIT 0x10000000
 #define ERROR_LIMIT   16
 
+#if 1
 unsigned mtMode013ReadTest (  sMde_t *mde )
 {
 #define RDBUF_ISIZE 4096
@@ -357,6 +340,52 @@ unsigned mtMode013ReadTest (  sMde_t *mde )
 	ii += RDBUF_ISIZE;
 
 	// continue testing if there is more than one memory tester
+#if 0 // need to upgrade this	  
+#if LOCAL_MEM_TESTER_COUNT > 1 // more than one memory tester
+	mde->memtester[1].act_data = *mde->memtester [1].p_read;
+
+	// expected now has the correct value
+	if (mde->memtester[1].act_data != exp_data) {
+	  // check if the address is in failed array
+	  diff = 0;
+	  for (; jj < mde->memtester [1].uAddrFailCnt; jj++) {
+		if ((unsigned)mde->memtester [1].p_read < mde->memtester[1].uAddxFail[jj]) {
+		  // read address smaller than what's in the array, not found
+		  break;
+		}
+		else if ((unsigned)mde->memtester[1].p_read == mde->memtester[1].uAddxFail[jj]) {
+		  // found in the array, increment array to next address
+		  diff = 1;
+		  continue;
+		}
+		else {
+		  // read address larger than what's in the array, this is unexpected
+		  DBGP(" **Unexpected index %d uAddxFail1 %08x addr %08x read %08x\n", \
+			   jj, mde->memtester[1].uAddxFail[jj], mde->memtester [1].p_read, mde->memtester[1].act_data);
+		}
+	  }              
+	  // do not accumulate this error if found in failed array
+	  if (diff) {
+		//debug code
+		DBGP (" **Found index %d uAddxFail1 %08x addr %08x read %08x\n", \
+			  jj-1, mde->memtester[1].uAddxFail[jj-1], mde->memtester[1].p_read, mde->memtester[1].act_data);
+	  } else {
+		// otherwise accumulate this error
+		mde->memtester[1].uTotalErr++;
+		//// accumulate error statistics
+		diff = mde->memtester[1].act_data ^ exp_data;
+		mde->memtester[1].uTotalErrMap |= fdq_binary ( mde->memtester[1].p_read, diff);
+		mde->memtester[1].addx = (unsigned) mde->memtester [1].p_read;
+		mde->memtester[1].exp_data = exp_data;
+		
+		mde->fdq_log_error ( mde, 1 );
+		
+		DBGP ("  **Failed: mt %d: @%08x Expected %08x read %08x XOR %08x\n", \
+			  1, mde->memtester[1].addx, mde->memtester[1].exp_data, mde->memtester[1].act_data, diff);
+	  }
+	}
+#endif
+#endif
   } // for loop reading the full size
 
   // done testing for each tester to cover the entire range
@@ -367,3 +396,208 @@ unsigned mtMode013ReadTest (  sMde_t *mde )
   return error;
   //  return DIAG_RET_OK;
 }
+
+
+
+#else
+inline unsigned mtMode013ReadTest (  sMde_t *mde )
+{
+#define RDBUF_ISIZE 4096
+#define RDBUF_BSIZE (RDBUF_ISIZE*4)
+
+  unsigned ii, jj, kk;
+
+  //  unsigned expected;
+
+  unsigned diff;
+  unsigned size = mde->memtester [0].test_wsize;
+  unsigned read_time;
+  unsigned mt;
+  unsigned exp_data;
+  unsigned fdq_result;
+  // allocate read buffer
+
+  // NOTE: The size of total memory to test MUST be a multiple of 1024
+  // This should not be an issue if the block size is in MEGA bytes range
+
+  unsigned readbuf [RDBUF_ISIZE];
+  unsigned *pbfr;
+  unsigned *pbfv;
+
+  int brinx;
+  int bvinx;
+
+  MT_TIME read_start;
+  MT_TIME read_stop;
+  tinymt32_t tinymt;
+
+  // initialization
+  tinymt.mat1 = 0;
+  tinymt.mat2 = 0;
+  tinymt.tmat = 0;
+
+#define USE_MCP 1
+
+#if USE_MCP
+  host_printf ("MT mode 013 -> MCP read (size %d INTS):\n", RDBUF_ISIZE);
+#else
+  host_printf ("MT mode 013 -> Buffered read (size %d INTS):\n", RDBUF_ISIZE);
+#endif
+  // initialization
+  
+  for (mt = 0; mt < mde->memtester_count; mt ++ ) {
+	// set the read pointer to the cached address of this memtester
+	mde->memtester [mt].p_read = (unsigned *)mde->memtester [mt].start_addr_cached;
+	tinymt32_init ( &mde->memtester [mt].tiny , mde->memtester [mt].seed );
+  }
+  // record the start time before read test
+  read_start.msec = host_get_elapsed_msec ();
+
+  // Do staggered read, memc0, memc1, memc0, memc1, ...
+  // Do test for all memtesterd found: read a location, compare against expected
+
+  // WARNING: hardwired to memtester 0
+
+  for (ii = 0, jj = 0, kk = 0; ii < size;
+	   /* DO NOT increment ii here - do it inside the looop*/ ) {
+	// read a block of data 
+#if USE_MCP
+	memcpy ( readbuf, mde->memtester [0].p_read, RDBUF_BSIZE );
+#else
+	for (brinx = 0, pbfr = mde->memtester [0].p_read; brinx < RDBUF_ISIZE; brinx++ ) {
+	  readbuf [ brinx ] = *pbfr++;
+	}
+#endif
+
+	// verify a block of data - one INT at a time (as in direct mode)
+	for (bvinx = 0, pbfv = mde->memtester [0].p_read; bvinx < RDBUF_ISIZE; bvinx++, pbfv++ ) {
+#if CFG_TMT_RANDOM_MODE == 0
+#warning: RANDOM_MODE 0
+	  exp_data = tinymt32_generate_uint32( &tinymt);
+#endif
+      
+#if CFG_TMT_RANDOM_MODE == 1
+#warning: RANDOM_MODE 1
+	  if ( mt == 0) exp_data = tinymt32_generate_uint32( &tinymt);
+#endif
+      
+#if CFG_TMT_RANDOM_MODE == 2 
+#warning: RANDOM_MODE 2
+	  if ((bvinx & 1) == 0) exp_data = tinymt32_generate_uint32( &tinymt);
+	  else exp_data = ~exp_data;
+#endif
+
+	  mde->memtester[0].act_data = *pbfv;
+
+      // expected now has the correct value
+	  if (mde->memtester[0].act_data != exp_data) {
+		// check if the address is in failed array
+		// assume that this failing address has been recorded
+		diff = 0;
+		
+		for (; jj < mde->memtester [0].uAddrFailCnt; jj++) {
+		  if ((unsigned)pbfv < mde->memtester[0].uAddxFail[jj]) {
+			// read address smaller than what's in the array, not found
+			break;
+		  }
+		  else if ((unsigned)pbfv == mde->memtester[0].uAddxFail[jj]) {
+			// found in the array, increment array to next address
+			diff = 1;
+			continue;
+		  }
+		  else {
+			// read address larger than what's in the array, this is unexpected
+			host_printf(" **Unexpected index %d uAddxFail1 %08x addr %08x read %08x\n", \
+						jj, mde->memtester[0].uAddxFail[jj], pbfv, mde->memtester[0].act_data);
+		  }
+		}              
+		// do not accumulate this error if found in failed array
+		if (diff) {
+		  //debug code
+		  RDI_PRINTF (" **Found index %d uAddxFail1 %08x addr %08x read %08x\n", \
+					  jj-1, mde->memtester[0].uAddxFail[jj-1], pbfv, mde->memtester[0].act_data);
+		} else {
+		  // otherwise accumulate this error
+		  // The failing address is at pbfv
+		  mde->memtester[0].uTotalErr++;
+		  //// accumulate error statistics
+		  diff = mde->memtester[0].act_data ^ exp_data;
+		  mde->memtester[0].uTotalErrMap |= fdq_binary ( pbfv, diff);
+		  /// print this error first
+		  //     find_all_errors (p1, data1, expected1, 0);
+		  // find_all_errors needs addx, read data, expected data
+		  
+		  mde->memtester[0].addx = (unsigned) pbfv;
+		  mde->memtester[0].exp_data = exp_data;
+		  
+		  mde->fdq_log_error ( mde, 0 );
+		  
+		  RDI_PRINTF ("  **Failed: mt %d: @%08x Expected %08x read %08x XOR %08x\n", \
+					  0, mde->memtester[0].addx, mde->memtester[0].exp_data, mde->memtester[0].act_data, diff);
+		}
+	  }
+	}
+	mde->memtester [0].p_read = (unsigned*)((unsigned)(mde->memtester [0].p_read) + RDBUF_BSIZE);
+	ii += RDBUF_ISIZE;
+
+	// continue testing if there is more than one memory tester
+#if 0 // need to upgrade this	  
+#if LOCAL_MEM_TESTER_COUNT > 1 // more than one memory tester
+	mde->memtester[1].act_data = *mde->memtester [1].p_read;
+
+	// expected now has the correct value
+	if (mde->memtester[1].act_data != exp_data) {
+	  // check if the address is in failed array
+	  diff = 0;
+	  for (; jj < mde->memtester [1].uAddrFailCnt; jj++) {
+		if ((unsigned)mde->memtester [1].p_read < mde->memtester[1].uAddxFail[jj]) {
+		  // read address smaller than what's in the array, not found
+		  break;
+		}
+		else if ((unsigned)mde->memtester[1].p_read == mde->memtester[1].uAddxFail[jj]) {
+		  // found in the array, increment array to next address
+		  diff = 1;
+		  continue;
+		}
+		else {
+		  // read address larger than what's in the array, this is unexpected
+		  DBGP(" **Unexpected index %d uAddxFail1 %08x addr %08x read %08x\n", \
+			   jj, mde->memtester[1].uAddxFail[jj], mde->memtester [1].p_read, mde->memtester[1].act_data);
+		}
+	  }              
+	  // do not accumulate this error if found in failed array
+	  if (diff) {
+		//debug code
+		DBGP (" **Found index %d uAddxFail1 %08x addr %08x read %08x\n", \
+			  jj-1, mde->memtester[1].uAddxFail[jj-1], mde->memtester[1].p_read, mde->memtester[1].act_data);
+	  } else {
+		// otherwise accumulate this error
+		mde->memtester[1].uTotalErr++;
+		//// accumulate error statistics
+		diff = mde->memtester[1].act_data ^ exp_data;
+		mde->memtester[1].uTotalErrMap |= fdq_binary ( mde->memtester[1].p_read, diff);
+		mde->memtester[1].addx = (unsigned) mde->memtester [1].p_read;
+		mde->memtester[1].exp_data = exp_data;
+		
+		mde->fdq_log_error ( mde, 1 );
+		
+		DBGP ("  **Failed: mt %d: @%08x Expected %08x read %08x XOR %08x\n", \
+			  1, mde->memtester[1].addx, mde->memtester[1].exp_data, mde->memtester[1].act_data, diff);
+	  }
+	}
+#endif
+#endif
+  } // for loop reading the full size
+
+  // done testing for each tester to cover the entire range
+  // accumulate the total read time in ms
+  read_stop.msec = host_get_elapsed_msec ();
+  read_time = read_stop.msec - read_start.msec;
+  mde->mt_total_read_time_ms += read_time;
+
+  return DIAG_RET_OK;
+}
+
+
+
+#endif
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_mt_direct_rw.c b/arch/arm/cpu/armv7/iproc/mde/mde_mt_direct_rw.c
index 9ea9732..8b2e221 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_mt_direct_rw.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_mt_direct_rw.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*
   This file is a part of mde_mt
@@ -292,7 +274,7 @@ unsigned mtMode013ReadTest (  sMde_t *mde )
 	  
 	// continue testing if there is more than one memory tester
 	  
-#if LOCAL_MEM_TESTER_COUNT > 1     // more than one memory tester
+#if LOCAL_MEM_TESTER_COUNT > 1 // more than one memory tester
 	mde->memtester[1].act_data = *mde->memtester [1].p_read;
 
 	// expected now has the correct value
@@ -347,3 +329,6 @@ unsigned mtMode013ReadTest (  sMde_t *mde )
 
   return DIAG_RET_OK;
 }
+
+
+
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_obj.h b/arch/arm/cpu/armv7/iproc/mde/mde_obj.h
index 90928fa..dae914b 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_obj.h
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_obj.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_phy_ctrl_regs.h b/arch/arm/cpu/armv7/iproc/mde/mde_phy_ctrl_regs.h
index 13cd06f..c8556ae 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_phy_ctrl_regs.h
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_phy_ctrl_regs.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_phy_word_lane.h b/arch/arm/cpu/armv7/iproc/mde/mde_phy_word_lane.h
index 994d22a..c245cce 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_phy_word_lane.h
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_phy_word_lane.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_plat.h b/arch/arm/cpu/armv7/iproc/mde/mde_plat.h
index e3a0e6d..3406fd4 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_plat.h
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_plat.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  $Id::                                                         $:*/
 /*  $Rev:: : Global SVN Revision = 1950                           $:*/
@@ -120,3 +102,5 @@ typedef struct AutoTestInfo
 
 #else
 #endif
+
+
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_platform.c b/arch/arm/cpu/armv7/iproc/mde/mde_platform.c
index ad829b5..b71682c 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_platform.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_platform.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
@@ -174,6 +156,66 @@ void flush_data_cache (unsigned addr, unsigned bytes, unsigned verbose)
   SHMOO_INVALIDATE_DATA_FROM_DRAM( addr,  bytes );
 }
 
+#if 0
+
+// shmoo_platform_s2.c
+//
+
+#include <common.h>
+#include <asm/iproc/platform.h>
+//#include <stdio.h>
+#include <stdarg.h>
+
+#define DEBUG_PRINTF //
+
+/*added*/
+#define CACHE_LINE_SIZE 32
+void flush_dcache_range( unsigned long start , unsigned long stop )
+{
+    unsigned long i;
+
+    for( i = start ; i < stop ; i += CACHE_LINE_SIZE) {
+        asm volatile ("MCR  p15, 0, %0, c7, c10, 1"::"r"(i));
+    }
+
+    asm volatile ("MCR  p15, 0, r0, c7, c10, 4":::); /*DSB*/
+
+    return;
+}
+
+void invalidate_dcache_range( unsigned long start , unsigned long stop )
+{
+    unsigned long i;
+
+    for ( i = start ; i < stop ; i += CACHE_LINE_SIZE ) {
+        asm volatile ("MCR  p15, 0, %0, c7, c6, 1"::"r"(i));
+    }
+
+    asm volatile ("MCR  p15, 0, r0, c7, c10, 4":::); /*DSB*/
+
+    return;
+} 
+
+void  SHMOO_FLUSH_DATA_TO_DRAM( ddr40_addr_t Address , unsigned int bytes ) 
+{
+    unsigned long const EndAddress = Address + bytes;
+
+    // printf("Flushing %08X+%d bytes\n", Address, bytes);
+    flush_dcache_range( Address , EndAddress );
+
+    return;
+}
+
+void SHMOO_INVALIDATE_DATA_FROM_DRAM( ddr40_addr_t Address , unsigned int bytes )
+{
+    unsigned long const EndAddress = Address + bytes;
+  
+    // printf("Invalidating %08X+%d bytes\n", Address, bytes);
+    invalidate_dcache_range( Address , EndAddress );
+
+    return;
+}
+#endif
 
 /*
   For NORTHSTAR - provide an entry in the U-BOOT command section
@@ -186,3 +228,4 @@ U_BOOT_CMD(
 	"DDR memory Diagnostics Environment shell",
 	" - Enter Memory Diagnostics shell. Type 'q' to return to the u-boot shell"
 );
+
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_platform.h b/arch/arm/cpu/armv7/iproc/mde/mde_platform.h
index 01f9f13..0efa8ba 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_platform.h
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_platform.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 #include <mde_local_defs.h>
 #include <mde_local_headers.h>
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_proto.h b/arch/arm/cpu/armv7/iproc/mde/mde_proto.h
index f3ce1e6..079fbef 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_proto.h
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_proto.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_random.c b/arch/arm/cpu/armv7/iproc/mde/mde_random.c
index cbc76da..dd4520f 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_random.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_random.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
@@ -191,3 +173,4 @@ unsigned mdeRandomVerify ( sMde_t *mde )
 
   return DIAG_RET_OK;
 }
+
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_random_direct.c b/arch/arm/cpu/armv7/iproc/mde/mde_random_direct.c
index fe5307d..4477a78 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_random_direct.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_random_direct.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
@@ -134,3 +116,4 @@ unsigned mdeRandomVerify ( sMde_t *mde )
   }
   return DIAG_RET_OK;
 }
+
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_rd_eye.h b/arch/arm/cpu/armv7/iproc/mde/mde_rd_eye.h
index 0edb707..63349e9 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_rd_eye.h
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_rd_eye.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_rdi.c b/arch/arm/cpu/armv7/iproc/mde/mde_rdi.c
index 6c6b677..a7a9f39 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_rdi.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_rdi.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
@@ -1144,7 +1126,13 @@ void all_shmoo_rd_eye_mips (MEMC_INFO* this_memc,
       this_memc->printf ("mt_source %08x mt_test_size %08x\n", mt_source,  mt_test_size );
    }
    //  save_vdl_settings (&org_dac, org_vdl_byte_bit);
+#if 0
+   reg_addr = memc_base + BCHP_DDR40_PHY_CONTROL_REGS_VREF_DAC_CONTROL + PHY_BASE_TYPE_0 + RBUS_BASE;
+   val  = *(unsigned volatile*)reg_addr;
+   org_dac  = val;
+#else
    org_dac = host_reg_read (memc_base + BCHP_DDR40_PHY_CONTROL_REGS_VREF_DAC_CONTROL + PHY_BASE_TYPE_0);
+#endif
    //  this_memc->printf ("DAC_CONTROL @%08x = %08x\n", reg_addr, val);
 
    for (inx = 0, reg_addr = memc_base + PHY_OFFSET + BCHP_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT0_R_P;
@@ -1233,6 +1221,12 @@ void all_shmoo_rd_eye_mips (MEMC_INFO* this_memc,
 	 }
    }
 #ifdef NORTHSTAR
+#if 0 // no forcing
+   if (do_vref == 0) {
+	 host_printf ("\nNS dry run - force to plot\n");
+	 this_memc->ok_to_plot = 1;
+   }
+#endif
 #endif
 
    prt_rd_eye_shmoo_result_166(this_memc,
@@ -1759,3 +1753,4 @@ void generate_dq_masks(char *ptr_mask_non_shuff, char * ptr_mask_shuff, char * p
   host_printf ("\n***** FATAL error VDL busy bit stay high when timeout expired (register offset %08x)\n",
 			   offset );
 }
+
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_shim_addr_cntl.h b/arch/arm/cpu/armv7/iproc/mde/mde_shim_addr_cntl.h
index bbd9258..f812a8d 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_shim_addr_cntl.h
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_shim_addr_cntl.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /***************************************************************************
  *     Copyright (c) 1999-2011, Broadcom Corporation
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_stubs.c b/arch/arm/cpu/armv7/iproc/mde/mde_stubs.c
index 1bcd235..b1f6660 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_stubs.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_stubs.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 
 /*
@@ -28,3 +10,38 @@
 /projects/stbdev/ckder/northstar/iproc/u-boot/common/mde_main.c:161: undefined reference to `mdeParseCmds'
 
  */
+#if 0
+sMde_t * setupNewMdeWithLocalSpecificInfo (sMde_t *newMde )
+{
+  return (sMde_t *)0;
+}
+
+
+
+MDE_CMD *getMdeCommonCommands ( unsigned *uCommandCount )
+{
+  return (MDE_CMD *)0;
+}
+
+
+
+void setupNewMdeWithCommonInfo (sMde_t *mde )
+{
+}
+
+void  mdeInit(sMde_t *mde)
+{
+}
+
+unsigned  mdeShowInfo(sMde_t *mde)
+{
+  return 0;
+}
+
+
+MDE_CMD *mdeParseCmds ( sMde_t *mde)
+{
+  return (MDE_CMD *) 0;
+}
+#endif
+
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_tools.c b/arch/arm/cpu/armv7/iproc/mde/mde_tools.c
index 6b14c5b..c73ea6e 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_tools.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_tools.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_types.h b/arch/arm/cpu/armv7/iproc/mde/mde_types.h
index c3b9b5b..c4841bf 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_types.h
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_types.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_utils.c b/arch/arm/cpu/armv7/iproc/mde/mde_utils.c
index eb1bf18..3d24d55 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_utils.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_utils.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
     *********************************************************************
diff --git a/arch/arm/cpu/armv7/iproc/mde/mde_wr_eye.c b/arch/arm/cpu/armv7/iproc/mde/mde_wr_eye.c
index 3085928..34ceda8 100644
--- a/arch/arm/cpu/armv7/iproc/mde/mde_wr_eye.c
+++ b/arch/arm/cpu/armv7/iproc/mde/mde_wr_eye.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*  *********************************************************************
  *********************************************************************
@@ -371,6 +353,11 @@ void do_vdl_wr_settings (unsigned memc_base, unsigned vref, unsigned vdl_val)
    int inx;
 
    dac_val = vref << BCHP_DDR40_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC1_SHIFT;
+#if 0
+   dbg_printf ("MEMC %08x -> set VREF (%d:%x -> shift %d) to %x, WR VDL to %d (%08x)\n", memc_base, vref, vref, 
+               BCHP_DDR40_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC1_SHIFT,
+               dac_val, vdl_val, vdl_set_val);
+#endif
    reg_addr = memc_base + BCHP_DDR40_PHY_CONTROL_REGS_VREF_DAC_CONTROL + PHY_BASE_TYPE_0 + RBUS_BASE;
 
    reg_val  = *(unsigned volatile*)reg_addr & (~(BCHP_DDR40_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC1_MASK));
@@ -986,3 +973,4 @@ unsigned auto_wr_eye (char *line)
    
    return DIAG_RET_OK;
 }
+
diff --git a/arch/arm/cpu/armv7/iproc/mde/tinymt32.c b/arch/arm/cpu/armv7/iproc/mde/tinymt32.c
index 3602b42..b64a12f 100644
--- a/arch/arm/cpu/armv7/iproc/mde/tinymt32.c
+++ b/arch/arm/cpu/armv7/iproc/mde/tinymt32.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /**
  * @file tinymt32.c
diff --git a/arch/arm/cpu/armv7/iproc/mde/tinymt32.h b/arch/arm/cpu/armv7/iproc/mde/tinymt32.h
index f453ad5..47d6fd8 100644
--- a/arch/arm/cpu/armv7/iproc/mde/tinymt32.h
+++ b/arch/arm/cpu/armv7/iproc/mde/tinymt32.h
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 #ifndef TINYMT32_H
 #define TINYMT32_H
diff --git a/arch/arm/cpu/armv7/iproc/pwrctl.c b/arch/arm/cpu/armv7/iproc/pwrctl.c
old mode 100644
new mode 100755
index d3f7e8e..ef3ea2b
--- a/arch/arm/cpu/armv7/iproc/pwrctl.c
+++ b/arch/arm/cpu/armv7/iproc/pwrctl.c
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved. 
- *  
- * Permission to use, copy, modify, and/or distribute this software for any 
- * purpose with or without fee is hereby granted, provided that the above 
- * copyright notice and this permission notice appear in all copies. 
- *  
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY 
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION 
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
+ * $Copyright Open Broadcom Corporation$ 
  */
 #include <config.h>
 #include <common.h>
@@ -37,9 +25,10 @@ To power down CPU1:
 
 void ihost_pwrdown_neon(uint32_t neon_num)
 {
+#ifndef CONFIG_CYGNUS
 	uint32_t i, val;
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_NS_PLUS) || \
-	defined(CONFIG_KATANA2))
+#endif
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_NS_PLUS) || defined(CONFIG_KATANA2))
 		for(i = 0; i < 100; i++)
 			val  = reg32_read((volatile uint32_t *)CRU_ihost_pwrdwn_status);
 
@@ -83,21 +72,22 @@ void ihost_pwrdown_neon(uint32_t neon_num)
 
 void ihost_pwrdown_cpu(uint32_t cpu_num)
 {
+#ifndef CONFIG_CYGNUS
 	uint32_t i, val;
+#endif
 	ihost_pwrdown_neon(cpu_num);
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_NS_PLUS) || \
-	defined(CONFIG_KATANA2))
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_NS_PLUS) || defined(CONFIG_KATANA2))
 	if(cpu_num == 0) {
 		reg32_write_masked((volatile uint32_t *)CRU_cpu0_powerdown, 0xffff, 1000);
 		reg32_set_bits((volatile uint32_t *)CRU_cpu0_powerdown, 1 << CRU_cpu0_powerdown__start_cpu0_powerdown_seq);
 		asm ("WFI");
 	}
 	else if(cpu_num == 1) {
-		reg32_set_bits((volatile uint32_t *)CRU_ihost_pwrdwn_en, 1 << CRU_ihost_pwrdwn_en__logic_clamp_on_cpu1 || 
+		reg32_set_bits((volatile uint32_t *)CRU_ihost_pwrdwn_en, 1 << CRU_ihost_pwrdwn_en__logic_clamp_on_cpu1 | 
 		1 << CRU_ihost_pwrdwn_en__ram_clamp_on_cpu1	);
 		for(i = 0; i < 30; i++)
 			val  = reg32_read((volatile uint32_t *)CRU_ihost_pwrdwn_status);
-		reg32_set_bits((volatile uint32_t *)CRU_ihost_pwrdwn_en, 1 << CRU_ihost_pwrdwn_en__logic_pwrdown_cpu1 || 
+		reg32_set_bits((volatile uint32_t *)CRU_ihost_pwrdwn_en, 1 << CRU_ihost_pwrdwn_en__logic_pwrdown_cpu1 | 
 		1 << CRU_ihost_pwrdwn_en__ram_pwrdown_cpu1);
 
 	}
@@ -109,12 +99,12 @@ void ihost_pwrdown_cpu(uint32_t cpu_num)
 			asm ("WFI");
 		}
 		else if(cpu_num == 1) {
-			reg32_set_bits((volatile uint32_t *)0x1800b004, 1 << 8 || 1 << 10);
+			reg32_set_bits((volatile uint32_t *)0x1800b004, 1 << 8 | 1 << 10);
 			for(i = 0; i < 30; i++)
 				val  = reg32_read((volatile uint32_t *)0x1800b008);
-			reg32_set_bits((volatile uint32_t *)0x1800b004, 1 << 9 || 1 << 11);
+			reg32_set_bits((volatile uint32_t *)0x1800b004, 1 << 9 | 1 << 11);
 		}
 	}
 #endif
 
-}
+}
\ No newline at end of file
diff --git a/arch/arm/cpu/armv7/iproc/reset.c b/arch/arm/cpu/armv7/iproc/reset.c
index 9615a47..38f80af 100644
--- a/arch/arm/cpu/armv7/iproc/reset.c
+++ b/arch/arm/cpu/armv7/iproc/reset.c
@@ -1,26 +1,12 @@
-/*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved. 
- *  
- * Permission to use, copy, modify, and/or distribute this software for any 
- * purpose with or without fee is hereby granted, provided that the above 
- * copyright notice and this permission notice appear in all copies. 
- *  
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY 
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION 
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
- */
-
 #include <common.h>
 #include <asm/io.h>
 #include <asm/arch/iproc_regs.h>
 #if (defined(CONFIG_NORTHSTAR) || defined(CONFIG_NS_PLUS))
-#define RESET_BASE_ADDR CRU_RESET_OFFSET 
+        #define RESET_BASE_ADDR CRU_RESET_OFFSET
+#elif defined(CONFIG_CYGNUS)
+	#define CRMU_MAIL_BOX1	0x03024028
 #else
-#define RESET_BASE_ADDR DMU_CRU_RESET 
+        #define RESET_BASE_ADDR DMU_CRU_RESET
 #endif
 /*
  * Reset the cpu by setting software reset request bit
@@ -28,11 +14,14 @@
 void reset_cpu(ulong ignored)
 {
 #if (defined(CONFIG_NORTHSTAR) || defined(CONFIG_NS_PLUS))
-	*(unsigned int *)(RESET_BASE_ADDR) = 0x1;
+        *(unsigned int *)(RESET_BASE_ADDR) = 0x1;
+#elif defined(CONFIG_CYGNUS)
+	writel(0xffffffff, CRMU_MAIL_BOX1);
 #else
-	*(unsigned int *)(RESET_BASE_ADDR) = 0; /* Reset all */
+        *(unsigned int *)(RESET_BASE_ADDR) = 0; /* Reset all */
 #endif
-	while (1) {
-		// Never reached
-	}
+        while (1) {
+                // Never reached
+        }
 }
+
diff --git a/arch/arm/cpu/armv7/iproc/shmoo/ddr40_phy_init.c b/arch/arm/cpu/armv7/iproc/shmoo/ddr40_phy_init.c
index 5a51aef..eb8cb44 100644
--- a/arch/arm/cpu/armv7/iproc/shmoo/ddr40_phy_init.c
+++ b/arch/arm/cpu/armv7/iproc/shmoo/ddr40_phy_init.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*
 ** Copyright 2000, 2001  Broadcom Corporation
@@ -93,10 +75,42 @@ FUNC_PREFIX uint32_t ddr40_phy_setup_pll( uint32_t speed, ddr40_addr_t offset) F
     SET_FIELD(data, DDR40_CORE_PHY_CONTROL_REGS, PLL_CONFIG, RESET, 0);
     DDR40_PHY_RegWr (DDR40_CORE_PHY_CONTROL_REGS_PLL_CONFIG + offset,  data);
 
+#if 0
+    // I never figured out exactly why (waves made it pass, the time of day had an effect)
+    // but the PLL logic would sometimes not regain lock. Issuing a reset forced the lock
+    // logic to restart and relock.
+
+    data = DDR40_PHY_RegRd (DDR40_CORE_PHY_CONTROL_REGS_PLL_CONFIG + offset) ;
+    SET_FIELD(data, DDR40_CORE_PHY_CONTROL_REGS, PLL_CONFIG, RESET, 1);
+    DDR40_PHY_RegWr (DDR40_CORE_PHY_CONTROL_REGS_PLL_CONFIG + offset,  data);
+    SET_FIELD(data, DDR40_CORE_PHY_CONTROL_REGS, PLL_CONFIG, RESET, 0);
+    DDR40_PHY_RegWr (DDR40_CORE_PHY_CONTROL_REGS_PLL_CONFIG + offset,  data);
+#endif
 
     DDR40_PHY_Print("DDR Phy PLL polling for lock \n");
 
     timeout = 100000;
+#if 0
+	{
+		ddr40_addr_t addr = DDR40_CORE_PHY_CONTROL_REGS_PLL_STATUS + offset;
+		
+		tmp = DDR40_PHY_RegRd( addr );
+
+		DDR40_PHY_Print("PLL_STATUS: 0x%X\n" , tmp);
+
+		addr = DDR40_CORE_PHY_CONTROL_REGS_PLL_CONFIG + offset;
+		tmp = DDR40_PHY_RegRd( addr );
+		DDR40_PHY_Print("PLL_CONFIG: 0x%X\n" , tmp);
+
+		addr = DDR40_CORE_PHY_CONTROL_REGS_PLL_CONTROL + offset;
+		tmp = DDR40_PHY_RegRd( addr );
+		DDR40_PHY_Print("PLL_CONTROL: 0x%X\n" , tmp);
+
+		addr = DDR40_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS + offset;
+		tmp = DDR40_PHY_RegRd( addr );
+		DDR40_PHY_Print("PLL_DIVIDERS: 0x%X\n" , tmp);
+	}
+#endif
 
     tmp = DDR40_PHY_RegRd(DDR40_CORE_PHY_CONTROL_REGS_PLL_STATUS + offset);
 
@@ -573,6 +587,64 @@ FUNC_PREFIX void ddr40_phy_set_autoidle(uint32_t params, ddr40_addr_t offset) FU
 #endif
 }
 
+#if 0 // this feature currently does not work
+FUNC_PREFIX uint32_t ddr40_phy_rd_en_calib(uint32_t vdl_no_lock, ddr40_addr_t offset) FUNC_SUFFIX
+{
+    uint32_t data;
+    int timeout;
+    uint32_t return_code;
+
+    return_code = DDR40_PHY_RETURN_OK;    
+
+    DDR40_PHY_Print("ddr40_phy_init:: DDR3 READ_EN and BIT cal started\n");
+
+    DDR40_PHY_RegWr(DDR40_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE + offset, 0);
+
+    // ******************  tbd this is broken. In manual mode, need to set straps register and then start auto_init
+    data = 0;
+    SET_FIELD(data, DDR40_CORE_PHY_CONTROL_REGS, VDL_CALIBRATE, rd_en_cal, 1); // do read_en cal
+    SET_FIELD(data, DDR40_CORE_PHY_CONTROL_REGS, VDL_CALIBRATE, bit_cal, 1);   // also do bit cal
+    SET_FIELD(data, DDR40_CORE_PHY_CONTROL_REGS, VDL_CALIBRATE, set_mr_mpr, 1);  // set MPR bit in mode reg
+    SET_FIELD(data, DDR40_CORE_PHY_CONTROL_REGS, VDL_CALIBRATE, dq0_only, 1);  // use only DQ0 within each byte
+    SET_FIELD(data, DDR40_CORE_PHY_CONTROL_REGS, VDL_CALIBRATE, set_wr_dq, 1);  // also adjust write data timing
+    SET_FIELD(data, DDR40_CORE_PHY_CONTROL_REGS, VDL_CALIBRATE, bit_refresh, 1);  // do refreshes during tuning
+    SET_FIELD(data, DDR40_CORE_PHY_CONTROL_REGS, VDL_CALIBRATE, rd_dly_cal, 1);  // calibrate read data dly
+
+    DDR40_PHY_RegWr(DDR40_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE + offset, data);
+      
+    timeout = 1000;
+    data = DDR40_PHY_RegRd(DDR40_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS + offset);
+    while((timeout>0) && (GET_FIELD( data, DDR40_CORE_PHY_CONTROL_REGS, VDL_CALIB_STATUS, calib_idle) == 0)) {
+        DDR40_PHY_Timeout(1000);
+        timeout--;
+        data = DDR40_PHY_RegRd(DDR40_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS + offset);
+    }
+    
+    if(timeout<=0) {
+        DDR40_PHY_Fatal("ddr40_phy_init.c: DDR PHY DDR3 READ_EN and BIT Calibration failed\n");
+        return (DDR40_PHY_RETURN_RDEN_CALIB_FAIL);
+    }
+    else
+        DDR40_PHY_Print("DDR PHY DDR3 READ_EN and BIT Calibration completed\n");
+    
+    data = 0;  // clear calibration command
+    DDR40_PHY_RegWr(DDR40_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE + offset, data);
+    if (GET_FIELD( data, DDR40_CORE_PHY_CONTROL_REGS, VDL_CALIB_STATUS, calib_lock) == 0) {
+        if (vdl_no_lock)
+            DDR40_PHY_Print("DDR PHY DDR3: READ_EN and BIT calibration did not lock! result = %4d\n", 
+                        GET_FIELD( data, DDR40_CORE_PHY_CONTROL_REGS, VDL_CALIB_STATUS, calib_total) >> 4);
+        else {
+            DDR40_PHY_Error("DDR PHY DDR3: READ_EN and BIT calibration completed with error(s)! result = %4d\n",
+                        GET_FIELD( data, DDR40_CORE_PHY_CONTROL_REGS, VDL_CALIB_STATUS, calib_total) >> 4);
+            return_code = DDR40_PHY_RETURN_RDEN_CALIB_NOLOCK;
+        }
+    }
+    //clear calib command
+    data = 0;
+    DDR40_PHY_RegWr(DDR40_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE + offset, data);
+    return (return_code);
+}
+#endif
 
 /* uint32_t ddr40_phy_init(uint32_t ddr_clk, uint32_t params, int ddr_type, uint32_t * wire_dly, uint32_t connect, uint32_t override, ddr40_addr_t offset) */
 /*     ddr_clk - DDR clock speed, as number (Important: DDR clock speed in MHz, not a bit rate). */
@@ -736,3 +808,5 @@ FUNC_PREFIX unsigned int ddr40_phy_init(uint32_t ddr_clk, uint32_t params, int d
 
   return(return_code);
 }
+
+
diff --git a/arch/arm/cpu/armv7/iproc/shmoo/platform.c b/arch/arm/cpu/armv7/iproc/shmoo/platform.c
index 8e7c8d6..b3ee725 100644
--- a/arch/arm/cpu/armv7/iproc/shmoo/platform.c
+++ b/arch/arm/cpu/armv7/iproc/shmoo/platform.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*
 ** Copyright 2000, 2001  Broadcom Corporation
diff --git a/arch/arm/cpu/armv7/iproc/shmoo/shmoo_DDR3.c b/arch/arm/cpu/armv7/iproc/shmoo/shmoo_DDR3.c
index e0de724..4ea57c5 100644
--- a/arch/arm/cpu/armv7/iproc/shmoo/shmoo_DDR3.c
+++ b/arch/arm/cpu/armv7/iproc/shmoo/shmoo_DDR3.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /*
 ** Copyright 2000, 2001  Broadcom Corporation
@@ -497,6 +479,11 @@ int do_shmoo( ddr40_addr_t phy_reg_base ,
     int shift_amount, stat;
     pack328_t packname;
 
+#if 0
+    packname.pack32 = 0x54434C57; //// WLCT
+    plot_name (packname, NO_WL_PRINT);
+    plot_dec_number ( (((option>>8)&0xFF)/BITS_PER_WL) ); NL();NL();
+#endif
 
     // display SHMOO version
     //
@@ -514,11 +501,21 @@ int do_shmoo( ddr40_addr_t phy_reg_base ,
     plot_hex_number(mem_test_base);  
     NL();
 
-#if defined(WR_VDL_22p5deg) || defined(WR_VDL_45deg) || defined(WR_VDL_67p5deg) || \
-	defined(WR_VDL_90deg)  || defined(WR_VDL_112p5deg) || defined(WR_VDL_135deg) 
+#if defined(WR_VDL_22p5deg) || defined(WR_VDL_45deg) || defined(WR_VDL_67p5deg) || defined(WR_VDL_90deg)  || defined(WR_VDL_112p5deg) || defined(WR_VDL_135deg) 
     // shmoo_adjust_wr_dly( phy_reg_base , memc_reg_base );
 #endif
 
+#if 0
+    stat = 0;
+    shift_amount = 0;
+    while( (DDR40_CORE_PHY_CONTROL_REGS_VDL_WR_CHAN_CALIB_STATUS_wr_chan_calib_lock_MASK & stat ) == 0) {
+        stat = tb_r( phy_reg_base + GLOBAL_REG_RBUS_START + DDR40_CORE_PHY_CONTROL_REGS_VDL_WR_CHAN_CALIB_STATUS );
+        shift_amount++;
+        if ( shift_amount == 1000000 ) {
+            return ERR_WR_CHAN_CALIB_LOCK_TO;
+        }
+    }
+#endif
 
     // do WR chan calib step calibration
     generic_calib_steps( phy_reg_base );
@@ -1552,7 +1549,36 @@ unsigned generic_shmoo_calib_rd_dqs( unsigned long phy_reg_base ,
         // get dq_calib_total from PHY CR VDL_DQ_CALIB_STATUS reg
         data = RDREG( phy_reg_base + DDR40_CORE_PHY_CONTROL_REGS_VDL_DQ_CALIB_STATUS );
         dq_calib_total = GET_FIELD( data , DDR40_CORE_PHY_CONTROL_REGS , VDL_DQ_CALIB_STATUS , dq_calib_total ) >> 4;
+#if 1
+        start_step = 0;
+#else
+        n = 0;
+        for ( bl = 0 ; bl < BL_PER_WL ; bl++ ) { 
+            // read PHY WL{0,1} VDL_OVRIDE_BYTE{0,1}_BIT{0,...,7}_R_P reg
+            byte_bit_rp_addr = wl * PHY_REG_OFFSET_PER_WL + phy_reg_base +
+                               DDR40_CORE_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT0_R_P + 
+                               PHY_REG_OFFSET_PER_BL * bl;
+            for ( i = 0 ; i < 8 ; i++ ) { // for each bit in a byte
+                data = RDREG( byte_bit_rp_addr + (i * 8) );
+                e = GET_FIELD( data , DDR40_CORE_PHY_WORD_LANE_0 , VDL_OVRIDE_BYTE0_BIT0_R_P , ovr_en );
+                init_step[ n ] = ( e ) ? GET_FIELD( data , DDR40_CORE_PHY_WORD_LANE_0 , VDL_OVRIDE_BYTE0_BIT0_R_P , ovr_step ) : 
+                                         dq_calib_total;
+                n++;
+            } // for i
+        } // for b
+
+        sum = 0;
+        for ( binx = 0 ; binx < 16 ; binx++ ) {
+            sum = sum + init_step[ binx ];
+        }
+        // division by 16 using looping subtraction
+        i = sum;
         start_step = 0;
+        while ( i >= 16 ) {
+            i = i - 16;
+            start_step = start_step  + 1;
+        } // while
+#endif
         // DQS Calibration
         //
         retval |= generic_shmoo_rd_dqs( wl, result , start_step , phy_reg_base , memc_reg_base , mem_test_base , 0 );
@@ -1649,6 +1675,13 @@ unsigned generic_shmoo_calib_addr( unsigned long phy_reg_base,
     high_stress = (option >> 28) & 3;
     run_addx_shmoo = (option & DO_CALIB_ADDR);
 
+#if 0
+    orig_fullness = tb_r( GLOBAL_REG_RBUS_START + memc_reg_base + 0x1000 + BCHP_MEMC_ARB_0_FULLNESS_THRESHOLD);
+    tb_w(GLOBAL_REG_RBUS_START + memc_reg_base + 0x1000 + BCHP_MEMC_ARB_0_FULLNESS_THRESHOLD, FULLNESS_THRESHOLD_VAL);
+
+    orig_cmdsize = tb_r(GLOBAL_REG_RBUS_START + memc_reg_base + 0x1000 + BCHP_MEMC_ARB_0_MINIMUM_COMMAND_SIZE);
+    tb_w(GLOBAL_REG_RBUS_START + memc_reg_base + 0x1000 + BCHP_MEMC_ARB_0_MINIMUM_COMMAND_SIZE, MIN_CMD_SIZE_VAL);
+#endif
 
     // Determine VDL calibrated steps
     calib_vdl_step = RDREG( phy_reg_base + DDR40_CORE_PHY_CONTROL_REGS_VDL_WR_CHAN_CALIB_STATUS );
@@ -1738,6 +1771,10 @@ unsigned generic_shmoo_calib_addr( unsigned long phy_reg_base,
             WRREG( phy_reg_base + DDR40_CORE_PHY_CONTROL_REGS_VDL_OVRIDE_BIT_CTL , (0x10000 | start_vdl_val) );
             retval |= rewrite_dram_mode_regs();
 
+#if 0
+            tb_w(GLOBAL_REG_RBUS_START +  memc_reg_base + 0x1000 + BCHP_MEMC_ARB_0_FULLNESS_THRESHOLD, orig_fullness);
+            tb_w(GLOBAL_REG_RBUS_START +  memc_reg_base + 0x1000 + BCHP_MEMC_ARB_0_MINIMUM_COMMAND_SIZE, orig_cmdsize);
+#endif
 
             if ( wl == 0 ) {
                 pass_start_0 = pass_start;
@@ -1893,6 +1930,18 @@ static inline unsigned one_shmoo_rd_data_dly_FIFO( unsigned int * new_step , ddr
         tb_w( phy_reg_base + DDR40_CORE_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT_RD_EN + PHY_REG_OFFSET_PER_WL + GLOBAL_REG_RBUS_START , data );
     }
 
+#if 0
+    mtest_verify( memc_reg_base, mem_test_base , data_expected, 0 , 0 );
+
+    // Clear the FIFO status
+    tb_w( phy_reg_base + DDR40_CORE_PHY_WORD_LANE_0_READ_FIFO_CLEAR + GLOBAL_REG_RBUS_START , DDR40_CORE_PHY_WORD_LANE_0_READ_FIFO_CLEAR_clear_MASK );
+    tb_w( phy_reg_base + DDR40_CORE_PHY_WORD_LANE_0_READ_FIFO_CLEAR + GLOBAL_REG_RBUS_START , 0 );
+    if ( wl_count > 1 ) {
+        tb_w( phy_reg_base + DDR40_CORE_PHY_WORD_LANE_0_READ_FIFO_CLEAR + PHY_REG_OFFSET_PER_WL + GLOBAL_REG_RBUS_START , 
+              DDR40_CORE_PHY_WORD_LANE_0_READ_FIFO_CLEAR_clear_MASK );
+        tb_w( phy_reg_base + DDR40_CORE_PHY_WORD_LANE_0_READ_FIFO_CLEAR + PHY_REG_OFFSET_PER_WL + GLOBAL_REG_RBUS_START , 0 );
+    }
+#endif
 
     //
     // We can remove this code if using declaration with initialization
@@ -2291,8 +2340,16 @@ int shmoo_adjust_addx_ctrl_delay( unsigned long phy_reg_base , unsigned long mem
     // re issue MRS programming
     rewrite_dram_mode_regs();
 
+#if 0
+    UART_OUT('B');UART_OUT('Y');
+    plot_hex_number( tb_r( phy_reg_base + GLOBAL_REG_RBUS_START + DDR40_CORE_PHY_CONTROL_REGS_VDL_OVRIDE_BYTE_CTL ) );
+    UART_OUT('B');UART_OUT('T');
+    plot_hex_number( tb_r( phy_reg_base + GLOBAL_REG_RBUS_START + DDR40_CORE_PHY_CONTROL_REGS_VDL_OVRIDE_BIT_CTL ) ); 
+    NL();
+#endif
 
     return 0;
 }
 
 #endif // (SHMOO_BUILD == 1)
+
diff --git a/arch/arm/cpu/armv7/iproc/shmoo/tinymt32.c b/arch/arm/cpu/armv7/iproc/shmoo/tinymt32.c
index 9cf30d9..940ec9e 100644
--- a/arch/arm/cpu/armv7/iproc/shmoo/tinymt32.c
+++ b/arch/arm/cpu/armv7/iproc/shmoo/tinymt32.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /**
  * @file tinymt32.c
diff --git a/arch/arm/cpu/armv7/iproc/shmoo/tinymt64.c b/arch/arm/cpu/armv7/iproc/shmoo/tinymt64.c
index 54b4e3c..f04023c 100644
--- a/arch/arm/cpu/armv7/iproc/shmoo/tinymt64.c
+++ b/arch/arm/cpu/armv7/iproc/shmoo/tinymt64.c
@@ -1,23 +1,5 @@
 /*
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 /**
  * @file tinymt64.c
diff --git a/arch/arm/cpu/armv7/iproc/shmoo2/Makefile b/arch/arm/cpu/armv7/iproc/shmoo2/Makefile
old mode 100644
new mode 100755
diff --git a/arch/arm/cpu/armv7/iproc/shmoo2/shmoo_ddr40.c b/arch/arm/cpu/armv7/iproc/shmoo2/shmoo_ddr40.c
old mode 100644
new mode 100755
index 10f1bcf..10fb9c7
--- a/arch/arm/cpu/armv7/iproc/shmoo2/shmoo_ddr40.c
+++ b/arch/arm/cpu/armv7/iproc/shmoo2/shmoo_ddr40.c
@@ -1,24 +1,6 @@
 /*
- * $Id: shmoo_ddr40.c,v 1.53.2.1.4.2 2012/11/14 17:10:30 Exp $
- * Copyright (C) 1999-2013, Broadcom Corporation 
- *  
- *      Unless you and Broadcom execute a separate written software license 
- * agreement governing use of this software, this software is licensed to you 
- * under the terms of the GNU General Public License version 2 (the "GPL"), 
- * available at http://www.broadcom.com/licenses/GPLv2.php, with the 
- * following added to such license: 
- *  
- *      As a special exception, the copyright holders of this software give you 
- * permission to link this software with independent modules, and to copy and 
- * distribute the resulting executable under terms of your choice, provided that 
- * you also meet, for each linked independent module, the terms and conditions of 
- * the license of that module.  An independent module is a module which is not 
- * derived from this software.  The special exception does not apply to any 
- * modifications of the software. 
- *  
- *      Notwithstanding the above, under no circumstances may you combine this 
- * software in any way with any other Broadcom software provided under a license 
- * other than the GPL, without Broadcom's express prior written consent. 
+ * $Id: shmoo_ddr40.c,v 1.53.2.1.4.2 2012/11/14 17:10:30 mbasoglu Exp $
+ * $Copyright Broadcom Corporation Dual License $ 
  */
 #include <config.h>
 #include <common.h>
@@ -73,9 +55,9 @@ extern int is_ddr_32bit(void);
 ***********************************************************************/
 #if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2))
 const uint32 shmoo_dram_config = 3; //0x00000000;
-#elif defined(CONFIG_HURRICANE2)
+#elif (defined(CONFIG_HURRICANE2))
 const uint32 shmoo_dram_config = 1; //0x00000000;
-#elif defined(CONFIG_NS_PLUS)
+#elif (defined(CONFIG_NS_PLUS))
 const uint32 shmoo_dram_config = 1; //0x00000000;
 #else
 const uint32 shmoo_dram_config = 0;
@@ -150,21 +132,29 @@ soc_ddr40_set_shmoo_dram_config(uint32 unit, uint32 dram_config)
 
 int soc_reg32_get(volatile uint32 *reg, uint32 *rvp)
 {
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 	*rvp = *reg;
+#else
+	*rvp = swap_u32(*reg);
+#endif
 	return SOC_E_NONE;
 }
 
 int soc_reg32_set(volatile uint32 *reg, uint32 rv)
 {
 	//printf("soc_reg32_set: addr: 0x%08x, val: 0x%08x\n", reg, rv);
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 	*reg = rv;
+#else
+	*reg = swap_u32(rv);
+#endif
 	return SOC_E_NONE;
 }
 
 uint32
 _check_dram(int ci)
 {
-#if defined(CONFIG_NS_PLUS)
+#if (defined(CONFIG_NS_PLUS))
 	if (is_ddr_32bit()) {
 		// 32bit ddr
 		uint32 shmoo_dram_config32 = 3;
@@ -263,6 +253,7 @@ const  phy_freq_div_set_t pfds[PHY_COUNT][FREQ_COUNT] = {
 /* PHY_ CE   */ {{-1,-1}, {-1,-1},  {-1,-1},  {-1,-1},  {-1,-1}, {-1,-1},  {-1,-1}}
 };
 
+#if 1 /* Uncomment this when required */
 static void
 _shmoo_print_diagnostics(int unit, int ci, int wl) {
 
@@ -427,6 +418,7 @@ _shmoo_print_diagnostics(int unit, int ci, int wl) {
     }
 #endif
 }
+#endif
 
 int _soc_ddr40_pll_calc(uint32 freq,int *ndiv, int *mdiv) {
 
@@ -462,6 +454,210 @@ int _soc_ddr40_pll_calc(uint32 freq,int *ndiv, int *mdiv) {
     return err;
 }
 
+#if 0
+int
+soc_ddr40_phy_pll_ctl(int unit, int ci, uint32 freq, uint32 phyType, int stat)
+{
+    uint32 rval;
+    sal_usecs_t to_val;
+    soc_timeout_t to;
+    uint32 lock0, lock1, lock2, lock3;
+	uint32 pllfreq;
+
+    /* Per Speed & Grade Parameters */
+    int ndiv, mdiv, freq_loc;
+
+    freq_loc = _soc_ddr40_phy_freqtoloc(freq);
+
+    if (freq_loc < 0) {
+        return SOC_E_INTERNAL; /* Unsupported Frequency */
+    }
+
+    if (SAL_BOOT_QUICKTURN) {
+            to_val = 10000000;  /* 10 Sec */
+    } else {
+            to_val = 50000;     /* 50 mS */
+    }
+    
+    ndiv = pfds[phyType][freq_loc].ndiv;
+    mdiv = pfds[phyType][freq_loc].mdiv;
+
+    pllfreq = soc_property_get(unit, spn_DDR3_PLL_MHZ, freq);
+
+    if (pllfreq != freq) {
+        _soc_ddr40_pll_calc(pllfreq, &ndiv, &mdiv);
+    }
+
+    if (!stat) {
+        switch(phyType) {
+            case DDR_PHYTYPE_RSVP:
+                break;
+            case DDR_PHYTYPE_NS:
+                printf("A01. Reset DDR PLL\n");
+                SOC_IF_ERROR_RETURN(READ_TOP_SOFT_RESET_REG_2r(unit,&rval));
+                soc_reg_field_set(unit, TOP_SOFT_RESET_REG_2r, &rval,
+                                            TOP_DDR3_PLL_RST_Lf, 0);
+                soc_reg_field_set(unit, TOP_SOFT_RESET_REG_2r, &rval,
+                                            TOP_DDR3_PLL_POST_RST_Lf, 0);
+                SOC_IF_ERROR_RETURN(WRITE_TOP_SOFT_RESET_REG_2r(unit,rval));
+
+                printf("A02. Set PLL div.(mdiv/ndiv:%d/%d)\n",mdiv,ndiv);
+                SOC_IF_ERROR_RETURN(soc_reg_field32_modify(unit,DDR3_PLL_CTRL_REGISTER_3r,
+                            REG_PORT_ANY, NDIV_INTf, ndiv));
+                SOC_IF_ERROR_RETURN(soc_reg_field32_modify(unit,DDR3_PLL_CTRL_REGISTER_4r,
+                            REG_PORT_ANY, CH0_MDIVf, mdiv));
+
+                printf("A03. Unreset PLL (mdiv:%d ndiv:%d)\n",mdiv,ndiv);
+                SOC_IF_ERROR_RETURN(READ_TOP_SOFT_RESET_REG_2r(unit,&rval));
+                soc_reg_field_set(unit, TOP_SOFT_RESET_REG_2r, &rval,
+                                            TOP_DDR3_PLL_RST_Lf, 1);
+                SOC_IF_ERROR_RETURN(WRITE_TOP_SOFT_RESET_REG_2r(unit,rval));
+
+                printf("A04. Wait for PLL lock\n");
+                to_val = 50000; /* 50 mS */
+                soc_timeout_init(&to, to_val, 0);
+                do {
+                    SOC_IF_ERROR_RETURN(READ_DDR3_PLL_STATUSr(unit,&rval));
+                    if (soc_reg_field_get(unit, DDR3_PLL_STATUSr, rval, DDR3_PLL_LOCKf)) {
+                        break;
+                    }
+                    if (soc_timeout_check(&to)) {
+                        soc_cm_debug(DK_ERR, "Timed out waiting for DDR3 PLL to Lock\n");
+                        return SOC_E_TIMEOUT;
+                    }
+                } while (TRUE);
+
+                printf("A05. Unreset post PLL lock\n");
+                SOC_IF_ERROR_RETURN(READ_TOP_SOFT_RESET_REG_2r(unit,&rval));
+                soc_reg_field_set(unit, TOP_SOFT_RESET_REG_2r, &rval, TOP_DDR3_PLL_POST_RST_Lf, 1);
+                SOC_IF_ERROR_RETURN(WRITE_TOP_SOFT_RESET_REG_2r(unit,rval));
+
+                printf("A06. Wait for a while after lock\n");
+                sal_usleep(2000);
+                break;
+            case DDR_PHYTYPE_ENG:
+            /*    printf("A01. Reset DPRC\n"));
+                SOC_IF_ERROR_RETURN(DRC_REG_READ(unit, DRCALL, DRC_SPARE_REGISTER_3r, &rval));
+                soc_reg_field_set(unit, DRCBROADCAST_SPARE_REGISTER_3r, &rval,
+                                                        DPRC_ALIGN_PHY_RSTNf, 0);
+                soc_reg_field_set(unit, DRCBROADCAST_SPARE_REGISTER_3r, &rval,
+                                                   CLK_DIV_RSTNf, 0);
+                SOC_IF_ERROR_RETURN(DRC_REG_WRITE(unit, DRCALL, DRC_SPARE_REGISTER_3r, rval));
+
+                printf("A02. Bypass PLL mode\n"));
+                SOC_IF_ERROR_RETURN(DRC_REG_READ(unit, DRCALL, DRC_DPI_POWERr, &rval));
+                soc_reg_field_set(unit, DRCBROADCAST_DPI_POWERr, &rval,
+                                                        BYPASS_PLLf, 0);
+                SOC_IF_ERROR_RETURN(DRC_REG_WRITE(unit, DRCALL, DRC_DPI_POWERr, rval));
+
+                printf("A02. Set PLL div.(mdiv/ndiv:%d/%d)\n",mdiv,ndiv));
+                SOC_IF_ERROR_RETURN(soc_reg_field32_modify(unit,DDR3_PLL_CTRL_REGISTER_3r,
+                          REG_PORT_ANY, NDIV_INTf, ndiv));
+                SOC_IF_ERROR_RETURN(soc_reg_field32_modify(unit,DDR3_PLL_CTRL_REGISTER_4r,
+                          REG_PORT_ANY, CH0_MDIVf, mdiv));
+
+                printf("A03. Enable clock dividers\n"));
+                SOC_IF_ERROR_RETURN(DRC_REG_READ(unit, DRCALL, DRC_SPARE_REGISTER_3r, &rval));
+                soc_reg_field_set(unit, DRCBROADCAST_SPARE_REGISTER_3r, &rval,
+                                                   CLK_DIV_RSTNf, 1);
+                SOC_IF_ERROR_RETURN(DRC_REG_WRITE(unit, DRCALL, DRC_SPARE_REGISTER_3r, rval));
+				
+				printf("A04. Wait for a while after clock divider enable\n"));
+                sal_usleep(2000);
+
+                printf("A05. Unreset DPRC\n"));
+                SOC_IF_ERROR_RETURN(DRC_REG_READ(unit, DRCALL, DRC_SPARE_REGISTER_3r, &rval));
+                soc_reg_field_set(unit, DRCBROADCAST_SPARE_REGISTER_3r, &rval,
+                                                        DPRC_ALIGN_PHY_RSTNf, 1);
+                SOC_IF_ERROR_RETURN(DRC_REG_WRITE(unit, DRCALL, DRC_SPARE_REGISTER_3r, rval));
+
+                printf("A06. Wait for a while after clock divider enable\n"));
+                sal_usleep(2000); */
+                break;
+            case DDR_PHYTYPE_AND:
+                printf("A01. Reset DDR PLL\n");
+                SOC_IF_ERROR_RETURN( READ_CX_DDR03_PLL_RESETr( unit, &rval ) );
+                soc_reg_field_set(unit, CX_DDR03_PLL_RESETr, &rval, RESET_Nf, 0 );
+                soc_reg_field_set(unit, CX_DDR03_PLL_RESETr, &rval, POST_RESET_Nf, 0 );
+                SOC_IF_ERROR_RETURN( WRITE_CX_DDR03_PLL_RESETr( unit, rval ) );
+
+                printf("A02. Set PLL div.(mdiv/ndiv:%d/%d)\n",mdiv,ndiv);
+                SOC_IF_ERROR_RETURN( READ_CX_DDR03_PLL_CHANNEL_0r( unit, &rval ) );
+                soc_reg_field_set(unit, CX_DDR03_PLL_CHANNEL_0r, &rval, MDIVf, mdiv );
+                SOC_IF_ERROR_RETURN( WRITE_CX_DDR03_PLL_CHANNEL_0r( unit, rval ) );
+                SOC_IF_ERROR_RETURN( READ_CX_DDR03_PLL_NDIV_INTEGERr( unit, &rval ) );
+                soc_reg_field_set(unit, CX_DDR03_PLL_NDIV_INTEGERr, &rval, NDIV_INTf, ndiv );
+                SOC_IF_ERROR_RETURN( WRITE_CX_DDR03_PLL_NDIV_INTEGERr( unit, rval ) );
+
+                printf("A03. Unreset PLL (mdiv:%d ndiv:%d)\n",mdiv,ndiv);
+                SOC_IF_ERROR_RETURN( READ_CX_DDR03_PLL_RESETr( unit, &rval ) );
+                soc_reg_field_set(unit, CX_DDR03_PLL_RESETr, &rval, RESET_Nf, 1 );
+                SOC_IF_ERROR_RETURN( WRITE_CX_DDR03_PLL_RESETr( unit, rval ) );
+
+                printf("A04. Wait for PLL lock\n");
+                soc_timeout_init(&to, to_val, 0);
+                do {
+                    SOC_IF_ERROR_RETURN( READ_CX_DDR0_PLL_STATUSr( unit, &rval ) );
+                    lock0 = soc_reg_field_get( unit, CX_DDR0_PLL_STATUSr, rval, LOCKf );
+                    SOC_IF_ERROR_RETURN( READ_CX_DDR1_PLL_STATUSr( unit, &rval ) );
+                    lock1 = soc_reg_field_get( unit, CX_DDR1_PLL_STATUSr, rval, LOCKf );
+                    SOC_IF_ERROR_RETURN( READ_CX_DDR2_PLL_STATUSr( unit, &rval ) );
+                    lock2 = soc_reg_field_get( unit, CX_DDR2_PLL_STATUSr, rval, LOCKf );
+                    SOC_IF_ERROR_RETURN( READ_CX_DDR3_PLL_STATUSr( unit, &rval ) );
+                    lock3 = soc_reg_field_get( unit, CX_DDR3_PLL_STATUSr, rval, LOCKf );
+                    if ( lock0 && lock1 && lock2 && lock3 ) {
+                        break;
+                    }
+                    if (soc_timeout_check(&to)) {
+                        soc_cm_debug(DK_ERR, "Timed out waiting for DDR3 PLLs to Lock -- lock0[%d] lock1[%d] lock2[%d] lock3[%d]\n",
+                                            lock0, lock1, lock2, lock3 );
+                        return SOC_E_TIMEOUT;
+                    }
+                } while ( !SAL_BOOT_QUICKTURN );
+
+                printf("A05. Unreset post PLL lock\n") );
+                SOC_IF_ERROR_RETURN( READ_CX_DDR03_PLL_RESETr( unit, &rval ) );
+                soc_reg_field_set(unit, CX_DDR03_PLL_RESETr, &rval, POST_RESET_Nf, 1 );
+                SOC_IF_ERROR_RETURN( WRITE_CX_DDR03_PLL_RESETr( unit, rval ) );
+
+                printf("A06. Wait for a while after lock\n");
+                sal_usleep(2000);
+                break;
+            case DDR_PHYTYPE_CE:
+                break;
+            default:
+                soc_cm_debug(DK_ERR, "Error. Unsupported PHY type\n");
+                return SOC_E_FAIL;
+        }
+    } else {
+    /* report only */
+        switch(phyType) {
+            case DDR_PHYTYPE_RSVP:
+                break;
+            case DDR_PHYTYPE_NS:
+                SOC_IF_ERROR_RETURN(READ_TOP_SOFT_RESET_REG_2r(unit,&rval));
+                soc_cm_print ("TOP_SOFT_RESET_REG:%x\n", rval);
+                SOC_IF_ERROR_RETURN(READ_DDR3_PLL_CTRL_REGISTER_3r(unit,&rval));
+                soc_cm_print ("DDR3_PLL_CTRL_REGISTER_3r:%x\n", rval);
+                SOC_IF_ERROR_RETURN(READ_DDR3_PLL_CTRL_REGISTER_4r(unit,&rval));
+                soc_cm_print ("DDR3_PLL_CTRL_REGISTER_4r:%x\n", rval);
+                break;
+            case DDR_PHYTYPE_ENG:
+                break;
+            case DDR_PHYTYPE_AND:
+                break;
+            case DDR_PHYTYPE_CE:
+                break;
+            default:
+                soc_cm_debug(DK_ERR, "Error. Unsupported PHY type\n");
+                return SOC_E_FAIL;
+        }
+    }
+
+    return SOC_E_NONE;
+}
+
+#endif
 /***********************************************************************
 * Functions to  set/report the PVT params
 ***********************************************************************/
@@ -566,6 +762,11 @@ _soc_ddr40_phy_PVT_ctl(int unit, int ci, uint32 phyType, int stat)
                     rd_en_byte_mode = DDR40_GET_FIELD(rval,  DDR40_PHY_CONTROL_REGS, VDL_RD_EN_CALIB_STATUS, RD_EN_CALIB_BYTE_SEL);
                     rd_en_byte_vdl_steps = DDR40_GET_FIELD(rval,  DDR40_PHY_CONTROL_REGS, VDL_RD_EN_CALIB_STATUS, RD_EN_CALIB_TOTAL) >> 4;
                     rd_en_bit_vdl_offset = DDR40_GET_FIELD(rval,  DDR40_PHY_CONTROL_REGS, VDL_RD_EN_CALIB_STATUS, RD_EN_CALIB_BIT_OFFSET);
+#if 0
+					COMPILER_REFERENCE(rd_en_byte_mode);
+                    COMPILER_REFERENCE(rd_en_byte_vdl_steps);
+                    COMPILER_REFERENCE(rd_en_bit_vdl_offset);
+#endif
                     soc_timeout_init(&to, to_val, 0);
                     do {
                         SOC_IF_ERROR_RETURN(READ_DDR40_PHY_CONTROL_REGS_VDL_CALIB_STATUSr(unit,ciC,&rval));
@@ -628,6 +829,16 @@ soc_ddr40_phy_calibrate(int unit, int ci, uint32 phyType, int stat)
     /* int mhz;  CI_PHY_CONTROL */
     int ciC;
 /*    uint32 data; */
+#if 0
+    int freq_loc, grade_loc;
+    
+    //freq_loc = _soc_ddr40_phy_freqtoloc(SOC_DDR3_CLOCK_MHZ(unit));
+    //grade_loc = _soc_ddr40_mem_gradetoloc(SOC_DDR3_MEM_GRADE(unit));
+
+    if (freq_loc < 0) {
+        return SOC_E_INTERNAL; /* Unsupported Frequency */
+    }
+#endif
     if (SAL_BOOT_QUICKTURN) {
             to_val = 10000000;  /* 10 Sec */
     } else {
@@ -653,11 +864,13 @@ soc_ddr40_phy_calibrate(int unit, int ci, uint32 phyType, int stat)
                     if(!_check_dram_either(ciC)) {
                         continue;
                     }
+#if 1
                     /* Divider */
                     SOC_IF_ERROR_RETURN(READ_DDR40_PHY_CONTROL_REGS_PLL_DIVIDERSr(unit,ciC,&rval));
                     DDR40_SET_FIELD(rval,DDR40_PHY_CONTROL_REGS,PLL_DIVIDERS,NDIV,16); //Srini
                     DDR40_SET_FIELD(rval,DDR40_PHY_CONTROL_REGS,PLL_DIVIDERS,POST_DIV,1);
                     SOC_IF_ERROR_RETURN(WRITE_DDR40_PHY_CONTROL_REGS_PLL_DIVIDERSr(unit,ciC,rval));
+#endif     
 					/* Reset */
                     SOC_IF_ERROR_RETURN(READ_DDR40_PHY_CONTROL_REGS_PLL_CONFIGr(unit,ciC,&rval));
                     DDR40_SET_FIELD(rval,DDR40_PHY_CONTROL_REGS,PLL_CONFIG,RESET,0);
@@ -917,9 +1130,27 @@ soc_ddr40_phy_calibrate(int unit, int ci, uint32 phyType, int stat)
 #endif
                 }
 
-                printf("C10. Wait for Phy Ready\n");
+                printf("C10. Wait for Phy Ready...");
+#if 0
+                for (ciC = 0; ciC < MAX_SHMOO_INTERFACES; ciC+=2) { /* Only Even CIs */
+                    if(!_check_dram_either(ciC)) {
+                        continue;
+                    }
+                    soc_timeout_init(&to, to_val, 0);
+                    do {
+                        SOC_IF_ERROR_RETURN(DRC_REG_READ(unit, drc_channel_set[ciC>>1], DRC_DPI_STATUSr, &rval));
+                        if (soc_reg_field_get(unit, DRCA_DPI_STATUSr, rval, READYf)) {
+                            break;
+                        }
+                        if (soc_timeout_check(&to)) {
+                            soc_cm_debug(DK_ERR, "CI%d: Timed out waiting for PHY Ready\n", ciC);
+                            return SOC_E_TIMEOUT;
+                        }
+                    } while (TRUE);
+                }
+#endif
 				sal_usleep(50000); /* 50 ms */
-
+                printf("Done.\n");
                 break;
             case DDR_PHYTYPE_CE:
                 break;
@@ -967,6 +1198,30 @@ soc_ddr40_ctlr_ctl(int unit, int ci, uint32 ctlType, int stat)
 	    return SOC_E_NONE;
 }
 
+#if 0
+/***********************************************************************
+* Functions to Read / Write / Modify DDR Memory
+***********************************************************************/
+int _DDRWrRdComplete(int unit, int ci, uint32 uTimeout)
+{
+    uint32 i;
+    uint32 data = 0;
+    uint32 uAck = 0;
+
+    /* wait for the ACK to indicate rd/wr op is finished */
+    for (i = 0; i < uTimeout; i++) {
+        SOC_IF_ERROR_RETURN(READ_CI_MEM_ACC_CTRLr(unit, ci, &data));
+        uAck = soc_reg_field_get(unit, CI_MEM_ACC_CTRLr, data, MEM_ACC_ACKf);
+        if (uAck) {
+            return SOC_E_NONE;
+        }
+        sal_udelay(10);
+    }
+
+    /* timed out */
+    return (SOC_E_TIMEOUT);
+}
+#endif
 int soc_ddr40_read(int unit, int ci, uint32 addr, uint32 * pData0,
                    uint32 * pData1, uint32 * pData2, uint32 * pData3,
                    uint32 * pData4, uint32 * pData5, uint32 * pData6,
@@ -1031,10 +1286,16 @@ int soc_ddr40_write(int unit, int ci, uint32 addr, uint32 uData0,
 int
 soc_ddr40_phy_reg_ci_read(int unit, int ci, uint32 reg_addr, uint32 * reg_data)
 {
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_NS_PLUS) || \
-	defined(CONFIG_KATANA2))
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_NS_PLUS) || defined(CONFIG_KATANA2))
 	if(ci == 0){
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 		*reg_data = *(volatile uint32 *)(DDR_PHY_CONTROL_REGS_REVISION + reg_addr);
+#else
+        {
+            extern uint32_t swap_u32(uint32_t);
+		    *reg_data = swap_u32(*(volatile uint32 *)(DDR_PHY_CONTROL_REGS_REVISION + reg_addr));
+        }
+#endif
 		return(SOC_E_NONE);
 	}
 	return(SOC_E_INTERNAL); 
@@ -1046,10 +1307,16 @@ soc_ddr40_phy_reg_ci_read(int unit, int ci, uint32 reg_addr, uint32 * reg_data)
 int
 soc_ddr40_phy_reg_ci_write(int unit, int ci, uint32 reg_addr, uint32 reg_data)
 {
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_NS_PLUS) || \
-	defined(CONFIG_KATANA2))
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_NS_PLUS) || defined(CONFIG_KATANA2))
 	if(ci == 0){
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 		*(volatile uint32 *)(reg_addr + DDR_PHY_CONTROL_REGS_REVISION)= reg_data;
+#else
+        {
+            extern uint32_t swap_u32(uint32_t);
+		    *(volatile uint32 *)(reg_addr + DDR_PHY_CONTROL_REGS_REVISION)= swap_u32(reg_data);
+        }
+#endif
 		return(SOC_E_NONE);
 	}
 	return(SOC_E_INTERNAL); 
@@ -1063,11 +1330,17 @@ soc_ddr40_phy_reg_ci_modify(int unit, uint32 ci, uint32 reg_addr, uint32 data,
                             uint32 mask)
 {
 	volatile uint32 * reg;
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_NS_PLUS) || \
-	defined(CONFIG_KATANA2))
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_NS_PLUS) || defined(CONFIG_KATANA2))
 	if(ci == 0){
 		reg = (volatile uint32 *)(reg_addr + DDR_PHY_CONTROL_REGS_REVISION);
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 		*reg = (*reg & (~mask)) | (data & mask);
+#else
+        {
+            extern uint32_t swap_u32(uint32_t);
+            *reg = swap_u32(swap_u32(*reg) & (~mask) | (data & mask));
+        }
+#endif
 		return(SOC_E_NONE);
 	}
 	return(SOC_E_INTERNAL); 
@@ -1083,7 +1356,16 @@ soc_ddr40_phy_reg_ci_modify(int unit, uint32 ci, uint32 reg_addr, uint32 data,
 
 uint32 _get_random(void)
 {
+#if 0
+    static uint32 m_w = 6483;    /* must not be zero */
+    static uint32 m_z = 31245;    /* must not be zero */
+    
+    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
+    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
+    return (m_z << 16) + m_w;  /* 32-bit result */
+#else
 	return 0;
+#endif
 }
 
 /* Generate NUM_DATA uint32 data for memory accesses */
@@ -1873,9 +2155,42 @@ int _soc_ddr_shmoo_prepare_for_shmoo(int unit, int ci)
 #ifdef BCM_ARAD_SUPPORT
 int _soc_arad_mem_reset_and_init_after_shmoo_addr(int unit, int ci)
 {
+#if 0 // Srini - to be modified
+    int timeout_cnt;
+    uint32 rval;
+#ifdef BCM_ARAD_SUPPORT
+    uint8 is_valid[ARAD_HW_DRAM_INTERFACES_MAX] = {0};
+
+    is_valid[ci>>1] = 1;
+
+    arad_mgmt_dram_init_drc_soft_init(unit, is_valid, 1);
+    sal_usleep(2000);
+    arad_mgmt_dram_init_drc_soft_init(unit, is_valid, 0);
+#endif
+
+    timeout_cnt = 0;
+    do {
+        sal_usleep(10);
+        SOC_IF_ERROR_RETURN(DRC_REG_READ(unit, drc_channel_set[ci>>1], DRC_DRAM_INIT_FINISHEDr, &rval));
+        if (soc_reg_field_get(unit, DRCA_DRAM_INIT_FINISHEDr, rval, DRAM_INIT_FINISHEDf)) {
+            break;
+        }
+        if (timeout_cnt > 20000) {
+            soc_cm_debug(DK_ERR, "CI%d: Timed out DRAM re-initialization\n", ci);
+            return SOC_E_TIMEOUT;
+        }
+        timeout_cnt += 1;
+    } while (TRUE);
+#endif
+#if 0
+	*((unsigned int *)DDR_DENALI_CTL_169) |= 0xf;
+	sal_usleep(100);
+	*((unsigned int *)DDR_DENALI_CTL_169) &= ~0xf;
+#endif
     return SOC_E_NONE;
 }
 #endif
+#if 1
 int
 _soc_mem_reset_and_init_after_shmoo_addr(int unit, int ci)
 {
@@ -2127,77 +2442,338 @@ int _shmoo_init_vdl_result(int unit, int ci, int wl, int self_test, uint32 * res
                                                                      data);
             }
         }
-    } else {
-#endif
-    for (byte = 0; byte < 2; byte++) {
-        for (bit = 0; bit < 8; bit++) {
-            WRITE_DDR40_PHY_WORD_LANE_x_VDL_OVRIDE_BYTEy_BITz_Wr(wl, byte, bit,
-                                                                 unit, ci,
-                                                                 data);
-        }
+    } else {
+#endif
+    for (byte = 0; byte < 2; byte++) {
+        for (bit = 0; bit < 8; bit++) {
+            WRITE_DDR40_PHY_WORD_LANE_x_VDL_OVRIDE_BYTEy_BITz_Wr(wl, byte, bit,
+                                                                 unit, ci,
+                                                                 data);
+        }
+    }
+#ifdef CONFIG_IPROC_DDR_ECC
+    }
+#endif
+    /* byte */
+    data = SET_OVR_STEP(0);
+    if (wl == 0) {
+        WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_Wr(unit, ci, data);
+        WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_Wr(unit, ci, data);
+    } else {
+#ifdef CONFIG_IPROC_DDR_ECC
+        if(wl == 2) {
+            WRITE_DDR40_PHY_ECC_LANE_VDL_OVRIDE_BYTE_Wr(unit, ci, data);
+        } else {
+#endif
+            WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_Wr(unit, ci, data);
+            WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_Wr(unit, ci, data);
+#ifdef CONFIG_IPROC_DDR_ECC
+        }
+#endif
+    }
+
+    /* ADDR   */
+    if ( wl == 0 ) {
+        /* Hardware adjust ADDR 90' prior VDL
+         * Because we cannot trust ADDR Calibration result as it reports 0 steps
+         * We then will use WR_DQ 90' calibration result to adjust ADDR (by 90') to become 180' for the address
+         * Excluded below and use WR_DQ instead
+         * setting_byte_sel = DDR40_GET_FIELD(data, DDR40_PHY_CONTROL_REGS, VDL_CALIB_STATUS, CALIB_BYTE_SEL  ) ;
+         * setting_steps = DDR40_GET_FIELD(data, DDR40_PHY_CONTROL_REGS, VDL_CALIB_STATUS, CALIB_TOTAL )>>4 ;
+         * setting = (setting_steps*(1+setting_byte_sel));
+         */ 
+        READ_DDR40_PHY_CONTROL_REGS_VDL_WR_CHAN_CALIB_STATUSr(unit, ci, &data);
+        setting_byte_sel =
+            DDR40_GET_FIELD(data, DDR40_PHY_CONTROL_REGS,
+                            VDL_WR_CHAN_CALIB_STATUS, WR_CHAN_CALIB_BYTE_SEL);
+        setting_steps =
+            DDR40_GET_FIELD(data, DDR40_PHY_CONTROL_REGS,
+                            VDL_WR_CHAN_CALIB_STATUS,
+                            WR_CHAN_CALIB_TOTAL) >> 4;
+        setting = setting_steps;
+        DDR40_SET_FIELD(setting, DDR40_PHY_CONTROL_REGS, VDL_OVRIDE_BYTE_CTL,
+                        BYTE_SEL, setting_byte_sel);
+        data = SET_OVR_STEP(setting);
+
+        /* Temporary Address Patch */
+        data = SET_OVR_STEP(40);
+        WRITE_DDR40_PHY_CONTROL_REGS_VDL_OVRIDE_BIT_CTLr(unit, ci, data); 
+    }
+
+    /* Shmoo  */
+    /* Do one dummy memory read to fix RTL bug on RD_FIFO write pointer coming out of reset bug */
+    data = _test_mem_read(unit, (ci + wl), 0, NULL);
+    
+    /* Clear the FIFO error state */
+    WRITE_DDR40_PHY_WORD_LANE_0_READ_FIFO_CLEARr(unit, ci, 0);
+    WRITE_DDR40_PHY_WORD_LANE_1_READ_FIFO_CLEARr(unit, ci, 0);
+#ifdef CONFIG_IPROC_DDR_ECC
+    WRITE_DDR40_PHY_ECC_LANE_READ_FIFO_CLEARr(unit, ci, 0);
+#endif
+    return SOC_E_NONE;
+}
+
+#if 0 /* Uncomment this when required */
+int
+_shmoo_rd_en_rd_data_dly(int unit, int ci, int wl, int self_test, uint32 * result)
+{
+    int i, j;
+    uint32 data;
+    uint32 data_expected[NUM_DATA];
+    int see_pass, see_fail, rd_en_pass, rd_en_fail, rd_en_size;
+    uint32 dataB1p, dataB1n;
+
+    int rd_data_dly_pass_sum = 0;
+    int rd_data_dly_pass_count = 0;
+    int rd_data_dly_pass_avg = 0;
+    int rd_en_window_found = 0;
+
+    _fill_in_data(data_expected);
+    if (self_test == 0) {
+        _test_mem_write(unit, (ci + wl), 0, data_expected);
+    }
+
+    /* Clear the FIFO error state */
+    WRITE_DDR40_PHY_WORD_LANE_0_READ_FIFO_CLEARr(unit, ci, 0);
+    WRITE_DDR40_PHY_WORD_LANE_1_READ_FIFO_CLEARr(unit, ci, 0);
+    WRITE_DDR40_PHY_WORD_LANE_0_READ_FIFO_CLEARr(unit, ci, 1);
+    WRITE_DDR40_PHY_WORD_LANE_1_READ_FIFO_CLEARr(unit, ci, 1);
+    /* Clear any error status from previous run */
+    WRITE_DDR40_PHY_WORD_LANE_0_READ_FIFO_STATUSr(unit, ci, 1);
+    WRITE_DDR40_PHY_WORD_LANE_0_READ_FIFO_STATUSr(unit, ci, 0);
+    WRITE_DDR40_PHY_WORD_LANE_1_READ_FIFO_STATUSr(unit, ci, 1);
+    WRITE_DDR40_PHY_WORD_LANE_1_READ_FIFO_STATUSr(unit, ci, 0);
+#ifdef CONFIG_IPROC_DDR_ECC
+    /* Clear the FIFO error state */
+    WRITE_DDR40_PHY_ECC_LANE_READ_FIFO_CLEARr(unit, ci, 0);
+    WRITE_DDR40_PHY_ECC_LANE_READ_FIFO_CLEARr(unit, ci, 1);
+    /* Clear any error status from previous run */
+    WRITE_DDR40_PHY_ECC_LANE_READ_FIFO_STATUSr(unit, ci, 1);
+    WRITE_DDR40_PHY_ECC_LANE_READ_FIFO_STATUSr(unit, ci, 0);
+#endif
+
+    /* RD_EN should be good by this point. We now find the best RD_DATA_DLY (for fast speed, we start from 3 and up) */
+    rd_en_size = 0;
+
+    if(wl == 0) {
+        READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_R_Pr(unit, ci, &dataB1p);
+        READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_R_Nr(unit, ci, &dataB1n);
+        dataB1p =
+            DDR40_GET_FIELD(dataB1p, DDR40_PHY_WORD_LANE_0, VDL_OVRIDE_BYTE1_R_P,
+                            OVR_STEP);
+        dataB1n =
+            DDR40_GET_FIELD(dataB1n, DDR40_PHY_WORD_LANE_0, VDL_OVRIDE_BYTE1_R_N,
+                            OVR_STEP);
+    } else {
+#ifdef CONFIG_IPROC_DDR_ECC
+        if(wl == 2) {
+            READ_DDR40_PHY_ECC_LANE_VDL_OVRIDE_BYTE_R_Pr(unit, ci, &dataB1p);
+            READ_DDR40_PHY_ECC_LANE_VDL_OVRIDE_BYTE_R_Nr(unit, ci, &dataB1n);
+            dataB1p =
+                DDR40_GET_FIELD(dataB1p, DDR40_PHY_ECC_LANE, VDL_OVRIDE_BYTE_R_P,
+                                OVR_STEP);
+            dataB1n =
+                DDR40_GET_FIELD(dataB1n, DDR40_PHY_ECC_LANE, VDL_OVRIDE_BYTE_R_N,
+                                OVR_STEP);
+        } else {
+#endif
+            READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_R_Pr(unit, ci, &dataB1p);
+            READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_R_Nr(unit, ci, &dataB1n);
+            dataB1p =
+                DDR40_GET_FIELD(dataB1p, DDR40_PHY_WORD_LANE_1, VDL_OVRIDE_BYTE1_R_P,
+                                OVR_STEP);
+            dataB1n =
+                DDR40_GET_FIELD(dataB1n, DDR40_PHY_WORD_LANE_1, VDL_OVRIDE_BYTE1_R_N,
+                                OVR_STEP);
+#ifdef CONFIG_IPROC_DDR_ECC
+        }
+#endif
+    }
+
+    /* Find Best RD_DATA_DLY  */
+    for (j = 1; j < 8; ++j) {
+        /* For every single RD_DATA_DLY, we shmoo RD_EN to find the largest window */
+        data = j;
+        if (wl == 0) {
+            WRITE_DDR40_PHY_WORD_LANE_0_READ_DATA_DLYr(unit, ci, data);
+        } else {
+#ifdef CONFIG_IPROC_DDR_ECC
+            if(wl == 2) {
+                WRITE_DDR40_PHY_ECC_LANE_READ_DATA_DLYr(unit, ci, data);
+            } else {
+#endif
+                WRITE_DDR40_PHY_WORD_LANE_1_READ_DATA_DLYr(unit, ci, data);
+#ifdef CONFIG_IPROC_DDR_ECC
+            }
+#endif
+        }
+        see_pass = 0;
+        see_fail = 0;
+        rd_en_pass = 0;
+        rd_en_fail = 0;
+        rd_en_size = 0;
+        rd_en_window_found = 0;
+        for (i = 0; i < 64; ++i) {
+            data = SET_OVR_STEP(i);
+
+            /* RD_EN */
+            if (wl == 0) {
+                WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE_RD_ENr(unit, ci, data);
+                WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT_RD_ENr(unit,
+                                                                        ci,
+                                                                        data);
+                WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT_RD_ENr(unit,
+                                                                        ci,
+                                                                        data);
+            } else {
+#ifdef CONFIG_IPROC_DDR_ECC
+                if(wl == 2) {
+                    WRITE_DDR40_PHY_ECC_LANE_VDL_OVRIDE_BYTE_RD_ENr(unit, ci, data);
+                    WRITE_DDR40_PHY_ECC_LANE_VDL_OVRIDE_BYTE_BIT_RD_ENr(unit,
+                                                                            ci,
+                                                                            data);
+                } else {
+#endif
+                    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE_RD_ENr(unit, ci, data);
+                    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT_RD_ENr(unit,
+                                                                            ci,
+                                                                            data);
+                    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT_RD_ENr(unit,
+                                                                            ci,
+                                                                            data);
+#ifdef CONFIG_IPROC_DDR_ECC
+                }
+#endif
+            }
+
+            /* Clear the FIFO error state */
+            WRITE_DDR40_PHY_WORD_LANE_0_READ_FIFO_CLEARr(unit, ci, 0);
+            WRITE_DDR40_PHY_WORD_LANE_1_READ_FIFO_CLEARr(unit, ci, 0);
+#ifdef CONFIG_IPROC_DDR_ECC
+            WRITE_DDR40_PHY_ECC_LANE_READ_FIFO_CLEARr(unit, ci, 0);
+#endif
+            sal_usleep(9);
+            if (self_test==0) {
+                result[i] = _test_mem_read(unit, (ci+wl), 0, data_expected);
+            } else if (self_test==2) {
+                result[i] = _test_rd_data_fifo_status(unit, ci, wl, 1); 
+            } else {
+                result[i] =
+                    _test_func_self_test_1(unit, ci, wl, 1, 0);
+            }
+
+            if (result[i] == 0) {       /* PASS */
+                if (see_pass == 0) {
+                    rd_en_pass = i;
+                    see_pass = 1;
+                }
+            } else {
+                if (see_pass==1 && see_fail==0) {
+                    rd_en_fail = i;
+                    see_fail = 1;
+                }
+            }
+
+            if(rd_en_window_found == 0) {
+                if (see_pass==1 && see_fail==1) { 
+                    rd_en_size = rd_en_fail - rd_en_pass;
+                    if(rd_en_size < 3) {
+                        see_pass = 0;
+                        see_fail = 0;
+                    } else {
+                        rd_data_dly_pass_sum += j;
+                        rd_data_dly_pass_count++;
+                        rd_en_window_found = 1;
+                    }
+                } else if (see_pass==1 && i==63) { 
+                    rd_en_size = i - rd_en_pass;
+                    if(rd_en_size < 3) {
+                        see_pass = 0;
+                        see_fail = 0;
+                    } else {
+                        rd_data_dly_pass_sum += j;
+                        rd_data_dly_pass_count++;
+                        rd_en_window_found = 1;
+                    }
+                }
+            }
+        }
     }
-#ifdef CONFIG_IPROC_DDR_ECC
+
+    if(rd_data_dly_pass_count != 0) {
+        rd_data_dly_pass_avg = rd_data_dly_pass_sum / rd_data_dly_pass_count;
+    } else {
+        rd_data_dly_pass_avg = 1;
     }
-#endif
-    /* byte */
-    data = SET_OVR_STEP(0);
+
+    /* set RD_EN and RD_DATA_DLY */
+    /* For every single RD_DATA_DLY, we shmoo RD_EN to find the largest window */
+    data = rd_data_dly_pass_avg;
     if (wl == 0) {
-        WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_Wr(unit, ci, data);
-        WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_Wr(unit, ci, data);
+        WRITE_DDR40_PHY_WORD_LANE_0_READ_DATA_DLYr(unit, ci, data);
     } else {
 #ifdef CONFIG_IPROC_DDR_ECC
         if(wl == 2) {
-            WRITE_DDR40_PHY_ECC_LANE_VDL_OVRIDE_BYTE_Wr(unit, ci, data);
+            WRITE_DDR40_PHY_ECC_LANE_READ_DATA_DLYr(unit, ci, data);
         } else {
 #endif
-            WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_Wr(unit, ci, data);
-            WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_Wr(unit, ci, data);
+            WRITE_DDR40_PHY_WORD_LANE_1_READ_DATA_DLYr(unit, ci, data);
 #ifdef CONFIG_IPROC_DDR_ECC
         }
 #endif
     }
 
-    /* ADDR   */
-    if ( wl == 0 ) {
-        /* Hardware adjust ADDR 90' prior VDL
-         * Because we cannot trust ADDR Calibration result as it reports 0 steps
-         * We then will use WR_DQ 90' calibration result to adjust ADDR (by 90') to become 180' for the address
-         * Excluded below and use WR_DQ instead
-         * setting_byte_sel = DDR40_GET_FIELD(data, DDR40_PHY_CONTROL_REGS, VDL_CALIB_STATUS, CALIB_BYTE_SEL  ) ;
-         * setting_steps = DDR40_GET_FIELD(data, DDR40_PHY_CONTROL_REGS, VDL_CALIB_STATUS, CALIB_TOTAL )>>4 ;
-         * setting = (setting_steps*(1+setting_byte_sel));
-         */ 
-        READ_DDR40_PHY_CONTROL_REGS_VDL_WR_CHAN_CALIB_STATUSr(unit, ci, &data);
-        setting_byte_sel =
-            DDR40_GET_FIELD(data, DDR40_PHY_CONTROL_REGS,
-                            VDL_WR_CHAN_CALIB_STATUS, WR_CHAN_CALIB_BYTE_SEL);
-        setting_steps =
-            DDR40_GET_FIELD(data, DDR40_PHY_CONTROL_REGS,
-                            VDL_WR_CHAN_CALIB_STATUS,
-                            WR_CHAN_CALIB_TOTAL) >> 4;
-        setting = setting_steps;
-        DDR40_SET_FIELD(setting, DDR40_PHY_CONTROL_REGS, VDL_OVRIDE_BYTE_CTL,
-                        BYTE_SEL, setting_byte_sel);
-        data = SET_OVR_STEP(setting);
-
-        /* Temporary Address Patch */
-        data = SET_OVR_STEP(40);
-        WRITE_DDR40_PHY_CONTROL_REGS_VDL_OVRIDE_BIT_CTLr(unit, ci, data); 
-    }
-
-    /* Shmoo  */
     /* Do one dummy memory read to fix RTL bug on RD_FIFO write pointer coming out of reset bug */
     data = _test_mem_read(unit, (ci + wl), 0, NULL);
-    
-    /* Clear the FIFO error state */
-    WRITE_DDR40_PHY_WORD_LANE_0_READ_FIFO_CLEARr(unit, ci, 0);
-    WRITE_DDR40_PHY_WORD_LANE_1_READ_FIFO_CLEARr(unit, ci, 0);
+    for (i = 0; i < 64; ++i) {
+        data = SET_OVR_STEP(i);
+
+        /* RD_EN */
+        if (wl == 0) {
+            WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE_RD_ENr(unit, ci, data);
+            WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT_RD_ENr(unit, ci,
+                                                                    data);
+            WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT_RD_ENr(unit, ci,
+                                                                    data);
+        } else {
 #ifdef CONFIG_IPROC_DDR_ECC
-    WRITE_DDR40_PHY_ECC_LANE_READ_FIFO_CLEARr(unit, ci, 0);
+            if(wl == 2) {
+                WRITE_DDR40_PHY_ECC_LANE_VDL_OVRIDE_BYTE_RD_ENr(unit, ci, data);
+                WRITE_DDR40_PHY_ECC_LANE_VDL_OVRIDE_BYTE_BIT_RD_ENr(unit,
+                                                                        ci,
+                                                                        data);
+            } else {
+#endif
+                WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE_RD_ENr(unit, ci, data);
+                WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT_RD_ENr(unit, ci,
+                                                                        data);
+                WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT_RD_ENr(unit, ci,
+                                                                        data);
+#ifdef CONFIG_IPROC_DDR_ECC
+            }
+#endif
+        }
+
+        /* Clear the FIFO error state */
+        WRITE_DDR40_PHY_WORD_LANE_0_READ_FIFO_CLEARr(unit, ci, 0);
+        WRITE_DDR40_PHY_WORD_LANE_1_READ_FIFO_CLEARr(unit, ci, 0);
+#ifdef CONFIG_IPROC_DDR_ECC
+        WRITE_DDR40_PHY_ECC_LANE_READ_FIFO_CLEARr(unit, ci, 0);
 #endif
+        sal_usleep(9);
+        if (self_test == 0) {
+            result[i] = _test_mem_read(unit, (ci + wl), 0, data_expected);
+        } else if (self_test==2) {
+            result[i] = _test_rd_data_fifo_status(unit, ci, wl, 1);
+        } else {
+            result[i] =
+                _test_func_self_test_1(unit, ci, wl, 1, 0);
+        }
+    }
+
     return SOC_E_NONE;
 }
-
+#endif
 
 int
 _shmoo_rd_data_dly(int unit, int ci, int wl, int self_test, uint32 * result)
@@ -2900,6 +3476,78 @@ STATIC int _shmoo_rd_en_rd_dq(int unit, int ci, int wl, int self_test, vref_word
 
 }
 
+#if 0 /* Uncomment this when required */
+STATIC int _shmoo_rd_en(int unit, int ci, int wl, int self_test, uint32 * result)
+{
+    uint32 data;
+    int i;
+
+    uint32 data_expected[NUM_DATA];
+
+    _fill_in_data(data_expected);
+    if (self_test == 0) {
+        _test_mem_write(unit, (ci + wl), 0, data_expected);
+    }
+    
+    for (i = 0; i < 64; ++i) {
+        data = SET_OVR_STEP(i);
+
+        /* RD_EN */
+        if (wl == 0) {
+            WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE_RD_ENr(unit, ci, data);
+            WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT_RD_ENr(unit, ci,
+                                                                    data);
+            WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT_RD_ENr(unit, ci,
+                                                                    data);
+        } else {
+#ifdef CONFIG_IPROC_DDR_ECC
+            if(wl == 2) {
+                WRITE_DDR40_PHY_ECC_LANE_VDL_OVRIDE_BYTE_RD_ENr(unit, ci, data);
+                WRITE_DDR40_PHY_ECC_LANE_VDL_OVRIDE_BYTE_BIT_RD_ENr(unit, ci,
+                                                                        data);
+            } else {
+#endif
+                WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE_RD_ENr(unit, ci, data);
+                WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT_RD_ENr(unit, ci,
+                                                                        data);
+                WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT_RD_ENr(unit, ci,
+                                                                        data);
+#ifdef CONFIG_IPROC_DDR_ECC
+            }
+#endif
+        }
+
+        /* Clear the FIFO error state */
+        WRITE_DDR40_PHY_WORD_LANE_0_READ_FIFO_CLEARr(unit, ci, 0);
+        WRITE_DDR40_PHY_WORD_LANE_1_READ_FIFO_CLEARr(unit, ci, 0);
+#ifdef CONFIG_IPROC_DDR_ECC
+        WRITE_DDR40_PHY_ECC_LANE_READ_FIFO_CLEARr(unit, ci, 0);
+#endif
+        sal_usleep(9);
+        if (self_test == 0) {
+            result[i] = _test_mem_read(unit, (ci + wl), 0, data_expected);
+        } else if (self_test==2) {
+            result[i] = _test_rd_data_fifo_status(unit, ci, wl, 1);
+        } else {
+            if(SOC_IS_KATANA(unit)) {
+                result[i] =
+                    _test_func_self_test_1(unit, ci, wl, 1, 3);
+            } else {
+                result[i] =
+                    _test_func_self_test_1(unit, ci, wl, 1, 3); /* MPR = 4 */
+            }
+        }
+    }
+
+    WRITE_DDR40_PHY_WORD_LANE_0_READ_FIFO_CLEARr(unit, ci, 0);
+    WRITE_DDR40_PHY_WORD_LANE_1_READ_FIFO_CLEARr(unit, ci, 0);
+#ifdef CONFIG_IPROC_DDR_ECC
+    WRITE_DDR40_PHY_ECC_LANE_READ_FIFO_CLEARr(unit, ci, 0);
+#endif
+    return SOC_E_NONE;
+
+}
+#endif
 
 STATIC int _shmoo_rd_dqs(int unit, int ci, int wl, int self_test, vref_word_shmoo *vwsPtr)
 {
@@ -4142,6 +4790,12 @@ next_line1:
 			}
             soc_cm_print("\n");
 
+#if 0
+            for(i = 0; i < 64; i++) {
+                soc_cm_print("%c", (*vwsPtr)[vref].bs[0].result[i]);
+            }
+            soc_cm_print("\n");
+#endif
         } else {
             soc_cm_print("UNKNOWN SHMOO\n");
             return -1;
@@ -4259,6 +4913,13 @@ next_line2:
 			}
             soc_cm_print("\n");
 
+#if 0
+            soc_cm_print(" %02d ", vref);
+            for(i = 64; i < 128; i++) {
+                soc_cm_print("%c", (*vwsPtr)[vref].bs[0].result[i]);
+            }
+            soc_cm_print("\n");
+#endif
         } else {
             soc_cm_print("UNKNOWN SHMOO\n");
             return -1;
@@ -4647,6 +5308,25 @@ soc_ddr40_shmoo_ctl(int unit, int ci, uint32 phyType, uint32 ctlType, int stat,
                     if (isplot || SOC_DEBUG_CHECK(SOC_DBG_DDR)) {
                         _soc_ddr40_shmoo_plot(sp);
                     }
+#if 0 // Srini - revisit - shutdown address shmoo
+                    if((_check_dram_both(ci) && (sp->wl == 1)) || (!_check_dram_both(ci) && _check_dram_either(ci) && (sp->wl != 2))) {
+                        sp->wl = 0;
+                        for(sp->type = SHMOO_ADDRC; sp->type < SHMOO_WR_DM; sp->type++) {
+                            printf("BEFORE SHMOO: Type = %d\tCI = %d\tWL = Both\n", sp->type, ci);
+                            _shmoo_print_diagnostics(unit, ci, sp->wl);
+                            _soc_ddr40_shmoo_get_init_step(unit, ci, sp);
+                            _soc_ddr40_shmoo_do(unit, ci, sp);
+                            _soc_ddr40_shmoo_calib(unit,ci,sp);
+                            _soc_ddr40_shmoo_set_new_step(unit, ci, sp);
+                            printf("AFTER SHMOO:  Type = %d\tCI = %d\tWL = Both\n", sp->type, ci);
+                            _shmoo_print_diagnostics(unit, ci, sp->wl);
+                            if (isplot || SOC_DEBUG_CHECK(SOC_DBG_DDR)) {
+                                _soc_ddr40_shmoo_plot(sp);
+                            }
+                        }
+                        sp->wl = 1;
+					}
+#endif
                 }
                 if (sp->vwsPtr != NULL) {
                     //sal_free(sp->vwsPtr);
@@ -4785,6 +5465,582 @@ soc_ddr40_shmoo_ctl(int unit, int ci, uint32 phyType, uint32 ctlType, int stat,
                            (((_v) & 0x100) ? 0x40 : 0) | \
                            (((_v) & 0x10000) ? 0x80 : 0))
 
+#if 0
+int soc_ddr40_shmoo_savecfg(int unit, int ci)
+{
+    char name_str[32], val_str[96];
+    uint32 value[4], valarr[4];
+
+    if (soc_mem_config_set == NULL) {
+        return SOC_E_UNAVAIL;
+    }
+
+    /* SHMOO_RD_DATA_DLY: */
+    READ_DDR40_PHY_WORD_LANE_0_READ_DATA_DLYr(unit, ci, (uint32 *)&valarr[0]); /* Only Bits 0..2 */
+    READ_DDR40_PHY_WORD_LANE_1_READ_DATA_DLYr(unit, ci, (uint32 *)&valarr[1]); /* Only Bits 0..2 */
+    value[0] = ((valarr[1] & 0x7) << 8) | (valarr[0] & 0x7);
+    sal_sprintf(name_str, "%s_ci%d.%d", spn_DDR3_TUNE_RD_DATA_DLY, ci, unit);
+    sal_sprintf(val_str, "0x%08x", value[0]);
+    if (soc_mem_config_set(name_str, val_str) < 0) {
+         return SOC_E_MEMORY;
+    }
+
+    /* SHMOO_RD_EN: */
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT_RD_ENr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT_RD_ENr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE_RD_ENr(unit, ci, (uint32 *)&valarr[2]);
+    value[0] = OVR_COMPRESS(valarr[0]) | (OVR_COMPRESS(valarr[1]) << 8) | (OVR_COMPRESS(valarr[2]) << 16);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT_RD_ENr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT_RD_ENr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE_RD_ENr(unit, ci, (uint32 *)&valarr[2]);
+    value[1] = OVR_COMPRESS(valarr[0]) | (OVR_COMPRESS(valarr[1]) << 8) | (OVR_COMPRESS(valarr[2]) << 16);
+    sal_sprintf(name_str, "%s_ci%d.%d", spn_DDR3_TUNE_RD_EN, ci, unit);
+    sal_sprintf(val_str, "0x%08x,0x%08x", value[0], value[1]);
+    if (soc_mem_config_set(name_str, val_str) < 0) {
+         return SOC_E_MEMORY;
+    }
+
+    /* SHMOO_RD_DQ : */
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT0_R_Pr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT1_R_Pr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT2_R_Pr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT3_R_Pr(unit, ci, (uint32 *)&valarr[3]);
+    value[0] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT4_R_Pr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT5_R_Pr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT6_R_Pr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT7_R_Pr(unit, ci, (uint32 *)&valarr[3]);
+    value[1] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT0_R_Pr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT1_R_Pr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT2_R_Pr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT3_R_Pr(unit, ci, (uint32 *)&valarr[3]);
+    value[2] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT4_R_Pr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT5_R_Pr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT6_R_Pr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT7_R_Pr(unit, ci, (uint32 *)&valarr[3]);
+    value[3] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    sal_sprintf(name_str, "%s_ci%d.%d", spn_DDR3_TUNE_RD_DQ_WL0_RP, ci, unit);
+    sal_sprintf(val_str, "0x%08x,0x%08x,0x%08x,0x%08x", value[0], value[1], value[2], value[3]);
+    if (soc_mem_config_set(name_str, val_str) < 0) {
+         return SOC_E_MEMORY;
+    }
+
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT0_R_Pr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT1_R_Pr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT2_R_Pr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT3_R_Pr(unit, ci, (uint32 *)&valarr[3]);
+    value[0] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT4_R_Pr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT5_R_Pr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT6_R_Pr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT7_R_Pr(unit, ci, (uint32 *)&valarr[3]);
+    value[1] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT0_R_Pr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT1_R_Pr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT2_R_Pr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT3_R_Pr(unit, ci, (uint32 *)&valarr[3]);
+    value[2] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT4_R_Pr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT5_R_Pr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT6_R_Pr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT7_R_Pr(unit, ci, (uint32 *)&valarr[3]);
+    value[3] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    sal_sprintf(name_str, "%s_ci%d.%d", spn_DDR3_TUNE_RD_DQ_WL1_RP, ci, unit);
+    sal_sprintf(val_str, "0x%08x,0x%08x,0x%08x,0x%08x", value[0], value[1], value[2], value[3]);
+    if (soc_mem_config_set(name_str, val_str) < 0) {
+         return SOC_E_MEMORY;
+    }
+
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT0_R_Nr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT1_R_Nr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT2_R_Nr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT3_R_Nr(unit, ci, (uint32 *)&valarr[3]);
+    value[0] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT4_R_Nr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT5_R_Nr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT6_R_Nr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT7_R_Nr(unit, ci, (uint32 *)&valarr[3]);
+    value[1] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT0_R_Nr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT1_R_Nr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT2_R_Nr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT3_R_Nr(unit, ci, (uint32 *)&valarr[3]);
+    value[2] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT4_R_Nr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT5_R_Nr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT6_R_Nr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT7_R_Nr(unit, ci, (uint32 *)&valarr[3]);
+    value[3] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    sal_sprintf(name_str, "%s_ci%d.%d", spn_DDR3_TUNE_RD_DQ_WL0_RN, ci, unit);
+    sal_sprintf(val_str, "0x%08x,0x%08x,0x%08x,0x%08x", value[0], value[1], value[2], value[3]);
+    if (soc_mem_config_set(name_str, val_str) < 0) {
+         return SOC_E_MEMORY;
+    }
+
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT0_R_Nr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT1_R_Nr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT2_R_Nr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT3_R_Nr(unit, ci, (uint32 *)&valarr[3]);
+    value[0] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT4_R_Nr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT5_R_Nr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT6_R_Nr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT7_R_Nr(unit, ci, (uint32 *)&valarr[3]);
+    value[1] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT0_R_Nr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT1_R_Nr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT2_R_Nr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT3_R_Nr(unit, ci, (uint32 *)&valarr[3]);
+    value[2] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT4_R_Nr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT5_R_Nr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT6_R_Nr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT7_R_Nr(unit, ci, (uint32 *)&valarr[3]);
+    value[3] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    sal_sprintf(name_str, "%s_ci%d.%d", spn_DDR3_TUNE_RD_DQ_WL1_RN, ci, unit);
+    sal_sprintf(val_str, "0x%08x,0x%08x,0x%08x,0x%08x", value[0], value[1], value[2], value[3]);
+    if (soc_mem_config_set(name_str, val_str) < 0) {
+         return SOC_E_MEMORY;
+    }
+
+    /* SHMOO_RD_DQS: */
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_R_Pr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_R_Nr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_R_Pr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_R_Nr(unit, ci, (uint32 *)&valarr[3]);
+    value[0] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_R_Pr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_R_Nr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_R_Pr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_R_Nr(unit, ci, (uint32 *)&valarr[3]);
+    value[1] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    sal_sprintf(name_str, "%s_ci%d.%d", spn_DDR3_TUNE_RD_DQS, ci, unit);
+    sal_sprintf(val_str, "0x%08x,0x%08x", value[0], value[1]);
+    if (soc_mem_config_set(name_str, val_str) < 0) {
+         return SOC_E_MEMORY;
+    }
+
+    /* SHMOO_VREF: */
+    READ_DDR40_PHY_CONTROL_REGS_VREF_DAC_CONTROLr(unit, ci, (uint32 *)&valarr[0]);
+    sal_sprintf(name_str, "%s_ci%d.%d", spn_DDR3_TUNE_VREF, ci, unit);
+    sal_sprintf(val_str, "0x%08x", valarr[0]);
+    if (soc_mem_config_set(name_str, val_str) < 0) {
+         return SOC_E_MEMORY;
+    }
+
+    /* SHMOO_WR_DQ : */
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_Wr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_Wr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_Wr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_Wr(unit, ci, (uint32 *)&valarr[3]);
+    value[0] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    sal_sprintf(name_str, "%s_ci%d.%d", spn_DDR3_TUNE_WR_DQ, ci, unit);
+    sal_sprintf(val_str, "0x%08x", value[0]);
+    if (soc_mem_config_set(name_str, val_str) < 0) {
+         return SOC_E_MEMORY;
+    }
+
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT0_Wr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT1_Wr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT2_Wr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT3_Wr(unit, ci, (uint32 *)&valarr[3]);
+    value[0] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT4_Wr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT5_Wr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT6_Wr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT7_Wr(unit, ci, (uint32 *)&valarr[3]);
+    value[1] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT0_Wr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT1_Wr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT2_Wr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT3_Wr(unit, ci, (uint32 *)&valarr[3]);
+    value[2] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT4_Wr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT5_Wr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT6_Wr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT7_Wr(unit, ci, (uint32 *)&valarr[3]);
+    value[3] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    sal_sprintf(name_str, "%s_ci%d.%d", spn_DDR3_TUNE_WR_DQ_WL0, ci, unit);
+    sal_sprintf(val_str, "0x%08x,0x%08x,0x%08x,0x%08x", value[0], value[1], value[2], value[3]);
+    if (soc_mem_config_set(name_str, val_str) < 0) {
+         return SOC_E_MEMORY;
+    }
+
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT0_Wr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT1_Wr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT2_Wr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT3_Wr(unit, ci, (uint32 *)&valarr[3]);
+    value[0] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT4_Wr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT5_Wr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT6_Wr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT7_Wr(unit, ci, (uint32 *)&valarr[3]);
+    value[1] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT0_Wr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT1_Wr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT2_Wr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT3_Wr(unit, ci, (uint32 *)&valarr[3]);
+    value[2] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT4_Wr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT5_Wr(unit, ci, (uint32 *)&valarr[1]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT6_Wr(unit, ci, (uint32 *)&valarr[2]);
+    READ_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT7_Wr(unit, ci, (uint32 *)&valarr[3]);
+    value[3] = OVR_COMPRESS(valarr[0]) |  (OVR_COMPRESS(valarr[1]) << 8) |
+               (OVR_COMPRESS(valarr[2]) << 16) | (OVR_COMPRESS(valarr[3]) << 24);
+    sal_sprintf(name_str, "%s_ci%d.%d", spn_DDR3_TUNE_WR_DQ_WL1, ci, unit);
+    sal_sprintf(val_str, "0x%08x,0x%08x,0x%08x,0x%08x", value[0], value[1], value[2], value[3]);
+    if (soc_mem_config_set(name_str, val_str) < 0) {
+         return SOC_E_MEMORY;
+    }
+
+    /* SHMOO_ADDRC: */
+    READ_DDR40_PHY_CONTROL_REGS_VDL_OVRIDE_BIT_CTLr(unit, ci, (uint32 *)&valarr[0]);
+    READ_DDR40_PHY_CONTROL_REGS_VDL_OVRIDE_BYTE_CTLr(unit, ci, (uint32 *)&valarr[1]);
+    value[0] = OVR_COMPRESS(valarr[0]) | (OVR_COMPRESS(valarr[1]) << 8);
+    sal_sprintf(name_str, "%s_ci%d.%d", spn_DDR3_TUNE_ADDRC, ci, unit);
+    sal_sprintf(val_str, "0x%08x", value[0]);
+    if (soc_mem_config_set(name_str, val_str) < 0) {
+         return SOC_E_MEMORY;
+    }
+    return SOC_E_NONE;
+}
+
+#define OVR_EXPAND(_v) (((_v) & 0x3f)  | (0x20000) | \
+                           (((_v)&0x40) ? 0x100 : 0) | \
+                           (((_v)&0x80) ? 0x10000 : 0))
+
+int soc_ddr40_shmoo_restorecfg(int unit, int ci)
+{
+    int value[4], valarr[4];
+
+    /* SHMOO_RD_DATA_DLY: */
+    if (soc_property_ci_get_csv(unit, ci, spn_DDR3_TUNE_RD_DATA_DLY,4,value) != 1) {
+        return SOC_E_CONFIG;
+    }
+    valarr[0] = value[0] & 0x7;
+    valarr[1] = (value[0] >> 8) & 0x7;
+    WRITE_DDR40_PHY_WORD_LANE_0_READ_DATA_DLYr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_1_READ_DATA_DLYr(unit, ci, valarr[1]);
+
+    /* SHMOO_RD_EN: */
+    if (soc_property_ci_get_csv(unit, ci, spn_DDR3_TUNE_RD_EN,4,value) != 2) {
+        return SOC_E_CONFIG;
+    }
+    valarr[0] = OVR_EXPAND(value[0]);
+    valarr[1] = OVR_EXPAND(value[0]>>8);
+    valarr[2] = OVR_EXPAND(value[0]>>16);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT_RD_ENr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT_RD_ENr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE_RD_ENr(unit, ci, valarr[2]);
+    valarr[0] = OVR_EXPAND(value[1]);
+    valarr[1] = OVR_EXPAND(value[1]>>8);
+    valarr[2] = OVR_EXPAND(value[1]>>16);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT_RD_ENr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT_RD_ENr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE_RD_ENr(unit, ci, valarr[2]);
+
+    /* SHMOO_RD_DQ : */
+    if (soc_property_ci_get_csv(unit, ci, spn_DDR3_TUNE_RD_DQ_WL0_RP,4,value) != 4) {
+        return SOC_E_CONFIG;
+    }
+    valarr[0] = OVR_EXPAND(value[0]);
+    valarr[1] = OVR_EXPAND(value[0]>>8);
+    valarr[2] = OVR_EXPAND(value[0]>>16);
+    valarr[3] = OVR_EXPAND(value[0]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT0_R_Pr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT1_R_Pr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT2_R_Pr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT3_R_Pr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[1]);
+    valarr[1] = OVR_EXPAND(value[1]>>8);
+    valarr[2] = OVR_EXPAND(value[1]>>16);
+    valarr[3] = OVR_EXPAND(value[1]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT4_R_Pr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT5_R_Pr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT6_R_Pr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT7_R_Pr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[2]);
+    valarr[1] = OVR_EXPAND(value[2]>>8);
+    valarr[2] = OVR_EXPAND(value[2]>>16);
+    valarr[3] = OVR_EXPAND(value[2]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT0_R_Pr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT1_R_Pr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT2_R_Pr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT3_R_Pr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[3]);
+    valarr[1] = OVR_EXPAND(value[3]>>8);
+    valarr[2] = OVR_EXPAND(value[3]>>16);
+    valarr[3] = OVR_EXPAND(value[3]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT4_R_Pr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT5_R_Pr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT6_R_Pr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT7_R_Pr(unit, ci, valarr[3]);
+
+    if (soc_property_ci_get_csv(unit, ci, spn_DDR3_TUNE_RD_DQ_WL1_RP,4,value) != 4) {
+        return SOC_E_CONFIG;
+    }
+    valarr[0] = OVR_EXPAND(value[0]);
+    valarr[1] = OVR_EXPAND(value[0]>>8);
+    valarr[2] = OVR_EXPAND(value[0]>>16);
+    valarr[3] = OVR_EXPAND(value[0]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT0_R_Pr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT1_R_Pr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT2_R_Pr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT3_R_Pr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[1]);
+    valarr[1] = OVR_EXPAND(value[1]>>8);
+    valarr[2] = OVR_EXPAND(value[1]>>16);
+    valarr[3] = OVR_EXPAND(value[1]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT4_R_Pr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT5_R_Pr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT6_R_Pr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT7_R_Pr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[2]);
+    valarr[1] = OVR_EXPAND(value[2]>>8);
+    valarr[2] = OVR_EXPAND(value[2]>>16);
+    valarr[3] = OVR_EXPAND(value[2]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT0_R_Pr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT1_R_Pr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT2_R_Pr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT3_R_Pr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[3]);
+    valarr[1] = OVR_EXPAND(value[3]>>8);
+    valarr[2] = OVR_EXPAND(value[3]>>16);
+    valarr[3] = OVR_EXPAND(value[3]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT4_R_Pr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT5_R_Pr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT6_R_Pr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT7_R_Pr(unit, ci, valarr[3]);
+
+    if (soc_property_ci_get_csv(unit, ci, spn_DDR3_TUNE_RD_DQ_WL0_RN,4,value) != 4) {
+        return SOC_E_CONFIG;
+    }
+    valarr[0] = OVR_EXPAND(value[0]);
+    valarr[1] = OVR_EXPAND(value[0]>>8);
+    valarr[2] = OVR_EXPAND(value[0]>>16);
+    valarr[3] = OVR_EXPAND(value[0]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT0_R_Nr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT1_R_Nr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT2_R_Nr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT3_R_Nr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[1]);
+    valarr[1] = OVR_EXPAND(value[1]>>8);
+    valarr[2] = OVR_EXPAND(value[1]>>16);
+    valarr[3] = OVR_EXPAND(value[3]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT4_R_Nr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT5_R_Nr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT6_R_Nr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT7_R_Nr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[2]);
+    valarr[1] = OVR_EXPAND(value[2]>>8);
+    valarr[2] = OVR_EXPAND(value[2]>>16);
+    valarr[3] = OVR_EXPAND(value[2]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT0_R_Nr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT1_R_Nr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT2_R_Nr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT3_R_Nr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[3]);
+    valarr[1] = OVR_EXPAND(value[3]>>8);
+    valarr[2] = OVR_EXPAND(value[3]>>16);
+    valarr[3] = OVR_EXPAND(value[3]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT4_R_Nr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT5_R_Nr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT6_R_Nr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT7_R_Nr(unit, ci, valarr[3]);
+
+    if (soc_property_ci_get_csv(unit, ci, spn_DDR3_TUNE_RD_DQ_WL1_RN,4,value) != 4) {
+        return SOC_E_CONFIG;
+    }
+    valarr[0] = OVR_EXPAND(value[0]);
+    valarr[1] = OVR_EXPAND(value[0]>>8);
+    valarr[2] = OVR_EXPAND(value[0]>>16);
+    valarr[3] = OVR_EXPAND(value[0]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT0_R_Nr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT1_R_Nr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT2_R_Nr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT3_R_Nr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[1]);
+    valarr[1] = OVR_EXPAND(value[1]>>8);
+    valarr[2] = OVR_EXPAND(value[1]>>16);
+    valarr[3] = OVR_EXPAND(value[1]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT4_R_Nr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT5_R_Nr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT6_R_Nr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT7_R_Nr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[2]);
+    valarr[1] = OVR_EXPAND(value[2]>>8);
+    valarr[2] = OVR_EXPAND(value[2]>>16);
+    valarr[3] = OVR_EXPAND(value[2]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT0_R_Nr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT1_R_Nr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT2_R_Nr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT3_R_Nr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[3]);
+    valarr[1] = OVR_EXPAND(value[3]>>8);
+    valarr[2] = OVR_EXPAND(value[3]>>16);
+    valarr[3] = OVR_EXPAND(value[3]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT4_R_Nr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT5_R_Nr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT6_R_Nr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT7_R_Nr(unit, ci, valarr[3]);
+
+
+    /* SHMOO_RD_DQS: */
+    if (soc_property_ci_get_csv(unit, ci, spn_DDR3_TUNE_RD_DQS,4,value) != 2) {
+        return SOC_E_CONFIG;
+    }
+    valarr[0] = OVR_EXPAND(value[0]);
+    valarr[1] = OVR_EXPAND(value[0]>>8);
+    valarr[2] = OVR_EXPAND(value[0]>>16);
+    valarr[3] = OVR_EXPAND(value[0]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_R_Pr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_R_Nr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_R_Pr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_R_Nr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[1]);
+    valarr[1] = OVR_EXPAND(value[1]>>8);
+    valarr[2] = OVR_EXPAND(value[1]>>16);
+    valarr[3] = OVR_EXPAND(value[1]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_R_Pr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_R_Nr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_R_Pr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_R_Nr(unit, ci, valarr[3]);
+
+    /* SHMOO_VREF: */
+    if (soc_property_ci_get_csv(unit, ci, spn_DDR3_TUNE_VREF,2,value) != 1) {
+        return SOC_E_CONFIG;
+    }
+    WRITE_DDR40_PHY_CONTROL_REGS_VREF_DAC_CONTROLr(unit, ci, value[0]);
+
+    /* SHMOO_WR_DQ : */
+    if (soc_property_ci_get_csv(unit, ci, spn_DDR3_TUNE_WR_DQ,2,value) != 1) {
+        return SOC_E_CONFIG;
+    }
+    valarr[0] = OVR_EXPAND(value[0]);
+    valarr[1] = OVR_EXPAND(value[0]>>8);
+    valarr[2] = OVR_EXPAND(value[0]>>16);
+    valarr[3] = OVR_EXPAND(value[0]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_Wr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_Wr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_Wr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_Wr(unit, ci, valarr[3]);
+
+    if (soc_property_ci_get_csv(unit, ci, spn_DDR3_TUNE_WR_DQ_WL0,4,value) != 4) {
+        return SOC_E_CONFIG;
+    }
+    valarr[0] = OVR_EXPAND(value[0]);
+    valarr[1] = OVR_EXPAND(value[0]>>8);
+    valarr[2] = OVR_EXPAND(value[0]>>16);
+    valarr[3] = OVR_EXPAND(value[0]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT0_Wr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT1_Wr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT2_Wr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT3_Wr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[1]);
+    valarr[1] = OVR_EXPAND(value[1]>>8);
+    valarr[2] = OVR_EXPAND(value[1]>>16);
+    valarr[3] = OVR_EXPAND(value[1]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT4_Wr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT5_Wr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT6_Wr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE0_BIT7_Wr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[2]);
+    valarr[1] = OVR_EXPAND(value[2]>>8);
+    valarr[2] = OVR_EXPAND(value[2]>>16);
+    valarr[3] = OVR_EXPAND(value[2]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT0_Wr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT1_Wr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT2_Wr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT3_Wr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[3]);
+    valarr[1] = OVR_EXPAND(value[3]>>8);
+    valarr[2] = OVR_EXPAND(value[3]>>16);
+    valarr[3] = OVR_EXPAND(value[3]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT4_Wr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT5_Wr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT6_Wr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_0_VDL_OVRIDE_BYTE1_BIT7_Wr(unit, ci, valarr[3]);
+
+    if (soc_property_ci_get_csv(unit, ci, spn_DDR3_TUNE_WR_DQ_WL1,4,value) != 4) {
+        return SOC_E_CONFIG;
+    }
+    valarr[0] = OVR_EXPAND(value[0]);
+    valarr[1] = OVR_EXPAND(value[0]>>8);
+    valarr[2] = OVR_EXPAND(value[0]>>16);
+    valarr[3] = OVR_EXPAND(value[0]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT0_Wr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT1_Wr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT2_Wr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT3_Wr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[1]);
+    valarr[1] = OVR_EXPAND(value[1]>>8);
+    valarr[2] = OVR_EXPAND(value[1]>>16);
+    valarr[3] = OVR_EXPAND(value[1]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT4_Wr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT5_Wr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT6_Wr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE0_BIT7_Wr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[2]);
+    valarr[1] = OVR_EXPAND(value[2]>>8);
+    valarr[2] = OVR_EXPAND(value[2]>>16);
+    valarr[3] = OVR_EXPAND(value[2]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT0_Wr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT1_Wr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT2_Wr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT3_Wr(unit, ci, valarr[3]);
+    valarr[0] = OVR_EXPAND(value[3]);
+    valarr[1] = OVR_EXPAND(value[3]>>8);
+    valarr[2] = OVR_EXPAND(value[3]>>16);
+    valarr[3] = OVR_EXPAND(value[3]>>24);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT4_Wr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT5_Wr(unit, ci, valarr[1]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT6_Wr(unit, ci, valarr[2]);
+    WRITE_DDR40_PHY_WORD_LANE_1_VDL_OVRIDE_BYTE1_BIT7_Wr(unit, ci, valarr[3]);
+
+    /* SHMOO_ADDRC: */
+    if (soc_property_ci_get_csv(unit, ci, spn_DDR3_TUNE_ADDRC,2,value) != 1) {
+        return SOC_E_CONFIG;
+    }
+    valarr[0] = OVR_EXPAND(value[0]);
+    valarr[1] = OVR_EXPAND(value[0]>>8);
+    WRITE_DDR40_PHY_CONTROL_REGS_VDL_OVRIDE_BIT_CTLr(unit, ci, valarr[0]);
+    WRITE_DDR40_PHY_CONTROL_REGS_VDL_OVRIDE_BYTE_CTLr(unit, ci, valarr[1]);
+
+    /* Clear the FIFO error state */
+    WRITE_DDR40_PHY_WORD_LANE_0_READ_FIFO_CLEARr(unit, ci, 0);
+    WRITE_DDR40_PHY_WORD_LANE_1_READ_FIFO_CLEARr(unit, ci, 0);
+
+    return SOC_E_NONE;
+}
+#endif
 
 #if defined(CONFIG_IPROC_DDR_ECC)
 static void
@@ -5057,3 +6313,4 @@ shmoo_ecc_full(int mode)
 }
 
 #endif
+#endif                          /* DDR3 Support */
diff --git a/arch/arm/cpu/armv7/iproc/shmoo_and28/Makefile b/arch/arm/cpu/armv7/iproc/shmoo_and28/Makefile
new file mode 100755
index 0000000..f76506b
--- /dev/null
+++ b/arch/arm/cpu/armv7/iproc/shmoo_and28/Makefile
@@ -0,0 +1,42 @@
+#
+# See file CREDITS for list of people who contributed to this
+# project.
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+#
+
+include $(TOPDIR)/config.mk
+
+LIB	= $(obj)libshmoo_and28.o
+
+COBJS	+= phy_reg_access.o  ydc_ddr_bist.o  shmoo_and28.o
+
+SRCS	:= $(SOBJS:.o=.S) $(COBJS:.o=.c)
+
+OBJS	:= $(addprefix $(obj),$(COBJS) $(SOBJS))
+
+all:	$(obj).depend $(LIB)
+
+$(LIB):	$(OBJS)
+	$(call cmd_link_o_target, $(OBJS))
+
+#########################################################################
+
+# defines $(obj).depend target
+include $(SRCTREE)/rules.mk
+
+sinclude $(obj).depend
+
+#########################################################################
diff --git a/arch/arm/cpu/armv7/iproc/shmoo_and28/phy_and28_e0.h b/arch/arm/cpu/armv7/iproc/shmoo_and28/phy_and28_e0.h
new file mode 100755
index 0000000..098a26e
--- /dev/null
+++ b/arch/arm/cpu/armv7/iproc/shmoo_and28/phy_and28_e0.h
@@ -0,0 +1,16990 @@
+/***************************************************************************
+ *     Copyright (c) 1999-2013, Broadcom Corporation
+ *     All Rights Reserved
+// 
+// source released per FWDDRSRC-2  4/8/2014 
+ *     Confidential Property of Broadcom Corporation
+ *
+ *
+ * THIS SOFTWARE MAY ONLY BE USED SUBJECT TO AN EXECUTED SOFTWARE LICENSE
+ * AGREEMENT  BETWEEN THE USER AND BROADCOM.  YOU HAVE NO RIGHT TO USE OR
+ * EXPLOIT THIS MATERIAL EXCEPT SUBJECT TO THE TERMS OF SUCH AN AGREEMENT.
+ *
+ * $brcm_Workfile: $
+ * $brcm_Revision: $
+ * $brcm_Date: $
+ *
+ * Module Description:
+ *                     DO NOT EDIT THIS FILE DIRECTLY
+ *
+ * This module was generated magically with RDB from a source description
+ * file. You must edit the source file for changes to be made to this file.
+ *
+ *
+ * Date:           Generated on         Fri Jan  4 14:25:17 2013
+ *                 MD5 Checksum         6d4da9060fffdb8b37e48b100cf7a630
+ *
+ * Compiled with:  RDB Utility          combo_header.pl
+ *                 RDB Parser           3.0
+ *                 unknown              unknown
+ *                 Perl Interpreter     5.008008
+ *                 Operating System     linux
+ *
+ * Spec Versions:  DDR34_PHY_ADDR_CTL   04
+ *                 DDR34_PHY_BYTE_LANE  04
+ *
+ * RDB Files:  /projects/DDR34_2/E0/work/ebleich/phy_7145_tahiti/design/ddr34_phy/ddr_lp_phy_32_fc_28hpm_h/rdb/ddr34_phy_top_standalone.rdb
+ *             /projects/DDR34_2/E0/work/ebleich/phy_7145_tahiti/design/ddr34_phy/ddr_lp_phy_32_fc_28hpm_h/rdb/ddr34_phy_top_blockdef.rdb
+ *             /projects/DDR34_2/E0/work/ebleich/phy_7145_tahiti/design/ddr34_phy/ddr_lp_phy_32_fc_28hpm_h/rdb/ddr34_phy_addr_ctl.rdb
+ *             /projects/DDR34_2/E0/work/ebleich/phy_7145_tahiti/design/ddr34_phy/ddr_lp_phy_32_fc_28hpm_h/rdb/ddr34_phy_regtypes.rdb
+ *             /projects/DDR34_2/E0/work/ebleich/phy_7145_tahiti/design/ddr34_phy/ddr_lp_phy_32_fc_28hpm_h/rdb/ddr34_phy_byte_lane.rdb
+ *             /projects/DDR34_2/E0/work/ebleich/phy_7145_tahiti/design/ddr34_phy/ddr_lp_phy_32_fc_28hpm_h/rdb/ddr34_phy_regtypes.rdb
+ *             /projects/DDR34_2/E0/work/ebleich/phy_7145_tahiti/design/ddr34_phy/ddr_lp_phy_32_fc_28hpm_h/rdb/ddr34_phy_byte_lane_regtypes.rdb
+ *
+ * Revision History:
+ *
+ * $brcm_Log: $
+ *
+ ***************************************************************************/
+
+#ifndef DDR34_PHY_REGISTERS_H__
+#define DDR34_PHY_REGISTERS_H__
+
+/**
+ * m = memory, c = core, r = register, f = field, d = data.
+ */
+#if !defined(GET_FIELD) && !defined(SET_FIELD)
+#define BRCM_ALIGN(c,r,f)   c##_##r##_##f##_ALIGN
+#define BRCM_BITS(c,r,f)    c##_##r##_##f##_BITS
+#define BRCM_MASK(c,r,f)    c##_##r##_##f##_MASK
+#define BRCM_SHIFT(c,r,f)   c##_##r##_##f##_SHIFT
+
+#define GET_FIELD(m,c,r,f) \
+	((((m) & BRCM_MASK(c,r,f)) >> BRCM_SHIFT(c,r,f)) << BRCM_ALIGN(c,r,f))
+
+#define SET_FIELD(m,c,r,f,d) \
+	((m) = (((m) & ~BRCM_MASK(c,r,f)) | ((((d) >> BRCM_ALIGN(c,r,f)) << \
+	 BRCM_SHIFT(c,r,f)) & BRCM_MASK(c,r,f))) \
+	)
+
+#define SET_TYPE_FIELD(m,c,r,f,d) SET_FIELD(m,c,r,f,c##_##d)
+#define SET_NAME_FIELD(m,c,r,f,d) SET_FIELD(m,c,r,f,c##_##r##_##f##_##d)
+#define SET_VALUE_FIELD(m,c,r,f,d) SET_FIELD(m,c,r,f,d)
+
+#endif /* GET & SET */
+
+/***************************************************************************
+ *DDR34_CORE_PHY_CONTROL_REGS - DDR34 CORE DDR34 Address/Comand control registers
+ ***************************************************************************/
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION     0x00000000 /* Address & Control revision register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS   0x00000004 /* PHY PLL status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG   0x00000008 /* PHY PLL configuration register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1 0x0000000c /* PHY PLL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2 0x00000010 /* PHY PLL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL3 0x00000014 /* PHY PLL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS 0x00000018 /* PHY PLL integer divider register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER 0x0000001c /* PHY PLL fractional divider register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL 0x00000020 /* PHY PLL spread spectrum control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT 0x00000024 /* PHY PLL spread spectrum limit register */
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL  0x00000028 /* Aux Control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL 0x0000002c /* Idle mode pad control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0 0x00000030 /* Idle mode pad enable register */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1 0x00000034 /* Idle mode pad enable register */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL 0x00000038 /* PVT Compensation control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL 0x0000003c /* pad rx and tx characteristics control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG  0x00000040 /* DRAM configuration register */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1 0x00000044 /* DRAM timing register #1 */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2 0x00000048 /* DRAM timing register #2 */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3 0x0000004c /* DRAM timing register #3 */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING4 0x00000050 /* DRAM timing register #4 */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE 0x00000060 /* PHY VDL calibration control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1 0x00000064 /* PHY VDL calibration status register #1 */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2 0x00000068 /* PHY VDL calibration status register #2 */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL 0x0000006c /* PHY VDL delay monitoring control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF 0x00000070 /* PHY VDL delay monitoring reference register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS 0x00000074 /* PHY VDL delay monitoring status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE 0x00000078 /* PHY VDL delay monitoring override register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL 0x0000007c /* PHY VDL delay monitoring output control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS 0x00000080 /* PHY VDL delay monitoring output status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR 0x00000084 /* PHY VDL delay monitoring output status clear register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00 0x00000090 /* DDR interface signal AD[00] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01 0x00000094 /* DDR interface signal AD[01] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02 0x00000098 /* DDR interface signal AD[02] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03 0x0000009c /* DDR interface signal AD[03] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04 0x000000a0 /* DDR interface signal AD[04] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05 0x000000a4 /* DDR interface signal AD[05] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06 0x000000a8 /* DDR interface signal AD[06] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07 0x000000ac /* DDR interface signal AD[07] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08 0x000000b0 /* DDR interface signal AD[08] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09 0x000000b4 /* DDR interface signal AD[09] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10 0x000000b8 /* DDR interface signal AD[10] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11 0x000000bc /* DDR interface signal AD[11] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12 0x000000c0 /* DDR interface signal AD[12] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13 0x000000c4 /* DDR interface signal AD[13] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14 0x000000c8 /* DDR interface signal AD[14] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15 0x000000cc /* DDR interface signal AD[15] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0 0x000000d0 /* DDR interface signal BA[0] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1 0x000000d4 /* DDR interface signal BA[1] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2 0x000000d8 /* DDR interface signal BA[2] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0 0x000000dc /* DDR interface signal AUX[0] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1 0x000000e0 /* DDR interface signal AUX[1] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2 0x000000e4 /* DDR interface signal AUX[2] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0 0x000000e8 /* DDR interface signal CS0 VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1 0x000000ec /* DDR interface signal CS1 VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR 0x000000f0 /* DDR interface signal PAR VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N 0x000000f4 /* DDR interface signal RAS_N VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N 0x000000f8 /* DDR interface signal CAS_N VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE 0x000000fc /* DDR interface signal CKE0 VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N 0x00000100 /* DDR interface signal RST_N VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT 0x00000104 /* DDR interface signal ODT0 VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N 0x00000108 /* DDR interface signal WE_N VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P 0x0000010c /* DDR interface signal DDR_CK-P VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N 0x00000110 /* DDR interface signal DDR_CK-N VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL 0x00000114 /* DDR interface signal Write Leveling CLK VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL 0x00000118 /* DDR interface signal Write Leveling Capture Enable VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH      0x00000130 /* Refresh engine controller */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL   0x00000134 /* Update VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1 0x00000138 /* Update VDL snoop control register #1 */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2 0x0000013c /* Update VDL snoop control register #2 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1 0x00000140 /* DRAM Command Register #1 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1 0x00000144 /* DRAM AUX_N Command Register #1 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2 0x00000148 /* DRAM Command Register #2 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2 0x0000014c /* DRAM AUX_N Command Register #2 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3 0x00000150 /* DRAM Command Register #3 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3 0x00000154 /* DRAM AUX_N Command Register #3 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4 0x00000158 /* DRAM Command Register #4 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4 0x0000015c /* DRAM AUX_N Command Register #4 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER 0x00000160 /* DRAM Command Timer Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0    0x00000164 /* DDR3/DDR4/GDDR5 Mode Register 0 and LPDDR Mode Register 1 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1    0x00000168 /* DDR3/DDR4/GDDR5 Mode Register 1 and LPDDR Mode Register 2 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2    0x0000016c /* DDR3/DDR4/GDDR5 Mode Register 2 and LPDDR Mode Register 3 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3    0x00000170 /* DDR3/DDR4/GDDR5 Mode Register 3 and LPDDR Mode Register 9 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4    0x00000174 /* DDR4/GDDR5 Mode Register 4 and LPDDR Mode Register 10 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5    0x00000178 /* DDR4/GDDR5 Mode Register 5 and LPDDR Mode Register 16 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6    0x0000017c /* DDR4/GDDR5 Mode Register 6 and LPDDR Mode Register 17 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7    0x00000180 /* DDR4/GDDR5 Mode Register 7 and LPDDR Mode Register 41 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8    0x00000184 /* GDDR5 Mode Register 8 and LPDDR Mode Register 42 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15   0x00000188 /* GDDR5 Mode Register 15 and LPDDR Mode Register 48 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63   0x0000018c /* LPDDR Mode Register 63 */
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR  0x00000190 /* DDR4 Alert status clear register */
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS 0x00000194 /* DDR4 Alert status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY    0x00000198 /* DDR4 CA parity control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL 0x0000019c /* GDDR5 CA playback control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0 0x000001a0 /* LPDDR3 and GDDR5 CA playback status register0 (for BL0 and BL1) */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1 0x000001a4 /* LPDDR3 and GDDR5 CA playback status register1 (for BL2 and BL3) */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL 0x000001ac /* Write leveling control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS 0x000001b0 /* Write leveling status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL 0x000001b4 /* Read enable test cycle control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS 0x000001b8 /* Read enable test cycle status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_LFSR_SEED 0x000001c0 /* Traffic generator seed register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1 0x000001c4 /* Traffic generator address register #1 */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2 0x000001c8 /* Traffic generator address register #2 */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL 0x000001cc /* Traffic generator control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL 0x000001d0 /* Traffic generator data control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_MASK 0x000001d4 /* Traffic generator DQ mask register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK 0x000001d8 /* Traffic generator ECC DQ mask register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS 0x000001dc /* Traffic generator status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_STATUS 0x000001e0 /* Traffic generator DQ status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS 0x000001e4 /* Traffic generator ECC DQ status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL 0x000001e8 /* Traffic generator error count control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS 0x000001ec /* Traffic generator error count status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL 0x000001f0 /* Virtual VTT Control and Status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS 0x000001f4 /* Virtual VTT Control and Status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS 0x000001f8 /* Virtual VTT Connections register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE 0x000001fc /* Virtual VTT Override register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL 0x00000200 /* VREF DAC Control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL 0x00000204 /* PhyBist Control Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_SEED 0x00000208 /* PhyBist Seed Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS 0x0000020c /* PhyBist General Status Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS 0x00000210 /* PhyBist Per-Bit Control Pad Status Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS 0x00000214 /* PhyBist Byte Lane #0 Status Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS 0x00000218 /* PhyBist Byte Lane #1 Status Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS 0x0000021c /* PhyBist Byte Lane #2 Status Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS 0x00000220 /* PhyBist Byte Lane #3 Status Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS 0x00000224 /* PhyBist Byte Lane #4 (ECC) Status Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL 0x00000230 /* Standby Control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE 0x00000234 /* Freeze-on-error enable register */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL 0x00000238 /* Debug Mux Control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL    0x0000023c /* DFI Interface Ownership Control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL 0x00000240 /* Write ODT Control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL 0x00000244 /* ABI and PAR Control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL       0x00000248 /* ZQ Calibration Control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_AC_SPARE_REG 0x0000011c /* Address and Control Spare register */
+
+/***************************************************************************
+ *DDR34_CORE_PHY_BYTE_LANE_0 - DDR34 CORE DDR34 Byte Lane #0 control registers
+ ***************************************************************************/
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P 0x00000400 /* Write channel DQS-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N 0x00000404 /* Write channel DQS-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0 0x00000408 /* Write channel DQ0 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1 0x0000040c /* Write channel DQ1 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2 0x00000410 /* Write channel DQ2 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3 0x00000414 /* Write channel DQ3 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4 0x00000418 /* Write channel DQ4 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5 0x0000041c /* Write channel DQ5 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6 0x00000420 /* Write channel DQ6 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7 0x00000424 /* Write channel DQ7 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM 0x00000428 /* Write channel DM VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC 0x0000042c /* Write channel EDC VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP 0x00000430 /* Read channel DQSP VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN 0x00000434 /* Read channel DQSP VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P 0x00000438 /* Read channel DQ0-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N 0x0000043c /* Read channel DQ0-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P 0x00000440 /* Read channel DQ1-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N 0x00000444 /* Read channel DQ1-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P 0x00000448 /* Read channel DQ2-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N 0x0000044c /* Read channel DQ2-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P 0x00000450 /* Read channel DQ3-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N 0x00000454 /* Read channel DQ3-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P 0x00000458 /* Read channel DQ4-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N 0x0000045c /* Read channel DQ4-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P 0x00000460 /* Read channel DQ5-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N 0x00000464 /* Read channel DQ5-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P 0x00000468 /* Read channel DQ6-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N 0x0000046c /* Read channel DQ6-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P 0x00000470 /* Read channel DQ7-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N 0x00000474 /* Read channel DQ7-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP 0x00000478 /* Read channel DM-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN 0x0000047c /* Read channel DM-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP 0x00000480 /* Read channel EDC-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN 0x00000484 /* Read channel EDC-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0 0x00000488 /* Read channel CS_N[0] read enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1 0x0000048c /* Read channel CS_N[1] read enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL 0x00000490 /* DDR interface signal Write Leveling CLK VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL 0x00000494 /* DDR interface signal Write Leveling Capture Enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC 0x000004a0 /* Read enable bit-clock cycle delay control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC 0x000004a4 /* Write leveling bit-clock cycle delay control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL  0x000004b0 /* Read channel datapath control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR 0x000004b4 /* Read fifo addresss pointer register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DATA 0x000004b8 /* Read fifo data register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI 0x000004bc /* Read fifo dm/dbi register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS 0x000004c0 /* Read fifo status register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR 0x000004c4 /* Read fifo status clear register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL 0x000004c8 /* Idle mode SSTL pad control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL 0x000004cc /* SSTL pad drive characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL 0x000004d0 /* SSTL read enable pad drive characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL 0x000004d4 /* pad rx and tx characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE 0x000004d8 /* Write cycle preamble control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL   0x000004e0 /* Read channel ODT control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL 0x000004f0 /* GDDR5M EDC digital phase detector control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS 0x000004f4 /* GDDR5M EDC digital phase detector status register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL 0x000004f8 /* GDDR5M EDC digital phase detector output signal control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS 0x000004fc /* GDDR5M EDC digital phase detector output signal status register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR 0x00000500 /* GDDR5M EDC digital phase detector output signal status clear register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL 0x00000504 /* GDDR5M EDC signal path CRC control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS 0x00000508 /* GDDR5M EDC signal path CRC status register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT 0x0000050c /* GDDR5M EDC signal path CRC counter register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR 0x00000510 /* GDDR5M EDC signal path CRC counter register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_BL_SPARE_REG  0x00000514 /* Byte-Lane Spare register */
+
+/***************************************************************************
+ *DDR34_CORE_PHY_BYTE_LANE_1 - DDR34 CORE DDR34 Byte Lane #1 control registers
+ ***************************************************************************/
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P 0x00000600 /* Write channel DQS-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N 0x00000604 /* Write channel DQS-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0 0x00000608 /* Write channel DQ0 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1 0x0000060c /* Write channel DQ1 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2 0x00000610 /* Write channel DQ2 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3 0x00000614 /* Write channel DQ3 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4 0x00000618 /* Write channel DQ4 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5 0x0000061c /* Write channel DQ5 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6 0x00000620 /* Write channel DQ6 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7 0x00000624 /* Write channel DQ7 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM 0x00000628 /* Write channel DM VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC 0x0000062c /* Write channel EDC VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP 0x00000630 /* Read channel DQSP VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN 0x00000634 /* Read channel DQSP VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P 0x00000638 /* Read channel DQ0-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N 0x0000063c /* Read channel DQ0-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P 0x00000640 /* Read channel DQ1-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N 0x00000644 /* Read channel DQ1-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P 0x00000648 /* Read channel DQ2-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N 0x0000064c /* Read channel DQ2-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P 0x00000650 /* Read channel DQ3-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N 0x00000654 /* Read channel DQ3-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P 0x00000658 /* Read channel DQ4-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N 0x0000065c /* Read channel DQ4-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P 0x00000660 /* Read channel DQ5-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N 0x00000664 /* Read channel DQ5-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P 0x00000668 /* Read channel DQ6-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N 0x0000066c /* Read channel DQ6-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P 0x00000670 /* Read channel DQ7-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N 0x00000674 /* Read channel DQ7-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP 0x00000678 /* Read channel DM-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN 0x0000067c /* Read channel DM-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP 0x00000680 /* Read channel EDC-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN 0x00000684 /* Read channel EDC-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0 0x00000688 /* Read channel CS_N[0] read enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1 0x0000068c /* Read channel CS_N[1] read enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL 0x00000690 /* DDR interface signal Write Leveling CLK VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL 0x00000694 /* DDR interface signal Write Leveling Capture Enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC 0x000006a0 /* Read enable bit-clock cycle delay control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC 0x000006a4 /* Write leveling bit-clock cycle delay control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL  0x000006b0 /* Read channel datapath control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR 0x000006b4 /* Read fifo addresss pointer register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DATA 0x000006b8 /* Read fifo data register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI 0x000006bc /* Read fifo dm/dbi register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS 0x000006c0 /* Read fifo status register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR 0x000006c4 /* Read fifo status clear register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL 0x000006c8 /* Idle mode SSTL pad control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL 0x000006cc /* SSTL pad drive characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL 0x000006d0 /* SSTL read enable pad drive characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL 0x000006d4 /* pad rx and tx characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE 0x000006d8 /* Write cycle preamble control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL   0x000006e0 /* Read channel ODT control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL 0x000006f0 /* GDDR5M EDC digital phase detector control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS 0x000006f4 /* GDDR5M EDC digital phase detector status register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL 0x000006f8 /* GDDR5M EDC digital phase detector output signal control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS 0x000006fc /* GDDR5M EDC digital phase detector output signal status register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR 0x00000700 /* GDDR5M EDC digital phase detector output signal status clear register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL 0x00000704 /* GDDR5M EDC signal path CRC control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS 0x00000708 /* GDDR5M EDC signal path CRC status register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT 0x0000070c /* GDDR5M EDC signal path CRC counter register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR 0x00000710 /* GDDR5M EDC signal path CRC counter register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_BL_SPARE_REG  0x00000714 /* Byte-Lane Spare register */
+
+/***************************************************************************
+ *DDR34_CORE_PHY_BYTE_LANE_2 - DDR34 CORE DDR34 Byte Lane #2 control registers
+ ***************************************************************************/
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P 0x00000800 /* Write channel DQS-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N 0x00000804 /* Write channel DQS-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0 0x00000808 /* Write channel DQ0 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1 0x0000080c /* Write channel DQ1 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2 0x00000810 /* Write channel DQ2 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3 0x00000814 /* Write channel DQ3 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4 0x00000818 /* Write channel DQ4 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5 0x0000081c /* Write channel DQ5 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6 0x00000820 /* Write channel DQ6 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7 0x00000824 /* Write channel DQ7 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM 0x00000828 /* Write channel DM VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC 0x0000082c /* Write channel EDC VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP 0x00000830 /* Read channel DQSP VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN 0x00000834 /* Read channel DQSP VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P 0x00000838 /* Read channel DQ0-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N 0x0000083c /* Read channel DQ0-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P 0x00000840 /* Read channel DQ1-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N 0x00000844 /* Read channel DQ1-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P 0x00000848 /* Read channel DQ2-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N 0x0000084c /* Read channel DQ2-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P 0x00000850 /* Read channel DQ3-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N 0x00000854 /* Read channel DQ3-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P 0x00000858 /* Read channel DQ4-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N 0x0000085c /* Read channel DQ4-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P 0x00000860 /* Read channel DQ5-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N 0x00000864 /* Read channel DQ5-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P 0x00000868 /* Read channel DQ6-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N 0x0000086c /* Read channel DQ6-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P 0x00000870 /* Read channel DQ7-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N 0x00000874 /* Read channel DQ7-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP 0x00000878 /* Read channel DM-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN 0x0000087c /* Read channel DM-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP 0x00000880 /* Read channel EDC-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN 0x00000884 /* Read channel EDC-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0 0x00000888 /* Read channel CS_N[0] read enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1 0x0000088c /* Read channel CS_N[1] read enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL 0x00000890 /* DDR interface signal Write Leveling CLK VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL 0x00000894 /* DDR interface signal Write Leveling Capture Enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC 0x000008a0 /* Read enable bit-clock cycle delay control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC 0x000008a4 /* Write leveling bit-clock cycle delay control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL  0x000008b0 /* Read channel datapath control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_ADDR 0x000008b4 /* Read fifo addresss pointer register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_DATA 0x000008b8 /* Read fifo data register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_DM_DBI 0x000008bc /* Read fifo dm/dbi register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_STATUS 0x000008c0 /* Read fifo status register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR 0x000008c4 /* Read fifo status clear register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL 0x000008c8 /* Idle mode SSTL pad control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL 0x000008cc /* SSTL pad drive characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL 0x000008d0 /* SSTL read enable pad drive characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL 0x000008d4 /* pad rx and tx characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE 0x000008d8 /* Write cycle preamble control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL   0x000008e0 /* Read channel ODT control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL 0x000008f0 /* GDDR5M EDC digital phase detector control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS 0x000008f4 /* GDDR5M EDC digital phase detector status register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL 0x000008f8 /* GDDR5M EDC digital phase detector output signal control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS 0x000008fc /* GDDR5M EDC digital phase detector output signal status register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_CLEAR 0x00000900 /* GDDR5M EDC digital phase detector output signal status clear register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL 0x00000904 /* GDDR5M EDC signal path CRC control register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS 0x00000908 /* GDDR5M EDC signal path CRC status register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT 0x0000090c /* GDDR5M EDC signal path CRC counter register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_CLEAR 0x00000910 /* GDDR5M EDC signal path CRC counter register */
+#define DDR34_CORE_PHY_BYTE_LANE_2_BL_SPARE_REG  0x00000914 /* Byte-Lane Spare register */
+
+/***************************************************************************
+ *DDR34_CORE_PHY_BYTE_LANE_3 - DDR34 CORE DDR34 Byte Lane #3 control registers
+ ***************************************************************************/
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P 0x00000a00 /* Write channel DQS-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N 0x00000a04 /* Write channel DQS-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0 0x00000a08 /* Write channel DQ0 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1 0x00000a0c /* Write channel DQ1 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2 0x00000a10 /* Write channel DQ2 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3 0x00000a14 /* Write channel DQ3 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4 0x00000a18 /* Write channel DQ4 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5 0x00000a1c /* Write channel DQ5 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6 0x00000a20 /* Write channel DQ6 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7 0x00000a24 /* Write channel DQ7 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM 0x00000a28 /* Write channel DM VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC 0x00000a2c /* Write channel EDC VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP 0x00000a30 /* Read channel DQSP VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN 0x00000a34 /* Read channel DQSP VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P 0x00000a38 /* Read channel DQ0-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N 0x00000a3c /* Read channel DQ0-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P 0x00000a40 /* Read channel DQ1-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N 0x00000a44 /* Read channel DQ1-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P 0x00000a48 /* Read channel DQ2-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N 0x00000a4c /* Read channel DQ2-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P 0x00000a50 /* Read channel DQ3-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N 0x00000a54 /* Read channel DQ3-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P 0x00000a58 /* Read channel DQ4-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N 0x00000a5c /* Read channel DQ4-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P 0x00000a60 /* Read channel DQ5-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N 0x00000a64 /* Read channel DQ5-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P 0x00000a68 /* Read channel DQ6-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N 0x00000a6c /* Read channel DQ6-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P 0x00000a70 /* Read channel DQ7-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N 0x00000a74 /* Read channel DQ7-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP 0x00000a78 /* Read channel DM-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN 0x00000a7c /* Read channel DM-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP 0x00000a80 /* Read channel EDC-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN 0x00000a84 /* Read channel EDC-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0 0x00000a88 /* Read channel CS_N[0] read enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1 0x00000a8c /* Read channel CS_N[1] read enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL 0x00000a90 /* DDR interface signal Write Leveling CLK VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL 0x00000a94 /* DDR interface signal Write Leveling Capture Enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC 0x00000aa0 /* Read enable bit-clock cycle delay control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC 0x00000aa4 /* Write leveling bit-clock cycle delay control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL  0x00000ab0 /* Read channel datapath control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_ADDR 0x00000ab4 /* Read fifo addresss pointer register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_DATA 0x00000ab8 /* Read fifo data register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_DM_DBI 0x00000abc /* Read fifo dm/dbi register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_STATUS 0x00000ac0 /* Read fifo status register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR 0x00000ac4 /* Read fifo status clear register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL 0x00000ac8 /* Idle mode SSTL pad control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL 0x00000acc /* SSTL pad drive characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL 0x00000ad0 /* SSTL read enable pad drive characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL 0x00000ad4 /* pad rx and tx characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE 0x00000ad8 /* Write cycle preamble control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL   0x00000ae0 /* Read channel ODT control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL 0x00000af0 /* GDDR5M EDC digital phase detector control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS 0x00000af4 /* GDDR5M EDC digital phase detector status register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL 0x00000af8 /* GDDR5M EDC digital phase detector output signal control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS 0x00000afc /* GDDR5M EDC digital phase detector output signal status register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_CLEAR 0x00000b00 /* GDDR5M EDC digital phase detector output signal status clear register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL 0x00000b04 /* GDDR5M EDC signal path CRC control register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS 0x00000b08 /* GDDR5M EDC signal path CRC status register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT 0x00000b0c /* GDDR5M EDC signal path CRC counter register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_CLEAR 0x00000b10 /* GDDR5M EDC signal path CRC counter register */
+#define DDR34_CORE_PHY_BYTE_LANE_3_BL_SPARE_REG  0x00000b14 /* Byte-Lane Spare register */
+
+/***************************************************************************
+ *REVISION - Address & Control revision register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: REVISION :: reserved0 [31:25] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_reserved0_MASK        0xfe000000
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_reserved0_ALIGN       0
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_reserved0_BITS        7
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_reserved0_SHIFT       25
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: REVISION :: PERFORMANCE [24:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_PERFORMANCE_MASK      0x01800000
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_PERFORMANCE_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_PERFORMANCE_BITS      2
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_PERFORMANCE_SHIFT     23
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: REVISION :: TECHNOLOGY [22:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_TECHNOLOGY_MASK       0x00700000
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_TECHNOLOGY_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_TECHNOLOGY_BITS       3
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_TECHNOLOGY_SHIFT      20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: REVISION :: WB [19:19] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_WB_MASK               0x00080000
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_WB_ALIGN              0
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_WB_BITS               1
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_WB_SHIFT              19
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: REVISION :: BITS [18:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_BITS_MASK             0x00070000
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_BITS_ALIGN            0
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_BITS_BITS             3
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_BITS_SHIFT            16
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: REVISION :: MAJOR [15:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MAJOR_MASK            0x0000ff00
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MAJOR_ALIGN           0
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MAJOR_BITS            8
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MAJOR_SHIFT           8
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MAJOR_DEFAULT         0x000000e0
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: REVISION :: MINOR [07:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MINOR_MASK            0x000000ff
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MINOR_ALIGN           0
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MINOR_BITS            8
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MINOR_SHIFT           0
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MINOR_DEFAULT         0x00000001
+
+/***************************************************************************
+ *PLL_STATUS - PHY PLL status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_STATUS :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_reserved0_MASK      0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_reserved0_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_reserved0_BITS      15
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_reserved0_SHIFT     17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_STATUS :: LOCK_LOST [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_LOCK_LOST_MASK      0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_LOCK_LOST_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_LOCK_LOST_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_LOCK_LOST_SHIFT     16
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_STATUS :: CLOCKING_8X [15:15] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_8X_MASK    0x00008000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_8X_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_8X_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_8X_SHIFT   15
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_STATUS :: CLOCKING_4X [14:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_4X_MASK    0x00004000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_4X_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_4X_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_4X_SHIFT   14
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_STATUS :: CLOCKING_2X [13:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_2X_MASK    0x00002000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_2X_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_2X_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_2X_SHIFT   13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_STATUS :: STATUS [12:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_STATUS_MASK         0x00001ffe
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_STATUS_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_STATUS_BITS         12
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_STATUS_SHIFT        1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_STATUS :: LOCK [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_LOCK_MASK           0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_LOCK_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_LOCK_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_LOCK_SHIFT          0
+
+/***************************************************************************
+ *PLL_CONFIG - PHY PLL configuration register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: reserved0 [31:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved0_MASK      0xf0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved0_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved0_BITS      4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved0_SHIFT     28
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: reserved_for_eco1 [27:27] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved_for_eco1_MASK 0x08000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved_for_eco1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved_for_eco1_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved_for_eco1_SHIFT 27
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved_for_eco1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: CK_LDO_REF_CTRL [26:25] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_REF_CTRL_MASK 0x06000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_REF_CTRL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_REF_CTRL_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_REF_CTRL_SHIFT 25
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_REF_CTRL_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: CK_LDO_BIAS [24:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_BIAS_MASK    0x01800000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_BIAS_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_BIAS_BITS    2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_BIAS_SHIFT   23
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_BIAS_DEFAULT 0x00000003
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: PLL_LDO_REF_SEL [22:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_SEL_MASK 0x00400000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_SEL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_SEL_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_SEL_SHIFT 22
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_SEL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: PLL_LDO_REF_CTRL [21:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_CTRL_MASK 0x00300000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_CTRL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_CTRL_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_CTRL_SHIFT 20
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_CTRL_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: PLL_LDO_BIAS [19:18] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_BIAS_MASK   0x000c0000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_BIAS_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_BIAS_BITS   2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_BIAS_SHIFT  18
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_BIAS_DEFAULT 0x00000003
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: HOLD [17:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_HOLD_MASK           0x00020000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_HOLD_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_HOLD_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_HOLD_SHIFT          17
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_HOLD_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: ENABLE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_ENABLE_MASK         0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_ENABLE_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_ENABLE_BITS         1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_ENABLE_SHIFT        16
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_ENABLE_DEFAULT      0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: reserved2 [15:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved2_MASK      0x0000c000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved2_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved2_BITS      2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved2_SHIFT     14
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: FB_OFFSET [13:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_FB_OFFSET_MASK      0x00003f00
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_FB_OFFSET_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_FB_OFFSET_BITS      6
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_FB_OFFSET_SHIFT     8
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_FB_OFFSET_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: reserved3 [07:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved3_MASK      0x000000e0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved3_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved3_BITS      3
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved3_SHIFT     5
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: RESET_POST_DIV [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_POST_DIV_MASK 0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_POST_DIV_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_POST_DIV_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_POST_DIV_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_POST_DIV_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: reserved4 [03:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved4_MASK      0x0000000c
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved4_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved4_BITS      2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved4_SHIFT     2
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: RESET [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_MASK          0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_SHIFT         1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: PWRDN [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PWRDN_MASK          0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PWRDN_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PWRDN_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PWRDN_SHIFT         0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PWRDN_DEFAULT       0x00000000
+
+/***************************************************************************
+ *PLL_CONTROL1 - PHY PLL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL1 :: reserved0 [31:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_reserved0_MASK    0xfffffc00
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_reserved0_BITS    22
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_reserved0_SHIFT   10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL1 :: I_KP [09:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KP_MASK         0x000003c0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KP_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KP_BITS         4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KP_SHIFT        6
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KP_DEFAULT      0x00000005
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL1 :: I_KI [05:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KI_MASK         0x00000038
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KI_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KI_BITS         3
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KI_SHIFT        3
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KI_DEFAULT      0x00000002
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL1 :: I_KA [02:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KA_MASK         0x00000007
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KA_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KA_BITS         3
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KA_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KA_DEFAULT      0x00000000
+
+/***************************************************************************
+ *PLL_CONTROL2 - PHY PLL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: VCO_RANGE [31:30] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_RANGE_MASK    0xc0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_RANGE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_RANGE_BITS    2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_RANGE_SHIFT   30
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_RANGE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: UNUSED2 [29:29] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED2_MASK      0x20000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED2_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED2_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED2_SHIFT     29
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED2_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: NDIV_RELOCK [28:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_NDIV_RELOCK_MASK  0x10000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_NDIV_RELOCK_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_NDIV_RELOCK_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_NDIV_RELOCK_SHIFT 28
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_NDIV_RELOCK_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: FAST_LOCK [27:27] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_FAST_LOCK_MASK    0x08000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_FAST_LOCK_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_FAST_LOCK_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_FAST_LOCK_SHIFT   27
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_FAST_LOCK_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: VCO_FB_DIV2 [26:26] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_FB_DIV2_MASK  0x04000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_FB_DIV2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_FB_DIV2_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_FB_DIV2_SHIFT 26
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_FB_DIV2_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: POST_CTRL_RESETB [25:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_POST_CTRL_RESETB_MASK 0x03000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_POST_CTRL_RESETB_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_POST_CTRL_RESETB_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_POST_CTRL_RESETB_SHIFT 24
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_POST_CTRL_RESETB_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: PWM_RATE [23:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_PWM_RATE_MASK     0x00c00000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_PWM_RATE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_PWM_RATE_BITS     2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_PWM_RATE_SHIFT    22
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_PWM_RATE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: STAT_MODE [21:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_MODE_MASK    0x00300000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_MODE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_MODE_BITS    2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_MODE_SHIFT   20
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: UNUSED1 [19:18] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED1_MASK      0x000c0000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED1_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED1_BITS      2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED1_SHIFT     18
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED1_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: STAT_UPDATE [17:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_UPDATE_MASK  0x00020000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_UPDATE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_UPDATE_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_UPDATE_SHIFT 17
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_UPDATE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: STAT_SELECT [16:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_SELECT_MASK  0x0001c000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_SELECT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_SELECT_BITS  3
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_SELECT_SHIFT 14
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_SELECT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: STAT_RESET [13:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_RESET_MASK   0x00002000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_RESET_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_RESET_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_RESET_SHIFT  13
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_RESET_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: DCO_CTRL_BYPASS_ENABLE [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_ENABLE_MASK 0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_ENABLE_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: DCO_CTRL_BYPASS [11:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_MASK 0x00000fff
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_BITS 12
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_DEFAULT 0x00000000
+
+/***************************************************************************
+ *PLL_CONTROL3 - PHY PLL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL3 :: PLL_CONTROL [31:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL3_PLL_CONTROL_MASK  0xffffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL3_PLL_CONTROL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL3_PLL_CONTROL_BITS  32
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL3_PLL_CONTROL_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL3_PLL_CONTROL_DEFAULT 0x00000000
+
+/***************************************************************************
+ *PLL_DIVIDERS - PHY PLL integer divider register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_DIVIDERS :: reserved0 [31:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved0_MASK    0xf0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved0_BITS    4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved0_SHIFT   28
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_DIVIDERS :: MDIV [27:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_MDIV_MASK         0x0ff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_MDIV_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_MDIV_BITS         8
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_MDIV_SHIFT        20
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_MDIV_DEFAULT      0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_DIVIDERS :: reserved1 [19:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved1_MASK    0x000f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved1_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved1_BITS    4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved1_SHIFT   16
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_DIVIDERS :: PDIV [15:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_PDIV_MASK         0x0000f000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_PDIV_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_PDIV_BITS         4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_PDIV_SHIFT        12
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_PDIV_DEFAULT      0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_DIVIDERS :: reserved2 [11:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved2_MASK    0x00000c00
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved2_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved2_BITS    2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved2_SHIFT   10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_DIVIDERS :: NDIV_INT [09:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_NDIV_INT_MASK     0x000003ff
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_NDIV_INT_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_NDIV_INT_BITS     10
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_NDIV_INT_SHIFT    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_NDIV_INT_DEFAULT  0x00000020
+
+/***************************************************************************
+ *PLL_FRAC_DIVIDER - PHY PLL fractional divider register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_FRAC_DIVIDER :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_reserved0_BITS 12
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_FRAC_DIVIDER :: NDIV_FRAC [19:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_NDIV_FRAC_MASK 0x000fffff
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_NDIV_FRAC_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_NDIV_FRAC_BITS 20
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_NDIV_FRAC_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_NDIV_FRAC_DEFAULT 0x00000000
+
+/***************************************************************************
+ *PLL_SS_CONTROL - PHY PLL spread spectrum control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_SS_CONTROL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_reserved0_MASK  0xfff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_reserved0_BITS  12
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_SS_CONTROL :: SSC_STEP [19:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_STEP_MASK   0x000ffff0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_STEP_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_STEP_BITS   16
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_STEP_SHIFT  4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_STEP_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_SS_CONTROL :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_reserved1_MASK  0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_reserved1_BITS  3
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_SS_CONTROL :: SSC_MODE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_MODE_MASK   0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_MODE_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_MODE_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_MODE_SHIFT  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_MODE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *PLL_SS_LIMIT - PHY PLL spread spectrum limit register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_SS_LIMIT :: reserved0 [31:26] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_reserved0_MASK    0xfc000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_reserved0_BITS    6
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_reserved0_SHIFT   26
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_SS_LIMIT :: SSC_LIMIT [25:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_SSC_LIMIT_MASK    0x03fffff0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_SSC_LIMIT_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_SSC_LIMIT_BITS    22
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_SSC_LIMIT_SHIFT   4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_SSC_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_SS_LIMIT :: reserved1 [03:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_reserved1_MASK    0x0000000f
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_reserved1_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_reserved1_BITS    4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_reserved1_SHIFT   0
+
+/***************************************************************************
+ *AUX_CONTROL - Aux Control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: AUX_CONTROL :: reserved0 [31:21] */
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved0_MASK     0xffe00000
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved0_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved0_BITS     11
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved0_SHIFT    21
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: AUX_CONTROL :: IS_ODT [20:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_ODT_MASK        0x001f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_ODT_ALIGN       0
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_ODT_BITS        5
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_ODT_SHIFT       16
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_ODT_DEFAULT     0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: AUX_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved1_MASK     0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved1_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved1_BITS     3
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved1_SHIFT    13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: AUX_CONTROL :: IS_CS [12:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_CS_MASK         0x00001f00
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_CS_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_CS_BITS         5
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_CS_SHIFT        8
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_CS_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: AUX_CONTROL :: reserved2 [07:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved2_MASK     0x000000e0
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved2_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved2_BITS     3
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved2_SHIFT    5
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: AUX_CONTROL :: IS_AD [04:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_AD_MASK         0x0000001f
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_AD_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_AD_BITS         5
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_AD_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_AD_DEFAULT      0x00000000
+
+/***************************************************************************
+ *IDLE_PAD_CONTROL - Idle mode pad control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_CONTROL :: IDLE [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDLE_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDLE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDLE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDLE_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDLE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_CONTROL :: DIB_MODE [30:30] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DIB_MODE_MASK 0x40000000
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DIB_MODE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DIB_MODE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DIB_MODE_SHIFT 30
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DIB_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_CONTROL :: reserved0 [29:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_reserved0_MASK 0x3ffffff0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_reserved0_BITS 26
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_reserved0_SHIFT 4
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_CONTROL :: RXENB [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_RXENB_MASK    0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_RXENB_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_RXENB_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_RXENB_SHIFT   3
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_RXENB_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_CONTROL :: IDDQ [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDDQ_MASK     0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDDQ_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDDQ_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDDQ_SHIFT    2
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDDQ_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_CONTROL :: DOUT_N [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_N_MASK   0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_N_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_N_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_N_SHIFT  1
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_N_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_CONTROL :: DOUT_P [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_P_MASK   0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_P_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_P_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_P_SHIFT  0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_P_DEFAULT 0x00000000
+
+/***************************************************************************
+ *IDLE_PAD_ENABLE0 - Idle mode pad enable register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_ENABLE0 :: reserved0 [31:11] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_reserved0_MASK 0xfffff800
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_reserved0_BITS 21
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_reserved0_SHIFT 11
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_ENABLE0 :: IO_IDLE_ENABLE [10:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_IO_IDLE_ENABLE_MASK 0x000007ff
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_IO_IDLE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_IO_IDLE_ENABLE_BITS 11
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_IO_IDLE_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_IO_IDLE_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *IDLE_PAD_ENABLE1 - Idle mode pad enable register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_ENABLE1 :: reserved0 [31:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_reserved0_MASK 0xffc00000
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_reserved0_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_reserved0_SHIFT 22
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_ENABLE1 :: IO_IDLE_ENABLE [21:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_IO_IDLE_ENABLE_MASK 0x003fffff
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_IO_IDLE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_IO_IDLE_ENABLE_BITS 22
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_IO_IDLE_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_IO_IDLE_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *DRIVE_PAD_CTL - PVT Compensation control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRIVE_PAD_CTL :: reserved0 [31:30] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_reserved0_MASK   0xc0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_reserved0_BITS   2
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_reserved0_SHIFT  30
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRIVE_PAD_CTL :: ADDR_CTL_PD_IDLE_STRENGTH [29:25] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_IDLE_STRENGTH_MASK 0x3e000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_IDLE_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_IDLE_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_IDLE_STRENGTH_SHIFT 25
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_IDLE_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRIVE_PAD_CTL :: ADDR_CTL_ND_IDLE_STRENGTH [24:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_IDLE_STRENGTH_MASK 0x01f00000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_IDLE_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_IDLE_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_IDLE_STRENGTH_SHIFT 20
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_IDLE_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRIVE_PAD_CTL :: ADDR_CTL_PD_TERM_STRENGTH [19:15] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_TERM_STRENGTH_MASK 0x000f8000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_TERM_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_TERM_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_TERM_STRENGTH_SHIFT 15
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_TERM_STRENGTH_DEFAULT 0x00000006
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRIVE_PAD_CTL :: ADDR_CTL_ND_TERM_STRENGTH [14:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_TERM_STRENGTH_MASK 0x00007c00
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_TERM_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_TERM_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_TERM_STRENGTH_SHIFT 10
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_TERM_STRENGTH_DEFAULT 0x00000006
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRIVE_PAD_CTL :: ADDR_CTL_PD_STRENGTH [09:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_STRENGTH_MASK 0x000003e0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_STRENGTH_SHIFT 5
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRIVE_PAD_CTL :: ADDR_CTL_ND_STRENGTH [04:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_STRENGTH_MASK 0x0000001f
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_STRENGTH_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_STRENGTH_DEFAULT 0x0000001f
+
+/***************************************************************************
+ *STATIC_PAD_CTL - pad rx and tx characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: reserved0 [31:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_reserved0_MASK  0xf0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_reserved0_BITS  4
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_reserved0_SHIFT 28
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: AUTO_OEB [27:27] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_AUTO_OEB_MASK   0x08000000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_AUTO_OEB_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_AUTO_OEB_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_AUTO_OEB_SHIFT  27
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_AUTO_OEB_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_GDDR5 [26:26] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_GDDR5_MASK 0x04000000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_GDDR5_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_GDDR5_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_GDDR5_SHIFT 26
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_GDDR5_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_LPDDR [25:25] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_LPDDR_MASK 0x02000000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_LPDDR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_LPDDR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_LPDDR_SHIFT 25
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_LPDDR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_CLK1 [24:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK1_MASK  0x01000000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK1_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK1_SHIFT 24
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_CLK0 [23:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK0_MASK  0x00800000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK0_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK0_SHIFT 23
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK0_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_ODT [22:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_ODT_MASK   0x00400000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_ODT_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_ODT_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_ODT_SHIFT  22
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_ODT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_PAR [21:21] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_PAR_MASK   0x00200000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_PAR_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_PAR_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_PAR_SHIFT  21
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_PAR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_BA [20:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_BA_MASK    0x00100000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_BA_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_BA_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_BA_SHIFT   20
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_BA_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_AUX2 [19:19] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX2_MASK  0x00080000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX2_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX2_SHIFT 19
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX2_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_AUX1 [18:18] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX1_MASK  0x00040000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX1_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX1_SHIFT 18
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_AUX0 [17:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX0_MASK  0x00020000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX0_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX0_SHIFT 17
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX0_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_CS1 [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CS1_MASK   0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CS1_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CS1_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CS1_SHIFT  16
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CS1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_A15 [15:15] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A15_MASK   0x00008000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A15_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A15_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A15_SHIFT  15
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A15_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_A14 [14:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A14_MASK   0x00004000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A14_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A14_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A14_SHIFT  14
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A14_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_A13 [13:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A13_MASK   0x00002000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A13_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A13_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A13_SHIFT  13
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A13_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_A12 [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A12_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A12_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A12_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A12_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A12_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_A11 [11:11] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A11_MASK   0x00000800
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A11_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A11_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A11_SHIFT  11
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A11_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_A10 [10:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A10_MASK   0x00000400
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A10_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A10_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A10_SHIFT  10
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A10_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_A09 [09:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A09_MASK   0x00000200
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A09_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A09_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A09_SHIFT  9
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A09_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: reserved1 [08:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_reserved1_MASK  0x000001fc
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_reserved1_BITS  7
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_reserved1_SHIFT 2
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: RX_MODE [01:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_RX_MODE_MASK    0x00000003
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_RX_MODE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_RX_MODE_BITS    2
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_RX_MODE_SHIFT   0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_RX_MODE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *DRAM_CONFIG - DRAM configuration register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: INIT_MODE [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_INIT_MODE_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_INIT_MODE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_INIT_MODE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_INIT_MODE_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_INIT_MODE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: reserved0 [30:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_reserved0_MASK     0x70000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_reserved0_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_reserved0_BITS     3
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_reserved0_SHIFT    28
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: ECC_ENABLED [27:27] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ECC_ENABLED_MASK   0x08000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ECC_ENABLED_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ECC_ENABLED_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ECC_ENABLED_SHIFT  27
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ECC_ENABLED_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: SPLIT_DQ_BUS [26:26] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_SPLIT_DQ_BUS_MASK  0x04000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_SPLIT_DQ_BUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_SPLIT_DQ_BUS_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_SPLIT_DQ_BUS_SHIFT 26
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_SPLIT_DQ_BUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: BUS16 [25:25] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS16_MASK         0x02000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS16_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS16_BITS         1
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS16_SHIFT        25
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS16_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: BUS8 [24:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS8_MASK          0x01000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS8_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS8_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS8_SHIFT         24
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS8_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: reserved1 [23:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_reserved1_MASK     0x00ff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_reserved1_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_reserved1_BITS     8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_reserved1_SHIFT    16
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: EDC_MODE [15:15] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_EDC_MODE_MASK      0x00008000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_EDC_MODE_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_EDC_MODE_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_EDC_MODE_SHIFT     15
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_EDC_MODE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: RDQS_MODE [14:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_RDQS_MODE_MASK     0x00004000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_RDQS_MODE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_RDQS_MODE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_RDQS_MODE_SHIFT    14
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_RDQS_MODE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: GROUP_BITS [13:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_GROUP_BITS_MASK    0x00003000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_GROUP_BITS_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_GROUP_BITS_BITS    2
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_GROUP_BITS_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_GROUP_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: BANK_BITS [11:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BANK_BITS_MASK     0x00000c00
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BANK_BITS_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BANK_BITS_BITS     2
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BANK_BITS_SHIFT    10
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BANK_BITS_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: COL_BITS [09:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_COL_BITS_MASK      0x00000300
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_COL_BITS_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_COL_BITS_BITS      2
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_COL_BITS_SHIFT     8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_COL_BITS_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: ROW_BITS [07:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ROW_BITS_MASK      0x000000f0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ROW_BITS_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ROW_BITS_BITS      4
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ROW_BITS_SHIFT     4
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ROW_BITS_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: DRAM_TYPE [03:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_DRAM_TYPE_MASK     0x0000000f
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_DRAM_TYPE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_DRAM_TYPE_BITS     4
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_DRAM_TYPE_SHIFT    0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_DRAM_TYPE_DEFAULT  0x00000000
+
+/***************************************************************************
+ *DRAM_TIMING1 - DRAM timing register #1
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING1 :: TRAS [31:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRAS_MASK         0xff000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRAS_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRAS_BITS         8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRAS_SHIFT        24
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRAS_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING1 :: TRRD [23:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRRD_MASK         0x00ff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRRD_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRRD_BITS         8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRRD_SHIFT        16
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRRD_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING1 :: TRP [15:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRP_MASK          0x0000ff00
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRP_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRP_BITS          8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRP_SHIFT         8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRP_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING1 :: TRCD [07:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRCD_MASK         0x000000ff
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRCD_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRCD_BITS         8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRCD_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRCD_DEFAULT      0x00000000
+
+/***************************************************************************
+ *DRAM_TIMING2 - DRAM timing register #2
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING2 :: TRTP [31:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TRTP_MASK         0xff000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TRTP_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TRTP_BITS         8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TRTP_SHIFT        24
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TRTP_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING2 :: TWR [23:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TWR_MASK          0x00ff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TWR_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TWR_BITS          8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TWR_SHIFT         16
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TWR_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING2 :: TCWL [15:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCWL_MASK         0x0000ff00
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCWL_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCWL_BITS         8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCWL_SHIFT        8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCWL_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING2 :: TCAS [07:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCAS_MASK         0x000000ff
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCAS_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCAS_BITS         8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCAS_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCAS_DEFAULT      0x00000000
+
+/***************************************************************************
+ *DRAM_TIMING3 - DRAM timing register #3
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING3 :: reserved0 [31:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_reserved0_MASK    0xff000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_reserved0_BITS    8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_reserved0_SHIFT   24
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING3 :: TCAL [23:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TCAL_MASK         0x00f00000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TCAL_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TCAL_BITS         4
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TCAL_SHIFT        20
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TCAL_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING3 :: TRTW [19:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRTW_MASK         0x000f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRTW_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRTW_BITS         4
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRTW_SHIFT        16
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRTW_DEFAULT      0x00000004
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING3 :: TWTR [15:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TWTR_MASK         0x0000f000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TWTR_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TWTR_BITS         4
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TWTR_SHIFT        12
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TWTR_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING3 :: TRFC [11:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRFC_MASK         0x00000fff
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRFC_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRFC_BITS         12
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRFC_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRFC_DEFAULT      0x00000000
+
+/***************************************************************************
+ *DRAM_TIMING4 - DRAM timing register #4
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING4 :: temp [31:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING4_temp_MASK         0xffffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING4_temp_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING4_temp_BITS         32
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING4_temp_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING4_temp_DEFAULT      0x00000000
+
+/***************************************************************************
+ *VDL_CALIBRATE - PHY VDL calibration control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIBRATE :: reserved0 [31:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_reserved0_MASK   0xfffffe00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_reserved0_BITS   23
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_reserved0_SHIFT  9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIBRATE :: reserved_for_padding1 [08:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_reserved_for_padding1_MASK 0x000001c0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_reserved_for_padding1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_reserved_for_padding1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_reserved_for_padding1_SHIFT 6
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIBRATE :: HALF_STEPS [05:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_HALF_STEPS_MASK  0x00000020
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_HALF_STEPS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_HALF_STEPS_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_HALF_STEPS_SHIFT 5
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_HALF_STEPS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIBRATE :: UPDATE_FAST [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_FAST_MASK 0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_FAST_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_FAST_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_FAST_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_FAST_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIBRATE :: UPDATE_REGS [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_REGS_MASK 0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_REGS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_REGS_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_REGS_SHIFT 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_REGS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIBRATE :: CALIB_FTM2 [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_FTM2_MASK  0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_FTM2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_FTM2_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_FTM2_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_FTM2_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIBRATE :: CALIB_PHYBIST [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_PHYBIST_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_PHYBIST_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_PHYBIST_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_PHYBIST_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_PHYBIST_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIBRATE :: CALIB_ONCE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_ONCE_MASK  0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_ONCE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_ONCE_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_ONCE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_ONCE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CALIB_STATUS1 - PHY VDL calibration status register #1
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: reserved0 [31:18] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_reserved0_MASK 0xfffc0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_reserved0_SHIFT 18
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: CALIB_TOTAL_STEPS [17:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_TOTAL_STEPS_MASK 0x0003ff00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_TOTAL_STEPS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_TOTAL_STEPS_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_TOTAL_STEPS_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_TOTAL_STEPS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: reserved1 [07:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_reserved1_MASK 0x000000c0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_reserved1_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_reserved1_SHIFT 6
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: CALIB_BUS_ERROR [05:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_BUS_ERROR_MASK 0x00000020
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_BUS_ERROR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_BUS_ERROR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_BUS_ERROR_SHIFT 5
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_BUS_ERROR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: CALIB_REGS_DONE [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_REGS_DONE_MASK 0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_REGS_DONE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_REGS_DONE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_REGS_DONE_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_REGS_DONE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: CALIB_LOCK_6B [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_6B_MASK 0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_6B_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_6B_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_6B_SHIFT 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_6B_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: CALIB_LOCK_4B [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_4B_MASK 0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_4B_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_4B_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_4B_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_4B_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: CALIB_LOCK_2B [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_2B_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_2B_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_2B_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_2B_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_2B_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: CALIB_IDLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_IDLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_IDLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_IDLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_IDLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_IDLE_DEFAULT 0x00000001
+
+/***************************************************************************
+ *VDL_CALIB_STATUS2 - PHY VDL calibration status register #2
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS2 :: reserved0 [31:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_reserved0_MASK 0xffc00000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_reserved0_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_reserved0_SHIFT 22
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS2 :: CALIB_4B_STEPS [21:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_4B_STEPS_MASK 0x003ff000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_4B_STEPS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_4B_STEPS_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_4B_STEPS_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_4B_STEPS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS2 :: reserved1 [11:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_reserved1_MASK 0x00000c00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_reserved1_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_reserved1_SHIFT 10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS2 :: CALIB_2B_STEPS [09:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_2B_STEPS_MASK 0x000003ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_2B_STEPS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_2B_STEPS_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_2B_STEPS_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_2B_STEPS_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_MONITOR_CONTROL - PHY VDL delay monitoring control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_CONTROL :: reserved0 [31:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_reserved0_MASK 0xffc00000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_reserved0_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_reserved0_SHIFT 22
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_CONTROL :: INTERVAL [21:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_INTERVAL_MASK 0x003fff00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_INTERVAL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_INTERVAL_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_INTERVAL_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_INTERVAL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_CONTROL :: reserved1 [07:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_reserved1_MASK 0x000000f0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_reserved1_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_reserved1_SHIFT 4
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_CONTROL :: UPDATE [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_UPDATE_MASK 0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_UPDATE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_UPDATE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_UPDATE_SHIFT 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_UPDATE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_CONTROL :: FORCE [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_FORCE_MASK 0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_FORCE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_FORCE_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_CONTROL :: DATA_RATE [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_DATA_RATE_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_DATA_RATE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_DATA_RATE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_DATA_RATE_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_DATA_RATE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_MONITOR_REF - PHY VDL delay monitoring reference register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_REF :: reserved0 [31:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_reserved0_MASK 0xffc00000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_reserved0_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_reserved0_SHIFT 22
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_REF :: MONITOR_4B_STEPS [21:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_4B_STEPS_MASK 0x003ff000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_4B_STEPS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_4B_STEPS_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_4B_STEPS_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_4B_STEPS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_REF :: reserved1 [11:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_reserved1_MASK 0x00000c00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_reserved1_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_reserved1_SHIFT 10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_REF :: MONITOR_2B_STEPS [09:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_2B_STEPS_MASK 0x000003ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_2B_STEPS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_2B_STEPS_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_2B_STEPS_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_2B_STEPS_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_MONITOR_STATUS - PHY VDL delay monitoring status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_STATUS :: reserved0 [31:29] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved0_MASK 0xe0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved0_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved0_SHIFT 29
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_STATUS :: MONITOR_BUS_ERROR [28:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_BUS_ERROR_MASK 0x10000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_BUS_ERROR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_BUS_ERROR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_BUS_ERROR_SHIFT 28
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_BUS_ERROR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_STATUS :: reserved1 [27:25] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved1_MASK 0x0e000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved1_SHIFT 25
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_STATUS :: MONITOR_ADJ [24:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_ADJ_MASK 0x01f00000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_ADJ_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_ADJ_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_ADJ_SHIFT 20
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_ADJ_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_STATUS :: MONITOR_CHANGE [19:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_CHANGE_MASK 0x000ff000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_CHANGE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_CHANGE_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_CHANGE_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_CHANGE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_STATUS :: reserved2 [11:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved2_MASK 0x00000c00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved2_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved2_SHIFT 10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_STATUS :: MONITOR_TOTAL [09:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_TOTAL_MASK 0x000003ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_TOTAL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_TOTAL_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_TOTAL_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_TOTAL_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_MONITOR_OVERRIDE - PHY VDL delay monitoring override register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OVERRIDE :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_BUSY_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OVERRIDE :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OVERRIDE :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_FORCE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OVERRIDE :: reserved1 [15:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved1_MASK 0x0000fe00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved1_BITS 7
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved1_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OVERRIDE :: ADJ [08:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ADJ_MASK  0x000001f0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ADJ_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ADJ_BITS  5
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ADJ_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ADJ_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OVERRIDE :: reserved2 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved2_MASK 0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved2_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OVERRIDE :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_MONITOR_OUT_CONTROL - PHY VDL delay monitoring output control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_CONTROL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_reserved0_BITS 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_CONTROL :: LOWER_LIMIT [19:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_LOWER_LIMIT_MASK 0x000ff000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_LOWER_LIMIT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_LOWER_LIMIT_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_LOWER_LIMIT_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_LOWER_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_CONTROL :: UPPER_LIMIT [11:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_UPPER_LIMIT_MASK 0x00000ff0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_UPPER_LIMIT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_UPPER_LIMIT_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_UPPER_LIMIT_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_UPPER_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_CONTROL :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_MONITOR_OUT_STATUS - PHY VDL delay monitoring output status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_STATUS :: reserved0 [31:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved0_MASK 0xff000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved0_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved0_SHIFT 24
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_STATUS :: MONITOR_CHANGE [23:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_CHANGE_MASK 0x00ff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_CHANGE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_CHANGE_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_CHANGE_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_CHANGE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_STATUS :: reserved1 [15:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved1_MASK 0x0000c000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved1_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved1_SHIFT 14
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_STATUS :: MONITOR_TOTAL [13:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_TOTAL_MASK 0x00003ff0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_TOTAL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_TOTAL_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_TOTAL_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_TOTAL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_STATUS :: reserved2 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved2_MASK 0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved2_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_STATUS :: VALID [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_VALID_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_VALID_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_VALID_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_VALID_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_VALID_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_MONITOR_OUT_STATUS_CLEAR - PHY VDL delay monitoring output status clear register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_STATUS_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_reserved0_MASK 0xfffffffe
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_reserved0_BITS 31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_STATUS_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_CLEAR_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_CLEAR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_CLEAR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_CLEAR_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_CLEAR_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD00 - DDR interface signal AD[00] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD00 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD00 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD00 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD00 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD00 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD00 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD00 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD01 - DDR interface signal AD[01] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD01 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD01 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD01 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD01 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD01 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD01 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD01 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD02 - DDR interface signal AD[02] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD02 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD02 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD02 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD02 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD02 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD02 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD02 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD03 - DDR interface signal AD[03] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD03 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD03 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD03 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD03 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD03 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD03 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD03 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD04 - DDR interface signal AD[04] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD04 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD04 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD04 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD04 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD04 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD04 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD04 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD05 - DDR interface signal AD[05] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD05 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD05 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD05 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD05 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD05 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD05 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD05 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD06 - DDR interface signal AD[06] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD06 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD06 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD06 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD06 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD06 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD06 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD06 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD07 - DDR interface signal AD[07] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD07 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD07 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD07 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD07 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD07 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD07 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD07 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD08 - DDR interface signal AD[08] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD08 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD08 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD08 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD08 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD08 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD08 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD08 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD09 - DDR interface signal AD[09] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD09 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD09 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD09 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD09 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD09 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD09 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD09 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD10 - DDR interface signal AD[10] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD10 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD10 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD10 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD10 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD10 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD10 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD10 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD11 - DDR interface signal AD[11] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD11 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD11 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD11 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD11 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD11 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD11 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD11 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD12 - DDR interface signal AD[12] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD12 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD12 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD12 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD12 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD12 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD12 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD12 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD13 - DDR interface signal AD[13] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD13 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD13 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD13 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD13 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD13 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD13 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD13 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD14 - DDR interface signal AD[14] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD14 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD14 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD14 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD14 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD14 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD14 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD14 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD15 - DDR interface signal AD[15] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD15 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD15 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD15 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD15 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD15 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD15 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD15 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_BA0 - DDR interface signal BA[0] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA0 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA0 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_BA1 - DDR interface signal BA[1] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA1 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA1 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_BA2 - DDR interface signal BA[2] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA2 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA2 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA2 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA2 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA2 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA2 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA2 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AUX0 - DDR interface signal AUX[0] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX0 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX0 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AUX1 - DDR interface signal AUX[1] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX1 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX1 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AUX2 - DDR interface signal AUX[2] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX2 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX2 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX2 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX2 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX2 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX2 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX2 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_CS0 - DDR interface signal CS0 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS0 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS0 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_CS1 - DDR interface signal CS1 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS1 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS1 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_PAR - DDR interface signal PAR VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_PAR :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_PAR :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_PAR :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_PAR :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_PAR :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_PAR :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_PAR :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RAS_N - DDR interface signal RAS_N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RAS_N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_BUSY_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RAS_N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RAS_N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_FORCE_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RAS_N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RAS_N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RAS_N :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RAS_N :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_CAS_N - DDR interface signal CAS_N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CAS_N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_BUSY_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CAS_N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CAS_N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_FORCE_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CAS_N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CAS_N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CAS_N :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CAS_N :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_CKE - DDR interface signal CKE0 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CKE :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CKE :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CKE :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CKE :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CKE :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CKE :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CKE :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RST_N - DDR interface signal RST_N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RST_N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_BUSY_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RST_N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RST_N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_FORCE_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RST_N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RST_N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RST_N :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RST_N :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_ODT - DDR interface signal ODT0 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_ODT :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_ODT :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_ODT :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_ODT :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_ODT :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_ODT :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_ODT :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WE_N - DDR interface signal WE_N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_WE_N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_WE_N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_WE_N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_WE_N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_WE_N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_WE_N :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_WE_N :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_DDR_CK_P - DDR interface signal DDR_CK-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_BUSY_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_FORCE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_P :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_P :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_DDR_CK_N - DDR interface signal DDR_CK-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_BUSY_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_FORCE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_N :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_N :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CLK_CONTROL - DDR interface signal Write Leveling CLK VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CLK_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CLK_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CLK_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CLK_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CLK_CONTROL :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CLK_CONTROL :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CLK_CONTROL :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_LDE_CONTROL - DDR interface signal Write Leveling Capture Enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_LDE_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_LDE_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_LDE_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_LDE_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_LDE_CONTROL :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_LDE_CONTROL :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_LDE_CONTROL :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *REFRESH - Refresh engine controller
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: REFRESH :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_reserved0_MASK         0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_reserved0_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_reserved0_BITS         15
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_reserved0_SHIFT        17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: REFRESH :: ENABLE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_ENABLE_MASK            0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_ENABLE_ALIGN           0
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_ENABLE_BITS            1
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_ENABLE_SHIFT           16
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_ENABLE_DEFAULT         0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: REFRESH :: PERIOD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_PERIOD_MASK            0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_PERIOD_ALIGN           0
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_PERIOD_BITS            16
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_PERIOD_SHIFT           0
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_PERIOD_DEFAULT         0x00000000
+
+/***************************************************************************
+ *UPDATE_VDL - Update VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL :: reserved0 [31:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_reserved0_MASK      0xffffffc0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_reserved0_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_reserved0_BITS      26
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_reserved0_SHIFT     6
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL :: MODE [05:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_MODE_MASK           0x00000030
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_MODE_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_MODE_BITS           2
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_MODE_SHIFT          4
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_MODE_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL :: reserved1 [03:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_reserved1_MASK      0x0000000c
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_reserved1_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_reserved1_BITS      2
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_reserved1_SHIFT     2
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL :: DISABLE_INPUT [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_DISABLE_INPUT_MASK  0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_DISABLE_INPUT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_DISABLE_INPUT_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_DISABLE_INPUT_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_DISABLE_INPUT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_ENABLE_MASK         0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_ENABLE_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_ENABLE_BITS         1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_ENABLE_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_ENABLE_DEFAULT      0x00000000
+
+/***************************************************************************
+ *UPDATE_VDL_SNOOP1 - Update VDL snoop control register #1
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP1 :: reserved0 [31:30] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved0_MASK 0xc0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved0_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved0_SHIFT 30
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP1 :: MODE [29:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MODE_MASK    0x30000000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MODE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MODE_BITS    2
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MODE_SHIFT   28
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP1 :: reserved1 [27:27] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved1_MASK 0x08000000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved1_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved1_SHIFT 27
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP1 :: MASK [26:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MASK_MASK    0x07ff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MASK_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MASK_BITS    11
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MASK_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MASK_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP1 :: reserved2 [15:15] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved2_MASK 0x00008000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved2_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved2_SHIFT 15
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP1 :: CMD [14:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_CMD_MASK     0x00007ff0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_CMD_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_CMD_BITS     11
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_CMD_SHIFT    4
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_CMD_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP1 :: reserved3 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved3_MASK 0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved3_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved3_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved3_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP1 :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_ENABLE_MASK  0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_ENABLE_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *UPDATE_VDL_SNOOP2 - Update VDL snoop control register #2
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP2 :: reserved0 [31:30] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved0_MASK 0xc0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved0_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved0_SHIFT 30
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP2 :: MODE [29:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MODE_MASK    0x30000000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MODE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MODE_BITS    2
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MODE_SHIFT   28
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP2 :: reserved1 [27:27] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved1_MASK 0x08000000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved1_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved1_SHIFT 27
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP2 :: MASK [26:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MASK_MASK    0x07ff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MASK_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MASK_BITS    11
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MASK_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MASK_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP2 :: reserved2 [15:15] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved2_MASK 0x00008000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved2_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved2_SHIFT 15
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP2 :: CMD [14:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_CMD_MASK     0x00007ff0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_CMD_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_CMD_BITS     11
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_CMD_SHIFT    4
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_CMD_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP2 :: reserved3 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved3_MASK 0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved3_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved3_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved3_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP2 :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_ENABLE_MASK  0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_ENABLE_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *COMMAND_REG1 - DRAM Command Register #1
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: MCP [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_MCP_MASK          0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_MCP_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_MCP_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_MCP_SHIFT         31
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_MCP_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: CS [30:29] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CS_MASK           0x60000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CS_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CS_BITS           2
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CS_SHIFT          29
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CS_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: AUX [28:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AUX_MASK          0x1f000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AUX_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AUX_BITS          5
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AUX_SHIFT         24
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AUX_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: ACT [23:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_ACT_MASK          0x00800000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_ACT_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_ACT_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_ACT_SHIFT         23
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_ACT_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: WE [22:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_WE_MASK           0x00400000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_WE_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_WE_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_WE_SHIFT          22
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_WE_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: CAS [21:21] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CAS_MASK          0x00200000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CAS_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CAS_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CAS_SHIFT         21
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CAS_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: RAS [20:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_RAS_MASK          0x00100000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_RAS_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_RAS_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_RAS_SHIFT         20
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_RAS_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: BA [19:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_BA_MASK           0x000f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_BA_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_BA_BITS           4
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_BA_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_BA_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AD_MASK           0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AD_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AD_BITS           16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AD_SHIFT          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AD_DEFAULT        0x00000000
+
+/***************************************************************************
+ *COMMAND_AUX_REG1 - DRAM AUX_N Command Register #1
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_AUX_REG1 :: reserved0 [31:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_reserved0_MASK 0xffffffe0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_reserved0_BITS 27
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_reserved0_SHIFT 5
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_AUX_REG1 :: AUX [04:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_AUX_MASK      0x0000001f
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_AUX_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_AUX_BITS      5
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_AUX_SHIFT     0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_AUX_DEFAULT   0x00000000
+
+/***************************************************************************
+ *COMMAND_REG2 - DRAM Command Register #2
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: MCP [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_MCP_MASK          0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_MCP_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_MCP_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_MCP_SHIFT         31
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_MCP_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: CS [30:29] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CS_MASK           0x60000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CS_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CS_BITS           2
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CS_SHIFT          29
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CS_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: AUX [28:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AUX_MASK          0x1f000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AUX_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AUX_BITS          5
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AUX_SHIFT         24
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AUX_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: ACT [23:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_ACT_MASK          0x00800000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_ACT_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_ACT_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_ACT_SHIFT         23
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_ACT_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: WE [22:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_WE_MASK           0x00400000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_WE_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_WE_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_WE_SHIFT          22
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_WE_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: CAS [21:21] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CAS_MASK          0x00200000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CAS_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CAS_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CAS_SHIFT         21
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CAS_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: RAS [20:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_RAS_MASK          0x00100000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_RAS_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_RAS_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_RAS_SHIFT         20
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_RAS_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: BA [19:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_BA_MASK           0x000f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_BA_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_BA_BITS           4
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_BA_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_BA_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AD_MASK           0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AD_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AD_BITS           16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AD_SHIFT          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AD_DEFAULT        0x00000000
+
+/***************************************************************************
+ *COMMAND_AUX_REG2 - DRAM AUX_N Command Register #2
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_AUX_REG2 :: reserved0 [31:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_reserved0_MASK 0xffffffe0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_reserved0_BITS 27
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_reserved0_SHIFT 5
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_AUX_REG2 :: AUX [04:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_AUX_MASK      0x0000001f
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_AUX_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_AUX_BITS      5
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_AUX_SHIFT     0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_AUX_DEFAULT   0x00000000
+
+/***************************************************************************
+ *COMMAND_REG3 - DRAM Command Register #3
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: MCP [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_MCP_MASK          0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_MCP_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_MCP_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_MCP_SHIFT         31
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_MCP_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: CS [30:29] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CS_MASK           0x60000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CS_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CS_BITS           2
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CS_SHIFT          29
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CS_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: AUX [28:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AUX_MASK          0x1f000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AUX_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AUX_BITS          5
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AUX_SHIFT         24
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AUX_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: ACT [23:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_ACT_MASK          0x00800000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_ACT_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_ACT_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_ACT_SHIFT         23
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_ACT_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: WE [22:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_WE_MASK           0x00400000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_WE_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_WE_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_WE_SHIFT          22
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_WE_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: CAS [21:21] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CAS_MASK          0x00200000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CAS_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CAS_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CAS_SHIFT         21
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CAS_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: RAS [20:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_RAS_MASK          0x00100000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_RAS_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_RAS_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_RAS_SHIFT         20
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_RAS_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: BA [19:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_BA_MASK           0x000f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_BA_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_BA_BITS           4
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_BA_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_BA_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AD_MASK           0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AD_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AD_BITS           16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AD_SHIFT          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AD_DEFAULT        0x00000000
+
+/***************************************************************************
+ *COMMAND_AUX_REG3 - DRAM AUX_N Command Register #3
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_AUX_REG3 :: reserved0 [31:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_reserved0_MASK 0xffffffe0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_reserved0_BITS 27
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_reserved0_SHIFT 5
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_AUX_REG3 :: AUX [04:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_AUX_MASK      0x0000001f
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_AUX_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_AUX_BITS      5
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_AUX_SHIFT     0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_AUX_DEFAULT   0x00000000
+
+/***************************************************************************
+ *COMMAND_REG4 - DRAM Command Register #4
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: MCP [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_MCP_MASK          0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_MCP_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_MCP_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_MCP_SHIFT         31
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_MCP_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: CS [30:29] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CS_MASK           0x60000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CS_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CS_BITS           2
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CS_SHIFT          29
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CS_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: AUX [28:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AUX_MASK          0x1f000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AUX_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AUX_BITS          5
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AUX_SHIFT         24
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AUX_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: ACT [23:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_ACT_MASK          0x00800000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_ACT_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_ACT_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_ACT_SHIFT         23
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_ACT_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: WE [22:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_WE_MASK           0x00400000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_WE_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_WE_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_WE_SHIFT          22
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_WE_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: CAS [21:21] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CAS_MASK          0x00200000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CAS_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CAS_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CAS_SHIFT         21
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CAS_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: RAS [20:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_RAS_MASK          0x00100000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_RAS_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_RAS_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_RAS_SHIFT         20
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_RAS_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: BA [19:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_BA_MASK           0x000f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_BA_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_BA_BITS           4
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_BA_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_BA_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AD_MASK           0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AD_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AD_BITS           16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AD_SHIFT          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AD_DEFAULT        0x00000000
+
+/***************************************************************************
+ *COMMAND_AUX_REG4 - DRAM AUX_N Command Register #4
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_AUX_REG4 :: reserved0 [31:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_reserved0_MASK 0xffffffe0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_reserved0_BITS 27
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_reserved0_SHIFT 5
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_AUX_REG4 :: AUX [04:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_AUX_MASK      0x0000001f
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_AUX_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_AUX_BITS      5
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_AUX_SHIFT     0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_AUX_DEFAULT   0x00000000
+
+/***************************************************************************
+ *COMMAND_REG_TIMER - DRAM Command Timer Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG_TIMER :: reserved0 [31:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_reserved0_MASK 0xffff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_reserved0_BITS 16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_reserved0_SHIFT 16
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG_TIMER :: INIT_VAL [15:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_INIT_VAL_MASK 0x0000ff00
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_INIT_VAL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_INIT_VAL_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_INIT_VAL_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_INIT_VAL_DEFAULT 0x0000000f
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG_TIMER :: COUNT [07:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_COUNT_MASK   0x000000ff
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_COUNT_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_COUNT_BITS   8
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_COUNT_SHIFT  0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_COUNT_DEFAULT 0x00000000
+
+/***************************************************************************
+ *MODE_REG0 - DDR3/DDR4/GDDR5 Mode Register 0 and LPDDR Mode Register 1
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG0 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG0 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG0 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG1 - DDR3/DDR4/GDDR5 Mode Register 1 and LPDDR Mode Register 2
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG1 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG1 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG1 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG2 - DDR3/DDR4/GDDR5 Mode Register 2 and LPDDR Mode Register 3
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG2 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG2 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG2 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG3 - DDR3/DDR4/GDDR5 Mode Register 3 and LPDDR Mode Register 9
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG3 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG3 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG3 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG4 - DDR4/GDDR5 Mode Register 4 and LPDDR Mode Register 10
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG4 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG4 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG4 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG5 - DDR4/GDDR5 Mode Register 5 and LPDDR Mode Register 16
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG5 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG5 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG5 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG6 - DDR4/GDDR5 Mode Register 6 and LPDDR Mode Register 17
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG6 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG6 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG6 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG7 - DDR4/GDDR5 Mode Register 7 and LPDDR Mode Register 41
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG7 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG7 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG7 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG8 - GDDR5 Mode Register 8 and LPDDR Mode Register 42
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG8 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG8 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG8 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG15 - GDDR5 Mode Register 15 and LPDDR Mode Register 48
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG15 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_reserved0_MASK      0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_reserved0_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_reserved0_BITS      15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_reserved0_SHIFT     17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG15 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_VALID_MASK          0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_VALID_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_VALID_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_VALID_SHIFT         16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_VALID_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG15 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_AD_MASK             0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_AD_ALIGN            0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_AD_BITS             16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_AD_SHIFT            0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_AD_DEFAULT          0x00000000
+
+/***************************************************************************
+ *MODE_REG63 - LPDDR Mode Register 63
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG63 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_reserved0_MASK      0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_reserved0_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_reserved0_BITS      15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_reserved0_SHIFT     17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG63 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_VALID_MASK          0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_VALID_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_VALID_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_VALID_SHIFT         16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_VALID_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG63 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_AD_MASK             0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_AD_ALIGN            0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_AD_BITS             16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_AD_SHIFT            0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_AD_DEFAULT          0x00000000
+
+/***************************************************************************
+ *ALERT_CLEAR - DDR4 Alert status clear register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: ALERT_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_reserved0_MASK     0xfffffffe
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_reserved0_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_reserved0_BITS     31
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_reserved0_SHIFT    1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ALERT_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_CLEAR_MASK         0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_CLEAR_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_CLEAR_BITS         1
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_CLEAR_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_CLEAR_DEFAULT      0x00000000
+
+/***************************************************************************
+ *ALERT_STATUS - DDR4 Alert status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: ALERT_STATUS :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_reserved0_MASK    0xfffffffe
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_reserved0_BITS    31
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_reserved0_SHIFT   1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ALERT_STATUS :: STATUS [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_STATUS_MASK       0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_STATUS_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_STATUS_BITS       1
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_STATUS_SHIFT      0
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_STATUS_DEFAULT    0x00000000
+
+/***************************************************************************
+ *CA_PARITY - DDR4 CA parity control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PARITY :: reserved0 [31:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_reserved0_MASK       0xfffffffc
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_reserved0_BITS       30
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_reserved0_SHIFT      2
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PARITY :: ERROR [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ERROR_MASK           0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ERROR_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ERROR_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ERROR_SHIFT          1
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ERROR_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PARITY :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ENABLE_MASK          0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ENABLE_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ENABLE_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ENABLE_SHIFT         0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ENABLE_DEFAULT       0x00000000
+
+/***************************************************************************
+ *CA_PLAYBACK_CONTROL - GDDR5 CA playback control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_CONTROL :: reserved0 [31:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_reserved0_MASK 0xfffff000
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_reserved0_BITS 20
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_reserved0_SHIFT 12
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_CONTROL :: COUNT [11:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_COUNT_MASK 0x00000ff0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_COUNT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_COUNT_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_COUNT_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_COUNT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_CONTROL :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_CONTROL :: SAMPLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_SAMPLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_SAMPLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_SAMPLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_SAMPLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_SAMPLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *CA_PLAYBACK_STATUS0 - LPDDR3 and GDDR5 CA playback status register0 (for BL0 and BL1)
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_STATUS0 :: VALID [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_VALID_MASK 0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_VALID_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_VALID_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_VALID_SHIFT 31
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_VALID_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_STATUS0 :: reserved0 [30:26] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_reserved0_MASK 0x7c000000
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_reserved0_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_reserved0_SHIFT 26
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_STATUS0 :: DATA1 [25:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA1_MASK 0x03ff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA1_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA1_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_STATUS0 :: reserved1 [15:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_reserved1_MASK 0x0000fc00
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_reserved1_BITS 6
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_reserved1_SHIFT 10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_STATUS0 :: DATA0 [09:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA0_MASK 0x000003ff
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA0_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA0_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA0_DEFAULT 0x00000000
+
+/***************************************************************************
+ *CA_PLAYBACK_STATUS1 - LPDDR3 and GDDR5 CA playback status register1 (for BL2 and BL3)
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_STATUS1 :: VALID [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_VALID_MASK 0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_VALID_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_VALID_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_VALID_SHIFT 31
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_VALID_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_STATUS1 :: reserved0 [30:26] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_reserved0_MASK 0x7c000000
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_reserved0_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_reserved0_SHIFT 26
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_STATUS1 :: DATA1 [25:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_DATA1_MASK 0x03ff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_DATA1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_DATA1_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_DATA1_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_DATA1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_STATUS1 :: reserved1 [15:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_reserved1_MASK 0x0000fc00
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_reserved1_BITS 6
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_reserved1_SHIFT 10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_STATUS1 :: DATA0 [09:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_DATA0_MASK 0x000003ff
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_DATA0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_DATA0_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_DATA0_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS1_DATA0_DEFAULT 0x00000000
+
+/***************************************************************************
+ *WRITE_LEVELING_CONTROL - Write leveling control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_CONTROL :: reserved0 [31:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_reserved0_MASK 0xffff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_reserved0_BITS 16
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_reserved0_SHIFT 16
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_CONTROL :: COUNT [15:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_COUNT_MASK 0x0000ff00
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_COUNT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_COUNT_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_COUNT_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_COUNT_DEFAULT 0x0000000f
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_CONTROL :: reserved1 [07:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_reserved1_MASK 0x000000f8
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_reserved1_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_reserved1_SHIFT 3
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_CONTROL :: SAMPLE [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_SAMPLE_MASK 0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_SAMPLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_SAMPLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_SAMPLE_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_SAMPLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_CONTROL :: CONTINUOUS [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_CONTINUOUS_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_CONTINUOUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_CONTINUOUS_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_CONTINUOUS_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_CONTINUOUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *WRITE_LEVELING_STATUS - Write leveling status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_STATUS :: reserved0 [31:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_reserved0_MASK 0xffffc000
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_reserved0_BITS 18
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_reserved0_SHIFT 14
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_STATUS :: EDC [13:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_EDC_MASK 0x00003e00
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_EDC_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_EDC_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_EDC_SHIFT 9
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_EDC_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_STATUS :: STATUS [08:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_STATUS_MASK 0x000001f0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_STATUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_STATUS_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_STATUS_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_STATUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_STATUS :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_STATUS :: VALID [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_VALID_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_VALID_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_VALID_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_VALID_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_VALID_DEFAULT 0x00000000
+
+/***************************************************************************
+ *READ_ENABLE_CONTROL - Read enable test cycle control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: reserved0 [31:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_reserved0_MASK 0xffffe000
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_reserved0_BITS 19
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_reserved0_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: TEST_CYCLE [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_TEST_CYCLE_MASK 0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_TEST_CYCLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_TEST_CYCLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_TEST_CYCLE_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_TEST_CYCLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: SELECT [11:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_SELECT_MASK 0x00000f00
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_SELECT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_SELECT_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_SELECT_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_SELECT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: reserved1 [07:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_reserved1_MASK 0x000000c0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_reserved1_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_reserved1_SHIFT 6
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: CS_N [05:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_CS_N_MASK  0x00000030
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_CS_N_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_CS_N_BITS  2
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_CS_N_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_CS_N_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: EDC_DATA [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_DATA_MASK 0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_DATA_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_DATA_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_DATA_SHIFT 3
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_DATA_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: EDC_PHASE [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_PHASE_MASK 0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_PHASE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_PHASE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_PHASE_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_PHASE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: DQS [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_DQS_MASK   0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_DQS_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_DQS_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_DQS_SHIFT  1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_DQS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *READ_ENABLE_STATUS - Read enable test cycle status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved0_BITS 12
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: DATA [19:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_DATA_MASK   0x000ff000
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_DATA_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_DATA_BITS   8
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_DATA_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_DATA_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: reserved1 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved1_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved1_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: BL4_STATUS [08:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL4_STATUS_MASK 0x00000100
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL4_STATUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL4_STATUS_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL4_STATUS_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL4_STATUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: BL3_STATUS [07:07] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL3_STATUS_MASK 0x00000080
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL3_STATUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL3_STATUS_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL3_STATUS_SHIFT 7
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL3_STATUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: BL2_STATUS [06:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL2_STATUS_MASK 0x00000040
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL2_STATUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL2_STATUS_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL2_STATUS_SHIFT 6
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL2_STATUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: BL1_STATUS [05:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL1_STATUS_MASK 0x00000020
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL1_STATUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL1_STATUS_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL1_STATUS_SHIFT 5
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL1_STATUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: BL0_STATUS [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL0_STATUS_MASK 0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL0_STATUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL0_STATUS_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL0_STATUS_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL0_STATUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: reserved2 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved2_MASK 0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved2_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: VALID [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_VALID_MASK  0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_VALID_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_VALID_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_VALID_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_VALID_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_LFSR_SEED - Traffic generator seed register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_LFSR_SEED :: SEED [31:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_LFSR_SEED_SEED_MASK 0xffffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_LFSR_SEED_SEED_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_LFSR_SEED_SEED_BITS 32
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_LFSR_SEED_SEED_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_LFSR_SEED_SEED_DEFAULT 0xba5eba11
+
+/***************************************************************************
+ *TRAFFIC_GEN_ADDRESS1 - Traffic generator address register #1
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ADDRESS1 :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_reserved0_BITS 12
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ADDRESS1 :: BANK [19:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_BANK_MASK 0x000f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_BANK_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_BANK_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_BANK_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_BANK_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ADDRESS1 :: ROW [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_ROW_MASK  0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_ROW_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_ROW_BITS  16
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_ROW_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_ROW_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_ADDRESS2 - Traffic generator address register #2
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ADDRESS2 :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_reserved0_BITS 12
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ADDRESS2 :: BANK [19:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_BANK_MASK 0x000f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_BANK_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_BANK_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_BANK_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_BANK_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ADDRESS2 :: ROW [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_ROW_MASK  0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_ROW_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_ROW_BITS  16
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_ROW_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_ROW_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_CONTROL - Traffic generator control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: reserved0 [31:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_reserved0_MASK 0xffffe000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_reserved0_BITS 19
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_reserved0_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: DIAG_WRO [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_MASK 0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: DIAG_WRO_RD [11:11] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_RD_MASK 0x00000800
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_RD_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_RD_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_RD_SHIFT 11
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_RD_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: DIAG_WR_RD [10:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WR_RD_MASK 0x00000400
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WR_RD_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WR_RD_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WR_RD_SHIFT 10
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WR_RD_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: WR_NOISE [09:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_WR_NOISE_MASK 0x00000200
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_WR_NOISE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_WR_NOISE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_WR_NOISE_SHIFT 9
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_WR_NOISE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: RD_NOISE [08:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_NOISE_MASK 0x00000100
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_NOISE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_NOISE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_NOISE_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_NOISE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: CLEAR_DRAM [07:07] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_CLEAR_DRAM_MASK 0x00000080
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_CLEAR_DRAM_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_CLEAR_DRAM_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_CLEAR_DRAM_SHIFT 7
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_CLEAR_DRAM_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: MASK_DM [06:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MASK_DM_MASK 0x00000040
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MASK_DM_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MASK_DM_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MASK_DM_SHIFT 6
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MASK_DM_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: INIT_LFSR [05:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_INIT_LFSR_MASK 0x00000020
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_INIT_LFSR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_INIT_LFSR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_INIT_LFSR_SHIFT 5
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_INIT_LFSR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: FIFO [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_FIFO_MASK  0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_FIFO_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_FIFO_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_FIFO_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_FIFO_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: MPR [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MPR_MASK   0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MPR_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MPR_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MPR_SHIFT  3
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MPR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: RD_WR [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_WR_MASK 0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_WR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_WR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_WR_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_WR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: RD_EN [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_EN_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_EN_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_EN_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_EN_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_ENABLE_SHIFT 0
+
+/***************************************************************************
+ *TRAFFIC_GEN_DATA_CONTROL - Traffic generator data control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_DATA_CONTROL :: reserved0 [31:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_reserved0_MASK 0xffc00000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_reserved0_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_reserved0_SHIFT 22
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_DATA_CONTROL :: PATTERN [21:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_PATTERN_MASK 0x00300000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_PATTERN_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_PATTERN_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_PATTERN_SHIFT 20
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_PATTERN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_DATA_CONTROL :: LENGTH [19:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_LENGTH_MASK 0x000fffff
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_LENGTH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_LENGTH_BITS 20
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_LENGTH_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_LENGTH_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_DQ_MASK - Traffic generator DQ mask register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_DQ_MASK :: MASK [31:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_MASK_MASK_MASK  0xffffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_MASK_MASK_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_MASK_MASK_BITS  32
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_MASK_MASK_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_MASK_MASK_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_ECC_DQ_MASK - Traffic generator ECC DQ mask register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ECC_DQ_MASK :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_reserved0_MASK 0xfffffff0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_reserved0_BITS 28
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_reserved0_SHIFT 4
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ECC_DQ_MASK :: MASK [03:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_MASK_MASK 0x0000000f
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_MASK_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_MASK_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_MASK_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_MASK_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_STATUS - Traffic generator status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_STATUS :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_reserved0_MASK 0xfffffffe
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_reserved0_BITS 31
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_STATUS :: BUSY [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_BUSY_MASK   0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_BUSY_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_BUSY_SHIFT  0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_BUSY_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_DQ_STATUS - Traffic generator DQ status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_DQ_STATUS :: STATUS [31:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_STATUS_STATUS_MASK 0xffffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_STATUS_STATUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_STATUS_STATUS_BITS 32
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_STATUS_STATUS_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_STATUS_STATUS_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_ECC_STATUS - Traffic generator ECC DQ status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ECC_STATUS :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_reserved0_MASK 0xfffffff0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_reserved0_BITS 28
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_reserved0_SHIFT 4
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ECC_STATUS :: STATUS [03:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_STATUS_MASK 0x0000000f
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_STATUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_STATUS_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_STATUS_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_STATUS_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_ERR_CNT_CONTROL - Traffic generator error count control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ERR_CNT_CONTROL :: reserved0 [31:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_reserved0_MASK 0xfffffe00
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_reserved0_BITS 23
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_reserved0_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ERR_CNT_CONTROL :: DQ_SEL [08:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_DQ_SEL_MASK 0x000001f0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_DQ_SEL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_DQ_SEL_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_DQ_SEL_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_DQ_SEL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ERR_CNT_CONTROL :: reserved1 [03:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_reserved1_MASK 0x0000000c
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_reserved1_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_reserved1_SHIFT 2
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ERR_CNT_CONTROL :: CLEAR [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_CLEAR_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_CLEAR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_CLEAR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_CLEAR_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_CLEAR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ERR_CNT_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_ERR_CNT_STATUS - Traffic generator error count status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ERR_CNT_STATUS :: reserved0 [31:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_reserved0_MASK 0xffff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_reserved0_BITS 16
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_reserved0_SHIFT 16
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ERR_CNT_STATUS :: COUNT [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_COUNT_MASK 0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_COUNT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_COUNT_BITS 16
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_COUNT_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_COUNT_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VIRTUAL_VTT_CONTROL - Virtual VTT Control and Status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: reserved0 [31:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved0_MASK 0xfffff000
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved0_BITS 20
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved0_SHIFT 12
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: reserved_for_eco1 [11:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved_for_eco1_MASK 0x00000f00
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved_for_eco1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved_for_eco1_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved_for_eco1_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved_for_eco1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: MAX_NOISE [07:07] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_MAX_NOISE_MASK 0x00000080
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_MAX_NOISE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_MAX_NOISE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_MAX_NOISE_SHIFT 7
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_MAX_NOISE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: LOW_NOISE [06:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_NOISE_MASK 0x00000040
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_NOISE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_NOISE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_NOISE_SHIFT 6
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_NOISE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: LOW_VTT [05:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_VTT_MASK 0x00000020
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_VTT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_VTT_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_VTT_SHIFT 5
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_VTT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: HIGH_VTT [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_HIGH_VTT_MASK 0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_HIGH_VTT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_HIGH_VTT_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_HIGH_VTT_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_HIGH_VTT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: ERROR_RESET [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ERROR_RESET_MASK 0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ERROR_RESET_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ERROR_RESET_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ERROR_RESET_SHIFT 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ERROR_RESET_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: ENABLE_CTL_IDLE [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CTL_IDLE_MASK 0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CTL_IDLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CTL_IDLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CTL_IDLE_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CTL_IDLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: ENABLE_CS_IDLE [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CS_IDLE_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CS_IDLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CS_IDLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CS_IDLE_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CS_IDLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: ENABLE_CKE_IDLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CKE_IDLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CKE_IDLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CKE_IDLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CKE_IDLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CKE_IDLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VIRTUAL_VTT_STATUS - Virtual VTT Control and Status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_STATUS :: reserved0 [31:19] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_reserved0_MASK 0xfff80000
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_reserved0_BITS 13
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_reserved0_SHIFT 19
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_STATUS :: ERROR [18:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_MASK  0x0007fff8
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_BITS  16
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_SHIFT 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_STATUS :: ERROR_LOW [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_LOW_MASK 0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_LOW_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_LOW_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_LOW_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_LOW_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_STATUS :: ERROR_HIGH [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_HIGH_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_HIGH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_HIGH_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_HIGH_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_HIGH_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_STATUS :: READY [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_READY_MASK  0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_READY_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_READY_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_READY_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_READY_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VIRTUAL_VTT_CONNECTIONS - Virtual VTT Connections register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONNECTIONS :: reserved0 [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_reserved0_MASK 0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_reserved0_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_reserved0_SHIFT 31
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONNECTIONS :: MASK [30:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_MASK_MASK 0x7fffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_MASK_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_MASK_BITS 31
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_MASK_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_MASK_DEFAULT 0x1fffffff
+
+/***************************************************************************
+ *VIRTUAL_VTT_OVERRIDE - Virtual VTT Override register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_OVERRIDE :: reserved0 [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_reserved0_MASK 0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_reserved0_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_reserved0_SHIFT 31
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_OVERRIDE :: MASK [30:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_MASK_MASK 0x7fffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_MASK_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_MASK_BITS 31
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_MASK_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_MASK_DEFAULT 0x0000ffff
+
+/***************************************************************************
+ *VREF_DAC_CONTROL - VREF DAC Control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_reserved0_BITS 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: AUX_GT_INT [19:19] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_AUX_GT_INT_MASK 0x00080000
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_AUX_GT_INT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_AUX_GT_INT_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_AUX_GT_INT_SHIFT 19
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_AUX_GT_INT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: TESTOUT_MUX_CTL [18:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TESTOUT_MUX_CTL_MASK 0x00060000
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TESTOUT_MUX_CTL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TESTOUT_MUX_CTL_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TESTOUT_MUX_CTL_SHIFT 17
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TESTOUT_MUX_CTL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: TEST [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TEST_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TEST_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TEST_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TEST_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TEST_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: PDN3 [15:15] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN3_MASK     0x00008000
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN3_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN3_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN3_SHIFT    15
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN3_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: PDN2 [14:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN2_MASK     0x00004000
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN2_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN2_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN2_SHIFT    14
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN2_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: PDN1 [13:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN1_MASK     0x00002000
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN1_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN1_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN1_SHIFT    13
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN1_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: PDN0 [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN0_MASK     0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN0_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN0_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN0_SHIFT    12
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN0_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: DAC1 [11:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC1_MASK     0x00000fc0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC1_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC1_BITS     6
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC1_SHIFT    6
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC1_DEFAULT  0x00000020
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: DAC0 [05:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC0_MASK     0x0000003f
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC0_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC0_BITS     6
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC0_SHIFT    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC0_DEFAULT  0x00000020
+
+/***************************************************************************
+ *PHYBIST_CNTRL - PhyBist Control Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: reserved0 [31:30] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved0_MASK   0xc0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved0_BITS   2
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved0_SHIFT  30
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: CLK_PAD_ENB [29:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_CLK_PAD_ENB_MASK 0x30000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_CLK_PAD_ENB_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_CLK_PAD_ENB_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_CLK_PAD_ENB_SHIFT 28
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_CLK_PAD_ENB_DEFAULT 0x00000002
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: reserved1 [27:27] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved1_MASK   0x08000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved1_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved1_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved1_SHIFT  27
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: FORCE_DQ_ERROR_SEL [26:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DQ_ERROR_SEL_MASK 0x07000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DQ_ERROR_SEL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DQ_ERROR_SEL_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DQ_ERROR_SEL_SHIFT 24
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DQ_ERROR_SEL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: reserved2 [23:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved2_MASK   0x00800000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved2_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved2_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved2_SHIFT  23
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: FORCE_BL_ERROR_SEL [22:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_BL_ERROR_SEL_MASK 0x00700000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_BL_ERROR_SEL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_BL_ERROR_SEL_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_BL_ERROR_SEL_SHIFT 20
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_BL_ERROR_SEL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: reserved3 [19:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved3_MASK   0x000e0000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved3_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved3_BITS   3
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved3_SHIFT  17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: FORCE_CTL_ERROR_SEL [16:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_SEL_MASK 0x0001f000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_SEL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_SEL_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_SEL_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_SEL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: reserved4 [11:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved4_MASK   0x00000c00
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved4_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved4_BITS   2
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved4_SHIFT  10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: FORCE_DAT_ERROR [09:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DAT_ERROR_MASK 0x00000200
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DAT_ERROR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DAT_ERROR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DAT_ERROR_SHIFT 9
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DAT_ERROR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: FORCE_CTL_ERROR [08:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_MASK 0x00000100
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: SSO [07:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_SSO_MASK         0x000000c0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_SSO_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_SSO_BITS         2
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_SSO_SHIFT        6
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_SSO_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: LENGTH [05:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_LENGTH_MASK      0x00000030
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_LENGTH_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_LENGTH_BITS      2
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_LENGTH_SHIFT     4
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_LENGTH_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: MODE [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_MODE_MASK        0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_MODE_ALIGN       0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_MODE_BITS        3
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_MODE_SHIFT       1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_MODE_DEFAULT     0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_ENABLE_MASK      0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_ENABLE_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_ENABLE_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_ENABLE_SHIFT     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_ENABLE_DEFAULT   0x00000000
+
+/***************************************************************************
+ *PHYBIST_SEED - PhyBist Seed Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_SEED :: SEED [31:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_SEED_SEED_MASK         0xffffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_SEED_SEED_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_SEED_SEED_BITS         32
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_SEED_SEED_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_SEED_SEED_DEFAULT      0xba5eba11
+
+/***************************************************************************
+ *PHYBIST_STATUS - PhyBist General Status Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_STATUS :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_reserved0_MASK  0xfffffff0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_reserved0_BITS  28
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_reserved0_SHIFT 4
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_STATUS :: DAT_PASS [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_DAT_PASS_MASK   0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_DAT_PASS_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_DAT_PASS_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_DAT_PASS_SHIFT  3
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_STATUS :: CTL_PASS [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_CTL_PASS_MASK   0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_CTL_PASS_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_CTL_PASS_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_CTL_PASS_SHIFT  2
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_STATUS :: DAT_DONE [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_DAT_DONE_MASK   0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_DAT_DONE_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_DAT_DONE_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_DAT_DONE_SHIFT  1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_STATUS :: CTL_DONE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_CTL_DONE_MASK   0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_CTL_DONE_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_CTL_DONE_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_CTL_DONE_SHIFT  0
+
+/***************************************************************************
+ *PHYBIST_CTL_STATUS - PhyBist Per-Bit Control Pad Status Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CTL_STATUS :: reserved0 [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS_reserved0_MASK 0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS_reserved0_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS_reserved0_SHIFT 31
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CTL_STATUS :: CTL_ERRORS [30:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS_CTL_ERRORS_MASK 0x7fffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS_CTL_ERRORS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS_CTL_ERRORS_BITS 31
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS_CTL_ERRORS_SHIFT 0
+
+/***************************************************************************
+ *PHYBIST_BL0_STATUS - PhyBist Byte Lane #0 Status Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL0_STATUS :: reserved0 [31:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_reserved0_MASK 0xfffffc00
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_reserved0_BITS 22
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_reserved0_SHIFT 10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL0_STATUS :: EDC [09:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_EDC_MASK    0x00000200
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_EDC_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_EDC_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_EDC_SHIFT   9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL0_STATUS :: DM [08:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_DM_MASK     0x00000100
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_DM_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_DM_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_DM_SHIFT    8
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL0_STATUS :: DQ [07:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_DQ_MASK     0x000000ff
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_DQ_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_DQ_BITS     8
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_DQ_SHIFT    0
+
+/***************************************************************************
+ *PHYBIST_BL1_STATUS - PhyBist Byte Lane #1 Status Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL1_STATUS :: reserved0 [31:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_reserved0_MASK 0xfffffc00
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_reserved0_BITS 22
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_reserved0_SHIFT 10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL1_STATUS :: EDC [09:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_EDC_MASK    0x00000200
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_EDC_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_EDC_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_EDC_SHIFT   9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL1_STATUS :: DM [08:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_DM_MASK     0x00000100
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_DM_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_DM_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_DM_SHIFT    8
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL1_STATUS :: DQ [07:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_DQ_MASK     0x000000ff
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_DQ_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_DQ_BITS     8
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_DQ_SHIFT    0
+
+/***************************************************************************
+ *PHYBIST_BL2_STATUS - PhyBist Byte Lane #2 Status Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL2_STATUS :: reserved0 [31:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS_reserved0_MASK 0xfffffc00
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS_reserved0_BITS 22
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS_reserved0_SHIFT 10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL2_STATUS :: EDC [09:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS_EDC_MASK    0x00000200
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS_EDC_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS_EDC_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS_EDC_SHIFT   9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL2_STATUS :: DM [08:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS_DM_MASK     0x00000100
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS_DM_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS_DM_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS_DM_SHIFT    8
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL2_STATUS :: DQ [07:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS_DQ_MASK     0x000000ff
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS_DQ_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS_DQ_BITS     8
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL2_STATUS_DQ_SHIFT    0
+
+/***************************************************************************
+ *PHYBIST_BL3_STATUS - PhyBist Byte Lane #3 Status Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL3_STATUS :: reserved0 [31:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS_reserved0_MASK 0xfffffc00
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS_reserved0_BITS 22
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS_reserved0_SHIFT 10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL3_STATUS :: EDC [09:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS_EDC_MASK    0x00000200
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS_EDC_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS_EDC_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS_EDC_SHIFT   9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL3_STATUS :: DM [08:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS_DM_MASK     0x00000100
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS_DM_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS_DM_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS_DM_SHIFT    8
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL3_STATUS :: DQ [07:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS_DQ_MASK     0x000000ff
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS_DQ_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS_DQ_BITS     8
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL3_STATUS_DQ_SHIFT    0
+
+/***************************************************************************
+ *PHYBIST_BL4_STATUS - PhyBist Byte Lane #4 (ECC) Status Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL4_STATUS :: reserved0 [31:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS_reserved0_MASK 0xfffffc00
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS_reserved0_BITS 22
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS_reserved0_SHIFT 10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL4_STATUS :: EDC [09:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS_EDC_MASK    0x00000200
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS_EDC_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS_EDC_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS_EDC_SHIFT   9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL4_STATUS :: DM [08:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS_DM_MASK     0x00000100
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS_DM_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS_DM_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS_DM_SHIFT    8
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL4_STATUS :: DQ [07:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS_DQ_MASK     0x000000ff
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS_DQ_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS_DQ_BITS     8
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL4_STATUS_DQ_SHIFT    0
+
+/***************************************************************************
+ *STANDBY_CONTROL - Standby Control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: reserved0 [31:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_reserved0_MASK 0xff800000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_reserved0_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_reserved0_SHIFT 23
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: STANDBY_READY [22:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_READY_MASK 0x00400000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_READY_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_READY_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_READY_SHIFT 22
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_READY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: STANDBY_EXIT_PIN_EN [21:21] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_EXIT_PIN_EN_MASK 0x00200000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_EXIT_PIN_EN_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_EXIT_PIN_EN_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_EXIT_PIN_EN_SHIFT 21
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_EXIT_PIN_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: STANDBY_ACTIVE [20:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_ACTIVE_MASK 0x00100000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_ACTIVE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_ACTIVE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_ACTIVE_SHIFT 20
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_ACTIVE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: ARMED [19:19] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_ARMED_MASK     0x00080000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_ARMED_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_ARMED_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_ARMED_SHIFT    19
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_ARMED_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: WARMSTART [18:18] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_WARMSTART_MASK 0x00040000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_WARMSTART_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_WARMSTART_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_WARMSTART_SHIFT 18
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_WARMSTART_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: PWRDOWN_LDO_BIAS [17:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_BIAS_MASK 0x00030000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_BIAS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_BIAS_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_BIAS_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_BIAS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: PWRDOWN_LDO_VOLTS [15:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_VOLTS_MASK 0x0000c000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_VOLTS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_VOLTS_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_VOLTS_SHIFT 14
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_VOLTS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: PWRDOWN_SKIP_MRS [13:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_SKIP_MRS_MASK 0x00002000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_SKIP_MRS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_SKIP_MRS_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_SKIP_MRS_SHIFT 13
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_SKIP_MRS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: PWRDOWN_RST_N [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_RST_N_MASK 0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_RST_N_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_RST_N_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_RST_N_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_RST_N_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: PWRDOWN_CKE [11:11] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_CKE_MASK 0x00000800
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_CKE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_CKE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_CKE_SHIFT 11
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_CKE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: LDO_BIAS [10:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_BIAS_MASK  0x00000600
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_BIAS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_BIAS_BITS  2
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_BIAS_SHIFT 9
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_BIAS_DEFAULT 0x00000003
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: LDO_VOLTS [08:07] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_VOLTS_MASK 0x00000180
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_VOLTS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_VOLTS_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_VOLTS_SHIFT 7
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_VOLTS_DEFAULT 0x00000003
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: SKIP_MRS [06:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_SKIP_MRS_MASK  0x00000040
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_SKIP_MRS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_SKIP_MRS_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_SKIP_MRS_SHIFT 6
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_SKIP_MRS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: RST_N [05:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_RST_N_MASK     0x00000020
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_RST_N_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_RST_N_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_RST_N_SHIFT    5
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_RST_N_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: CKE [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_CKE_MASK       0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_CKE_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_CKE_BITS       1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_CKE_SHIFT      4
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_CKE_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: STANDBY [03:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_MASK   0x0000000f
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_BITS   4
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_SHIFT  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_DEFAULT 0x00000000
+
+/***************************************************************************
+ *DEBUG_FREEZE_ENABLE - Freeze-on-error enable register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_FREEZE_ENABLE :: reserved0 [31:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_reserved0_MASK 0xffffffe0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_reserved0_BITS 27
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_reserved0_SHIFT 5
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_FREEZE_ENABLE :: WLECC [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WLECC_MASK 0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WLECC_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WLECC_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WLECC_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WLECC_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_FREEZE_ENABLE :: WL1_BL1 [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL1_MASK 0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL1_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL1_SHIFT 3
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_FREEZE_ENABLE :: WL1_BL0 [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL0_MASK 0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL0_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL0_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL0_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_FREEZE_ENABLE :: WL0_BL1 [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL1_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL1_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL1_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_FREEZE_ENABLE :: WL0_BL0 [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL0_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL0_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL0_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL0_DEFAULT 0x00000000
+
+/***************************************************************************
+ *DEBUG_MUX_CONTROL - Debug Mux Control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_MUX_CONTROL :: reserved0 [31:11] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_reserved0_MASK 0xfffff800
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_reserved0_BITS 21
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_reserved0_SHIFT 11
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_MUX_CONTROL :: BYTE_SEL [10:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_BYTE_SEL_MASK 0x00000700
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_BYTE_SEL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_BYTE_SEL_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_BYTE_SEL_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_BYTE_SEL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_MUX_CONTROL :: reserved1 [07:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_reserved1_MASK 0x000000c0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_reserved1_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_reserved1_SHIFT 6
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_MUX_CONTROL :: PHASE_SEL [05:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_PHASE_SEL_MASK 0x00000030
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_PHASE_SEL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_PHASE_SEL_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_PHASE_SEL_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_PHASE_SEL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_MUX_CONTROL :: SOURCE_SEL [03:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_SOURCE_SEL_MASK 0x0000000f
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_SOURCE_SEL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_SOURCE_SEL_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_SOURCE_SEL_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_SOURCE_SEL_DEFAULT 0x00000000
+
+/***************************************************************************
+ *DFI_CNTRL - DFI Interface Ownership Control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: reserved0 [31:07] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_reserved0_MASK       0xffffff80
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_reserved0_BITS       25
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_reserved0_SHIFT      7
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: DFI_CS1 [06:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS1_MASK         0x00000040
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS1_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS1_BITS         1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS1_SHIFT        6
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS1_DEFAULT      0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: DFI_CS0 [05:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS0_MASK         0x00000020
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS0_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS0_BITS         1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS0_SHIFT        5
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS0_DEFAULT      0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: DFI_RST_N [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_RST_N_MASK       0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_RST_N_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_RST_N_BITS       1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_RST_N_SHIFT      4
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_RST_N_DEFAULT    0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: DFI_CKE [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CKE_MASK         0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CKE_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CKE_BITS         1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CKE_SHIFT        3
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CKE_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: ACK_ENABLE [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_ENABLE_MASK      0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_ENABLE_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_ENABLE_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_ENABLE_SHIFT     2
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_ENABLE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: ACK_STATUS [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_STATUS_MASK      0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_STATUS_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_STATUS_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_STATUS_SHIFT     1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_STATUS_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: ASSERT_REQ [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ASSERT_REQ_MASK      0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ASSERT_REQ_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ASSERT_REQ_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ASSERT_REQ_SHIFT     0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ASSERT_REQ_DEFAULT   0x00000001
+
+/***************************************************************************
+ *WRITE_ODT_CNTRL - Write ODT Control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_ODT_CNTRL :: reserved0 [31:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_reserved0_MASK 0xffffe000
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_reserved0_BITS 19
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_reserved0_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_ODT_CNTRL :: ODT_FORCE_VALUE [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_VALUE_MASK 0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_VALUE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_VALUE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_VALUE_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_VALUE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_ODT_CNTRL :: ODT_FORCE [11:11] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_MASK 0x00000800
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_SHIFT 11
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_ODT_CNTRL :: ODT_ENABLE [10:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_ENABLE_MASK 0x00000400
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_ENABLE_SHIFT 10
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_ODT_CNTRL :: ODT_LENGTH [09:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_LENGTH_MASK 0x000003c0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_LENGTH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_LENGTH_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_LENGTH_SHIFT 6
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_LENGTH_DEFAULT 0x00000004
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_ODT_CNTRL :: ODT_DELAY [05:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_DELAY_MASK 0x0000003f
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_DELAY_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_DELAY_BITS 6
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_DELAY_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_DELAY_DEFAULT 0x00000010
+
+/***************************************************************************
+ *ABI_PAR_CNTRL - ABI and PAR Control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: ABI_PAR_CNTRL :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_reserved0_MASK   0xfffffff0
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_reserved0_BITS   28
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_reserved0_SHIFT  4
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ABI_PAR_CNTRL :: PAR_INCLUDE_AUX [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_INCLUDE_AUX_MASK 0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_INCLUDE_AUX_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_INCLUDE_AUX_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_INCLUDE_AUX_SHIFT 3
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_INCLUDE_AUX_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ABI_PAR_CNTRL :: PAR_ENABLE [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_ENABLE_MASK  0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_ENABLE_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_ENABLE_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ABI_PAR_CNTRL :: ABI_INCLUDE_AUX [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_INCLUDE_AUX_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_INCLUDE_AUX_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_INCLUDE_AUX_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_INCLUDE_AUX_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_INCLUDE_AUX_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ABI_PAR_CNTRL :: ABI_ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_ENABLE_MASK  0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_ENABLE_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *ZQ_CAL - ZQ Calibration Control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_reserved0_MASK          0xfff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_reserved0_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_reserved0_BITS          12
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_reserved0_SHIFT         20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: ZQ_PCOMP_STATUS [19:19] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_STATUS_MASK    0x00080000
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_STATUS_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_STATUS_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_STATUS_SHIFT   19
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_STATUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: ZQ_NCOMP_STATUS [18:18] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_STATUS_MASK    0x00040000
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_STATUS_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_STATUS_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_STATUS_SHIFT   18
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_STATUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: ZQ_IDDQ [17:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_IDDQ_MASK            0x00020000
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_IDDQ_ALIGN           0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_IDDQ_BITS            1
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_IDDQ_SHIFT           17
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_IDDQ_DEFAULT         0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: ZQ_DRIVE_P [16:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_P_MASK         0x0001f000
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_P_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_P_BITS         5
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_P_SHIFT        12
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_P_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: ZQ_DRIVE_N [11:07] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_N_MASK         0x00000f80
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_N_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_N_BITS         5
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_N_SHIFT        7
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_N_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: reserved_for_padding1 [06:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_reserved_for_padding1_MASK 0x0000007c
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_reserved_for_padding1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_reserved_for_padding1_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_reserved_for_padding1_SHIFT 2
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: ZQ_PCOMP_ENB [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_ENB_MASK       0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_ENB_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_ENB_BITS       1
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_ENB_SHIFT      1
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_ENB_DEFAULT    0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: ZQ_NCOMP_ENB [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_ENB_MASK       0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_ENB_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_ENB_BITS       1
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_ENB_SHIFT      0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_ENB_DEFAULT    0x00000001
+
+/***************************************************************************
+ *AC_SPARE_REG - Address and Control Spare register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: AC_SPARE_REG :: reserved_for_eco0 [31:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_AC_SPARE_REG_reserved_for_eco0_MASK 0xffffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_AC_SPARE_REG_reserved_for_eco0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_AC_SPARE_REG_reserved_for_eco0_BITS 32
+#define DDR34_CORE_PHY_CONTROL_REGS_AC_SPARE_REG_reserved_for_eco0_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_AC_SPARE_REG_reserved_for_eco0_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQS_P - Write channel DQS-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_BUSY_MASK  0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_BUSY_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_P :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_P :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQS_N - Write channel DQS-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_BUSY_MASK  0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_BUSY_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_N :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_N :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ0 - Write channel DQ0 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ0 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ0 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ1 - Write channel DQ1 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ1 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ1 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ2 - Write channel DQ2 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ2 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ2 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ2 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ2 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ2 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ2 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ2 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ3 - Write channel DQ3 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ3 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ3 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ3 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ3 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ3 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ3 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ3 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ4 - Write channel DQ4 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ4 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ4 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ4 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ4 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ4 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ4 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ4 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ5 - Write channel DQ5 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ5 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ5 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ5 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ5 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ5 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ5 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ5 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ6 - Write channel DQ6 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ6 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ6 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ6 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ6 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ6 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ6 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ6 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ7 - Write channel DQ7 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ7 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ7 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ7 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ7 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ7 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ7 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ7 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DM - Write channel DM VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DM :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_BUSY_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DM :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DM :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_FORCE_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DM :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DM :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DM :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DM :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_EDC - Write channel EDC VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_EDC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_EDC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_EDC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_EDC :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_EDC :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_EDC :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_EDC :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQSP - Read channel DQSP VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQSN - Read channel DQSP VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ0P - Read channel DQ0-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ0N - Read channel DQ0-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ1P - Read channel DQ1-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ1N - Read channel DQ1-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ2P - Read channel DQ2-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ2N - Read channel DQ2-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ3P - Read channel DQ3-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ3N - Read channel DQ3-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ4P - Read channel DQ4-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ4N - Read channel DQ4-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ5P - Read channel DQ5-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ5N - Read channel DQ5-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ6P - Read channel DQ6-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ6N - Read channel DQ6-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ7P - Read channel DQ7-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ7N - Read channel DQ7-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DMP - Read channel DM-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DMN - Read channel DM-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EDCP - Read channel EDC-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EDCN - Read channel EDC-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EN_CS0 - Read channel CS_N[0] read enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS0 :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS0 :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EN_CS1 - Read channel CS_N[1] read enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS1 :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS1 :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CLK_CONTROL - DDR interface signal Write Leveling CLK VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CLK_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CLK_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CLK_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CLK_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved1_MASK  0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved1_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CLK_CONTROL :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_ADJ_EN_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_ADJ_EN_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_ADJ_EN_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_ADJ_EN_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_ADJ_EN_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CLK_CONTROL :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved2_MASK  0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved2_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CLK_CONTROL :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_VDL_STEP_MASK   0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_VDL_STEP_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_VDL_STEP_BITS   9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_VDL_STEP_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_LDE_CONTROL - DDR interface signal Write Leveling Capture Enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_LDE_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_LDE_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_LDE_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_LDE_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved1_MASK  0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved1_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_LDE_CONTROL :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_ADJ_EN_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_ADJ_EN_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_ADJ_EN_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_ADJ_EN_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_ADJ_EN_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_LDE_CONTROL :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved2_MASK  0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved2_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_LDE_CONTROL :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_VDL_STEP_MASK   0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_VDL_STEP_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_VDL_STEP_BITS   9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_VDL_STEP_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *RD_EN_DLY_CYC - Read enable bit-clock cycle delay control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DLY_CYC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_BUSY_MASK         0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_BUSY_ALIGN        0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_BUSY_BITS         1
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_BUSY_SHIFT        31
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_BUSY_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DLY_CYC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_reserved0_MASK    0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_reserved0_BITS    14
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_reserved0_SHIFT   17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DLY_CYC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_FORCE_MASK        0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_FORCE_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_FORCE_BITS        1
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_FORCE_SHIFT       16
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_FORCE_DEFAULT     0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DLY_CYC :: reserved1 [15:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_reserved1_MASK    0x0000ff00
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_reserved1_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_reserved1_BITS    8
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_reserved1_SHIFT   8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DLY_CYC :: CS1_CYCLES [07:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS1_CYCLES_MASK   0x000000f0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS1_CYCLES_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS1_CYCLES_BITS   4
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS1_CYCLES_SHIFT  4
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS1_CYCLES_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DLY_CYC :: CS0_CYCLES [03:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS0_CYCLES_MASK   0x0000000f
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS0_CYCLES_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS0_CYCLES_BITS   4
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS0_CYCLES_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS0_CYCLES_DEFAULT 0x00000000
+
+/***************************************************************************
+ *WR_CHAN_DLY_CYC - Write leveling bit-clock cycle delay control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_CHAN_DLY_CYC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_CHAN_DLY_CYC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_CHAN_DLY_CYC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_CHAN_DLY_CYC :: reserved1 [15:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_reserved1_MASK  0x0000fff8
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_reserved1_BITS  13
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_reserved1_SHIFT 3
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_CHAN_DLY_CYC :: CYCLES [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_CYCLES_MASK     0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_CYCLES_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_CYCLES_BITS     3
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_CYCLES_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_CYCLES_DEFAULT  0x00000000
+
+/***************************************************************************
+ *READ_CONTROL - Read channel datapath control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_CONTROL :: reserved0 [31:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_reserved0_MASK     0xffffffe0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_reserved0_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_reserved0_BITS     27
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_reserved0_SHIFT    5
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_CONTROL :: MODE [04:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_MODE_MASK          0x00000010
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_MODE_ALIGN         0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_MODE_BITS          1
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_MODE_SHIFT         4
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_MODE_DEFAULT       0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_CONTROL :: reserved1 [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_reserved1_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_reserved1_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_reserved1_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_reserved1_SHIFT    3
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_CONTROL :: RD_DATA_DLY [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_RD_DATA_DLY_MASK   0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_RD_DATA_DLY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_RD_DATA_DLY_BITS   3
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_RD_DATA_DLY_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_RD_DATA_DLY_DEFAULT 0x00000007
+
+/***************************************************************************
+ *READ_FIFO_ADDR - Read fifo addresss pointer register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_ADDR :: reserved0 [31:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_reserved0_MASK   0xfffffff8
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_reserved0_BITS   29
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_reserved0_SHIFT  3
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_ADDR :: ADDR [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_ADDR_MASK        0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_ADDR_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_ADDR_BITS        3
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_ADDR_SHIFT       0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_ADDR_DEFAULT     0x00000000
+
+/***************************************************************************
+ *READ_FIFO_DATA - Read fifo data register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_DATA :: DATA [31:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DATA_DATA_MASK        0xffffffff
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DATA_DATA_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DATA_DATA_BITS        32
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DATA_DATA_SHIFT       0
+
+/***************************************************************************
+ *READ_FIFO_DM_DBI - Read fifo dm/dbi register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_DM_DBI :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI_reserved0_MASK 0xfffffff0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI_reserved0_BITS 28
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI_reserved0_SHIFT 4
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_DM_DBI :: DM_DBI [03:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI_DM_DBI_MASK    0x0000000f
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI_DM_DBI_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI_DM_DBI_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI_DM_DBI_SHIFT   0
+
+/***************************************************************************
+ *READ_FIFO_STATUS - Read fifo status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_STATUS :: reserved0 [31:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_reserved0_MASK 0xfffffffc
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_reserved0_BITS 30
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_reserved0_SHIFT 2
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_STATUS :: OVERFLOW [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_OVERFLOW_MASK  0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_OVERFLOW_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_OVERFLOW_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_OVERFLOW_SHIFT 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_OVERFLOW_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_STATUS :: UNDERFLOW [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_UNDERFLOW_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_UNDERFLOW_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_UNDERFLOW_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_UNDERFLOW_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_UNDERFLOW_DEFAULT 0x00000000
+
+/***************************************************************************
+ *READ_FIFO_CLEAR - Read fifo status clear register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_reserved0_MASK  0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_reserved0_BITS  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_CLEAR_MASK      0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_CLEAR_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_CLEAR_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_CLEAR_SHIFT     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_CLEAR_DEFAULT   0x00000000
+
+/***************************************************************************
+ *IDLE_PAD_CONTROL - Idle mode SSTL pad control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: IDLE [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDLE_MASK      0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDLE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDLE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDLE_SHIFT     31
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDLE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: reserved0 [30:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_reserved0_MASK 0x7ff00000
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_reserved0_BITS 11
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: AUTO_DQ_RXENB_MODE [19:18] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_MASK 0x000c0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_SHIFT 18
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: AUTO_DQ_IDDQ_MODE [17:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_MASK 0x00030000
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: reserved_for_padding1 [15:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_reserved_for_padding1_MASK 0x00008000
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_reserved_for_padding1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_reserved_for_padding1_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_reserved_for_padding1_SHIFT 15
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: IO_IDLE_ENABLE [14:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_MASK 0x00007ff0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_BITS 11
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: RXENB [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_RXENB_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_RXENB_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_RXENB_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_RXENB_SHIFT    3
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_RXENB_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: IDDQ [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDDQ_MASK      0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDDQ_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDDQ_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDDQ_SHIFT     2
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDDQ_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: DOUT_N [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_N_MASK    0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_N_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_N_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_N_SHIFT   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_N_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: DOUT_P [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_P_MASK    0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_P_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_P_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_P_SHIFT   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_P_DEFAULT 0x00000000
+
+/***************************************************************************
+ *DRIVE_PAD_CTL - SSTL pad drive characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: DRIVE_PAD_CTL :: reserved0 [31:30] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_reserved0_MASK    0xc0000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_reserved0_BITS    2
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_reserved0_SHIFT   30
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: DRIVE_PAD_CTL :: BL_PD_IDLE_STRENGTH [29:25] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_MASK 0x3e000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_SHIFT 25
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: DRIVE_PAD_CTL :: BL_ND_IDLE_STRENGTH [24:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_MASK 0x01f00000
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_SHIFT 20
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: DRIVE_PAD_CTL :: BL_PD_TERM_STRENGTH [19:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_MASK 0x000f8000
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_SHIFT 15
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_DEFAULT 0x00000006
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: DRIVE_PAD_CTL :: BL_ND_TERM_STRENGTH [14:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_MASK 0x00007c00
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_SHIFT 10
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_DEFAULT 0x00000006
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: DRIVE_PAD_CTL :: BL_PD_STRENGTH [09:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_STRENGTH_MASK 0x000003e0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_STRENGTH_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: DRIVE_PAD_CTL :: BL_ND_STRENGTH [04:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_STRENGTH_MASK 0x0000001f
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_STRENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_STRENGTH_DEFAULT 0x0000001f
+
+/***************************************************************************
+ *RD_EN_DRIVE_PAD_CTL - SSTL read enable pad drive characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DRIVE_PAD_CTL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_reserved0_BITS 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DRIVE_PAD_CTL :: EDC_RD_EN_PD_STRENGTH [19:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_MASK 0x000f8000
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_SHIFT 15
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DRIVE_PAD_CTL :: EDC_RD_EN_ND_STRENGTH [14:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_MASK 0x00007c00
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_SHIFT 10
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DRIVE_PAD_CTL :: BL_RD_EN_PD_STRENGTH [09:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_MASK 0x000003e0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DRIVE_PAD_CTL :: BL_RD_EN_ND_STRENGTH [04:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_MASK 0x0000001f
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_DEFAULT 0x0000001f
+
+/***************************************************************************
+ *STATIC_PAD_CTL - pad rx and tx characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: reserved0 [31:21] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved0_MASK   0xffe00000
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved0_BITS   11
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved0_SHIFT  21
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: DQS_MODE [20:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_MODE_MASK    0x00100000
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_MODE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_MODE_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_MODE_SHIFT   20
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: reserved1 [19:18] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved1_MASK   0x000c0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved1_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved1_BITS   2
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved1_SHIFT  18
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: EDC_MODE [17:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_EDC_MODE_MASK    0x00030000
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_EDC_MODE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_EDC_MODE_BITS    2
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_EDC_MODE_SHIFT   16
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_EDC_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: reserved2 [15:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved2_MASK   0x00008000
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved2_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved2_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved2_SHIFT  15
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: WDBI_ENABLE [14:14] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_WDBI_ENABLE_MASK 0x00004000
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_WDBI_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_WDBI_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_WDBI_ENABLE_SHIFT 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_WDBI_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: RDBI_ENABLE [13:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RDBI_ENABLE_MASK 0x00002000
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RDBI_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RDBI_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RDBI_ENABLE_SHIFT 13
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RDBI_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: DM_MODE [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DM_MODE_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DM_MODE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DM_MODE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DM_MODE_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DM_MODE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: reserved3 [11:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved3_MASK   0x00000c00
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved3_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved3_BITS   2
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved3_SHIFT  10
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: DQS_TX_DIS [09:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_TX_DIS_MASK  0x00000200
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_TX_DIS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_TX_DIS_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_TX_DIS_SHIFT 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_TX_DIS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: reserved4 [08:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved4_MASK   0x000001fc
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved4_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved4_BITS   7
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved4_SHIFT  2
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: RX_MODE [01:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RX_MODE_MASK     0x00000003
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RX_MODE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RX_MODE_BITS     2
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RX_MODE_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RX_MODE_DEFAULT  0x00000000
+
+/***************************************************************************
+ *WR_PREAMBLE_MODE - Write cycle preamble control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_PREAMBLE_MODE :: reserved0 [31:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_reserved0_MASK 0xffff0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_reserved0_BITS 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_reserved0_SHIFT 16
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_PREAMBLE_MODE :: DQ_POSTAM_BITS [15:14] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_MASK 0x0000c000
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_SHIFT 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_PREAMBLE_MODE :: DQ_PREAM_BITS [13:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_PREAM_BITS_MASK 0x00003000
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_PREAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_PREAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_PREAM_BITS_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_PREAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_PREAMBLE_MODE :: DQS [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_MASK       0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_BITS       4
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_SHIFT      8
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_DEFAULT    0x0000000e
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_PREAMBLE_MODE :: reserved1 [07:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_reserved1_MASK 0x000000e0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_reserved1_SHIFT 5
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_PREAMBLE_MODE :: DQS_POSTAM_BITS [04:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_MASK 0x00000018
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_PREAMBLE_MODE :: DQS_PREAM_BITS [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_PREAM_BITS_MASK 0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_PREAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_PREAM_BITS_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_PREAM_BITS_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_PREAM_BITS_DEFAULT 0x00000002
+
+/***************************************************************************
+ *ODT_CONTROL - Read channel ODT control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: ODT_CONTROL :: reserved_for_padding0 [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_reserved_for_padding0_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_reserved_for_padding0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_reserved_for_padding0_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_reserved_for_padding0_SHIFT 31
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: ODT_CONTROL :: reserved1 [30:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_reserved1_MASK      0x7ffffc00
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_reserved1_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_reserved1_BITS      21
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_reserved1_SHIFT     10
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: ODT_CONTROL :: ODT_ENABLE [09:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_ENABLE_MASK     0x00000200
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_ENABLE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_ENABLE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_ENABLE_SHIFT    9
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_ENABLE_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: ODT_CONTROL :: ODT_DELAY [08:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_DELAY_MASK      0x000001c0
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_DELAY_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_DELAY_BITS      3
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_DELAY_SHIFT     6
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_DELAY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: ODT_CONTROL :: ODT_POST_LENGTH [05:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_POST_LENGTH_MASK 0x00000038
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_POST_LENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_POST_LENGTH_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_POST_LENGTH_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_POST_LENGTH_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: ODT_CONTROL :: ODT_PRE_LENGTH [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_PRE_LENGTH_MASK 0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_PRE_LENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_PRE_LENGTH_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_PRE_LENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_PRE_LENGTH_DEFAULT 0x00000003
+
+/***************************************************************************
+ *EDC_DPD_CONTROL - GDDR5M EDC digital phase detector control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_CONTROL :: reserved0 [31:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_reserved0_MASK  0xffffffc0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_reserved0_BITS  26
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_reserved0_SHIFT 6
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_CONTROL :: DQS_PHASE_OVERRIDE_VALUE [05:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_MASK 0x00000020
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_CONTROL :: DQS_PHASE_OVERRIDE_ENABLE [04:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_MASK 0x00000010
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_CONTROL :: SET_ADJ_EN [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_SET_ADJ_EN_MASK 0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_SET_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_SET_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_SET_ADJ_EN_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_SET_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_CONTROL :: UPDATE [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_UPDATE_MASK     0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_UPDATE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_UPDATE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_UPDATE_SHIFT    2
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_UPDATE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_CONTROL :: MONITOR [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_MONITOR_MASK    0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_MONITOR_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_MONITOR_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_MONITOR_SHIFT   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_MONITOR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_CONTROL :: INIT [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_INIT_MASK       0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_INIT_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_INIT_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_INIT_SHIFT      0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_INIT_DEFAULT    0x00000000
+
+/***************************************************************************
+ *EDC_DPD_STATUS - GDDR5M EDC digital phase detector status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: reserved0 [31:25] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_reserved0_MASK   0xfe000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_reserved0_BITS   7
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_reserved0_SHIFT  25
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: CURRENT_DQS_PHASE [24:24] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_DQS_PHASE_MASK 0x01000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_DQS_PHASE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_DQS_PHASE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_DQS_PHASE_SHIFT 24
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_DQS_PHASE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: CURRENT_VDL_SETTING [23:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_VDL_SETTING_MASK 0x00ff0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_VDL_SETTING_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_reserved1_MASK   0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_reserved1_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_reserved1_BITS   3
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_reserved1_SHIFT  13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: INIT_DQS_PHASE [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DQS_PHASE_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DQS_PHASE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DQS_PHASE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DQS_PHASE_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DQS_PHASE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: INIT_VDL_SETTING [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_VDL_SETTING_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_VDL_SETTING_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: EDGE_ERROR [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_EDGE_ERROR_MASK  0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_EDGE_ERROR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_EDGE_ERROR_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_EDGE_ERROR_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_EDGE_ERROR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: MONITOR_BUSY [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_MONITOR_BUSY_MASK 0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_MONITOR_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_MONITOR_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_MONITOR_BUSY_SHIFT 2
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_MONITOR_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: INIT_BUSY [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_BUSY_MASK   0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_BUSY_SHIFT  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: INIT_DONE [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DONE_MASK   0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DONE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DONE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DONE_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DONE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_CONTROL - GDDR5M EDC digital phase detector output signal control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_CONTROL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_reserved0_BITS 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_CONTROL :: LOWER_LIMIT [19:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_MASK 0x000ff000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_CONTROL :: UPPER_LIMIT [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_CONTROL :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_STATUS - GDDR5M EDC digital phase detector output signal status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_STATUS :: reserved0 [31:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_reserved0_MASK 0xfffff000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_reserved0_BITS 20
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_reserved0_SHIFT 12
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_STATUS :: VDL_SETTING [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VDL_SETTING_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VDL_SETTING_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_STATUS :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_STATUS :: VALID [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VALID_MASK   0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VALID_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VALID_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VALID_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VALID_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_STATUS_CLEAR - GDDR5M EDC digital phase detector output signal status clear register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_STATUS_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_reserved0_MASK 0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_reserved0_BITS 31
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_STATUS_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_CRC_CONTROL - GDDR5M EDC signal path CRC control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: reserved1 [15:11] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved1_MASK  0x0000f800
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved1_BITS  5
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved1_SHIFT 11
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: CRCWL [10:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCWL_MASK      0x00000700
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCWL_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCWL_BITS      3
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCWL_SHIFT     8
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCWL_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: reserved2 [07:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved2_MASK  0x000000c0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved2_BITS  2
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved2_SHIFT 6
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: CRCRL [05:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCRL_MASK      0x00000030
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCRL_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCRL_BITS      2
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCRL_SHIFT     4
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCRL_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: reserved3 [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved3_MASK  0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved3_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved3_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved3_SHIFT 3
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: COUNT_MODE [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_COUNT_MODE_MASK 0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_COUNT_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_COUNT_MODE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_COUNT_MODE_SHIFT 2
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_COUNT_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: ENABLE_WR [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_WR_MASK  0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_WR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_WR_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_WR_SHIFT 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_WR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: ENABLE_RD [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_RD_MASK  0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_RD_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_RD_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_RD_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_RD_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_CRC_STATUS - GDDR5M EDC signal path CRC status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_STATUS :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_reserved0_MASK   0xfffffff0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_reserved0_BITS   28
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_reserved0_SHIFT  4
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_STATUS :: WR_FAIL [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_FAIL_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_FAIL_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_FAIL_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_FAIL_SHIFT    3
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_FAIL_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_STATUS :: WR_PASS [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_PASS_MASK     0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_PASS_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_PASS_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_PASS_SHIFT    2
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_PASS_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_STATUS :: RD_FAIL [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_FAIL_MASK     0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_FAIL_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_FAIL_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_FAIL_SHIFT    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_FAIL_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_STATUS :: RD_PASS [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_PASS_MASK     0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_PASS_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_PASS_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_PASS_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_PASS_DEFAULT  0x00000000
+
+/***************************************************************************
+ *EDC_CRC_COUNT - GDDR5M EDC signal path CRC counter register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_COUNT :: reserved0 [31:28] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_reserved0_MASK    0xf0000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_reserved0_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_reserved0_SHIFT   28
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_COUNT :: WR_COUNT [27:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_WR_COUNT_MASK     0x0fff0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_WR_COUNT_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_WR_COUNT_BITS     12
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_WR_COUNT_SHIFT    16
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_WR_COUNT_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_COUNT :: reserved1 [15:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_reserved1_MASK    0x0000f000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_reserved1_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_reserved1_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_reserved1_SHIFT   12
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_COUNT :: RD_COUNT [11:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_RD_COUNT_MASK     0x00000fff
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_RD_COUNT_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_RD_COUNT_BITS     12
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_RD_COUNT_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_RD_COUNT_DEFAULT  0x00000000
+
+/***************************************************************************
+ *EDC_CRC_STATUS_CLEAR - GDDR5M EDC signal path CRC counter register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_STATUS_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_reserved0_MASK 0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_reserved0_BITS 31
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_STATUS_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_CLEAR_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_CLEAR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_CLEAR_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_CLEAR_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_CLEAR_DEFAULT 0x00000000
+
+/***************************************************************************
+ *BL_SPARE_REG - Byte-Lane Spare register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: BL_SPARE_REG :: reserved_for_eco0 [31:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_BL_SPARE_REG_reserved_for_eco0_MASK 0xffffffff
+#define DDR34_CORE_PHY_BYTE_LANE_0_BL_SPARE_REG_reserved_for_eco0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_BL_SPARE_REG_reserved_for_eco0_BITS 32
+#define DDR34_CORE_PHY_BYTE_LANE_0_BL_SPARE_REG_reserved_for_eco0_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_BL_SPARE_REG_reserved_for_eco0_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQS_P - Write channel DQS-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_BUSY_MASK  0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_BUSY_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_P :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_P :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQS_N - Write channel DQS-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_BUSY_MASK  0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_BUSY_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_N :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_N :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ0 - Write channel DQ0 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ0 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ0 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ1 - Write channel DQ1 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ1 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ1 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ2 - Write channel DQ2 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ2 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ2 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ2 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ2 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ2 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ2 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ2 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ3 - Write channel DQ3 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ3 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ3 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ3 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ3 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ3 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ3 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ3 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ4 - Write channel DQ4 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ4 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ4 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ4 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ4 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ4 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ4 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ4 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ5 - Write channel DQ5 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ5 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ5 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ5 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ5 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ5 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ5 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ5 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ6 - Write channel DQ6 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ6 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ6 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ6 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ6 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ6 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ6 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ6 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ7 - Write channel DQ7 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ7 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ7 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ7 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ7 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ7 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ7 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ7 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DM - Write channel DM VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DM :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_BUSY_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DM :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DM :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_FORCE_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DM :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DM :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DM :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DM :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_EDC - Write channel EDC VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_EDC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_EDC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_EDC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_EDC :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_EDC :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_EDC :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_EDC :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQSP - Read channel DQSP VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQSN - Read channel DQSP VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ0P - Read channel DQ0-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ0N - Read channel DQ0-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ1P - Read channel DQ1-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ1N - Read channel DQ1-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ2P - Read channel DQ2-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ2N - Read channel DQ2-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ3P - Read channel DQ3-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ3N - Read channel DQ3-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ4P - Read channel DQ4-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ4N - Read channel DQ4-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ5P - Read channel DQ5-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ5N - Read channel DQ5-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ6P - Read channel DQ6-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ6N - Read channel DQ6-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ7P - Read channel DQ7-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ7N - Read channel DQ7-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DMP - Read channel DM-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DMN - Read channel DM-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EDCP - Read channel EDC-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EDCN - Read channel EDC-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EN_CS0 - Read channel CS_N[0] read enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS0 :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS0 :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EN_CS1 - Read channel CS_N[1] read enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS1 :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS1 :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CLK_CONTROL - DDR interface signal Write Leveling CLK VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CLK_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CLK_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CLK_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CLK_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved1_MASK  0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved1_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CLK_CONTROL :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_ADJ_EN_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_ADJ_EN_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_ADJ_EN_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_ADJ_EN_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_ADJ_EN_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CLK_CONTROL :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved2_MASK  0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved2_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CLK_CONTROL :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_VDL_STEP_MASK   0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_VDL_STEP_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_VDL_STEP_BITS   9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_VDL_STEP_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_LDE_CONTROL - DDR interface signal Write Leveling Capture Enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_LDE_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_LDE_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_LDE_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_LDE_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved1_MASK  0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved1_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_LDE_CONTROL :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_ADJ_EN_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_ADJ_EN_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_ADJ_EN_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_ADJ_EN_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_ADJ_EN_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_LDE_CONTROL :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved2_MASK  0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved2_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_LDE_CONTROL :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_VDL_STEP_MASK   0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_VDL_STEP_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_VDL_STEP_BITS   9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_VDL_STEP_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *RD_EN_DLY_CYC - Read enable bit-clock cycle delay control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DLY_CYC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_BUSY_MASK         0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_BUSY_ALIGN        0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_BUSY_BITS         1
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_BUSY_SHIFT        31
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_BUSY_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DLY_CYC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_reserved0_MASK    0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_reserved0_BITS    14
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_reserved0_SHIFT   17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DLY_CYC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_FORCE_MASK        0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_FORCE_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_FORCE_BITS        1
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_FORCE_SHIFT       16
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_FORCE_DEFAULT     0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DLY_CYC :: reserved1 [15:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_reserved1_MASK    0x0000ff00
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_reserved1_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_reserved1_BITS    8
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_reserved1_SHIFT   8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DLY_CYC :: CS1_CYCLES [07:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS1_CYCLES_MASK   0x000000f0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS1_CYCLES_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS1_CYCLES_BITS   4
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS1_CYCLES_SHIFT  4
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS1_CYCLES_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DLY_CYC :: CS0_CYCLES [03:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS0_CYCLES_MASK   0x0000000f
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS0_CYCLES_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS0_CYCLES_BITS   4
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS0_CYCLES_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS0_CYCLES_DEFAULT 0x00000000
+
+/***************************************************************************
+ *WR_CHAN_DLY_CYC - Write leveling bit-clock cycle delay control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_CHAN_DLY_CYC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_CHAN_DLY_CYC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_CHAN_DLY_CYC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_CHAN_DLY_CYC :: reserved1 [15:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_reserved1_MASK  0x0000fff8
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_reserved1_BITS  13
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_reserved1_SHIFT 3
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_CHAN_DLY_CYC :: CYCLES [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_CYCLES_MASK     0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_CYCLES_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_CYCLES_BITS     3
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_CYCLES_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_CYCLES_DEFAULT  0x00000000
+
+/***************************************************************************
+ *READ_CONTROL - Read channel datapath control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_CONTROL :: reserved0 [31:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_reserved0_MASK     0xffffffe0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_reserved0_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_reserved0_BITS     27
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_reserved0_SHIFT    5
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_CONTROL :: MODE [04:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_MODE_MASK          0x00000010
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_MODE_ALIGN         0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_MODE_BITS          1
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_MODE_SHIFT         4
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_MODE_DEFAULT       0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_CONTROL :: reserved1 [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_reserved1_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_reserved1_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_reserved1_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_reserved1_SHIFT    3
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_CONTROL :: RD_DATA_DLY [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_RD_DATA_DLY_MASK   0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_RD_DATA_DLY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_RD_DATA_DLY_BITS   3
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_RD_DATA_DLY_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_RD_DATA_DLY_DEFAULT 0x00000007
+
+/***************************************************************************
+ *READ_FIFO_ADDR - Read fifo addresss pointer register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_ADDR :: reserved0 [31:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_reserved0_MASK   0xfffffff8
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_reserved0_BITS   29
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_reserved0_SHIFT  3
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_ADDR :: ADDR [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_ADDR_MASK        0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_ADDR_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_ADDR_BITS        3
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_ADDR_SHIFT       0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_ADDR_DEFAULT     0x00000000
+
+/***************************************************************************
+ *READ_FIFO_DATA - Read fifo data register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_DATA :: DATA [31:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DATA_DATA_MASK        0xffffffff
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DATA_DATA_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DATA_DATA_BITS        32
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DATA_DATA_SHIFT       0
+
+/***************************************************************************
+ *READ_FIFO_DM_DBI - Read fifo dm/dbi register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_DM_DBI :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI_reserved0_MASK 0xfffffff0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI_reserved0_BITS 28
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI_reserved0_SHIFT 4
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_DM_DBI :: DM_DBI [03:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI_DM_DBI_MASK    0x0000000f
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI_DM_DBI_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI_DM_DBI_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI_DM_DBI_SHIFT   0
+
+/***************************************************************************
+ *READ_FIFO_STATUS - Read fifo status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_STATUS :: reserved0 [31:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_reserved0_MASK 0xfffffffc
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_reserved0_BITS 30
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_reserved0_SHIFT 2
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_STATUS :: OVERFLOW [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_OVERFLOW_MASK  0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_OVERFLOW_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_OVERFLOW_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_OVERFLOW_SHIFT 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_OVERFLOW_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_STATUS :: UNDERFLOW [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_UNDERFLOW_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_UNDERFLOW_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_UNDERFLOW_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_UNDERFLOW_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_UNDERFLOW_DEFAULT 0x00000000
+
+/***************************************************************************
+ *READ_FIFO_CLEAR - Read fifo status clear register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_reserved0_MASK  0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_reserved0_BITS  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_CLEAR_MASK      0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_CLEAR_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_CLEAR_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_CLEAR_SHIFT     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_CLEAR_DEFAULT   0x00000000
+
+/***************************************************************************
+ *IDLE_PAD_CONTROL - Idle mode SSTL pad control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: IDLE [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDLE_MASK      0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDLE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDLE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDLE_SHIFT     31
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDLE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: reserved0 [30:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_reserved0_MASK 0x7ff00000
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_reserved0_BITS 11
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: AUTO_DQ_RXENB_MODE [19:18] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_MASK 0x000c0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_SHIFT 18
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: AUTO_DQ_IDDQ_MODE [17:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_MASK 0x00030000
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: reserved_for_padding1 [15:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_reserved_for_padding1_MASK 0x00008000
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_reserved_for_padding1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_reserved_for_padding1_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_reserved_for_padding1_SHIFT 15
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: IO_IDLE_ENABLE [14:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_MASK 0x00007ff0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_BITS 11
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: RXENB [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_RXENB_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_RXENB_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_RXENB_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_RXENB_SHIFT    3
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_RXENB_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: IDDQ [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDDQ_MASK      0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDDQ_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDDQ_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDDQ_SHIFT     2
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDDQ_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: DOUT_N [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_N_MASK    0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_N_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_N_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_N_SHIFT   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_N_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: DOUT_P [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_P_MASK    0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_P_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_P_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_P_SHIFT   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_P_DEFAULT 0x00000000
+
+/***************************************************************************
+ *DRIVE_PAD_CTL - SSTL pad drive characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: DRIVE_PAD_CTL :: reserved0 [31:30] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_reserved0_MASK    0xc0000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_reserved0_BITS    2
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_reserved0_SHIFT   30
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: DRIVE_PAD_CTL :: BL_PD_IDLE_STRENGTH [29:25] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_MASK 0x3e000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_SHIFT 25
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: DRIVE_PAD_CTL :: BL_ND_IDLE_STRENGTH [24:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_MASK 0x01f00000
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_SHIFT 20
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: DRIVE_PAD_CTL :: BL_PD_TERM_STRENGTH [19:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_MASK 0x000f8000
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_SHIFT 15
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_DEFAULT 0x00000006
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: DRIVE_PAD_CTL :: BL_ND_TERM_STRENGTH [14:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_MASK 0x00007c00
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_SHIFT 10
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_DEFAULT 0x00000006
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: DRIVE_PAD_CTL :: BL_PD_STRENGTH [09:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_STRENGTH_MASK 0x000003e0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_STRENGTH_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: DRIVE_PAD_CTL :: BL_ND_STRENGTH [04:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_STRENGTH_MASK 0x0000001f
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_STRENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_STRENGTH_DEFAULT 0x0000001f
+
+/***************************************************************************
+ *RD_EN_DRIVE_PAD_CTL - SSTL read enable pad drive characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DRIVE_PAD_CTL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_reserved0_BITS 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DRIVE_PAD_CTL :: EDC_RD_EN_PD_STRENGTH [19:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_MASK 0x000f8000
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_SHIFT 15
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DRIVE_PAD_CTL :: EDC_RD_EN_ND_STRENGTH [14:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_MASK 0x00007c00
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_SHIFT 10
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DRIVE_PAD_CTL :: BL_RD_EN_PD_STRENGTH [09:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_MASK 0x000003e0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DRIVE_PAD_CTL :: BL_RD_EN_ND_STRENGTH [04:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_MASK 0x0000001f
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_DEFAULT 0x0000001f
+
+/***************************************************************************
+ *STATIC_PAD_CTL - pad rx and tx characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: reserved0 [31:21] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved0_MASK   0xffe00000
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved0_BITS   11
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved0_SHIFT  21
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: DQS_MODE [20:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_MODE_MASK    0x00100000
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_MODE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_MODE_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_MODE_SHIFT   20
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: reserved1 [19:18] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved1_MASK   0x000c0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved1_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved1_BITS   2
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved1_SHIFT  18
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: EDC_MODE [17:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_EDC_MODE_MASK    0x00030000
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_EDC_MODE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_EDC_MODE_BITS    2
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_EDC_MODE_SHIFT   16
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_EDC_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: reserved2 [15:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved2_MASK   0x00008000
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved2_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved2_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved2_SHIFT  15
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: WDBI_ENABLE [14:14] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_WDBI_ENABLE_MASK 0x00004000
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_WDBI_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_WDBI_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_WDBI_ENABLE_SHIFT 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_WDBI_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: RDBI_ENABLE [13:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RDBI_ENABLE_MASK 0x00002000
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RDBI_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RDBI_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RDBI_ENABLE_SHIFT 13
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RDBI_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: DM_MODE [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DM_MODE_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DM_MODE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DM_MODE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DM_MODE_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DM_MODE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: reserved3 [11:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved3_MASK   0x00000c00
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved3_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved3_BITS   2
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved3_SHIFT  10
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: DQS_TX_DIS [09:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_TX_DIS_MASK  0x00000200
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_TX_DIS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_TX_DIS_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_TX_DIS_SHIFT 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_TX_DIS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: reserved4 [08:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved4_MASK   0x000001fc
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved4_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved4_BITS   7
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved4_SHIFT  2
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: RX_MODE [01:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RX_MODE_MASK     0x00000003
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RX_MODE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RX_MODE_BITS     2
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RX_MODE_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RX_MODE_DEFAULT  0x00000000
+
+/***************************************************************************
+ *WR_PREAMBLE_MODE - Write cycle preamble control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_PREAMBLE_MODE :: reserved0 [31:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_reserved0_MASK 0xffff0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_reserved0_BITS 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_reserved0_SHIFT 16
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_PREAMBLE_MODE :: DQ_POSTAM_BITS [15:14] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_MASK 0x0000c000
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_SHIFT 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_PREAMBLE_MODE :: DQ_PREAM_BITS [13:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_PREAM_BITS_MASK 0x00003000
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_PREAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_PREAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_PREAM_BITS_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_PREAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_PREAMBLE_MODE :: DQS [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_MASK       0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_BITS       4
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_SHIFT      8
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_DEFAULT    0x0000000e
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_PREAMBLE_MODE :: reserved1 [07:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_reserved1_MASK 0x000000e0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_reserved1_SHIFT 5
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_PREAMBLE_MODE :: DQS_POSTAM_BITS [04:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_MASK 0x00000018
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_PREAMBLE_MODE :: DQS_PREAM_BITS [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_PREAM_BITS_MASK 0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_PREAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_PREAM_BITS_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_PREAM_BITS_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_PREAM_BITS_DEFAULT 0x00000002
+
+/***************************************************************************
+ *ODT_CONTROL - Read channel ODT control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: ODT_CONTROL :: reserved_for_padding0 [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_reserved_for_padding0_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_reserved_for_padding0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_reserved_for_padding0_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_reserved_for_padding0_SHIFT 31
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: ODT_CONTROL :: reserved1 [30:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_reserved1_MASK      0x7ffffc00
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_reserved1_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_reserved1_BITS      21
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_reserved1_SHIFT     10
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: ODT_CONTROL :: ODT_ENABLE [09:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_ENABLE_MASK     0x00000200
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_ENABLE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_ENABLE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_ENABLE_SHIFT    9
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_ENABLE_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: ODT_CONTROL :: ODT_DELAY [08:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_DELAY_MASK      0x000001c0
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_DELAY_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_DELAY_BITS      3
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_DELAY_SHIFT     6
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_DELAY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: ODT_CONTROL :: ODT_POST_LENGTH [05:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_POST_LENGTH_MASK 0x00000038
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_POST_LENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_POST_LENGTH_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_POST_LENGTH_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_POST_LENGTH_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: ODT_CONTROL :: ODT_PRE_LENGTH [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_PRE_LENGTH_MASK 0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_PRE_LENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_PRE_LENGTH_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_PRE_LENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_PRE_LENGTH_DEFAULT 0x00000003
+
+/***************************************************************************
+ *EDC_DPD_CONTROL - GDDR5M EDC digital phase detector control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_CONTROL :: reserved0 [31:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_reserved0_MASK  0xffffffc0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_reserved0_BITS  26
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_reserved0_SHIFT 6
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_CONTROL :: DQS_PHASE_OVERRIDE_VALUE [05:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_MASK 0x00000020
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_CONTROL :: DQS_PHASE_OVERRIDE_ENABLE [04:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_MASK 0x00000010
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_CONTROL :: SET_ADJ_EN [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_SET_ADJ_EN_MASK 0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_SET_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_SET_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_SET_ADJ_EN_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_SET_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_CONTROL :: UPDATE [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_UPDATE_MASK     0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_UPDATE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_UPDATE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_UPDATE_SHIFT    2
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_UPDATE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_CONTROL :: MONITOR [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_MONITOR_MASK    0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_MONITOR_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_MONITOR_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_MONITOR_SHIFT   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_MONITOR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_CONTROL :: INIT [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_INIT_MASK       0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_INIT_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_INIT_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_INIT_SHIFT      0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_INIT_DEFAULT    0x00000000
+
+/***************************************************************************
+ *EDC_DPD_STATUS - GDDR5M EDC digital phase detector status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: reserved0 [31:25] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_reserved0_MASK   0xfe000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_reserved0_BITS   7
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_reserved0_SHIFT  25
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: CURRENT_DQS_PHASE [24:24] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_DQS_PHASE_MASK 0x01000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_DQS_PHASE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_DQS_PHASE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_DQS_PHASE_SHIFT 24
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_DQS_PHASE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: CURRENT_VDL_SETTING [23:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_VDL_SETTING_MASK 0x00ff0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_VDL_SETTING_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_reserved1_MASK   0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_reserved1_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_reserved1_BITS   3
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_reserved1_SHIFT  13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: INIT_DQS_PHASE [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DQS_PHASE_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DQS_PHASE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DQS_PHASE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DQS_PHASE_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DQS_PHASE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: INIT_VDL_SETTING [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_VDL_SETTING_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_VDL_SETTING_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: EDGE_ERROR [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_EDGE_ERROR_MASK  0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_EDGE_ERROR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_EDGE_ERROR_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_EDGE_ERROR_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_EDGE_ERROR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: MONITOR_BUSY [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_MONITOR_BUSY_MASK 0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_MONITOR_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_MONITOR_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_MONITOR_BUSY_SHIFT 2
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_MONITOR_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: INIT_BUSY [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_BUSY_MASK   0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_BUSY_SHIFT  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: INIT_DONE [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DONE_MASK   0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DONE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DONE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DONE_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DONE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_CONTROL - GDDR5M EDC digital phase detector output signal control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_CONTROL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_reserved0_BITS 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_CONTROL :: LOWER_LIMIT [19:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_MASK 0x000ff000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_CONTROL :: UPPER_LIMIT [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_CONTROL :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_STATUS - GDDR5M EDC digital phase detector output signal status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_STATUS :: reserved0 [31:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_reserved0_MASK 0xfffff000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_reserved0_BITS 20
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_reserved0_SHIFT 12
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_STATUS :: VDL_SETTING [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VDL_SETTING_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VDL_SETTING_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_STATUS :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_STATUS :: VALID [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VALID_MASK   0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VALID_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VALID_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VALID_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VALID_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_STATUS_CLEAR - GDDR5M EDC digital phase detector output signal status clear register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_STATUS_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_reserved0_MASK 0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_reserved0_BITS 31
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_STATUS_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_CRC_CONTROL - GDDR5M EDC signal path CRC control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: reserved1 [15:11] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved1_MASK  0x0000f800
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved1_BITS  5
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved1_SHIFT 11
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: CRCWL [10:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCWL_MASK      0x00000700
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCWL_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCWL_BITS      3
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCWL_SHIFT     8
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCWL_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: reserved2 [07:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved2_MASK  0x000000c0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved2_BITS  2
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved2_SHIFT 6
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: CRCRL [05:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCRL_MASK      0x00000030
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCRL_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCRL_BITS      2
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCRL_SHIFT     4
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCRL_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: reserved3 [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved3_MASK  0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved3_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved3_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved3_SHIFT 3
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: COUNT_MODE [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_COUNT_MODE_MASK 0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_COUNT_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_COUNT_MODE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_COUNT_MODE_SHIFT 2
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_COUNT_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: ENABLE_WR [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_WR_MASK  0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_WR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_WR_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_WR_SHIFT 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_WR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: ENABLE_RD [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_RD_MASK  0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_RD_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_RD_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_RD_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_RD_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_CRC_STATUS - GDDR5M EDC signal path CRC status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_STATUS :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_reserved0_MASK   0xfffffff0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_reserved0_BITS   28
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_reserved0_SHIFT  4
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_STATUS :: WR_FAIL [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_FAIL_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_FAIL_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_FAIL_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_FAIL_SHIFT    3
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_FAIL_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_STATUS :: WR_PASS [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_PASS_MASK     0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_PASS_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_PASS_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_PASS_SHIFT    2
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_PASS_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_STATUS :: RD_FAIL [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_FAIL_MASK     0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_FAIL_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_FAIL_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_FAIL_SHIFT    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_FAIL_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_STATUS :: RD_PASS [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_PASS_MASK     0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_PASS_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_PASS_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_PASS_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_PASS_DEFAULT  0x00000000
+
+/***************************************************************************
+ *EDC_CRC_COUNT - GDDR5M EDC signal path CRC counter register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_COUNT :: reserved0 [31:28] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_reserved0_MASK    0xf0000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_reserved0_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_reserved0_SHIFT   28
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_COUNT :: WR_COUNT [27:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_WR_COUNT_MASK     0x0fff0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_WR_COUNT_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_WR_COUNT_BITS     12
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_WR_COUNT_SHIFT    16
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_WR_COUNT_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_COUNT :: reserved1 [15:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_reserved1_MASK    0x0000f000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_reserved1_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_reserved1_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_reserved1_SHIFT   12
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_COUNT :: RD_COUNT [11:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_RD_COUNT_MASK     0x00000fff
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_RD_COUNT_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_RD_COUNT_BITS     12
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_RD_COUNT_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_RD_COUNT_DEFAULT  0x00000000
+
+/***************************************************************************
+ *EDC_CRC_STATUS_CLEAR - GDDR5M EDC signal path CRC counter register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_STATUS_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_reserved0_MASK 0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_reserved0_BITS 31
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_STATUS_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_CLEAR_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_CLEAR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_CLEAR_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_CLEAR_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_CLEAR_DEFAULT 0x00000000
+
+/***************************************************************************
+ *BL_SPARE_REG - Byte-Lane Spare register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: BL_SPARE_REG :: reserved_for_eco0 [31:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_BL_SPARE_REG_reserved_for_eco0_MASK 0xffffffff
+#define DDR34_CORE_PHY_BYTE_LANE_1_BL_SPARE_REG_reserved_for_eco0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_BL_SPARE_REG_reserved_for_eco0_BITS 32
+#define DDR34_CORE_PHY_BYTE_LANE_1_BL_SPARE_REG_reserved_for_eco0_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_BL_SPARE_REG_reserved_for_eco0_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQS_P - Write channel DQS-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQS_P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_BUSY_MASK  0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_BUSY_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQS_P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQS_P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQS_P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQS_P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQS_P :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQS_P :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQS_N - Write channel DQS-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQS_N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_BUSY_MASK  0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_BUSY_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQS_N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQS_N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQS_N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQS_N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQS_N :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQS_N :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ0 - Write channel DQ0 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ0 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ0 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ1 - Write channel DQ1 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ1 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ1 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ2 - Write channel DQ2 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ2 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ2 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ2 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ2 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ2 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ2 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ2 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ3 - Write channel DQ3 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ3 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ3 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ3 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ3 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ3 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ3 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ3 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ4 - Write channel DQ4 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ4 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ4 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ4 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ4 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ4 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ4 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ4 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ5 - Write channel DQ5 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ5 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ5 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ5 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ5 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ5 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ5 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ5 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ6 - Write channel DQ6 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ6 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ6 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ6 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ6 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ6 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ6 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ6 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ7 - Write channel DQ7 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ7 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ7 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ7 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ7 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ7 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ7 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DQ7 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DM - Write channel DM VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DM :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_BUSY_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DM :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DM :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_FORCE_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DM :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DM :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DM :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_DM :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_EDC - Write channel EDC VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_EDC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_EDC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_EDC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_EDC :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_EDC :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_EDC :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_WR_EDC :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQSP - Read channel DQSP VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQSP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQSP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQSP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQSP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQSP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQSP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQSP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQSN - Read channel DQSP VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQSN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQSN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQSN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQSN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQSN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQSN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQSN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ0P - Read channel DQ0-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ0P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ0P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ0P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ0P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ0P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ0P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ0P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ0N - Read channel DQ0-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ0N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ0N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ0N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ0N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ0N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ0N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ0N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ1P - Read channel DQ1-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ1P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ1P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ1P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ1P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ1P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ1P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ1P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ1N - Read channel DQ1-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ1N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ1N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ1N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ1N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ1N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ1N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ1N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ2P - Read channel DQ2-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ2P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ2P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ2P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ2P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ2P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ2P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ2P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ2N - Read channel DQ2-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ2N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ2N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ2N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ2N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ2N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ2N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ2N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ3P - Read channel DQ3-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ3P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ3P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ3P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ3P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ3P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ3P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ3P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ3N - Read channel DQ3-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ3N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ3N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ3N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ3N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ3N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ3N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ3N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ4P - Read channel DQ4-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ4P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ4P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ4P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ4P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ4P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ4P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ4P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ4N - Read channel DQ4-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ4N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ4N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ4N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ4N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ4N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ4N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ4N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ5P - Read channel DQ5-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ5P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ5P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ5P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ5P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ5P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ5P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ5P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ5N - Read channel DQ5-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ5N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ5N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ5N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ5N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ5N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ5N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ5N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ6P - Read channel DQ6-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ6P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ6P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ6P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ6P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ6P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ6P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ6P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ6N - Read channel DQ6-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ6N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ6N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ6N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ6N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ6N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ6N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ6N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ7P - Read channel DQ7-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ7P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ7P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ7P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ7P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ7P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ7P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ7P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ7N - Read channel DQ7-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ7N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ7N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ7N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ7N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ7N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ7N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DQ7N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DMP - Read channel DM-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DMP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DMP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DMP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DMP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DMP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DMP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DMP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DMN - Read channel DM-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DMN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DMN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DMN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DMN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DMN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DMN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_DMN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EDCP - Read channel EDC-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EDCP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EDCP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EDCP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EDCP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EDCP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EDCP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EDCP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EDCN - Read channel EDC-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EDCN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EDCN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EDCN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EDCN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EDCN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EDCN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EDCN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EN_CS0 - Read channel CS_N[0] read enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EN_CS0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EN_CS0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EN_CS0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EN_CS0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EN_CS0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EN_CS0 :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EN_CS0 :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EN_CS1 - Read channel CS_N[1] read enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EN_CS1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EN_CS1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EN_CS1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EN_CS1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EN_CS1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EN_CS1 :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CONTROL_RD_EN_CS1 :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CLK_CONTROL - DDR interface signal Write Leveling CLK VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CLK_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CLK_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CLK_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CLK_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_reserved1_MASK  0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_reserved1_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CLK_CONTROL :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_ADJ_EN_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_ADJ_EN_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_ADJ_EN_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_ADJ_EN_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_ADJ_EN_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CLK_CONTROL :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_reserved2_MASK  0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_reserved2_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_CLK_CONTROL :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_VDL_STEP_MASK   0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_VDL_STEP_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_VDL_STEP_BITS   9
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_VDL_STEP_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_CLK_CONTROL_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_LDE_CONTROL - DDR interface signal Write Leveling Capture Enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_LDE_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_LDE_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_LDE_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_LDE_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_reserved1_MASK  0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_reserved1_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_LDE_CONTROL :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_ADJ_EN_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_ADJ_EN_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_ADJ_EN_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_ADJ_EN_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_ADJ_EN_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_LDE_CONTROL :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_reserved2_MASK  0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_reserved2_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: VDL_LDE_CONTROL :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_VDL_STEP_MASK   0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_VDL_STEP_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_VDL_STEP_BITS   9
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_VDL_STEP_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_VDL_LDE_CONTROL_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *RD_EN_DLY_CYC - Read enable bit-clock cycle delay control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: RD_EN_DLY_CYC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_BUSY_MASK         0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_BUSY_ALIGN        0
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_BUSY_BITS         1
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_BUSY_SHIFT        31
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_BUSY_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: RD_EN_DLY_CYC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_reserved0_MASK    0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_reserved0_BITS    14
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_reserved0_SHIFT   17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: RD_EN_DLY_CYC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_FORCE_MASK        0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_FORCE_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_FORCE_BITS        1
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_FORCE_SHIFT       16
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_FORCE_DEFAULT     0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: RD_EN_DLY_CYC :: reserved1 [15:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_reserved1_MASK    0x0000ff00
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_reserved1_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_reserved1_BITS    8
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_reserved1_SHIFT   8
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: RD_EN_DLY_CYC :: CS1_CYCLES [07:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_CS1_CYCLES_MASK   0x000000f0
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_CS1_CYCLES_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_CS1_CYCLES_BITS   4
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_CS1_CYCLES_SHIFT  4
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_CS1_CYCLES_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: RD_EN_DLY_CYC :: CS0_CYCLES [03:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_CS0_CYCLES_MASK   0x0000000f
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_CS0_CYCLES_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_CS0_CYCLES_BITS   4
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_CS0_CYCLES_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC_CS0_CYCLES_DEFAULT 0x00000000
+
+/***************************************************************************
+ *WR_CHAN_DLY_CYC - Write leveling bit-clock cycle delay control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: WR_CHAN_DLY_CYC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: WR_CHAN_DLY_CYC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: WR_CHAN_DLY_CYC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: WR_CHAN_DLY_CYC :: reserved1 [15:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_reserved1_MASK  0x0000fff8
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_reserved1_BITS  13
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_reserved1_SHIFT 3
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: WR_CHAN_DLY_CYC :: CYCLES [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_CYCLES_MASK     0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_CYCLES_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_CYCLES_BITS     3
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_CYCLES_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC_CYCLES_DEFAULT  0x00000000
+
+/***************************************************************************
+ *READ_CONTROL - Read channel datapath control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: READ_CONTROL :: reserved0 [31:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_reserved0_MASK     0xffffffe0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_reserved0_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_reserved0_BITS     27
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_reserved0_SHIFT    5
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: READ_CONTROL :: MODE [04:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_MODE_MASK          0x00000010
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_MODE_ALIGN         0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_MODE_BITS          1
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_MODE_SHIFT         4
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_MODE_DEFAULT       0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: READ_CONTROL :: reserved1 [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_reserved1_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_reserved1_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_reserved1_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_reserved1_SHIFT    3
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: READ_CONTROL :: RD_DATA_DLY [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_RD_DATA_DLY_MASK   0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_RD_DATA_DLY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_RD_DATA_DLY_BITS   3
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_RD_DATA_DLY_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL_RD_DATA_DLY_DEFAULT 0x00000007
+
+/***************************************************************************
+ *READ_FIFO_ADDR - Read fifo addresss pointer register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: READ_FIFO_ADDR :: reserved0 [31:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_ADDR_reserved0_MASK   0xfffffff8
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_ADDR_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_ADDR_reserved0_BITS   29
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_ADDR_reserved0_SHIFT  3
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: READ_FIFO_ADDR :: ADDR [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_ADDR_ADDR_MASK        0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_ADDR_ADDR_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_ADDR_ADDR_BITS        3
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_ADDR_ADDR_SHIFT       0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_ADDR_ADDR_DEFAULT     0x00000000
+
+/***************************************************************************
+ *READ_FIFO_DATA - Read fifo data register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: READ_FIFO_DATA :: DATA [31:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_DATA_DATA_MASK        0xffffffff
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_DATA_DATA_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_DATA_DATA_BITS        32
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_DATA_DATA_SHIFT       0
+
+/***************************************************************************
+ *READ_FIFO_DM_DBI - Read fifo dm/dbi register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: READ_FIFO_DM_DBI :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_DM_DBI_reserved0_MASK 0xfffffff0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_DM_DBI_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_DM_DBI_reserved0_BITS 28
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_DM_DBI_reserved0_SHIFT 4
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: READ_FIFO_DM_DBI :: DM_DBI [03:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_DM_DBI_DM_DBI_MASK    0x0000000f
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_DM_DBI_DM_DBI_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_DM_DBI_DM_DBI_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_DM_DBI_DM_DBI_SHIFT   0
+
+/***************************************************************************
+ *READ_FIFO_STATUS - Read fifo status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: READ_FIFO_STATUS :: reserved0 [31:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_STATUS_reserved0_MASK 0xfffffffc
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_STATUS_reserved0_BITS 30
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_STATUS_reserved0_SHIFT 2
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: READ_FIFO_STATUS :: OVERFLOW [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_STATUS_OVERFLOW_MASK  0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_STATUS_OVERFLOW_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_STATUS_OVERFLOW_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_STATUS_OVERFLOW_SHIFT 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_STATUS_OVERFLOW_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: READ_FIFO_STATUS :: UNDERFLOW [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_STATUS_UNDERFLOW_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_STATUS_UNDERFLOW_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_STATUS_UNDERFLOW_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_STATUS_UNDERFLOW_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_STATUS_UNDERFLOW_DEFAULT 0x00000000
+
+/***************************************************************************
+ *READ_FIFO_CLEAR - Read fifo status clear register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: READ_FIFO_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR_reserved0_MASK  0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR_reserved0_BITS  31
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: READ_FIFO_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR_CLEAR_MASK      0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR_CLEAR_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR_CLEAR_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR_CLEAR_SHIFT     0
+#define DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR_CLEAR_DEFAULT   0x00000000
+
+/***************************************************************************
+ *IDLE_PAD_CONTROL - Idle mode SSTL pad control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: IDLE_PAD_CONTROL :: IDLE [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_IDLE_MASK      0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_IDLE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_IDLE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_IDLE_SHIFT     31
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_IDLE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: IDLE_PAD_CONTROL :: reserved0 [30:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_reserved0_MASK 0x7ff00000
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_reserved0_BITS 11
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: IDLE_PAD_CONTROL :: AUTO_DQ_RXENB_MODE [19:18] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_MASK 0x000c0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_SHIFT 18
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: IDLE_PAD_CONTROL :: AUTO_DQ_IDDQ_MODE [17:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_MASK 0x00030000
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: IDLE_PAD_CONTROL :: reserved_for_padding1 [15:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_reserved_for_padding1_MASK 0x00008000
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_reserved_for_padding1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_reserved_for_padding1_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_reserved_for_padding1_SHIFT 15
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: IDLE_PAD_CONTROL :: IO_IDLE_ENABLE [14:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_MASK 0x00007ff0
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_BITS 11
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: IDLE_PAD_CONTROL :: RXENB [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_RXENB_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_RXENB_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_RXENB_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_RXENB_SHIFT    3
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_RXENB_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: IDLE_PAD_CONTROL :: IDDQ [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_IDDQ_MASK      0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_IDDQ_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_IDDQ_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_IDDQ_SHIFT     2
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_IDDQ_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: IDLE_PAD_CONTROL :: DOUT_N [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_DOUT_N_MASK    0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_DOUT_N_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_DOUT_N_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_DOUT_N_SHIFT   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_DOUT_N_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: IDLE_PAD_CONTROL :: DOUT_P [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_DOUT_P_MASK    0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_DOUT_P_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_DOUT_P_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_DOUT_P_SHIFT   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL_DOUT_P_DEFAULT 0x00000000
+
+/***************************************************************************
+ *DRIVE_PAD_CTL - SSTL pad drive characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: DRIVE_PAD_CTL :: reserved0 [31:30] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_reserved0_MASK    0xc0000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_reserved0_BITS    2
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_reserved0_SHIFT   30
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: DRIVE_PAD_CTL :: BL_PD_IDLE_STRENGTH [29:25] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_MASK 0x3e000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_SHIFT 25
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: DRIVE_PAD_CTL :: BL_ND_IDLE_STRENGTH [24:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_MASK 0x01f00000
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_SHIFT 20
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: DRIVE_PAD_CTL :: BL_PD_TERM_STRENGTH [19:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_MASK 0x000f8000
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_SHIFT 15
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_DEFAULT 0x00000006
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: DRIVE_PAD_CTL :: BL_ND_TERM_STRENGTH [14:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_MASK 0x00007c00
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_SHIFT 10
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_DEFAULT 0x00000006
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: DRIVE_PAD_CTL :: BL_PD_STRENGTH [09:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_PD_STRENGTH_MASK 0x000003e0
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_PD_STRENGTH_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: DRIVE_PAD_CTL :: BL_ND_STRENGTH [04:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_ND_STRENGTH_MASK 0x0000001f
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_ND_STRENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL_BL_ND_STRENGTH_DEFAULT 0x0000001f
+
+/***************************************************************************
+ *RD_EN_DRIVE_PAD_CTL - SSTL read enable pad drive characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: RD_EN_DRIVE_PAD_CTL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_reserved0_BITS 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: RD_EN_DRIVE_PAD_CTL :: EDC_RD_EN_PD_STRENGTH [19:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_MASK 0x000f8000
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_SHIFT 15
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: RD_EN_DRIVE_PAD_CTL :: EDC_RD_EN_ND_STRENGTH [14:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_MASK 0x00007c00
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_SHIFT 10
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: RD_EN_DRIVE_PAD_CTL :: BL_RD_EN_PD_STRENGTH [09:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_MASK 0x000003e0
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: RD_EN_DRIVE_PAD_CTL :: BL_RD_EN_ND_STRENGTH [04:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_MASK 0x0000001f
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_DEFAULT 0x0000001f
+
+/***************************************************************************
+ *STATIC_PAD_CTL - pad rx and tx characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: STATIC_PAD_CTL :: reserved0 [31:21] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved0_MASK   0xffe00000
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved0_BITS   11
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved0_SHIFT  21
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: STATIC_PAD_CTL :: DQS_MODE [20:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_DQS_MODE_MASK    0x00100000
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_DQS_MODE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_DQS_MODE_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_DQS_MODE_SHIFT   20
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_DQS_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: STATIC_PAD_CTL :: reserved1 [19:18] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved1_MASK   0x000c0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved1_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved1_BITS   2
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved1_SHIFT  18
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: STATIC_PAD_CTL :: EDC_MODE [17:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_EDC_MODE_MASK    0x00030000
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_EDC_MODE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_EDC_MODE_BITS    2
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_EDC_MODE_SHIFT   16
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_EDC_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: STATIC_PAD_CTL :: reserved2 [15:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved2_MASK   0x00008000
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved2_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved2_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved2_SHIFT  15
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: STATIC_PAD_CTL :: WDBI_ENABLE [14:14] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_WDBI_ENABLE_MASK 0x00004000
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_WDBI_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_WDBI_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_WDBI_ENABLE_SHIFT 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_WDBI_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: STATIC_PAD_CTL :: RDBI_ENABLE [13:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_RDBI_ENABLE_MASK 0x00002000
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_RDBI_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_RDBI_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_RDBI_ENABLE_SHIFT 13
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_RDBI_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: STATIC_PAD_CTL :: DM_MODE [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_DM_MODE_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_DM_MODE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_DM_MODE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_DM_MODE_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_DM_MODE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: STATIC_PAD_CTL :: reserved3 [11:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved3_MASK   0x00000c00
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved3_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved3_BITS   2
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved3_SHIFT  10
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: STATIC_PAD_CTL :: DQS_TX_DIS [09:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_DQS_TX_DIS_MASK  0x00000200
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_DQS_TX_DIS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_DQS_TX_DIS_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_DQS_TX_DIS_SHIFT 9
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_DQS_TX_DIS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: STATIC_PAD_CTL :: reserved4 [08:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved4_MASK   0x000001fc
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved4_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved4_BITS   7
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_reserved4_SHIFT  2
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: STATIC_PAD_CTL :: RX_MODE [01:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_RX_MODE_MASK     0x00000003
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_RX_MODE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_RX_MODE_BITS     2
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_RX_MODE_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_STATIC_PAD_CTL_RX_MODE_DEFAULT  0x00000000
+
+/***************************************************************************
+ *WR_PREAMBLE_MODE - Write cycle preamble control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: WR_PREAMBLE_MODE :: reserved0 [31:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_reserved0_MASK 0xffff0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_reserved0_BITS 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_reserved0_SHIFT 16
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: WR_PREAMBLE_MODE :: DQ_POSTAM_BITS [15:14] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_MASK 0x0000c000
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_SHIFT 14
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: WR_PREAMBLE_MODE :: DQ_PREAM_BITS [13:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQ_PREAM_BITS_MASK 0x00003000
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQ_PREAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQ_PREAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQ_PREAM_BITS_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQ_PREAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: WR_PREAMBLE_MODE :: DQS [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQS_MASK       0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQS_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQS_BITS       4
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQS_SHIFT      8
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQS_DEFAULT    0x0000000e
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: WR_PREAMBLE_MODE :: reserved1 [07:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_reserved1_MASK 0x000000e0
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_reserved1_SHIFT 5
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: WR_PREAMBLE_MODE :: DQS_POSTAM_BITS [04:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_MASK 0x00000018
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: WR_PREAMBLE_MODE :: DQS_PREAM_BITS [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQS_PREAM_BITS_MASK 0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQS_PREAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQS_PREAM_BITS_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQS_PREAM_BITS_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE_DQS_PREAM_BITS_DEFAULT 0x00000002
+
+/***************************************************************************
+ *ODT_CONTROL - Read channel ODT control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: ODT_CONTROL :: reserved_for_padding0 [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_reserved_for_padding0_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_reserved_for_padding0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_reserved_for_padding0_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_reserved_for_padding0_SHIFT 31
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: ODT_CONTROL :: reserved1 [30:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_reserved1_MASK      0x7ffffc00
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_reserved1_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_reserved1_BITS      21
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_reserved1_SHIFT     10
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: ODT_CONTROL :: ODT_ENABLE [09:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_ENABLE_MASK     0x00000200
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_ENABLE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_ENABLE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_ENABLE_SHIFT    9
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_ENABLE_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: ODT_CONTROL :: ODT_DELAY [08:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_DELAY_MASK      0x000001c0
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_DELAY_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_DELAY_BITS      3
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_DELAY_SHIFT     6
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_DELAY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: ODT_CONTROL :: ODT_POST_LENGTH [05:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_POST_LENGTH_MASK 0x00000038
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_POST_LENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_POST_LENGTH_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_POST_LENGTH_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_POST_LENGTH_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: ODT_CONTROL :: ODT_PRE_LENGTH [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_PRE_LENGTH_MASK 0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_PRE_LENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_PRE_LENGTH_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_PRE_LENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL_ODT_PRE_LENGTH_DEFAULT 0x00000003
+
+/***************************************************************************
+ *EDC_DPD_CONTROL - GDDR5M EDC digital phase detector control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_CONTROL :: reserved0 [31:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_reserved0_MASK  0xffffffc0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_reserved0_BITS  26
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_reserved0_SHIFT 6
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_CONTROL :: DQS_PHASE_OVERRIDE_VALUE [05:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_MASK 0x00000020
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_CONTROL :: DQS_PHASE_OVERRIDE_ENABLE [04:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_MASK 0x00000010
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_CONTROL :: SET_ADJ_EN [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_SET_ADJ_EN_MASK 0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_SET_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_SET_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_SET_ADJ_EN_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_SET_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_CONTROL :: UPDATE [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_UPDATE_MASK     0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_UPDATE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_UPDATE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_UPDATE_SHIFT    2
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_UPDATE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_CONTROL :: MONITOR [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_MONITOR_MASK    0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_MONITOR_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_MONITOR_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_MONITOR_SHIFT   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_MONITOR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_CONTROL :: INIT [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_INIT_MASK       0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_INIT_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_INIT_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_INIT_SHIFT      0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_CONTROL_INIT_DEFAULT    0x00000000
+
+/***************************************************************************
+ *EDC_DPD_STATUS - GDDR5M EDC digital phase detector status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_STATUS :: reserved0 [31:25] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_reserved0_MASK   0xfe000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_reserved0_BITS   7
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_reserved0_SHIFT  25
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_STATUS :: CURRENT_DQS_PHASE [24:24] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_CURRENT_DQS_PHASE_MASK 0x01000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_CURRENT_DQS_PHASE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_CURRENT_DQS_PHASE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_CURRENT_DQS_PHASE_SHIFT 24
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_CURRENT_DQS_PHASE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_STATUS :: CURRENT_VDL_SETTING [23:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_CURRENT_VDL_SETTING_MASK 0x00ff0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_CURRENT_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_CURRENT_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_CURRENT_VDL_SETTING_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_CURRENT_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_STATUS :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_reserved1_MASK   0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_reserved1_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_reserved1_BITS   3
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_reserved1_SHIFT  13
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_STATUS :: INIT_DQS_PHASE [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_DQS_PHASE_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_DQS_PHASE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_DQS_PHASE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_DQS_PHASE_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_DQS_PHASE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_STATUS :: INIT_VDL_SETTING [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_VDL_SETTING_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_VDL_SETTING_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_STATUS :: EDGE_ERROR [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_EDGE_ERROR_MASK  0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_EDGE_ERROR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_EDGE_ERROR_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_EDGE_ERROR_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_EDGE_ERROR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_STATUS :: MONITOR_BUSY [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_MONITOR_BUSY_MASK 0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_MONITOR_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_MONITOR_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_MONITOR_BUSY_SHIFT 2
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_MONITOR_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_STATUS :: INIT_BUSY [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_BUSY_MASK   0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_BUSY_SHIFT  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_STATUS :: INIT_DONE [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_DONE_MASK   0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_DONE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_DONE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_DONE_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_STATUS_INIT_DONE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_CONTROL - GDDR5M EDC digital phase detector output signal control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_OUT_CONTROL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_reserved0_BITS 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_OUT_CONTROL :: LOWER_LIMIT [19:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_MASK 0x000ff000
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_OUT_CONTROL :: UPPER_LIMIT [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_OUT_CONTROL :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_OUT_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_CONTROL_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_STATUS - GDDR5M EDC digital phase detector output signal status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_OUT_STATUS :: reserved0 [31:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_reserved0_MASK 0xfffff000
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_reserved0_BITS 20
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_reserved0_SHIFT 12
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_OUT_STATUS :: VDL_SETTING [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_VDL_SETTING_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_VDL_SETTING_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_OUT_STATUS :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_OUT_STATUS :: VALID [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_VALID_MASK   0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_VALID_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_VALID_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_VALID_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_VALID_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_STATUS_CLEAR - GDDR5M EDC digital phase detector output signal status clear register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_OUT_STATUS_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_CLEAR_reserved0_MASK 0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_CLEAR_reserved0_BITS 31
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_DPD_OUT_STATUS_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_CRC_CONTROL - GDDR5M EDC signal path CRC control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_CONTROL :: reserved1 [15:11] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_reserved1_MASK  0x0000f800
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_reserved1_BITS  5
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_reserved1_SHIFT 11
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_CONTROL :: CRCWL [10:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_CRCWL_MASK      0x00000700
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_CRCWL_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_CRCWL_BITS      3
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_CRCWL_SHIFT     8
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_CRCWL_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_CONTROL :: reserved2 [07:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_reserved2_MASK  0x000000c0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_reserved2_BITS  2
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_reserved2_SHIFT 6
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_CONTROL :: CRCRL [05:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_CRCRL_MASK      0x00000030
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_CRCRL_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_CRCRL_BITS      2
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_CRCRL_SHIFT     4
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_CRCRL_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_CONTROL :: reserved3 [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_reserved3_MASK  0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_reserved3_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_reserved3_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_reserved3_SHIFT 3
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_CONTROL :: COUNT_MODE [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_COUNT_MODE_MASK 0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_COUNT_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_COUNT_MODE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_COUNT_MODE_SHIFT 2
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_COUNT_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_CONTROL :: ENABLE_WR [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_ENABLE_WR_MASK  0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_ENABLE_WR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_ENABLE_WR_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_ENABLE_WR_SHIFT 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_ENABLE_WR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_CONTROL :: ENABLE_RD [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_ENABLE_RD_MASK  0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_ENABLE_RD_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_ENABLE_RD_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_ENABLE_RD_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_CONTROL_ENABLE_RD_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_CRC_STATUS - GDDR5M EDC signal path CRC status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_STATUS :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_reserved0_MASK   0xfffffff0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_reserved0_BITS   28
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_reserved0_SHIFT  4
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_STATUS :: WR_FAIL [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_WR_FAIL_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_WR_FAIL_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_WR_FAIL_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_WR_FAIL_SHIFT    3
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_WR_FAIL_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_STATUS :: WR_PASS [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_WR_PASS_MASK     0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_WR_PASS_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_WR_PASS_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_WR_PASS_SHIFT    2
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_WR_PASS_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_STATUS :: RD_FAIL [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_RD_FAIL_MASK     0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_RD_FAIL_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_RD_FAIL_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_RD_FAIL_SHIFT    1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_RD_FAIL_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_STATUS :: RD_PASS [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_RD_PASS_MASK     0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_RD_PASS_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_RD_PASS_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_RD_PASS_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_RD_PASS_DEFAULT  0x00000000
+
+/***************************************************************************
+ *EDC_CRC_COUNT - GDDR5M EDC signal path CRC counter register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_COUNT :: reserved0 [31:28] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_reserved0_MASK    0xf0000000
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_reserved0_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_reserved0_SHIFT   28
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_COUNT :: WR_COUNT [27:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_WR_COUNT_MASK     0x0fff0000
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_WR_COUNT_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_WR_COUNT_BITS     12
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_WR_COUNT_SHIFT    16
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_WR_COUNT_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_COUNT :: reserved1 [15:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_reserved1_MASK    0x0000f000
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_reserved1_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_reserved1_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_reserved1_SHIFT   12
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_COUNT :: RD_COUNT [11:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_RD_COUNT_MASK     0x00000fff
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_RD_COUNT_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_RD_COUNT_BITS     12
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_RD_COUNT_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_COUNT_RD_COUNT_DEFAULT  0x00000000
+
+/***************************************************************************
+ *EDC_CRC_STATUS_CLEAR - GDDR5M EDC signal path CRC counter register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_STATUS_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_CLEAR_reserved0_MASK 0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_CLEAR_reserved0_BITS 31
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: EDC_CRC_STATUS_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_CLEAR_CLEAR_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_CLEAR_CLEAR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_CLEAR_CLEAR_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_CLEAR_CLEAR_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_EDC_CRC_STATUS_CLEAR_CLEAR_DEFAULT 0x00000000
+
+/***************************************************************************
+ *BL_SPARE_REG - Byte-Lane Spare register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_2 :: BL_SPARE_REG :: reserved_for_eco0 [31:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_2_BL_SPARE_REG_reserved_for_eco0_MASK 0xffffffff
+#define DDR34_CORE_PHY_BYTE_LANE_2_BL_SPARE_REG_reserved_for_eco0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_BL_SPARE_REG_reserved_for_eco0_BITS 32
+#define DDR34_CORE_PHY_BYTE_LANE_2_BL_SPARE_REG_reserved_for_eco0_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_2_BL_SPARE_REG_reserved_for_eco0_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQS_P - Write channel DQS-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQS_P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_BUSY_MASK  0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_BUSY_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQS_P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQS_P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQS_P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQS_P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQS_P :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQS_P :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQS_N - Write channel DQS-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQS_N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_BUSY_MASK  0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_BUSY_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQS_N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQS_N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQS_N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQS_N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQS_N :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQS_N :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ0 - Write channel DQ0 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ0 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ0 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ1 - Write channel DQ1 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ1 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ1 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ2 - Write channel DQ2 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ2 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ2 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ2 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ2 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ2 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ2 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ2 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ3 - Write channel DQ3 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ3 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ3 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ3 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ3 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ3 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ3 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ3 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ4 - Write channel DQ4 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ4 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ4 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ4 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ4 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ4 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ4 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ4 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ5 - Write channel DQ5 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ5 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ5 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ5 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ5 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ5 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ5 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ5 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ6 - Write channel DQ6 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ6 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ6 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ6 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ6 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ6 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ6 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ6 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ7 - Write channel DQ7 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ7 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ7 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ7 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ7 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ7 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ7 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DQ7 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DM - Write channel DM VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DM :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_BUSY_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DM :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DM :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_FORCE_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DM :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DM :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DM :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_DM :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_EDC - Write channel EDC VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_EDC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_EDC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_EDC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_EDC :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_EDC :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_EDC :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_WR_EDC :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQSP - Read channel DQSP VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQSP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQSP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQSP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQSP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQSP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQSP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQSP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQSN - Read channel DQSP VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQSN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQSN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQSN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQSN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQSN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQSN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQSN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ0P - Read channel DQ0-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ0P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ0P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ0P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ0P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ0P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ0P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ0P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ0N - Read channel DQ0-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ0N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ0N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ0N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ0N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ0N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ0N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ0N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ1P - Read channel DQ1-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ1P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ1P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ1P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ1P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ1P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ1P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ1P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ1N - Read channel DQ1-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ1N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ1N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ1N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ1N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ1N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ1N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ1N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ2P - Read channel DQ2-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ2P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ2P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ2P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ2P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ2P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ2P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ2P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ2N - Read channel DQ2-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ2N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ2N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ2N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ2N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ2N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ2N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ2N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ3P - Read channel DQ3-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ3P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ3P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ3P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ3P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ3P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ3P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ3P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ3N - Read channel DQ3-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ3N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ3N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ3N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ3N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ3N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ3N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ3N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ4P - Read channel DQ4-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ4P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ4P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ4P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ4P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ4P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ4P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ4P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ4N - Read channel DQ4-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ4N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ4N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ4N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ4N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ4N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ4N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ4N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ5P - Read channel DQ5-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ5P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ5P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ5P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ5P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ5P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ5P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ5P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ5N - Read channel DQ5-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ5N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ5N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ5N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ5N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ5N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ5N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ5N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ6P - Read channel DQ6-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ6P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ6P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ6P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ6P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ6P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ6P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ6P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ6N - Read channel DQ6-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ6N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ6N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ6N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ6N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ6N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ6N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ6N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ7P - Read channel DQ7-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ7P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ7P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ7P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ7P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ7P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ7P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ7P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ7N - Read channel DQ7-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ7N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ7N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ7N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ7N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ7N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ7N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DQ7N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DMP - Read channel DM-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DMP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DMP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DMP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DMP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DMP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DMP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DMP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DMN - Read channel DM-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DMN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DMN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DMN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DMN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DMN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DMN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_DMN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EDCP - Read channel EDC-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EDCP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EDCP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EDCP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EDCP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EDCP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EDCP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EDCP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EDCN - Read channel EDC-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EDCN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EDCN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EDCN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EDCN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EDCN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EDCN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EDCN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EN_CS0 - Read channel CS_N[0] read enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EN_CS0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EN_CS0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EN_CS0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EN_CS0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EN_CS0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EN_CS0 :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EN_CS0 :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EN_CS1 - Read channel CS_N[1] read enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EN_CS1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EN_CS1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EN_CS1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EN_CS1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EN_CS1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EN_CS1 :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CONTROL_RD_EN_CS1 :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CLK_CONTROL - DDR interface signal Write Leveling CLK VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CLK_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CLK_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CLK_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CLK_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_reserved1_MASK  0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_reserved1_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CLK_CONTROL :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_ADJ_EN_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_ADJ_EN_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_ADJ_EN_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_ADJ_EN_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_ADJ_EN_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CLK_CONTROL :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_reserved2_MASK  0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_reserved2_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_CLK_CONTROL :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_VDL_STEP_MASK   0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_VDL_STEP_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_VDL_STEP_BITS   9
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_VDL_STEP_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_CLK_CONTROL_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_LDE_CONTROL - DDR interface signal Write Leveling Capture Enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_LDE_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_LDE_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_LDE_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_LDE_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_reserved1_MASK  0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_reserved1_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_LDE_CONTROL :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_ADJ_EN_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_ADJ_EN_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_ADJ_EN_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_ADJ_EN_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_ADJ_EN_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_LDE_CONTROL :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_reserved2_MASK  0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_reserved2_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: VDL_LDE_CONTROL :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_VDL_STEP_MASK   0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_VDL_STEP_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_VDL_STEP_BITS   9
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_VDL_STEP_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_VDL_LDE_CONTROL_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *RD_EN_DLY_CYC - Read enable bit-clock cycle delay control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: RD_EN_DLY_CYC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_BUSY_MASK         0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_BUSY_ALIGN        0
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_BUSY_BITS         1
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_BUSY_SHIFT        31
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_BUSY_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: RD_EN_DLY_CYC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_reserved0_MASK    0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_reserved0_BITS    14
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_reserved0_SHIFT   17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: RD_EN_DLY_CYC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_FORCE_MASK        0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_FORCE_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_FORCE_BITS        1
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_FORCE_SHIFT       16
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_FORCE_DEFAULT     0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: RD_EN_DLY_CYC :: reserved1 [15:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_reserved1_MASK    0x0000ff00
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_reserved1_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_reserved1_BITS    8
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_reserved1_SHIFT   8
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: RD_EN_DLY_CYC :: CS1_CYCLES [07:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_CS1_CYCLES_MASK   0x000000f0
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_CS1_CYCLES_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_CS1_CYCLES_BITS   4
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_CS1_CYCLES_SHIFT  4
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_CS1_CYCLES_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: RD_EN_DLY_CYC :: CS0_CYCLES [03:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_CS0_CYCLES_MASK   0x0000000f
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_CS0_CYCLES_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_CS0_CYCLES_BITS   4
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_CS0_CYCLES_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC_CS0_CYCLES_DEFAULT 0x00000000
+
+/***************************************************************************
+ *WR_CHAN_DLY_CYC - Write leveling bit-clock cycle delay control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: WR_CHAN_DLY_CYC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: WR_CHAN_DLY_CYC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: WR_CHAN_DLY_CYC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: WR_CHAN_DLY_CYC :: reserved1 [15:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_reserved1_MASK  0x0000fff8
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_reserved1_BITS  13
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_reserved1_SHIFT 3
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: WR_CHAN_DLY_CYC :: CYCLES [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_CYCLES_MASK     0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_CYCLES_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_CYCLES_BITS     3
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_CYCLES_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC_CYCLES_DEFAULT  0x00000000
+
+/***************************************************************************
+ *READ_CONTROL - Read channel datapath control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: READ_CONTROL :: reserved0 [31:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_reserved0_MASK     0xffffffe0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_reserved0_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_reserved0_BITS     27
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_reserved0_SHIFT    5
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: READ_CONTROL :: MODE [04:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_MODE_MASK          0x00000010
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_MODE_ALIGN         0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_MODE_BITS          1
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_MODE_SHIFT         4
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_MODE_DEFAULT       0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: READ_CONTROL :: reserved1 [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_reserved1_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_reserved1_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_reserved1_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_reserved1_SHIFT    3
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: READ_CONTROL :: RD_DATA_DLY [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_RD_DATA_DLY_MASK   0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_RD_DATA_DLY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_RD_DATA_DLY_BITS   3
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_RD_DATA_DLY_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL_RD_DATA_DLY_DEFAULT 0x00000007
+
+/***************************************************************************
+ *READ_FIFO_ADDR - Read fifo addresss pointer register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: READ_FIFO_ADDR :: reserved0 [31:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_ADDR_reserved0_MASK   0xfffffff8
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_ADDR_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_ADDR_reserved0_BITS   29
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_ADDR_reserved0_SHIFT  3
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: READ_FIFO_ADDR :: ADDR [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_ADDR_ADDR_MASK        0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_ADDR_ADDR_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_ADDR_ADDR_BITS        3
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_ADDR_ADDR_SHIFT       0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_ADDR_ADDR_DEFAULT     0x00000000
+
+/***************************************************************************
+ *READ_FIFO_DATA - Read fifo data register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: READ_FIFO_DATA :: DATA [31:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_DATA_DATA_MASK        0xffffffff
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_DATA_DATA_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_DATA_DATA_BITS        32
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_DATA_DATA_SHIFT       0
+
+/***************************************************************************
+ *READ_FIFO_DM_DBI - Read fifo dm/dbi register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: READ_FIFO_DM_DBI :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_DM_DBI_reserved0_MASK 0xfffffff0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_DM_DBI_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_DM_DBI_reserved0_BITS 28
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_DM_DBI_reserved0_SHIFT 4
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: READ_FIFO_DM_DBI :: DM_DBI [03:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_DM_DBI_DM_DBI_MASK    0x0000000f
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_DM_DBI_DM_DBI_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_DM_DBI_DM_DBI_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_DM_DBI_DM_DBI_SHIFT   0
+
+/***************************************************************************
+ *READ_FIFO_STATUS - Read fifo status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: READ_FIFO_STATUS :: reserved0 [31:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_STATUS_reserved0_MASK 0xfffffffc
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_STATUS_reserved0_BITS 30
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_STATUS_reserved0_SHIFT 2
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: READ_FIFO_STATUS :: OVERFLOW [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_STATUS_OVERFLOW_MASK  0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_STATUS_OVERFLOW_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_STATUS_OVERFLOW_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_STATUS_OVERFLOW_SHIFT 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_STATUS_OVERFLOW_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: READ_FIFO_STATUS :: UNDERFLOW [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_STATUS_UNDERFLOW_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_STATUS_UNDERFLOW_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_STATUS_UNDERFLOW_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_STATUS_UNDERFLOW_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_STATUS_UNDERFLOW_DEFAULT 0x00000000
+
+/***************************************************************************
+ *READ_FIFO_CLEAR - Read fifo status clear register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: READ_FIFO_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR_reserved0_MASK  0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR_reserved0_BITS  31
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: READ_FIFO_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR_CLEAR_MASK      0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR_CLEAR_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR_CLEAR_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR_CLEAR_SHIFT     0
+#define DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR_CLEAR_DEFAULT   0x00000000
+
+/***************************************************************************
+ *IDLE_PAD_CONTROL - Idle mode SSTL pad control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: IDLE_PAD_CONTROL :: IDLE [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_IDLE_MASK      0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_IDLE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_IDLE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_IDLE_SHIFT     31
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_IDLE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: IDLE_PAD_CONTROL :: reserved0 [30:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_reserved0_MASK 0x7ff00000
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_reserved0_BITS 11
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: IDLE_PAD_CONTROL :: AUTO_DQ_RXENB_MODE [19:18] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_MASK 0x000c0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_SHIFT 18
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: IDLE_PAD_CONTROL :: AUTO_DQ_IDDQ_MODE [17:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_MASK 0x00030000
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: IDLE_PAD_CONTROL :: reserved_for_padding1 [15:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_reserved_for_padding1_MASK 0x00008000
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_reserved_for_padding1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_reserved_for_padding1_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_reserved_for_padding1_SHIFT 15
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: IDLE_PAD_CONTROL :: IO_IDLE_ENABLE [14:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_MASK 0x00007ff0
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_BITS 11
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: IDLE_PAD_CONTROL :: RXENB [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_RXENB_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_RXENB_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_RXENB_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_RXENB_SHIFT    3
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_RXENB_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: IDLE_PAD_CONTROL :: IDDQ [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_IDDQ_MASK      0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_IDDQ_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_IDDQ_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_IDDQ_SHIFT     2
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_IDDQ_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: IDLE_PAD_CONTROL :: DOUT_N [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_DOUT_N_MASK    0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_DOUT_N_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_DOUT_N_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_DOUT_N_SHIFT   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_DOUT_N_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: IDLE_PAD_CONTROL :: DOUT_P [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_DOUT_P_MASK    0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_DOUT_P_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_DOUT_P_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_DOUT_P_SHIFT   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL_DOUT_P_DEFAULT 0x00000000
+
+/***************************************************************************
+ *DRIVE_PAD_CTL - SSTL pad drive characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: DRIVE_PAD_CTL :: reserved0 [31:30] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_reserved0_MASK    0xc0000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_reserved0_BITS    2
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_reserved0_SHIFT   30
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: DRIVE_PAD_CTL :: BL_PD_IDLE_STRENGTH [29:25] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_MASK 0x3e000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_SHIFT 25
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: DRIVE_PAD_CTL :: BL_ND_IDLE_STRENGTH [24:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_MASK 0x01f00000
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_SHIFT 20
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: DRIVE_PAD_CTL :: BL_PD_TERM_STRENGTH [19:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_MASK 0x000f8000
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_SHIFT 15
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_DEFAULT 0x00000006
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: DRIVE_PAD_CTL :: BL_ND_TERM_STRENGTH [14:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_MASK 0x00007c00
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_SHIFT 10
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_DEFAULT 0x00000006
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: DRIVE_PAD_CTL :: BL_PD_STRENGTH [09:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_PD_STRENGTH_MASK 0x000003e0
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_PD_STRENGTH_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: DRIVE_PAD_CTL :: BL_ND_STRENGTH [04:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_ND_STRENGTH_MASK 0x0000001f
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_ND_STRENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL_BL_ND_STRENGTH_DEFAULT 0x0000001f
+
+/***************************************************************************
+ *RD_EN_DRIVE_PAD_CTL - SSTL read enable pad drive characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: RD_EN_DRIVE_PAD_CTL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_reserved0_BITS 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: RD_EN_DRIVE_PAD_CTL :: EDC_RD_EN_PD_STRENGTH [19:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_MASK 0x000f8000
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_SHIFT 15
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: RD_EN_DRIVE_PAD_CTL :: EDC_RD_EN_ND_STRENGTH [14:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_MASK 0x00007c00
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_SHIFT 10
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: RD_EN_DRIVE_PAD_CTL :: BL_RD_EN_PD_STRENGTH [09:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_MASK 0x000003e0
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: RD_EN_DRIVE_PAD_CTL :: BL_RD_EN_ND_STRENGTH [04:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_MASK 0x0000001f
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_DEFAULT 0x0000001f
+
+/***************************************************************************
+ *STATIC_PAD_CTL - pad rx and tx characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: STATIC_PAD_CTL :: reserved0 [31:21] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved0_MASK   0xffe00000
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved0_BITS   11
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved0_SHIFT  21
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: STATIC_PAD_CTL :: DQS_MODE [20:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_DQS_MODE_MASK    0x00100000
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_DQS_MODE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_DQS_MODE_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_DQS_MODE_SHIFT   20
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_DQS_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: STATIC_PAD_CTL :: reserved1 [19:18] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved1_MASK   0x000c0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved1_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved1_BITS   2
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved1_SHIFT  18
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: STATIC_PAD_CTL :: EDC_MODE [17:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_EDC_MODE_MASK    0x00030000
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_EDC_MODE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_EDC_MODE_BITS    2
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_EDC_MODE_SHIFT   16
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_EDC_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: STATIC_PAD_CTL :: reserved2 [15:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved2_MASK   0x00008000
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved2_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved2_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved2_SHIFT  15
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: STATIC_PAD_CTL :: WDBI_ENABLE [14:14] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_WDBI_ENABLE_MASK 0x00004000
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_WDBI_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_WDBI_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_WDBI_ENABLE_SHIFT 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_WDBI_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: STATIC_PAD_CTL :: RDBI_ENABLE [13:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_RDBI_ENABLE_MASK 0x00002000
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_RDBI_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_RDBI_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_RDBI_ENABLE_SHIFT 13
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_RDBI_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: STATIC_PAD_CTL :: DM_MODE [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_DM_MODE_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_DM_MODE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_DM_MODE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_DM_MODE_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_DM_MODE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: STATIC_PAD_CTL :: reserved3 [11:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved3_MASK   0x00000c00
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved3_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved3_BITS   2
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved3_SHIFT  10
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: STATIC_PAD_CTL :: DQS_TX_DIS [09:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_DQS_TX_DIS_MASK  0x00000200
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_DQS_TX_DIS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_DQS_TX_DIS_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_DQS_TX_DIS_SHIFT 9
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_DQS_TX_DIS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: STATIC_PAD_CTL :: reserved4 [08:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved4_MASK   0x000001fc
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved4_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved4_BITS   7
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_reserved4_SHIFT  2
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: STATIC_PAD_CTL :: RX_MODE [01:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_RX_MODE_MASK     0x00000003
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_RX_MODE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_RX_MODE_BITS     2
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_RX_MODE_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_STATIC_PAD_CTL_RX_MODE_DEFAULT  0x00000000
+
+/***************************************************************************
+ *WR_PREAMBLE_MODE - Write cycle preamble control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: WR_PREAMBLE_MODE :: reserved0 [31:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_reserved0_MASK 0xffff0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_reserved0_BITS 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_reserved0_SHIFT 16
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: WR_PREAMBLE_MODE :: DQ_POSTAM_BITS [15:14] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_MASK 0x0000c000
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_SHIFT 14
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: WR_PREAMBLE_MODE :: DQ_PREAM_BITS [13:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQ_PREAM_BITS_MASK 0x00003000
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQ_PREAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQ_PREAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQ_PREAM_BITS_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQ_PREAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: WR_PREAMBLE_MODE :: DQS [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQS_MASK       0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQS_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQS_BITS       4
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQS_SHIFT      8
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQS_DEFAULT    0x0000000e
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: WR_PREAMBLE_MODE :: reserved1 [07:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_reserved1_MASK 0x000000e0
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_reserved1_SHIFT 5
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: WR_PREAMBLE_MODE :: DQS_POSTAM_BITS [04:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_MASK 0x00000018
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: WR_PREAMBLE_MODE :: DQS_PREAM_BITS [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQS_PREAM_BITS_MASK 0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQS_PREAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQS_PREAM_BITS_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQS_PREAM_BITS_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE_DQS_PREAM_BITS_DEFAULT 0x00000002
+
+/***************************************************************************
+ *ODT_CONTROL - Read channel ODT control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: ODT_CONTROL :: reserved_for_padding0 [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_reserved_for_padding0_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_reserved_for_padding0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_reserved_for_padding0_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_reserved_for_padding0_SHIFT 31
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: ODT_CONTROL :: reserved1 [30:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_reserved1_MASK      0x7ffffc00
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_reserved1_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_reserved1_BITS      21
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_reserved1_SHIFT     10
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: ODT_CONTROL :: ODT_ENABLE [09:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_ENABLE_MASK     0x00000200
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_ENABLE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_ENABLE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_ENABLE_SHIFT    9
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_ENABLE_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: ODT_CONTROL :: ODT_DELAY [08:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_DELAY_MASK      0x000001c0
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_DELAY_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_DELAY_BITS      3
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_DELAY_SHIFT     6
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_DELAY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: ODT_CONTROL :: ODT_POST_LENGTH [05:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_POST_LENGTH_MASK 0x00000038
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_POST_LENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_POST_LENGTH_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_POST_LENGTH_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_POST_LENGTH_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: ODT_CONTROL :: ODT_PRE_LENGTH [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_PRE_LENGTH_MASK 0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_PRE_LENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_PRE_LENGTH_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_PRE_LENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL_ODT_PRE_LENGTH_DEFAULT 0x00000003
+
+/***************************************************************************
+ *EDC_DPD_CONTROL - GDDR5M EDC digital phase detector control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_CONTROL :: reserved0 [31:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_reserved0_MASK  0xffffffc0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_reserved0_BITS  26
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_reserved0_SHIFT 6
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_CONTROL :: DQS_PHASE_OVERRIDE_VALUE [05:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_MASK 0x00000020
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_CONTROL :: DQS_PHASE_OVERRIDE_ENABLE [04:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_MASK 0x00000010
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_CONTROL :: SET_ADJ_EN [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_SET_ADJ_EN_MASK 0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_SET_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_SET_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_SET_ADJ_EN_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_SET_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_CONTROL :: UPDATE [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_UPDATE_MASK     0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_UPDATE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_UPDATE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_UPDATE_SHIFT    2
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_UPDATE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_CONTROL :: MONITOR [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_MONITOR_MASK    0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_MONITOR_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_MONITOR_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_MONITOR_SHIFT   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_MONITOR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_CONTROL :: INIT [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_INIT_MASK       0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_INIT_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_INIT_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_INIT_SHIFT      0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_CONTROL_INIT_DEFAULT    0x00000000
+
+/***************************************************************************
+ *EDC_DPD_STATUS - GDDR5M EDC digital phase detector status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_STATUS :: reserved0 [31:25] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_reserved0_MASK   0xfe000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_reserved0_BITS   7
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_reserved0_SHIFT  25
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_STATUS :: CURRENT_DQS_PHASE [24:24] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_CURRENT_DQS_PHASE_MASK 0x01000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_CURRENT_DQS_PHASE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_CURRENT_DQS_PHASE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_CURRENT_DQS_PHASE_SHIFT 24
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_CURRENT_DQS_PHASE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_STATUS :: CURRENT_VDL_SETTING [23:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_CURRENT_VDL_SETTING_MASK 0x00ff0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_CURRENT_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_CURRENT_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_CURRENT_VDL_SETTING_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_CURRENT_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_STATUS :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_reserved1_MASK   0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_reserved1_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_reserved1_BITS   3
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_reserved1_SHIFT  13
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_STATUS :: INIT_DQS_PHASE [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_DQS_PHASE_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_DQS_PHASE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_DQS_PHASE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_DQS_PHASE_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_DQS_PHASE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_STATUS :: INIT_VDL_SETTING [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_VDL_SETTING_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_VDL_SETTING_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_STATUS :: EDGE_ERROR [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_EDGE_ERROR_MASK  0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_EDGE_ERROR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_EDGE_ERROR_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_EDGE_ERROR_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_EDGE_ERROR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_STATUS :: MONITOR_BUSY [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_MONITOR_BUSY_MASK 0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_MONITOR_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_MONITOR_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_MONITOR_BUSY_SHIFT 2
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_MONITOR_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_STATUS :: INIT_BUSY [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_BUSY_MASK   0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_BUSY_SHIFT  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_STATUS :: INIT_DONE [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_DONE_MASK   0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_DONE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_DONE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_DONE_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_STATUS_INIT_DONE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_CONTROL - GDDR5M EDC digital phase detector output signal control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_OUT_CONTROL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_reserved0_BITS 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_OUT_CONTROL :: LOWER_LIMIT [19:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_MASK 0x000ff000
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_OUT_CONTROL :: UPPER_LIMIT [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_OUT_CONTROL :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_OUT_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_CONTROL_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_STATUS - GDDR5M EDC digital phase detector output signal status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_OUT_STATUS :: reserved0 [31:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_reserved0_MASK 0xfffff000
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_reserved0_BITS 20
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_reserved0_SHIFT 12
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_OUT_STATUS :: VDL_SETTING [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_VDL_SETTING_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_VDL_SETTING_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_OUT_STATUS :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_OUT_STATUS :: VALID [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_VALID_MASK   0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_VALID_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_VALID_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_VALID_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_VALID_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_STATUS_CLEAR - GDDR5M EDC digital phase detector output signal status clear register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_OUT_STATUS_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_CLEAR_reserved0_MASK 0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_CLEAR_reserved0_BITS 31
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_DPD_OUT_STATUS_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_CRC_CONTROL - GDDR5M EDC signal path CRC control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_CONTROL :: reserved1 [15:11] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_reserved1_MASK  0x0000f800
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_reserved1_BITS  5
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_reserved1_SHIFT 11
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_CONTROL :: CRCWL [10:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_CRCWL_MASK      0x00000700
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_CRCWL_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_CRCWL_BITS      3
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_CRCWL_SHIFT     8
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_CRCWL_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_CONTROL :: reserved2 [07:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_reserved2_MASK  0x000000c0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_reserved2_BITS  2
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_reserved2_SHIFT 6
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_CONTROL :: CRCRL [05:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_CRCRL_MASK      0x00000030
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_CRCRL_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_CRCRL_BITS      2
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_CRCRL_SHIFT     4
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_CRCRL_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_CONTROL :: reserved3 [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_reserved3_MASK  0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_reserved3_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_reserved3_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_reserved3_SHIFT 3
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_CONTROL :: COUNT_MODE [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_COUNT_MODE_MASK 0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_COUNT_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_COUNT_MODE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_COUNT_MODE_SHIFT 2
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_COUNT_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_CONTROL :: ENABLE_WR [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_ENABLE_WR_MASK  0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_ENABLE_WR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_ENABLE_WR_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_ENABLE_WR_SHIFT 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_ENABLE_WR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_CONTROL :: ENABLE_RD [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_ENABLE_RD_MASK  0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_ENABLE_RD_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_ENABLE_RD_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_ENABLE_RD_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_CONTROL_ENABLE_RD_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_CRC_STATUS - GDDR5M EDC signal path CRC status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_STATUS :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_reserved0_MASK   0xfffffff0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_reserved0_BITS   28
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_reserved0_SHIFT  4
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_STATUS :: WR_FAIL [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_WR_FAIL_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_WR_FAIL_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_WR_FAIL_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_WR_FAIL_SHIFT    3
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_WR_FAIL_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_STATUS :: WR_PASS [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_WR_PASS_MASK     0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_WR_PASS_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_WR_PASS_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_WR_PASS_SHIFT    2
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_WR_PASS_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_STATUS :: RD_FAIL [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_RD_FAIL_MASK     0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_RD_FAIL_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_RD_FAIL_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_RD_FAIL_SHIFT    1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_RD_FAIL_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_STATUS :: RD_PASS [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_RD_PASS_MASK     0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_RD_PASS_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_RD_PASS_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_RD_PASS_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_RD_PASS_DEFAULT  0x00000000
+
+/***************************************************************************
+ *EDC_CRC_COUNT - GDDR5M EDC signal path CRC counter register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_COUNT :: reserved0 [31:28] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_reserved0_MASK    0xf0000000
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_reserved0_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_reserved0_SHIFT   28
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_COUNT :: WR_COUNT [27:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_WR_COUNT_MASK     0x0fff0000
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_WR_COUNT_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_WR_COUNT_BITS     12
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_WR_COUNT_SHIFT    16
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_WR_COUNT_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_COUNT :: reserved1 [15:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_reserved1_MASK    0x0000f000
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_reserved1_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_reserved1_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_reserved1_SHIFT   12
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_COUNT :: RD_COUNT [11:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_RD_COUNT_MASK     0x00000fff
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_RD_COUNT_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_RD_COUNT_BITS     12
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_RD_COUNT_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_COUNT_RD_COUNT_DEFAULT  0x00000000
+
+/***************************************************************************
+ *EDC_CRC_STATUS_CLEAR - GDDR5M EDC signal path CRC counter register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_STATUS_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_CLEAR_reserved0_MASK 0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_CLEAR_reserved0_BITS 31
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: EDC_CRC_STATUS_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_CLEAR_CLEAR_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_CLEAR_CLEAR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_CLEAR_CLEAR_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_CLEAR_CLEAR_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_EDC_CRC_STATUS_CLEAR_CLEAR_DEFAULT 0x00000000
+
+/***************************************************************************
+ *BL_SPARE_REG - Byte-Lane Spare register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_3 :: BL_SPARE_REG :: reserved_for_eco0 [31:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_3_BL_SPARE_REG_reserved_for_eco0_MASK 0xffffffff
+#define DDR34_CORE_PHY_BYTE_LANE_3_BL_SPARE_REG_reserved_for_eco0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_BL_SPARE_REG_reserved_for_eco0_BITS 32
+#define DDR34_CORE_PHY_BYTE_LANE_3_BL_SPARE_REG_reserved_for_eco0_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_3_BL_SPARE_REG_reserved_for_eco0_DEFAULT 0x00000000
+
+#endif /* #ifndef DDR34_PHY_REGISTERS_H__ */
+
+/* End of File */
+
+// sn_001  svn_6092
+// hash_c1729e036564a6168c56cf832bfcf7e7b5f2fdfa
diff --git a/arch/arm/cpu/armv7/iproc/shmoo_and28/phy_and28_e2.h b/arch/arm/cpu/armv7/iproc/shmoo_and28/phy_and28_e2.h
new file mode 100755
index 0000000..e7ed143
--- /dev/null
+++ b/arch/arm/cpu/armv7/iproc/shmoo_and28/phy_and28_e2.h
@@ -0,0 +1,11305 @@
+/***************************************************************************
+ *     Copyright (c) 1999-2013, Broadcom Corporation
+ *     All Rights Reserved
+ *     Confidential Property of Broadcom Corporation
+ *
+ *
+ * THIS SOFTWARE MAY ONLY BE USED SUBJECT TO AN EXECUTED SOFTWARE LICENSE
+ * AGREEMENT  BETWEEN THE USER AND BROADCOM.  YOU HAVE NO RIGHT TO USE OR
+ * EXPLOIT THIS MATERIAL EXCEPT SUBJECT TO THE TERMS OF SUCH AN AGREEMENT.
+ *
+ * $brcm_Workfile: $
+ * $brcm_Revision: $
+ * $brcm_Date: $
+ *
+ * Module Description:
+ *                     DO NOT EDIT THIS FILE DIRECTLY
+ *
+ * This module was generated magically with RDB from a source description
+ * file. You must edit the source file for changes to be made to this file.
+ *
+ *
+ * Date:           Generated on         Tue Mar 12 10:52:26 2013
+ *                 MD5 Checksum         1ca637887dd7d95805b8ecf7f3a96755
+ *
+ * Compiled with:  RDB Utility          combo_header.pl
+ *                 RDB Parser           3.0
+ *                 unknown              unknown
+ *                 Perl Interpreter     5.008008
+ *                 Operating System     linux
+ *
+ * Spec Versions:  DDR34_PHY_ADDR_CTL   04
+ *                 DDR34_PHY_BYTE_LANE  04
+ *
+ * RDB Files:  /projects/DDR34_2/E0/work/msankey/phy_e0/design/ddr34_phy/ddr_lp_phy_16_fc_28hpm_h/rdb/ddr34_phy_top_standalone.rdb
+ *             /projects/DDR34_2/E0/work/msankey/phy_e0/design/ddr34_phy/ddr_lp_phy_16_fc_28hpm_h/rdb/ddr34_phy_top_blockdef.rdb
+ *             /projects/DDR34_2/E0/work/msankey/phy_e0/design/ddr34_phy/ddr_lp_phy_16_fc_28hpm_h/rdb/ddr34_phy_addr_ctl.rdb
+ *             /projects/DDR34_2/E0/work/msankey/phy_e0/design/ddr34_phy/ddr_lp_phy_16_fc_28hpm_h/rdb/ddr34_phy_regtypes.rdb
+ *             /projects/DDR34_2/E0/work/msankey/phy_e0/design/ddr34_phy/ddr_lp_phy_16_fc_28hpm_h/rdb/ddr34_phy_byte_lane.rdb
+ *             /projects/DDR34_2/E0/work/msankey/phy_e0/design/ddr34_phy/ddr_lp_phy_16_fc_28hpm_h/rdb/ddr34_phy_regtypes.rdb
+ *             /projects/DDR34_2/E0/work/msankey/phy_e0/design/ddr34_phy/ddr_lp_phy_16_fc_28hpm_h/rdb/ddr34_phy_byte_lane_regtypes.rdb
+ *
+ * Revision History:
+ *
+ * $brcm_Log: $
+ *
+ ***************************************************************************/
+
+#ifndef DDR34_PHY_REGISTERS_H__
+#define DDR34_PHY_REGISTERS_H__
+
+/**
+ * m = memory, c = core, r = register, f = field, d = data.
+ */
+#if !defined(GET_FIELD) && !defined(SET_FIELD)
+#define BRCM_ALIGN(c,r,f)   c##_##r##_##f##_ALIGN
+#define BRCM_BITS(c,r,f)    c##_##r##_##f##_BITS
+#define BRCM_MASK(c,r,f)    c##_##r##_##f##_MASK
+#define BRCM_SHIFT(c,r,f)   c##_##r##_##f##_SHIFT
+
+#define GET_FIELD(m,c,r,f) \
+	((((m) & BRCM_MASK(c,r,f)) >> BRCM_SHIFT(c,r,f)) << BRCM_ALIGN(c,r,f))
+
+#define SET_FIELD(m,c,r,f,d) \
+	((m) = (((m) & ~BRCM_MASK(c,r,f)) | ((((d) >> BRCM_ALIGN(c,r,f)) << \
+	 BRCM_SHIFT(c,r,f)) & BRCM_MASK(c,r,f))) \
+	)
+
+#define SET_TYPE_FIELD(m,c,r,f,d) SET_FIELD(m,c,r,f,c##_##d)
+#define SET_NAME_FIELD(m,c,r,f,d) SET_FIELD(m,c,r,f,c##_##r##_##f##_##d)
+#define SET_VALUE_FIELD(m,c,r,f,d) SET_FIELD(m,c,r,f,d)
+
+#endif /* GET & SET */
+
+/***************************************************************************
+ *DDR34_CORE_PHY_CONTROL_REGS - DDR34 CORE DDR34 Address/Comand control registers
+ ***************************************************************************/
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION     0x00000000 /* Address & Control revision register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS   0x00000004 /* PHY PLL status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG   0x00000008 /* PHY PLL configuration register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1 0x0000000c /* PHY PLL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2 0x00000010 /* PHY PLL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL3 0x00000014 /* PHY PLL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS 0x00000018 /* PHY PLL integer divider register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER 0x0000001c /* PHY PLL fractional divider register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL 0x00000020 /* PHY PLL spread spectrum control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT 0x00000024 /* PHY PLL spread spectrum limit register */
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL  0x00000028 /* Aux Control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL 0x0000002c /* Idle mode pad control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0 0x00000030 /* Idle mode pad enable register */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1 0x00000034 /* Idle mode pad enable register */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL 0x00000038 /* PVT Compensation control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL 0x0000003c /* pad rx and tx characteristics control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG  0x00000040 /* DRAM configuration register */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1 0x00000044 /* DRAM timing register #1 */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2 0x00000048 /* DRAM timing register #2 */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3 0x0000004c /* DRAM timing register #3 */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING4 0x00000050 /* DRAM timing register #4 */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE 0x00000060 /* PHY VDL calibration control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1 0x00000064 /* PHY VDL calibration status register #1 */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2 0x00000068 /* PHY VDL calibration status register #2 */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL 0x0000006c /* PHY VDL delay monitoring control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF 0x00000070 /* PHY VDL delay monitoring reference register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS 0x00000074 /* PHY VDL delay monitoring status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE 0x00000078 /* PHY VDL delay monitoring override register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL 0x0000007c /* PHY VDL delay monitoring output control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS 0x00000080 /* PHY VDL delay monitoring output status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR 0x00000084 /* PHY VDL delay monitoring output status clear register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00 0x00000090 /* DDR interface signal AD[00] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01 0x00000094 /* DDR interface signal AD[01] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02 0x00000098 /* DDR interface signal AD[02] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03 0x0000009c /* DDR interface signal AD[03] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04 0x000000a0 /* DDR interface signal AD[04] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05 0x000000a4 /* DDR interface signal AD[05] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06 0x000000a8 /* DDR interface signal AD[06] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07 0x000000ac /* DDR interface signal AD[07] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08 0x000000b0 /* DDR interface signal AD[08] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09 0x000000b4 /* DDR interface signal AD[09] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10 0x000000b8 /* DDR interface signal AD[10] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11 0x000000bc /* DDR interface signal AD[11] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12 0x000000c0 /* DDR interface signal AD[12] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13 0x000000c4 /* DDR interface signal AD[13] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14 0x000000c8 /* DDR interface signal AD[14] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15 0x000000cc /* DDR interface signal AD[15] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0 0x000000d0 /* DDR interface signal BA[0] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1 0x000000d4 /* DDR interface signal BA[1] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2 0x000000d8 /* DDR interface signal BA[2] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0 0x000000dc /* DDR interface signal AUX[0] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1 0x000000e0 /* DDR interface signal AUX[1] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2 0x000000e4 /* DDR interface signal AUX[2] VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0 0x000000e8 /* DDR interface signal CS0 VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1 0x000000ec /* DDR interface signal CS1 VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR 0x000000f0 /* DDR interface signal PAR VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N 0x000000f4 /* DDR interface signal RAS_N VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N 0x000000f8 /* DDR interface signal CAS_N VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE 0x000000fc /* DDR interface signal CKE0 VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N 0x00000100 /* DDR interface signal RST_N VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT 0x00000104 /* DDR interface signal ODT0 VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N 0x00000108 /* DDR interface signal WE_N VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P 0x0000010c /* DDR interface signal DDR_CK-P VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N 0x00000110 /* DDR interface signal DDR_CK-N VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL 0x00000114 /* DDR interface signal Write Leveling CLK VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL 0x00000118 /* DDR interface signal Write Leveling Capture Enable VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH      0x00000130 /* Refresh engine controller */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL   0x00000134 /* Update VDL control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1 0x00000138 /* Update VDL snoop control register #1 */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2 0x0000013c /* Update VDL snoop control register #2 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1 0x00000140 /* DRAM Command Register #1 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1 0x00000144 /* DRAM AUX_N Command Register #1 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2 0x00000148 /* DRAM Command Register #2 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2 0x0000014c /* DRAM AUX_N Command Register #2 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3 0x00000150 /* DRAM Command Register #3 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3 0x00000154 /* DRAM AUX_N Command Register #3 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4 0x00000158 /* DRAM Command Register #4 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4 0x0000015c /* DRAM AUX_N Command Register #4 */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER 0x00000160 /* DRAM Command Timer Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0    0x00000164 /* DDR3/DDR4/GDDR5 Mode Register 0 and LPDDR Mode Register 1 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1    0x00000168 /* DDR3/DDR4/GDDR5 Mode Register 1 and LPDDR Mode Register 2 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2    0x0000016c /* DDR3/DDR4/GDDR5 Mode Register 2 and LPDDR Mode Register 3 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3    0x00000170 /* DDR3/DDR4/GDDR5 Mode Register 3 and LPDDR Mode Register 9 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4    0x00000174 /* DDR4/GDDR5 Mode Register 4 and LPDDR Mode Register 10 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5    0x00000178 /* DDR4/GDDR5 Mode Register 5 and LPDDR Mode Register 16 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6    0x0000017c /* DDR4/GDDR5 Mode Register 6 and LPDDR Mode Register 17 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7    0x00000180 /* DDR4/GDDR5 Mode Register 7 and LPDDR Mode Register 41 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8    0x00000184 /* GDDR5 Mode Register 8 and LPDDR Mode Register 42 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15   0x00000188 /* GDDR5 Mode Register 15 and LPDDR Mode Register 48 */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63   0x0000018c /* LPDDR Mode Register 63 */
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR  0x00000190 /* DDR4 Alert status clear register */
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS 0x00000194 /* DDR4 Alert status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY    0x00000198 /* DDR4 CA parity control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL 0x0000019c /* GDDR5 CA playback control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0 0x000001a0 /* LPDDR3 and GDDR5 CA playback status register0 */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL 0x000001ac /* Write leveling control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS 0x000001b0 /* Write leveling status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL 0x000001b4 /* Read enable test cycle control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS 0x000001b8 /* Read enable test cycle status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_LFSR_SEED 0x000001c0 /* Traffic generator seed register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1 0x000001c4 /* Traffic generator address register #1 */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2 0x000001c8 /* Traffic generator address register #2 */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL 0x000001cc /* Traffic generator control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL 0x000001d0 /* Traffic generator data control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_MASK 0x000001d4 /* Traffic generator DQ mask register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK 0x000001d8 /* Traffic generator ECC DQ mask register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS 0x000001dc /* Traffic generator status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_STATUS 0x000001e0 /* Traffic generator DQ status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS 0x000001e4 /* Traffic generator ECC DQ status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL 0x000001e8 /* Traffic generator error count control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS 0x000001ec /* Traffic generator error count status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL 0x000001f0 /* Virtual VTT Control and Status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS 0x000001f4 /* Virtual VTT Control and Status register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS 0x000001f8 /* Virtual VTT Connections register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE 0x000001fc /* Virtual VTT Override register */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL 0x00000200 /* VREF DAC Control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL 0x00000204 /* PhyBist Control Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_SEED 0x00000208 /* PhyBist Seed Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CA_MASK 0x0000020c /* PhyBist Command/Address Bus Mask */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS 0x00000210 /* PhyBist General Status Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS 0x00000214 /* PhyBist Per-Bit Control Pad Status Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS 0x00000218 /* PhyBist Byte Lane #0 Status Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS 0x0000021c /* PhyBist Byte Lane #1 Status Register */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL 0x00000230 /* Standby Control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE 0x00000234 /* Freeze-on-error enable register */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL 0x00000238 /* Debug Mux Control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL    0x0000023c /* DFI Interface Ownership Control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL 0x00000240 /* Write ODT Control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL 0x00000244 /* ABI and PAR Control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL       0x00000248 /* ZQ Calibration Control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL 0x0000024c /* Ring-Osc control register */
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_STATUS 0x00000250 /* Ring-Osc count register */
+#define DDR34_CORE_PHY_CONTROL_REGS_AC_SPARE_REG 0x0000011c /* Address and Control Spare register */
+
+/***************************************************************************
+ *DDR34_CORE_PHY_BYTE_LANE_0 - DDR34 CORE DDR34 Byte Lane #0 control registers
+ ***************************************************************************/
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P 0x00000400 /* Write channel DQS-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N 0x00000404 /* Write channel DQS-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0 0x00000408 /* Write channel DQ0 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1 0x0000040c /* Write channel DQ1 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2 0x00000410 /* Write channel DQ2 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3 0x00000414 /* Write channel DQ3 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4 0x00000418 /* Write channel DQ4 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5 0x0000041c /* Write channel DQ5 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6 0x00000420 /* Write channel DQ6 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7 0x00000424 /* Write channel DQ7 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM 0x00000428 /* Write channel DM VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC 0x0000042c /* Write channel EDC VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP 0x00000430 /* Read channel DQSP VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN 0x00000434 /* Read channel DQSP VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P 0x00000438 /* Read channel DQ0-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N 0x0000043c /* Read channel DQ0-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P 0x00000440 /* Read channel DQ1-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N 0x00000444 /* Read channel DQ1-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P 0x00000448 /* Read channel DQ2-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N 0x0000044c /* Read channel DQ2-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P 0x00000450 /* Read channel DQ3-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N 0x00000454 /* Read channel DQ3-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P 0x00000458 /* Read channel DQ4-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N 0x0000045c /* Read channel DQ4-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P 0x00000460 /* Read channel DQ5-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N 0x00000464 /* Read channel DQ5-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P 0x00000468 /* Read channel DQ6-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N 0x0000046c /* Read channel DQ6-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P 0x00000470 /* Read channel DQ7-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N 0x00000474 /* Read channel DQ7-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP 0x00000478 /* Read channel DM-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN 0x0000047c /* Read channel DM-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP 0x00000480 /* Read channel EDC-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN 0x00000484 /* Read channel EDC-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0 0x00000488 /* Read channel CS_N[0] read enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1 0x0000048c /* Read channel CS_N[1] read enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL 0x00000490 /* DDR interface signal Write Leveling CLK VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL 0x00000494 /* DDR interface signal Write Leveling Capture Enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC 0x000004a0 /* Read enable bit-clock cycle delay control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC 0x000004a4 /* Write leveling bit-clock cycle delay control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL  0x000004b0 /* Read channel datapath control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR 0x000004b4 /* Read fifo addresss pointer register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DATA 0x000004b8 /* Read fifo data register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI 0x000004bc /* Read fifo dm/dbi register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS 0x000004c0 /* Read fifo status register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR 0x000004c4 /* Read fifo status clear register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL 0x000004c8 /* Idle mode SSTL pad control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL 0x000004cc /* SSTL pad drive characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL 0x000004d0 /* SSTL read enable pad drive characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL 0x000004d4 /* pad rx and tx characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE 0x000004d8 /* Write cycle preamble control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL   0x000004e0 /* Read channel ODT control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL 0x000004f0 /* GDDR5M EDC digital phase detector control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS 0x000004f4 /* GDDR5M EDC digital phase detector status register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL 0x000004f8 /* GDDR5M EDC digital phase detector output signal control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS 0x000004fc /* GDDR5M EDC digital phase detector output signal status register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR 0x00000500 /* GDDR5M EDC digital phase detector output signal status clear register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL 0x00000504 /* GDDR5M EDC signal path CRC control register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS 0x00000508 /* GDDR5M EDC signal path CRC status register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT 0x0000050c /* GDDR5M EDC signal path CRC counter register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR 0x00000510 /* GDDR5M EDC signal path CRC counter register */
+#define DDR34_CORE_PHY_BYTE_LANE_0_BL_SPARE_REG  0x00000514 /* Byte-Lane Spare register */
+
+/***************************************************************************
+ *DDR34_CORE_PHY_BYTE_LANE_1 - DDR34 CORE DDR34 Byte Lane #1 control registers
+ ***************************************************************************/
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P 0x00000600 /* Write channel DQS-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N 0x00000604 /* Write channel DQS-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0 0x00000608 /* Write channel DQ0 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1 0x0000060c /* Write channel DQ1 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2 0x00000610 /* Write channel DQ2 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3 0x00000614 /* Write channel DQ3 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4 0x00000618 /* Write channel DQ4 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5 0x0000061c /* Write channel DQ5 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6 0x00000620 /* Write channel DQ6 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7 0x00000624 /* Write channel DQ7 VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM 0x00000628 /* Write channel DM VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC 0x0000062c /* Write channel EDC VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP 0x00000630 /* Read channel DQSP VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN 0x00000634 /* Read channel DQSP VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P 0x00000638 /* Read channel DQ0-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N 0x0000063c /* Read channel DQ0-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P 0x00000640 /* Read channel DQ1-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N 0x00000644 /* Read channel DQ1-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P 0x00000648 /* Read channel DQ2-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N 0x0000064c /* Read channel DQ2-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P 0x00000650 /* Read channel DQ3-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N 0x00000654 /* Read channel DQ3-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P 0x00000658 /* Read channel DQ4-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N 0x0000065c /* Read channel DQ4-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P 0x00000660 /* Read channel DQ5-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N 0x00000664 /* Read channel DQ5-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P 0x00000668 /* Read channel DQ6-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N 0x0000066c /* Read channel DQ6-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P 0x00000670 /* Read channel DQ7-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N 0x00000674 /* Read channel DQ7-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP 0x00000678 /* Read channel DM-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN 0x0000067c /* Read channel DM-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP 0x00000680 /* Read channel EDC-P VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN 0x00000684 /* Read channel EDC-N VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0 0x00000688 /* Read channel CS_N[0] read enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1 0x0000068c /* Read channel CS_N[1] read enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL 0x00000690 /* DDR interface signal Write Leveling CLK VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL 0x00000694 /* DDR interface signal Write Leveling Capture Enable VDL control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC 0x000006a0 /* Read enable bit-clock cycle delay control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC 0x000006a4 /* Write leveling bit-clock cycle delay control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL  0x000006b0 /* Read channel datapath control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR 0x000006b4 /* Read fifo addresss pointer register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DATA 0x000006b8 /* Read fifo data register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI 0x000006bc /* Read fifo dm/dbi register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS 0x000006c0 /* Read fifo status register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR 0x000006c4 /* Read fifo status clear register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL 0x000006c8 /* Idle mode SSTL pad control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL 0x000006cc /* SSTL pad drive characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL 0x000006d0 /* SSTL read enable pad drive characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL 0x000006d4 /* pad rx and tx characteristics control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE 0x000006d8 /* Write cycle preamble control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL   0x000006e0 /* Read channel ODT control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL 0x000006f0 /* GDDR5M EDC digital phase detector control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS 0x000006f4 /* GDDR5M EDC digital phase detector status register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL 0x000006f8 /* GDDR5M EDC digital phase detector output signal control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS 0x000006fc /* GDDR5M EDC digital phase detector output signal status register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR 0x00000700 /* GDDR5M EDC digital phase detector output signal status clear register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL 0x00000704 /* GDDR5M EDC signal path CRC control register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS 0x00000708 /* GDDR5M EDC signal path CRC status register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT 0x0000070c /* GDDR5M EDC signal path CRC counter register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR 0x00000710 /* GDDR5M EDC signal path CRC counter register */
+#define DDR34_CORE_PHY_BYTE_LANE_1_BL_SPARE_REG  0x00000714 /* Byte-Lane Spare register */
+
+/***************************************************************************
+ *REVISION - Address & Control revision register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: REVISION :: reserved0 [31:25] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_reserved0_MASK        0xfe000000
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_reserved0_ALIGN       0
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_reserved0_BITS        7
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_reserved0_SHIFT       25
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: REVISION :: PERFORMANCE [24:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_PERFORMANCE_MASK      0x01800000
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_PERFORMANCE_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_PERFORMANCE_BITS      2
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_PERFORMANCE_SHIFT     23
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: REVISION :: TECHNOLOGY [22:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_TECHNOLOGY_MASK       0x00700000
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_TECHNOLOGY_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_TECHNOLOGY_BITS       3
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_TECHNOLOGY_SHIFT      20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: REVISION :: WB [19:19] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_WB_MASK               0x00080000
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_WB_ALIGN              0
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_WB_BITS               1
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_WB_SHIFT              19
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: REVISION :: BITS [18:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_BITS_MASK             0x00070000
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_BITS_ALIGN            0
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_BITS_BITS             3
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_BITS_SHIFT            16
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: REVISION :: MAJOR [15:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MAJOR_MASK            0x0000ff00
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MAJOR_ALIGN           0
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MAJOR_BITS            8
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MAJOR_SHIFT           8
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MAJOR_DEFAULT         0x000000e2
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: REVISION :: MINOR [07:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MINOR_MASK            0x000000ff
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MINOR_ALIGN           0
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MINOR_BITS            8
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MINOR_SHIFT           0
+#define DDR34_CORE_PHY_CONTROL_REGS_REVISION_MINOR_DEFAULT         0x00000001
+
+/***************************************************************************
+ *PLL_STATUS - PHY PLL status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_STATUS :: reserved0 [31:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_reserved0_MASK      0xff000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_reserved0_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_reserved0_BITS      8
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_reserved0_SHIFT     24
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_STATUS :: CLOCK_GEN [23:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCK_GEN_MASK      0x00f00000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCK_GEN_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCK_GEN_BITS      4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCK_GEN_SHIFT     20
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCK_GEN_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_STATUS :: reserved1 [19:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_reserved1_MASK      0x000e0000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_reserved1_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_reserved1_BITS      3
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_reserved1_SHIFT     17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_STATUS :: LOCK_LOST [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_LOCK_LOST_MASK      0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_LOCK_LOST_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_LOCK_LOST_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_LOCK_LOST_SHIFT     16
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_STATUS :: CLOCKING_8X [15:15] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_8X_MASK    0x00008000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_8X_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_8X_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_8X_SHIFT   15
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_STATUS :: CLOCKING_4X [14:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_4X_MASK    0x00004000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_4X_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_4X_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_4X_SHIFT   14
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_STATUS :: CLOCKING_2X [13:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_2X_MASK    0x00002000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_2X_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_2X_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_CLOCKING_2X_SHIFT   13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_STATUS :: STATUS [12:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_STATUS_MASK         0x00001ffe
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_STATUS_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_STATUS_BITS         12
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_STATUS_SHIFT        1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_STATUS :: LOCK [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_LOCK_MASK           0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_LOCK_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_LOCK_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS_LOCK_SHIFT          0
+
+/***************************************************************************
+ *PLL_CONFIG - PHY PLL configuration register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: reserved0 [31:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved0_MASK      0xf0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved0_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved0_BITS      4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved0_SHIFT     28
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: reserved_for_eco1 [27:27] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved_for_eco1_MASK 0x08000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved_for_eco1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved_for_eco1_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved_for_eco1_SHIFT 27
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved_for_eco1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: CK_LDO_REF_CTRL [26:25] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_REF_CTRL_MASK 0x06000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_REF_CTRL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_REF_CTRL_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_REF_CTRL_SHIFT 25
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_REF_CTRL_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: CK_LDO_BIAS [24:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_BIAS_MASK    0x01800000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_BIAS_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_BIAS_BITS    2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_BIAS_SHIFT   23
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_CK_LDO_BIAS_DEFAULT 0x00000003
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: PLL_LDO_REF_SEL [22:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_SEL_MASK 0x00400000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_SEL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_SEL_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_SEL_SHIFT 22
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_SEL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: PLL_LDO_REF_CTRL [21:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_CTRL_MASK 0x00300000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_CTRL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_CTRL_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_CTRL_SHIFT 20
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_REF_CTRL_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: PLL_LDO_BIAS [19:18] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_BIAS_MASK   0x000c0000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_BIAS_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_BIAS_BITS   2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_BIAS_SHIFT  18
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PLL_LDO_BIAS_DEFAULT 0x00000003
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: HOLD [17:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_HOLD_MASK           0x00020000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_HOLD_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_HOLD_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_HOLD_SHIFT          17
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_HOLD_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: ENABLE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_ENABLE_MASK         0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_ENABLE_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_ENABLE_BITS         1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_ENABLE_SHIFT        16
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_ENABLE_DEFAULT      0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: reserved2 [15:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved2_MASK      0x0000c000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved2_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved2_BITS      2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved2_SHIFT     14
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: FB_OFFSET [13:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_FB_OFFSET_MASK      0x00003f00
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_FB_OFFSET_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_FB_OFFSET_BITS      6
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_FB_OFFSET_SHIFT     8
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_FB_OFFSET_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: reserved3 [07:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved3_MASK      0x000000e0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved3_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved3_BITS      3
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved3_SHIFT     5
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: RESET_POST_DIV [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_POST_DIV_MASK 0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_POST_DIV_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_POST_DIV_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_POST_DIV_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_POST_DIV_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: reserved4 [03:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved4_MASK      0x0000000c
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved4_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved4_BITS      2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_reserved4_SHIFT     2
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: RESET [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_MASK          0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_SHIFT         1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_RESET_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONFIG :: PWRDN [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PWRDN_MASK          0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PWRDN_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PWRDN_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PWRDN_SHIFT         0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG_PWRDN_DEFAULT       0x00000000
+
+/***************************************************************************
+ *PLL_CONTROL1 - PHY PLL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL1 :: reserved0 [31:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_reserved0_MASK    0xfffffc00
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_reserved0_BITS    22
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_reserved0_SHIFT   10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL1 :: I_KP [09:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KP_MASK         0x000003c0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KP_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KP_BITS         4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KP_SHIFT        6
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KP_DEFAULT      0x00000005
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL1 :: I_KI [05:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KI_MASK         0x00000038
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KI_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KI_BITS         3
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KI_SHIFT        3
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KI_DEFAULT      0x00000002
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL1 :: I_KA [02:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KA_MASK         0x00000007
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KA_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KA_BITS         3
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KA_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL1_I_KA_DEFAULT      0x00000000
+
+/***************************************************************************
+ *PLL_CONTROL2 - PHY PLL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: VCO_RANGE [31:30] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_RANGE_MASK    0xc0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_RANGE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_RANGE_BITS    2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_RANGE_SHIFT   30
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_RANGE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: UNUSED2 [29:29] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED2_MASK      0x20000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED2_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED2_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED2_SHIFT     29
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED2_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: NDIV_RELOCK [28:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_NDIV_RELOCK_MASK  0x10000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_NDIV_RELOCK_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_NDIV_RELOCK_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_NDIV_RELOCK_SHIFT 28
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_NDIV_RELOCK_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: FAST_LOCK [27:27] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_FAST_LOCK_MASK    0x08000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_FAST_LOCK_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_FAST_LOCK_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_FAST_LOCK_SHIFT   27
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_FAST_LOCK_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: VCO_FB_DIV2 [26:26] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_FB_DIV2_MASK  0x04000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_FB_DIV2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_FB_DIV2_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_FB_DIV2_SHIFT 26
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_VCO_FB_DIV2_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: POST_CTRL_RESETB [25:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_POST_CTRL_RESETB_MASK 0x03000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_POST_CTRL_RESETB_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_POST_CTRL_RESETB_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_POST_CTRL_RESETB_SHIFT 24
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_POST_CTRL_RESETB_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: PWM_RATE [23:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_PWM_RATE_MASK     0x00c00000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_PWM_RATE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_PWM_RATE_BITS     2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_PWM_RATE_SHIFT    22
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_PWM_RATE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: STAT_MODE [21:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_MODE_MASK    0x00300000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_MODE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_MODE_BITS    2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_MODE_SHIFT   20
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: UNUSED1 [19:18] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED1_MASK      0x000c0000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED1_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED1_BITS      2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED1_SHIFT     18
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_UNUSED1_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: STAT_UPDATE [17:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_UPDATE_MASK  0x00020000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_UPDATE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_UPDATE_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_UPDATE_SHIFT 17
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_UPDATE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: STAT_SELECT [16:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_SELECT_MASK  0x0001c000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_SELECT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_SELECT_BITS  3
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_SELECT_SHIFT 14
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_SELECT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: STAT_RESET [13:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_RESET_MASK   0x00002000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_RESET_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_RESET_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_RESET_SHIFT  13
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_STAT_RESET_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: DCO_CTRL_BYPASS_ENABLE [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_ENABLE_MASK 0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_ENABLE_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL2 :: DCO_CTRL_BYPASS [11:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_MASK 0x00000fff
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_BITS 12
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2_DCO_CTRL_BYPASS_DEFAULT 0x00000000
+
+/***************************************************************************
+ *PLL_CONTROL3 - PHY PLL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_CONTROL3 :: PLL_CONTROL [31:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL3_PLL_CONTROL_MASK  0xffffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL3_PLL_CONTROL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL3_PLL_CONTROL_BITS  32
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL3_PLL_CONTROL_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL3_PLL_CONTROL_DEFAULT 0x00000000
+
+/***************************************************************************
+ *PLL_DIVIDERS - PHY PLL integer divider register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_DIVIDERS :: reserved0 [31:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved0_MASK    0xf0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved0_BITS    4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved0_SHIFT   28
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_DIVIDERS :: MDIV [27:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_MDIV_MASK         0x0ff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_MDIV_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_MDIV_BITS         8
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_MDIV_SHIFT        20
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_MDIV_DEFAULT      0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_DIVIDERS :: reserved1 [19:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved1_MASK    0x000f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved1_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved1_BITS    4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved1_SHIFT   16
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_DIVIDERS :: PDIV [15:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_PDIV_MASK         0x0000f000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_PDIV_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_PDIV_BITS         4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_PDIV_SHIFT        12
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_PDIV_DEFAULT      0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_DIVIDERS :: reserved2 [11:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved2_MASK    0x00000c00
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved2_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved2_BITS    2
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_reserved2_SHIFT   10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_DIVIDERS :: NDIV_INT [09:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_NDIV_INT_MASK     0x000003ff
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_NDIV_INT_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_NDIV_INT_BITS     10
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_NDIV_INT_SHIFT    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS_NDIV_INT_DEFAULT  0x00000020
+
+/***************************************************************************
+ *PLL_FRAC_DIVIDER - PHY PLL fractional divider register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_FRAC_DIVIDER :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_reserved0_BITS 12
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_FRAC_DIVIDER :: NDIV_FRAC [19:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_NDIV_FRAC_MASK 0x000fffff
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_NDIV_FRAC_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_NDIV_FRAC_BITS 20
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_NDIV_FRAC_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER_NDIV_FRAC_DEFAULT 0x00000000
+
+/***************************************************************************
+ *PLL_SS_CONTROL - PHY PLL spread spectrum control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_SS_CONTROL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_reserved0_MASK  0xfff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_reserved0_BITS  12
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_SS_CONTROL :: SSC_STEP [19:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_STEP_MASK   0x000ffff0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_STEP_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_STEP_BITS   16
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_STEP_SHIFT  4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_STEP_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_SS_CONTROL :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_reserved1_MASK  0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_reserved1_BITS  3
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_SS_CONTROL :: SSC_MODE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_MODE_MASK   0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_MODE_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_MODE_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_MODE_SHIFT  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_CONTROL_SSC_MODE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *PLL_SS_LIMIT - PHY PLL spread spectrum limit register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_SS_LIMIT :: reserved0 [31:26] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_reserved0_MASK    0xfc000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_reserved0_BITS    6
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_reserved0_SHIFT   26
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_SS_LIMIT :: SSC_LIMIT [25:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_SSC_LIMIT_MASK    0x03fffff0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_SSC_LIMIT_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_SSC_LIMIT_BITS    22
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_SSC_LIMIT_SHIFT   4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_SSC_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PLL_SS_LIMIT :: reserved1 [03:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_reserved1_MASK    0x0000000f
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_reserved1_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_reserved1_BITS    4
+#define DDR34_CORE_PHY_CONTROL_REGS_PLL_SS_LIMIT_reserved1_SHIFT   0
+
+/***************************************************************************
+ *AUX_CONTROL - Aux Control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: AUX_CONTROL :: reserved0 [31:21] */
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved0_MASK     0xffe00000
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved0_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved0_BITS     11
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved0_SHIFT    21
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: AUX_CONTROL :: IS_ODT [20:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_ODT_MASK        0x001f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_ODT_ALIGN       0
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_ODT_BITS        5
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_ODT_SHIFT       16
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_ODT_DEFAULT     0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: AUX_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved1_MASK     0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved1_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved1_BITS     3
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved1_SHIFT    13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: AUX_CONTROL :: IS_CS [12:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_CS_MASK         0x00001f00
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_CS_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_CS_BITS         5
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_CS_SHIFT        8
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_CS_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: AUX_CONTROL :: reserved2 [07:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved2_MASK     0x000000e0
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved2_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved2_BITS     3
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_reserved2_SHIFT    5
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: AUX_CONTROL :: IS_AD [04:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_AD_MASK         0x0000001f
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_AD_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_AD_BITS         5
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_AD_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_AUX_CONTROL_IS_AD_DEFAULT      0x00000000
+
+/***************************************************************************
+ *IDLE_PAD_CONTROL - Idle mode pad control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_CONTROL :: IDLE [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDLE_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDLE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDLE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDLE_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDLE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_CONTROL :: DIB_MODE [30:30] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DIB_MODE_MASK 0x40000000
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DIB_MODE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DIB_MODE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DIB_MODE_SHIFT 30
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DIB_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_CONTROL :: reserved0 [29:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_reserved0_MASK 0x3ffffff0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_reserved0_BITS 26
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_reserved0_SHIFT 4
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_CONTROL :: RXENB [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_RXENB_MASK    0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_RXENB_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_RXENB_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_RXENB_SHIFT   3
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_RXENB_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_CONTROL :: IDDQ [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDDQ_MASK     0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDDQ_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDDQ_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDDQ_SHIFT    2
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_IDDQ_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_CONTROL :: DOUT_N [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_N_MASK   0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_N_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_N_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_N_SHIFT  1
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_N_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_CONTROL :: DOUT_P [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_P_MASK   0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_P_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_P_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_P_SHIFT  0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_CONTROL_DOUT_P_DEFAULT 0x00000000
+
+/***************************************************************************
+ *IDLE_PAD_ENABLE0 - Idle mode pad enable register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_ENABLE0 :: reserved0 [31:11] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_reserved0_MASK 0xfffff800
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_reserved0_BITS 21
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_reserved0_SHIFT 11
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_ENABLE0 :: IO_IDLE_ENABLE [10:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_IO_IDLE_ENABLE_MASK 0x000007ff
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_IO_IDLE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_IO_IDLE_ENABLE_BITS 11
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_IO_IDLE_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE0_IO_IDLE_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *IDLE_PAD_ENABLE1 - Idle mode pad enable register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_ENABLE1 :: reserved0 [31:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_reserved0_MASK 0xffc00000
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_reserved0_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_reserved0_SHIFT 22
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: IDLE_PAD_ENABLE1 :: IO_IDLE_ENABLE [21:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_IO_IDLE_ENABLE_MASK 0x003fffff
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_IO_IDLE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_IO_IDLE_ENABLE_BITS 22
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_IO_IDLE_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_IDLE_PAD_ENABLE1_IO_IDLE_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *DRIVE_PAD_CTL - PVT Compensation control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRIVE_PAD_CTL :: reserved0 [31:30] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_reserved0_MASK   0xc0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_reserved0_BITS   2
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_reserved0_SHIFT  30
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRIVE_PAD_CTL :: ADDR_CTL_PD_IDLE_STRENGTH [29:25] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_IDLE_STRENGTH_MASK 0x3e000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_IDLE_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_IDLE_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_IDLE_STRENGTH_SHIFT 25
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_IDLE_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRIVE_PAD_CTL :: ADDR_CTL_ND_IDLE_STRENGTH [24:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_IDLE_STRENGTH_MASK 0x01f00000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_IDLE_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_IDLE_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_IDLE_STRENGTH_SHIFT 20
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_IDLE_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRIVE_PAD_CTL :: ADDR_CTL_PD_TERM_STRENGTH [19:15] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_TERM_STRENGTH_MASK 0x000f8000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_TERM_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_TERM_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_TERM_STRENGTH_SHIFT 15
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_TERM_STRENGTH_DEFAULT 0x00000006
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRIVE_PAD_CTL :: ADDR_CTL_ND_TERM_STRENGTH [14:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_TERM_STRENGTH_MASK 0x00007c00
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_TERM_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_TERM_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_TERM_STRENGTH_SHIFT 10
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_TERM_STRENGTH_DEFAULT 0x00000006
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRIVE_PAD_CTL :: ADDR_CTL_PD_STRENGTH [09:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_STRENGTH_MASK 0x000003e0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_STRENGTH_SHIFT 5
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRIVE_PAD_CTL :: ADDR_CTL_ND_STRENGTH [04:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_STRENGTH_MASK 0x0000001f
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_STRENGTH_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL_ADDR_CTL_ND_STRENGTH_DEFAULT 0x0000001f
+
+/***************************************************************************
+ *STATIC_PAD_CTL - pad rx and tx characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: reserved0 [31:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_reserved0_MASK  0xf0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_reserved0_BITS  4
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_reserved0_SHIFT 28
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: AUTO_OEB [27:27] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_AUTO_OEB_MASK   0x08000000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_AUTO_OEB_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_AUTO_OEB_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_AUTO_OEB_SHIFT  27
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_AUTO_OEB_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_GDDR5 [26:26] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_GDDR5_MASK 0x04000000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_GDDR5_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_GDDR5_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_GDDR5_SHIFT 26
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_GDDR5_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_LPDDR [25:25] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_LPDDR_MASK 0x02000000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_LPDDR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_LPDDR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_LPDDR_SHIFT 25
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_LPDDR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_CLK1 [24:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK1_MASK  0x01000000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK1_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK1_SHIFT 24
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_CLK0 [23:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK0_MASK  0x00800000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK0_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK0_SHIFT 23
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CLK0_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_ODT [22:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_ODT_MASK   0x00400000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_ODT_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_ODT_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_ODT_SHIFT  22
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_ODT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_PAR [21:21] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_PAR_MASK   0x00200000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_PAR_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_PAR_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_PAR_SHIFT  21
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_PAR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_BA [20:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_BA_MASK    0x00100000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_BA_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_BA_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_BA_SHIFT   20
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_BA_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_AUX2 [19:19] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX2_MASK  0x00080000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX2_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX2_SHIFT 19
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX2_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_AUX1 [18:18] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX1_MASK  0x00040000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX1_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX1_SHIFT 18
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_AUX0 [17:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX0_MASK  0x00020000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX0_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX0_SHIFT 17
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_AUX0_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_CS1 [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CS1_MASK   0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CS1_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CS1_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CS1_SHIFT  16
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_CS1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_A15 [15:15] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A15_MASK   0x00008000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A15_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A15_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A15_SHIFT  15
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A15_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_A14 [14:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A14_MASK   0x00004000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A14_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A14_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A14_SHIFT  14
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A14_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_A13 [13:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A13_MASK   0x00002000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A13_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A13_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A13_SHIFT  13
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A13_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_A12 [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A12_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A12_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A12_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A12_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A12_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_A11 [11:11] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A11_MASK   0x00000800
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A11_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A11_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A11_SHIFT  11
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A11_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_A10 [10:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A10_MASK   0x00000400
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A10_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A10_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A10_SHIFT  10
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A10_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: IDDQ_A09 [09:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A09_MASK   0x00000200
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A09_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A09_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A09_SHIFT  9
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_IDDQ_A09_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: reserved1 [08:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_reserved1_MASK  0x000001fc
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_reserved1_BITS  7
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_reserved1_SHIFT 2
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STATIC_PAD_CTL :: RX_MODE [01:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_RX_MODE_MASK    0x00000003
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_RX_MODE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_RX_MODE_BITS    2
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_RX_MODE_SHIFT   0
+#define DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL_RX_MODE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *DRAM_CONFIG - DRAM configuration register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: INIT_MODE [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_INIT_MODE_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_INIT_MODE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_INIT_MODE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_INIT_MODE_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_INIT_MODE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: reserved0 [30:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_reserved0_MASK     0x70000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_reserved0_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_reserved0_BITS     3
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_reserved0_SHIFT    28
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: ECC_ENABLED [27:27] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ECC_ENABLED_MASK   0x08000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ECC_ENABLED_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ECC_ENABLED_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ECC_ENABLED_SHIFT  27
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ECC_ENABLED_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: SPLIT_DQ_BUS [26:26] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_SPLIT_DQ_BUS_MASK  0x04000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_SPLIT_DQ_BUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_SPLIT_DQ_BUS_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_SPLIT_DQ_BUS_SHIFT 26
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_SPLIT_DQ_BUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: BUS16 [25:25] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS16_MASK         0x02000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS16_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS16_BITS         1
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS16_SHIFT        25
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS16_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: BUS8 [24:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS8_MASK          0x01000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS8_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS8_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS8_SHIFT         24
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BUS8_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: reserved1 [23:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_reserved1_MASK     0x00ff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_reserved1_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_reserved1_BITS     8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_reserved1_SHIFT    16
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: EDC_MODE [15:15] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_EDC_MODE_MASK      0x00008000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_EDC_MODE_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_EDC_MODE_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_EDC_MODE_SHIFT     15
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_EDC_MODE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: RDQS_MODE [14:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_RDQS_MODE_MASK     0x00004000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_RDQS_MODE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_RDQS_MODE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_RDQS_MODE_SHIFT    14
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_RDQS_MODE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: GROUP_BITS [13:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_GROUP_BITS_MASK    0x00003000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_GROUP_BITS_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_GROUP_BITS_BITS    2
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_GROUP_BITS_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_GROUP_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: BANK_BITS [11:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BANK_BITS_MASK     0x00000c00
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BANK_BITS_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BANK_BITS_BITS     2
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BANK_BITS_SHIFT    10
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_BANK_BITS_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: COL_BITS [09:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_COL_BITS_MASK      0x00000300
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_COL_BITS_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_COL_BITS_BITS      2
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_COL_BITS_SHIFT     8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_COL_BITS_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: ROW_BITS [07:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ROW_BITS_MASK      0x000000f0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ROW_BITS_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ROW_BITS_BITS      4
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ROW_BITS_SHIFT     4
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_ROW_BITS_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_CONFIG :: DRAM_TYPE [03:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_DRAM_TYPE_MASK     0x0000000f
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_DRAM_TYPE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_DRAM_TYPE_BITS     4
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_DRAM_TYPE_SHIFT    0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG_DRAM_TYPE_DEFAULT  0x00000000
+
+/***************************************************************************
+ *DRAM_TIMING1 - DRAM timing register #1
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING1 :: TRAS [31:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRAS_MASK         0xff000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRAS_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRAS_BITS         8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRAS_SHIFT        24
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRAS_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING1 :: TRRD [23:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRRD_MASK         0x00ff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRRD_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRRD_BITS         8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRRD_SHIFT        16
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRRD_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING1 :: TRP [15:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRP_MASK          0x0000ff00
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRP_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRP_BITS          8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRP_SHIFT         8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRP_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING1 :: TRCD [07:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRCD_MASK         0x000000ff
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRCD_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRCD_BITS         8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRCD_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1_TRCD_DEFAULT      0x00000000
+
+/***************************************************************************
+ *DRAM_TIMING2 - DRAM timing register #2
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING2 :: TRTP [31:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TRTP_MASK         0xff000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TRTP_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TRTP_BITS         8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TRTP_SHIFT        24
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TRTP_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING2 :: TWR [23:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TWR_MASK          0x00ff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TWR_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TWR_BITS          8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TWR_SHIFT         16
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TWR_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING2 :: TCWL [15:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCWL_MASK         0x0000ff00
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCWL_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCWL_BITS         8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCWL_SHIFT        8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCWL_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING2 :: TCAS [07:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCAS_MASK         0x000000ff
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCAS_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCAS_BITS         8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCAS_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2_TCAS_DEFAULT      0x00000000
+
+/***************************************************************************
+ *DRAM_TIMING3 - DRAM timing register #3
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING3 :: reserved0 [31:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_reserved0_MASK    0xff000000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_reserved0_BITS    8
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_reserved0_SHIFT   24
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING3 :: TCAL [23:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TCAL_MASK         0x00f00000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TCAL_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TCAL_BITS         4
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TCAL_SHIFT        20
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TCAL_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING3 :: TRTW [19:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRTW_MASK         0x000f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRTW_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRTW_BITS         4
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRTW_SHIFT        16
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRTW_DEFAULT      0x00000004
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING3 :: TWTR [15:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TWTR_MASK         0x0000f000
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TWTR_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TWTR_BITS         4
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TWTR_SHIFT        12
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TWTR_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING3 :: TRFC [11:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRFC_MASK         0x00000fff
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRFC_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRFC_BITS         12
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRFC_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3_TRFC_DEFAULT      0x00000000
+
+/***************************************************************************
+ *DRAM_TIMING4 - DRAM timing register #4
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DRAM_TIMING4 :: temp [31:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING4_temp_MASK         0xffffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING4_temp_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING4_temp_BITS         32
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING4_temp_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING4_temp_DEFAULT      0x00000000
+
+/***************************************************************************
+ *VDL_CALIBRATE - PHY VDL calibration control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIBRATE :: reserved0 [31:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_reserved0_MASK   0xffffffc0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_reserved0_BITS   26
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_reserved0_SHIFT  6
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIBRATE :: HALF_STEPS [05:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_HALF_STEPS_MASK  0x00000020
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_HALF_STEPS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_HALF_STEPS_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_HALF_STEPS_SHIFT 5
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_HALF_STEPS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIBRATE :: UPDATE_FAST [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_FAST_MASK 0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_FAST_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_FAST_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_FAST_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_FAST_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIBRATE :: UPDATE_REGS [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_REGS_MASK 0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_REGS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_REGS_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_REGS_SHIFT 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_UPDATE_REGS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIBRATE :: CALIB_FTM2 [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_FTM2_MASK  0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_FTM2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_FTM2_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_FTM2_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_FTM2_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIBRATE :: CALIB_PHYBIST [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_PHYBIST_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_PHYBIST_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_PHYBIST_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_PHYBIST_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_PHYBIST_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIBRATE :: CALIB_ONCE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_ONCE_MASK  0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_ONCE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_ONCE_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_ONCE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE_CALIB_ONCE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CALIB_STATUS1 - PHY VDL calibration status register #1
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: reserved0 [31:18] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_reserved0_MASK 0xfffc0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_reserved0_SHIFT 18
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: CALIB_TOTAL_STEPS [17:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_TOTAL_STEPS_MASK 0x0003ff00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_TOTAL_STEPS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_TOTAL_STEPS_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_TOTAL_STEPS_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_TOTAL_STEPS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: reserved1 [07:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_reserved1_MASK 0x000000c0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_reserved1_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_reserved1_SHIFT 6
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: CALIB_BUS_ERROR [05:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_BUS_ERROR_MASK 0x00000020
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_BUS_ERROR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_BUS_ERROR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_BUS_ERROR_SHIFT 5
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_BUS_ERROR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: CALIB_REGS_DONE [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_REGS_DONE_MASK 0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_REGS_DONE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_REGS_DONE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_REGS_DONE_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_REGS_DONE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: CALIB_LOCK_6B [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_6B_MASK 0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_6B_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_6B_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_6B_SHIFT 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_6B_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: CALIB_LOCK_4B [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_4B_MASK 0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_4B_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_4B_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_4B_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_4B_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: CALIB_LOCK_2B [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_2B_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_2B_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_2B_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_2B_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_LOCK_2B_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS1 :: CALIB_IDLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_IDLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_IDLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_IDLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_IDLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1_CALIB_IDLE_DEFAULT 0x00000001
+
+/***************************************************************************
+ *VDL_CALIB_STATUS2 - PHY VDL calibration status register #2
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS2 :: reserved0 [31:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_reserved0_MASK 0xffc00000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_reserved0_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_reserved0_SHIFT 22
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS2 :: CALIB_4B_STEPS [21:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_4B_STEPS_MASK 0x003ff000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_4B_STEPS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_4B_STEPS_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_4B_STEPS_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_4B_STEPS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS2 :: reserved1 [11:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_reserved1_MASK 0x00000c00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_reserved1_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_reserved1_SHIFT 10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CALIB_STATUS2 :: CALIB_2B_STEPS [09:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_2B_STEPS_MASK 0x000003ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_2B_STEPS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_2B_STEPS_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_2B_STEPS_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS2_CALIB_2B_STEPS_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_MONITOR_CONTROL - PHY VDL delay monitoring control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_CONTROL :: reserved0 [31:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_reserved0_MASK 0xffc00000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_reserved0_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_reserved0_SHIFT 22
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_CONTROL :: INTERVAL [21:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_INTERVAL_MASK 0x003fff00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_INTERVAL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_INTERVAL_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_INTERVAL_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_INTERVAL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_CONTROL :: reserved1 [07:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_reserved1_MASK 0x000000f0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_reserved1_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_reserved1_SHIFT 4
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_CONTROL :: UPDATE [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_UPDATE_MASK 0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_UPDATE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_UPDATE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_UPDATE_SHIFT 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_UPDATE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_CONTROL :: FORCE [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_FORCE_MASK 0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_FORCE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_FORCE_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_CONTROL :: DATA_RATE [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_DATA_RATE_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_DATA_RATE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_DATA_RATE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_DATA_RATE_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_DATA_RATE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_CONTROL_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_MONITOR_REF - PHY VDL delay monitoring reference register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_REF :: reserved0 [31:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_reserved0_MASK 0xffc00000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_reserved0_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_reserved0_SHIFT 22
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_REF :: MONITOR_4B_STEPS [21:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_4B_STEPS_MASK 0x003ff000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_4B_STEPS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_4B_STEPS_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_4B_STEPS_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_4B_STEPS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_REF :: reserved1 [11:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_reserved1_MASK 0x00000c00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_reserved1_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_reserved1_SHIFT 10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_REF :: MONITOR_2B_STEPS [09:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_2B_STEPS_MASK 0x000003ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_2B_STEPS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_2B_STEPS_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_2B_STEPS_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_REF_MONITOR_2B_STEPS_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_MONITOR_STATUS - PHY VDL delay monitoring status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_STATUS :: reserved0 [31:29] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved0_MASK 0xe0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved0_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved0_SHIFT 29
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_STATUS :: MONITOR_BUS_ERROR [28:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_BUS_ERROR_MASK 0x10000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_BUS_ERROR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_BUS_ERROR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_BUS_ERROR_SHIFT 28
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_BUS_ERROR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_STATUS :: reserved1 [27:25] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved1_MASK 0x0e000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved1_SHIFT 25
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_STATUS :: MONITOR_ADJ [24:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_ADJ_MASK 0x01f00000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_ADJ_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_ADJ_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_ADJ_SHIFT 20
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_ADJ_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_STATUS :: MONITOR_CHANGE [19:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_CHANGE_MASK 0x000ff000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_CHANGE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_CHANGE_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_CHANGE_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_CHANGE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_STATUS :: reserved2 [11:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved2_MASK 0x00000c00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved2_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_reserved2_SHIFT 10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_STATUS :: MONITOR_TOTAL [09:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_TOTAL_MASK 0x000003ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_TOTAL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_TOTAL_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_TOTAL_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_STATUS_MONITOR_TOTAL_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_MONITOR_OVERRIDE - PHY VDL delay monitoring override register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OVERRIDE :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_BUSY_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OVERRIDE :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OVERRIDE :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_FORCE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OVERRIDE :: reserved1 [15:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved1_MASK 0x0000fe00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved1_BITS 7
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved1_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OVERRIDE :: ADJ [08:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ADJ_MASK  0x000001f0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ADJ_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ADJ_BITS  5
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ADJ_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ADJ_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OVERRIDE :: reserved2 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved2_MASK 0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_reserved2_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OVERRIDE :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OVERRIDE_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_MONITOR_OUT_CONTROL - PHY VDL delay monitoring output control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_CONTROL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_reserved0_BITS 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_CONTROL :: LOWER_LIMIT [19:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_LOWER_LIMIT_MASK 0x000ff000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_LOWER_LIMIT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_LOWER_LIMIT_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_LOWER_LIMIT_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_LOWER_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_CONTROL :: UPPER_LIMIT [11:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_UPPER_LIMIT_MASK 0x00000ff0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_UPPER_LIMIT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_UPPER_LIMIT_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_UPPER_LIMIT_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_UPPER_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_CONTROL :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_CONTROL_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_MONITOR_OUT_STATUS - PHY VDL delay monitoring output status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_STATUS :: reserved0 [31:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved0_MASK 0xff000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved0_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved0_SHIFT 24
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_STATUS :: MONITOR_CHANGE [23:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_CHANGE_MASK 0x00ff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_CHANGE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_CHANGE_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_CHANGE_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_CHANGE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_STATUS :: reserved1 [15:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved1_MASK 0x0000c000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved1_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved1_SHIFT 14
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_STATUS :: MONITOR_TOTAL [13:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_TOTAL_MASK 0x00003ff0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_TOTAL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_TOTAL_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_TOTAL_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_MONITOR_TOTAL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_STATUS :: reserved2 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved2_MASK 0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_reserved2_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_STATUS :: VALID [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_VALID_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_VALID_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_VALID_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_VALID_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_VALID_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_MONITOR_OUT_STATUS_CLEAR - PHY VDL delay monitoring output status clear register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_STATUS_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_reserved0_MASK 0xfffffffe
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_reserved0_BITS 31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_MONITOR_OUT_STATUS_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_CLEAR_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_CLEAR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_CLEAR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_CLEAR_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_MONITOR_OUT_STATUS_CLEAR_CLEAR_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD00 - DDR interface signal AD[00] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD00 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD00 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD00 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD00 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD00 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD00 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD00 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD01 - DDR interface signal AD[01] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD01 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD01 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD01 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD01 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD01 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD01 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD01 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD02 - DDR interface signal AD[02] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD02 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD02 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD02 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD02 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD02 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD02 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD02 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD03 - DDR interface signal AD[03] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD03 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD03 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD03 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD03 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD03 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD03 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD03 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD04 - DDR interface signal AD[04] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD04 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD04 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD04 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD04 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD04 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD04 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD04 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD05 - DDR interface signal AD[05] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD05 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD05 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD05 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD05 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD05 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD05 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD05 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD06 - DDR interface signal AD[06] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD06 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD06 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD06 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD06 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD06 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD06 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD06 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD07 - DDR interface signal AD[07] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD07 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD07 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD07 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD07 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD07 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD07 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD07 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD08 - DDR interface signal AD[08] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD08 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD08 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD08 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD08 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD08 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD08 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD08 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD09 - DDR interface signal AD[09] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD09 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD09 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD09 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD09 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD09 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD09 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD09 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD10 - DDR interface signal AD[10] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD10 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD10 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD10 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD10 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD10 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD10 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD10 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD11 - DDR interface signal AD[11] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD11 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD11 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD11 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD11 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD11 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD11 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD11 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD12 - DDR interface signal AD[12] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD12 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD12 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD12 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD12 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD12 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD12 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD12 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD13 - DDR interface signal AD[13] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD13 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD13 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD13 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD13 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD13 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD13 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD13 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD14 - DDR interface signal AD[14] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD14 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD14 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD14 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD14 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD14 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD14 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD14 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AD15 - DDR interface signal AD[15] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD15 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD15 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD15 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD15 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD15 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD15 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AD15 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_BA0 - DDR interface signal BA[0] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA0 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA0 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_BA1 - DDR interface signal BA[1] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA1 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA1 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_BA2 - DDR interface signal BA[2] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA2 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA2 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA2 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA2 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA2 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA2 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_BA2 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AUX0 - DDR interface signal AUX[0] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX0 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX0 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AUX1 - DDR interface signal AUX[1] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX1 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX1 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_AUX2 - DDR interface signal AUX[2] VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX2 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX2 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX2 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX2 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX2 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX2 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_AUX2 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_CS0 - DDR interface signal CS0 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS0 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS0 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_CS1 - DDR interface signal CS1 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS1 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CS1 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_PAR - DDR interface signal PAR VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_PAR :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_PAR :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_PAR :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_PAR :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_PAR :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_PAR :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_PAR :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RAS_N - DDR interface signal RAS_N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RAS_N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_BUSY_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RAS_N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RAS_N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_FORCE_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RAS_N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RAS_N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RAS_N :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RAS_N :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_CAS_N - DDR interface signal CAS_N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CAS_N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_BUSY_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CAS_N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CAS_N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_FORCE_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CAS_N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CAS_N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CAS_N :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CAS_N :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_CKE - DDR interface signal CKE0 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CKE :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CKE :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CKE :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CKE :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CKE :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CKE :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_CKE :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RST_N - DDR interface signal RST_N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RST_N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_BUSY_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RST_N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RST_N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_FORCE_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RST_N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RST_N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RST_N :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_RST_N :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_ODT - DDR interface signal ODT0 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_ODT :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_ODT :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_ODT :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_ODT :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_ODT :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_ODT :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_ODT :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WE_N - DDR interface signal WE_N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_WE_N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_BUSY_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_WE_N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_WE_N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_FORCE_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_WE_N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_WE_N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_WE_N :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_WE_N :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_DDR_CK_P - DDR interface signal DDR_CK-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_BUSY_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_FORCE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_P :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_P :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_DDR_CK_N - DDR interface signal DDR_CK-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_BUSY_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_FORCE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_N :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CONTROL_DDR_CK_N :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_DDR_CK_N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CLK_CONTROL - DDR interface signal Write Leveling CLK VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CLK_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CLK_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CLK_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CLK_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CLK_CONTROL :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CLK_CONTROL :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_CLK_CONTROL :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_CLK_CONTROL_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_LDE_CONTROL - DDR interface signal Write Leveling Capture Enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_LDE_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_BUSY_MASK      0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_BUSY_SHIFT     31
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_LDE_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved0_BITS 14
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_LDE_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_FORCE_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_FORCE_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_FORCE_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_FORCE_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_FORCE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_LDE_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_LDE_CONTROL :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_ADJ_EN_MASK    0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_ADJ_EN_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_ADJ_EN_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_ADJ_EN_SHIFT   12
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_LDE_CONTROL :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VDL_LDE_CONTROL :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_VDL_STEP_MASK  0x000001ff
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_VDL_STEP_BITS  9
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VDL_LDE_CONTROL_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *REFRESH - Refresh engine controller
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: REFRESH :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_reserved0_MASK         0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_reserved0_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_reserved0_BITS         15
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_reserved0_SHIFT        17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: REFRESH :: ENABLE [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_ENABLE_MASK            0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_ENABLE_ALIGN           0
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_ENABLE_BITS            1
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_ENABLE_SHIFT           16
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_ENABLE_DEFAULT         0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: REFRESH :: PERIOD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_PERIOD_MASK            0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_PERIOD_ALIGN           0
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_PERIOD_BITS            16
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_PERIOD_SHIFT           0
+#define DDR34_CORE_PHY_CONTROL_REGS_REFRESH_PERIOD_DEFAULT         0x00000000
+
+/***************************************************************************
+ *UPDATE_VDL - Update VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL :: reserved0 [31:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_reserved0_MASK      0xffffffc0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_reserved0_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_reserved0_BITS      26
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_reserved0_SHIFT     6
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL :: MODE [05:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_MODE_MASK           0x00000030
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_MODE_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_MODE_BITS           2
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_MODE_SHIFT          4
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_MODE_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL :: reserved1 [03:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_reserved1_MASK      0x0000000c
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_reserved1_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_reserved1_BITS      2
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_reserved1_SHIFT     2
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL :: DISABLE_INPUT [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_DISABLE_INPUT_MASK  0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_DISABLE_INPUT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_DISABLE_INPUT_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_DISABLE_INPUT_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_DISABLE_INPUT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_ENABLE_MASK         0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_ENABLE_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_ENABLE_BITS         1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_ENABLE_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_ENABLE_DEFAULT      0x00000000
+
+/***************************************************************************
+ *UPDATE_VDL_SNOOP1 - Update VDL snoop control register #1
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP1 :: reserved0 [31:30] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved0_MASK 0xc0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved0_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved0_SHIFT 30
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP1 :: MODE [29:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MODE_MASK    0x30000000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MODE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MODE_BITS    2
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MODE_SHIFT   28
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP1 :: reserved1 [27:27] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved1_MASK 0x08000000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved1_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved1_SHIFT 27
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP1 :: MASK [26:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MASK_MASK    0x07ff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MASK_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MASK_BITS    11
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MASK_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_MASK_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP1 :: reserved2 [15:15] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved2_MASK 0x00008000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved2_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved2_SHIFT 15
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP1 :: CMD [14:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_CMD_MASK     0x00007ff0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_CMD_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_CMD_BITS     11
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_CMD_SHIFT    4
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_CMD_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP1 :: reserved3 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved3_MASK 0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved3_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved3_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_reserved3_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP1 :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_ENABLE_MASK  0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_ENABLE_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP1_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *UPDATE_VDL_SNOOP2 - Update VDL snoop control register #2
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP2 :: reserved0 [31:30] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved0_MASK 0xc0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved0_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved0_SHIFT 30
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP2 :: MODE [29:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MODE_MASK    0x30000000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MODE_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MODE_BITS    2
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MODE_SHIFT   28
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP2 :: reserved1 [27:27] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved1_MASK 0x08000000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved1_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved1_SHIFT 27
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP2 :: MASK [26:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MASK_MASK    0x07ff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MASK_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MASK_BITS    11
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MASK_SHIFT   16
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_MASK_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP2 :: reserved2 [15:15] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved2_MASK 0x00008000
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved2_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved2_SHIFT 15
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP2 :: CMD [14:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_CMD_MASK     0x00007ff0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_CMD_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_CMD_BITS     11
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_CMD_SHIFT    4
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_CMD_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP2 :: reserved3 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved3_MASK 0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved3_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved3_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_reserved3_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: UPDATE_VDL_SNOOP2 :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_ENABLE_MASK  0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_ENABLE_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_UPDATE_VDL_SNOOP2_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *COMMAND_REG1 - DRAM Command Register #1
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: MCP [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_MCP_MASK          0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_MCP_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_MCP_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_MCP_SHIFT         31
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_MCP_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: CS [30:29] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CS_MASK           0x60000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CS_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CS_BITS           2
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CS_SHIFT          29
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CS_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: AUX [28:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AUX_MASK          0x1f000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AUX_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AUX_BITS          5
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AUX_SHIFT         24
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AUX_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: ACT [23:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_ACT_MASK          0x00800000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_ACT_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_ACT_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_ACT_SHIFT         23
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_ACT_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: WE [22:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_WE_MASK           0x00400000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_WE_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_WE_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_WE_SHIFT          22
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_WE_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: CAS [21:21] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CAS_MASK          0x00200000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CAS_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CAS_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CAS_SHIFT         21
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_CAS_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: RAS [20:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_RAS_MASK          0x00100000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_RAS_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_RAS_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_RAS_SHIFT         20
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_RAS_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: BA [19:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_BA_MASK           0x000f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_BA_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_BA_BITS           4
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_BA_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_BA_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG1 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AD_MASK           0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AD_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AD_BITS           16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AD_SHIFT          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG1_AD_DEFAULT        0x00000000
+
+/***************************************************************************
+ *COMMAND_AUX_REG1 - DRAM AUX_N Command Register #1
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_AUX_REG1 :: reserved0 [31:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_reserved0_MASK 0xffffffe0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_reserved0_BITS 27
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_reserved0_SHIFT 5
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_AUX_REG1 :: AUX [04:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_AUX_MASK      0x0000001f
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_AUX_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_AUX_BITS      5
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_AUX_SHIFT     0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG1_AUX_DEFAULT   0x00000000
+
+/***************************************************************************
+ *COMMAND_REG2 - DRAM Command Register #2
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: MCP [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_MCP_MASK          0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_MCP_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_MCP_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_MCP_SHIFT         31
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_MCP_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: CS [30:29] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CS_MASK           0x60000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CS_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CS_BITS           2
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CS_SHIFT          29
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CS_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: AUX [28:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AUX_MASK          0x1f000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AUX_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AUX_BITS          5
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AUX_SHIFT         24
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AUX_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: ACT [23:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_ACT_MASK          0x00800000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_ACT_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_ACT_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_ACT_SHIFT         23
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_ACT_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: WE [22:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_WE_MASK           0x00400000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_WE_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_WE_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_WE_SHIFT          22
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_WE_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: CAS [21:21] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CAS_MASK          0x00200000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CAS_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CAS_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CAS_SHIFT         21
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_CAS_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: RAS [20:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_RAS_MASK          0x00100000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_RAS_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_RAS_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_RAS_SHIFT         20
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_RAS_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: BA [19:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_BA_MASK           0x000f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_BA_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_BA_BITS           4
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_BA_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_BA_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG2 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AD_MASK           0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AD_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AD_BITS           16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AD_SHIFT          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG2_AD_DEFAULT        0x00000000
+
+/***************************************************************************
+ *COMMAND_AUX_REG2 - DRAM AUX_N Command Register #2
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_AUX_REG2 :: reserved0 [31:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_reserved0_MASK 0xffffffe0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_reserved0_BITS 27
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_reserved0_SHIFT 5
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_AUX_REG2 :: AUX [04:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_AUX_MASK      0x0000001f
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_AUX_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_AUX_BITS      5
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_AUX_SHIFT     0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG2_AUX_DEFAULT   0x00000000
+
+/***************************************************************************
+ *COMMAND_REG3 - DRAM Command Register #3
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: MCP [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_MCP_MASK          0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_MCP_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_MCP_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_MCP_SHIFT         31
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_MCP_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: CS [30:29] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CS_MASK           0x60000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CS_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CS_BITS           2
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CS_SHIFT          29
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CS_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: AUX [28:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AUX_MASK          0x1f000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AUX_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AUX_BITS          5
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AUX_SHIFT         24
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AUX_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: ACT [23:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_ACT_MASK          0x00800000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_ACT_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_ACT_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_ACT_SHIFT         23
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_ACT_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: WE [22:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_WE_MASK           0x00400000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_WE_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_WE_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_WE_SHIFT          22
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_WE_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: CAS [21:21] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CAS_MASK          0x00200000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CAS_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CAS_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CAS_SHIFT         21
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_CAS_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: RAS [20:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_RAS_MASK          0x00100000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_RAS_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_RAS_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_RAS_SHIFT         20
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_RAS_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: BA [19:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_BA_MASK           0x000f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_BA_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_BA_BITS           4
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_BA_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_BA_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG3 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AD_MASK           0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AD_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AD_BITS           16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AD_SHIFT          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG3_AD_DEFAULT        0x00000000
+
+/***************************************************************************
+ *COMMAND_AUX_REG3 - DRAM AUX_N Command Register #3
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_AUX_REG3 :: reserved0 [31:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_reserved0_MASK 0xffffffe0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_reserved0_BITS 27
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_reserved0_SHIFT 5
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_AUX_REG3 :: AUX [04:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_AUX_MASK      0x0000001f
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_AUX_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_AUX_BITS      5
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_AUX_SHIFT     0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG3_AUX_DEFAULT   0x00000000
+
+/***************************************************************************
+ *COMMAND_REG4 - DRAM Command Register #4
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: MCP [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_MCP_MASK          0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_MCP_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_MCP_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_MCP_SHIFT         31
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_MCP_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: CS [30:29] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CS_MASK           0x60000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CS_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CS_BITS           2
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CS_SHIFT          29
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CS_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: AUX [28:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AUX_MASK          0x1f000000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AUX_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AUX_BITS          5
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AUX_SHIFT         24
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AUX_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: ACT [23:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_ACT_MASK          0x00800000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_ACT_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_ACT_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_ACT_SHIFT         23
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_ACT_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: WE [22:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_WE_MASK           0x00400000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_WE_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_WE_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_WE_SHIFT          22
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_WE_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: CAS [21:21] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CAS_MASK          0x00200000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CAS_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CAS_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CAS_SHIFT         21
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_CAS_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: RAS [20:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_RAS_MASK          0x00100000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_RAS_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_RAS_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_RAS_SHIFT         20
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_RAS_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: BA [19:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_BA_MASK           0x000f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_BA_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_BA_BITS           4
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_BA_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_BA_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG4 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AD_MASK           0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AD_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AD_BITS           16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AD_SHIFT          0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG4_AD_DEFAULT        0x00000000
+
+/***************************************************************************
+ *COMMAND_AUX_REG4 - DRAM AUX_N Command Register #4
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_AUX_REG4 :: reserved0 [31:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_reserved0_MASK 0xffffffe0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_reserved0_BITS 27
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_reserved0_SHIFT 5
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_AUX_REG4 :: AUX [04:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_AUX_MASK      0x0000001f
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_AUX_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_AUX_BITS      5
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_AUX_SHIFT     0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_AUX_REG4_AUX_DEFAULT   0x00000000
+
+/***************************************************************************
+ *COMMAND_REG_TIMER - DRAM Command Timer Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG_TIMER :: reserved0 [31:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_reserved0_MASK 0xffff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_reserved0_BITS 16
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_reserved0_SHIFT 16
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG_TIMER :: INIT_VAL [15:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_INIT_VAL_MASK 0x0000ff00
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_INIT_VAL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_INIT_VAL_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_INIT_VAL_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_INIT_VAL_DEFAULT 0x0000000f
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: COMMAND_REG_TIMER :: COUNT [07:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_COUNT_MASK   0x000000ff
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_COUNT_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_COUNT_BITS   8
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_COUNT_SHIFT  0
+#define DDR34_CORE_PHY_CONTROL_REGS_COMMAND_REG_TIMER_COUNT_DEFAULT 0x00000000
+
+/***************************************************************************
+ *MODE_REG0 - DDR3/DDR4/GDDR5 Mode Register 0 and LPDDR Mode Register 1
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG0 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG0 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG0 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG0_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG1 - DDR3/DDR4/GDDR5 Mode Register 1 and LPDDR Mode Register 2
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG1 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG1 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG1 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG1_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG2 - DDR3/DDR4/GDDR5 Mode Register 2 and LPDDR Mode Register 3
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG2 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG2 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG2 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG2_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG3 - DDR3/DDR4/GDDR5 Mode Register 3 and LPDDR Mode Register 9
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG3 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG3 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG3 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG3_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG4 - DDR4/GDDR5 Mode Register 4 and LPDDR Mode Register 10
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG4 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG4 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG4 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG4_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG5 - DDR4/GDDR5 Mode Register 5 and LPDDR Mode Register 16
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG5 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG5 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG5 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG5_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG6 - DDR4/GDDR5 Mode Register 6 and LPDDR Mode Register 17
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG6 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG6 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG6 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG6_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG7 - DDR4/GDDR5 Mode Register 7 and LPDDR Mode Register 41
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG7 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG7 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG7 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG7_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG8 - GDDR5 Mode Register 8 and LPDDR Mode Register 42
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG8 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_reserved0_MASK       0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_reserved0_BITS       15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_reserved0_SHIFT      17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG8 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_VALID_MASK           0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_VALID_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_VALID_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_VALID_SHIFT          16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_VALID_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG8 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_AD_MASK              0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_AD_ALIGN             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_AD_BITS              16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_AD_SHIFT             0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG8_AD_DEFAULT           0x00000000
+
+/***************************************************************************
+ *MODE_REG15 - GDDR5 Mode Register 15 and LPDDR Mode Register 48
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG15 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_reserved0_MASK      0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_reserved0_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_reserved0_BITS      15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_reserved0_SHIFT     17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG15 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_VALID_MASK          0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_VALID_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_VALID_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_VALID_SHIFT         16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_VALID_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG15 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_AD_MASK             0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_AD_ALIGN            0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_AD_BITS             16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_AD_SHIFT            0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG15_AD_DEFAULT          0x00000000
+
+/***************************************************************************
+ *MODE_REG63 - LPDDR Mode Register 63
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG63 :: reserved0 [31:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_reserved0_MASK      0xfffe0000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_reserved0_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_reserved0_BITS      15
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_reserved0_SHIFT     17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG63 :: VALID [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_VALID_MASK          0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_VALID_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_VALID_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_VALID_SHIFT         16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_VALID_DEFAULT       0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: MODE_REG63 :: AD [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_AD_MASK             0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_AD_ALIGN            0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_AD_BITS             16
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_AD_SHIFT            0
+#define DDR34_CORE_PHY_CONTROL_REGS_MODE_REG63_AD_DEFAULT          0x00000000
+
+/***************************************************************************
+ *ALERT_CLEAR - DDR4 Alert status clear register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: ALERT_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_reserved0_MASK     0xfffffffe
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_reserved0_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_reserved0_BITS     31
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_reserved0_SHIFT    1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ALERT_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_CLEAR_MASK         0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_CLEAR_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_CLEAR_BITS         1
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_CLEAR_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_CLEAR_CLEAR_DEFAULT      0x00000000
+
+/***************************************************************************
+ *ALERT_STATUS - DDR4 Alert status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: ALERT_STATUS :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_reserved0_MASK    0xfffffffe
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_reserved0_BITS    31
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_reserved0_SHIFT   1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ALERT_STATUS :: STATUS [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_STATUS_MASK       0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_STATUS_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_STATUS_BITS       1
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_STATUS_SHIFT      0
+#define DDR34_CORE_PHY_CONTROL_REGS_ALERT_STATUS_STATUS_DEFAULT    0x00000000
+
+/***************************************************************************
+ *CA_PARITY - DDR4 CA parity control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PARITY :: reserved0 [31:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_reserved0_MASK       0xfffffffc
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_reserved0_BITS       30
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_reserved0_SHIFT      2
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PARITY :: ERROR [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ERROR_MASK           0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ERROR_ALIGN          0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ERROR_BITS           1
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ERROR_SHIFT          1
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ERROR_DEFAULT        0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PARITY :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ENABLE_MASK          0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ENABLE_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ENABLE_BITS          1
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ENABLE_SHIFT         0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PARITY_ENABLE_DEFAULT       0x00000000
+
+/***************************************************************************
+ *CA_PLAYBACK_CONTROL - GDDR5 CA playback control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_CONTROL :: reserved0 [31:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_reserved0_MASK 0xfffff000
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_reserved0_BITS 20
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_reserved0_SHIFT 12
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_CONTROL :: COUNT [11:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_COUNT_MASK 0x00000ff0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_COUNT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_COUNT_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_COUNT_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_COUNT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_CONTROL :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_CONTROL :: SAMPLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_SAMPLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_SAMPLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_SAMPLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_SAMPLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_CONTROL_SAMPLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *CA_PLAYBACK_STATUS0 - LPDDR3 and GDDR5 CA playback status register0
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_STATUS0 :: VALID [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_VALID_MASK 0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_VALID_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_VALID_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_VALID_SHIFT 31
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_VALID_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_STATUS0 :: reserved0 [30:26] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_reserved0_MASK 0x7c000000
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_reserved0_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_reserved0_SHIFT 26
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_STATUS0 :: DATA1 [25:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA1_MASK 0x03ff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA1_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA1_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_STATUS0 :: reserved1 [15:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_reserved1_MASK 0x0000fc00
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_reserved1_BITS 6
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_reserved1_SHIFT 10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: CA_PLAYBACK_STATUS0 :: DATA0 [09:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA0_MASK 0x000003ff
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA0_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA0_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_CA_PLAYBACK_STATUS0_DATA0_DEFAULT 0x00000000
+
+/***************************************************************************
+ *WRITE_LEVELING_CONTROL - Write leveling control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_CONTROL :: reserved0 [31:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_reserved0_MASK 0xffff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_reserved0_BITS 16
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_reserved0_SHIFT 16
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_CONTROL :: COUNT [15:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_COUNT_MASK 0x0000ff00
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_COUNT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_COUNT_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_COUNT_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_COUNT_DEFAULT 0x0000000f
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_CONTROL :: reserved1 [07:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_reserved1_MASK 0x000000f8
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_reserved1_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_reserved1_SHIFT 3
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_CONTROL :: SAMPLE [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_SAMPLE_MASK 0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_SAMPLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_SAMPLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_SAMPLE_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_SAMPLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_CONTROL :: CONTINUOUS [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_CONTINUOUS_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_CONTINUOUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_CONTINUOUS_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_CONTINUOUS_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_CONTINUOUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_CONTROL_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *WRITE_LEVELING_STATUS - Write leveling status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_STATUS :: reserved0 [31:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_reserved0_MASK 0xffffc000
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_reserved0_BITS 18
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_reserved0_SHIFT 14
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_STATUS :: EDC [13:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_EDC_MASK 0x00003e00
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_EDC_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_EDC_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_EDC_SHIFT 9
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_EDC_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_STATUS :: STATUS [08:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_STATUS_MASK 0x000001f0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_STATUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_STATUS_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_STATUS_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_STATUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_STATUS :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_reserved1_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_LEVELING_STATUS :: VALID [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_VALID_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_VALID_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_VALID_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_VALID_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_LEVELING_STATUS_VALID_DEFAULT 0x00000000
+
+/***************************************************************************
+ *READ_ENABLE_CONTROL - Read enable test cycle control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: reserved0 [31:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_reserved0_MASK 0xffffe000
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_reserved0_BITS 19
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_reserved0_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: TEST_CYCLE [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_TEST_CYCLE_MASK 0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_TEST_CYCLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_TEST_CYCLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_TEST_CYCLE_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_TEST_CYCLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: SELECT [11:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_SELECT_MASK 0x00000f00
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_SELECT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_SELECT_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_SELECT_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_SELECT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: reserved1 [07:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_reserved1_MASK 0x000000c0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_reserved1_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_reserved1_SHIFT 6
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: CS_N [05:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_CS_N_MASK  0x00000030
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_CS_N_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_CS_N_BITS  2
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_CS_N_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_CS_N_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: EDC_DATA [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_DATA_MASK 0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_DATA_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_DATA_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_DATA_SHIFT 3
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_DATA_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: EDC_PHASE [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_PHASE_MASK 0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_PHASE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_PHASE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_PHASE_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_EDC_PHASE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: DQS [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_DQS_MASK   0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_DQS_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_DQS_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_DQS_SHIFT  1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_DQS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_CONTROL_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *READ_ENABLE_STATUS - Read enable test cycle status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved0_BITS 12
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: DATA [19:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_DATA_MASK   0x000ff000
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_DATA_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_DATA_BITS   8
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_DATA_SHIFT  12
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_DATA_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: reserved1 [11:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved1_MASK 0x00000fc0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved1_BITS 6
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved1_SHIFT 6
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: BL1_STATUS [05:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL1_STATUS_MASK 0x00000020
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL1_STATUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL1_STATUS_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL1_STATUS_SHIFT 5
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL1_STATUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: BL0_STATUS [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL0_STATUS_MASK 0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL0_STATUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL0_STATUS_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL0_STATUS_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_BL0_STATUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: reserved2 [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved2_MASK 0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved2_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_reserved2_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: READ_ENABLE_STATUS :: VALID [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_VALID_MASK  0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_VALID_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_VALID_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_VALID_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_READ_ENABLE_STATUS_VALID_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_LFSR_SEED - Traffic generator seed register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_LFSR_SEED :: SEED [31:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_LFSR_SEED_SEED_MASK 0xffffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_LFSR_SEED_SEED_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_LFSR_SEED_SEED_BITS 32
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_LFSR_SEED_SEED_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_LFSR_SEED_SEED_DEFAULT 0xba5eba11
+
+/***************************************************************************
+ *TRAFFIC_GEN_ADDRESS1 - Traffic generator address register #1
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ADDRESS1 :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_reserved0_BITS 12
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ADDRESS1 :: BANK [19:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_BANK_MASK 0x000f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_BANK_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_BANK_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_BANK_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_BANK_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ADDRESS1 :: ROW [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_ROW_MASK  0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_ROW_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_ROW_BITS  16
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_ROW_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS1_ROW_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_ADDRESS2 - Traffic generator address register #2
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ADDRESS2 :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_reserved0_BITS 12
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ADDRESS2 :: BANK [19:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_BANK_MASK 0x000f0000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_BANK_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_BANK_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_BANK_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_BANK_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ADDRESS2 :: ROW [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_ROW_MASK  0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_ROW_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_ROW_BITS  16
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_ROW_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ADDRESS2_ROW_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_CONTROL - Traffic generator control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: reserved0 [31:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_reserved0_MASK 0xffffe000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_reserved0_BITS 19
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_reserved0_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: DIAG_WRO [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_MASK 0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: DIAG_WRO_RD [11:11] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_RD_MASK 0x00000800
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_RD_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_RD_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_RD_SHIFT 11
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WRO_RD_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: DIAG_WR_RD [10:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WR_RD_MASK 0x00000400
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WR_RD_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WR_RD_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WR_RD_SHIFT 10
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_DIAG_WR_RD_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: WR_NOISE [09:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_WR_NOISE_MASK 0x00000200
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_WR_NOISE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_WR_NOISE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_WR_NOISE_SHIFT 9
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_WR_NOISE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: RD_NOISE [08:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_NOISE_MASK 0x00000100
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_NOISE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_NOISE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_NOISE_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_NOISE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: CLEAR_DRAM [07:07] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_CLEAR_DRAM_MASK 0x00000080
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_CLEAR_DRAM_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_CLEAR_DRAM_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_CLEAR_DRAM_SHIFT 7
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_CLEAR_DRAM_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: MASK_DM [06:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MASK_DM_MASK 0x00000040
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MASK_DM_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MASK_DM_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MASK_DM_SHIFT 6
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MASK_DM_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: INIT_LFSR [05:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_INIT_LFSR_MASK 0x00000020
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_INIT_LFSR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_INIT_LFSR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_INIT_LFSR_SHIFT 5
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_INIT_LFSR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: FIFO [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_FIFO_MASK  0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_FIFO_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_FIFO_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_FIFO_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_FIFO_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: MPR [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MPR_MASK   0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MPR_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MPR_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MPR_SHIFT  3
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_MPR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: RD_WR [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_WR_MASK 0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_WR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_WR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_WR_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_WR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: RD_EN [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_EN_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_EN_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_EN_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_EN_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_RD_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_CONTROL_ENABLE_SHIFT 0
+
+/***************************************************************************
+ *TRAFFIC_GEN_DATA_CONTROL - Traffic generator data control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_DATA_CONTROL :: reserved0 [31:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_reserved0_MASK 0xffc00000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_reserved0_BITS 10
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_reserved0_SHIFT 22
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_DATA_CONTROL :: PATTERN [21:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_PATTERN_MASK 0x00300000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_PATTERN_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_PATTERN_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_PATTERN_SHIFT 20
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_PATTERN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_DATA_CONTROL :: LENGTH [19:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_LENGTH_MASK 0x000fffff
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_LENGTH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_LENGTH_BITS 20
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_LENGTH_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DATA_CONTROL_LENGTH_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_DQ_MASK - Traffic generator DQ mask register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_DQ_MASK :: MASK [31:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_MASK_MASK_MASK  0xffffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_MASK_MASK_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_MASK_MASK_BITS  32
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_MASK_MASK_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_MASK_MASK_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_ECC_DQ_MASK - Traffic generator ECC DQ mask register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ECC_DQ_MASK :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_reserved0_MASK 0xfffffff0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_reserved0_BITS 28
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_reserved0_SHIFT 4
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ECC_DQ_MASK :: MASK [03:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_MASK_MASK 0x0000000f
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_MASK_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_MASK_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_MASK_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_DQ_MASK_MASK_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_STATUS - Traffic generator status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_STATUS :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_reserved0_MASK 0xfffffffe
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_reserved0_BITS 31
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_STATUS :: BUSY [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_BUSY_MASK   0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_BUSY_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_BUSY_SHIFT  0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_STATUS_BUSY_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_DQ_STATUS - Traffic generator DQ status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_DQ_STATUS :: STATUS [31:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_STATUS_STATUS_MASK 0xffffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_STATUS_STATUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_STATUS_STATUS_BITS 32
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_STATUS_STATUS_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_DQ_STATUS_STATUS_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_ECC_STATUS - Traffic generator ECC DQ status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ECC_STATUS :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_reserved0_MASK 0xfffffff0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_reserved0_BITS 28
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_reserved0_SHIFT 4
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ECC_STATUS :: STATUS [03:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_STATUS_MASK 0x0000000f
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_STATUS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_STATUS_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_STATUS_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ECC_STATUS_STATUS_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_ERR_CNT_CONTROL - Traffic generator error count control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ERR_CNT_CONTROL :: reserved0 [31:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_reserved0_MASK 0xfffffe00
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_reserved0_BITS 23
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_reserved0_SHIFT 9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ERR_CNT_CONTROL :: DQ_SEL [08:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_DQ_SEL_MASK 0x000001f0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_DQ_SEL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_DQ_SEL_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_DQ_SEL_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_DQ_SEL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ERR_CNT_CONTROL :: reserved1 [03:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_reserved1_MASK 0x0000000c
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_reserved1_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_reserved1_SHIFT 2
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ERR_CNT_CONTROL :: CLEAR [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_CLEAR_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_CLEAR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_CLEAR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_CLEAR_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_CLEAR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ERR_CNT_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_CONTROL_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *TRAFFIC_GEN_ERR_CNT_STATUS - Traffic generator error count status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ERR_CNT_STATUS :: reserved0 [31:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_reserved0_MASK 0xffff0000
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_reserved0_BITS 16
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_reserved0_SHIFT 16
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: TRAFFIC_GEN_ERR_CNT_STATUS :: COUNT [15:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_COUNT_MASK 0x0000ffff
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_COUNT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_COUNT_BITS 16
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_COUNT_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_TRAFFIC_GEN_ERR_CNT_STATUS_COUNT_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VIRTUAL_VTT_CONTROL - Virtual VTT Control and Status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: reserved0 [31:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved0_MASK 0xfffff000
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved0_BITS 20
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved0_SHIFT 12
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: reserved_for_eco1 [11:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved_for_eco1_MASK 0x00000f00
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved_for_eco1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved_for_eco1_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved_for_eco1_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_reserved_for_eco1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: MAX_NOISE [07:07] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_MAX_NOISE_MASK 0x00000080
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_MAX_NOISE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_MAX_NOISE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_MAX_NOISE_SHIFT 7
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_MAX_NOISE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: LOW_NOISE [06:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_NOISE_MASK 0x00000040
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_NOISE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_NOISE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_NOISE_SHIFT 6
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_NOISE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: LOW_VTT [05:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_VTT_MASK 0x00000020
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_VTT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_VTT_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_VTT_SHIFT 5
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_LOW_VTT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: HIGH_VTT [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_HIGH_VTT_MASK 0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_HIGH_VTT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_HIGH_VTT_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_HIGH_VTT_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_HIGH_VTT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: ERROR_RESET [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ERROR_RESET_MASK 0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ERROR_RESET_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ERROR_RESET_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ERROR_RESET_SHIFT 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ERROR_RESET_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: ENABLE_CTL_IDLE [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CTL_IDLE_MASK 0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CTL_IDLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CTL_IDLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CTL_IDLE_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CTL_IDLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: ENABLE_CS_IDLE [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CS_IDLE_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CS_IDLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CS_IDLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CS_IDLE_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CS_IDLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONTROL :: ENABLE_CKE_IDLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CKE_IDLE_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CKE_IDLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CKE_IDLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CKE_IDLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL_ENABLE_CKE_IDLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VIRTUAL_VTT_STATUS - Virtual VTT Control and Status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_STATUS :: reserved0 [31:19] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_reserved0_MASK 0xfff80000
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_reserved0_BITS 13
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_reserved0_SHIFT 19
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_STATUS :: ERROR [18:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_MASK  0x0007fff8
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_BITS  16
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_SHIFT 3
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_STATUS :: ERROR_LOW [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_LOW_MASK 0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_LOW_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_LOW_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_LOW_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_LOW_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_STATUS :: ERROR_HIGH [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_HIGH_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_HIGH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_HIGH_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_HIGH_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_ERROR_HIGH_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_STATUS :: READY [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_READY_MASK  0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_READY_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_READY_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_READY_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_STATUS_READY_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VIRTUAL_VTT_CONNECTIONS - Virtual VTT Connections register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONNECTIONS :: reserved0 [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_reserved0_MASK 0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_reserved0_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_reserved0_SHIFT 31
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_CONNECTIONS :: MASK [30:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_MASK_MASK 0x7fffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_MASK_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_MASK_BITS 31
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_MASK_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONNECTIONS_MASK_DEFAULT 0x1fffffff
+
+/***************************************************************************
+ *VIRTUAL_VTT_OVERRIDE - Virtual VTT Override register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_OVERRIDE :: reserved0 [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_reserved0_MASK 0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_reserved0_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_reserved0_SHIFT 31
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VIRTUAL_VTT_OVERRIDE :: MASK [30:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_MASK_MASK 0x7fffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_MASK_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_MASK_BITS 31
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_MASK_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_OVERRIDE_MASK_DEFAULT 0x0000ffff
+
+/***************************************************************************
+ *VREF_DAC_CONTROL - VREF DAC Control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_reserved0_BITS 12
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: AUX_GT_INT [19:19] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_AUX_GT_INT_MASK 0x00080000
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_AUX_GT_INT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_AUX_GT_INT_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_AUX_GT_INT_SHIFT 19
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_AUX_GT_INT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: TESTOUT_MUX_CTL [18:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TESTOUT_MUX_CTL_MASK 0x00060000
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TESTOUT_MUX_CTL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TESTOUT_MUX_CTL_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TESTOUT_MUX_CTL_SHIFT 17
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TESTOUT_MUX_CTL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: TEST [16:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TEST_MASK     0x00010000
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TEST_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TEST_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TEST_SHIFT    16
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_TEST_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: PDN3 [15:15] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN3_MASK     0x00008000
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN3_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN3_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN3_SHIFT    15
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN3_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: PDN2 [14:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN2_MASK     0x00004000
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN2_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN2_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN2_SHIFT    14
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN2_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: PDN1 [13:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN1_MASK     0x00002000
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN1_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN1_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN1_SHIFT    13
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN1_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: PDN0 [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN0_MASK     0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN0_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN0_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN0_SHIFT    12
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_PDN0_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: DAC1 [11:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC1_MASK     0x00000fc0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC1_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC1_BITS     6
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC1_SHIFT    6
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC1_DEFAULT  0x00000020
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: VREF_DAC_CONTROL :: DAC0 [05:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC0_MASK     0x0000003f
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC0_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC0_BITS     6
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC0_SHIFT    0
+#define DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL_DAC0_DEFAULT  0x00000020
+
+/***************************************************************************
+ *PHYBIST_CNTRL - PhyBist Control Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: reserved0 [31:30] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved0_MASK   0xc0000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved0_BITS   2
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved0_SHIFT  30
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: CLK_PAD_ENB [29:28] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_CLK_PAD_ENB_MASK 0x30000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_CLK_PAD_ENB_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_CLK_PAD_ENB_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_CLK_PAD_ENB_SHIFT 28
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_CLK_PAD_ENB_DEFAULT 0x00000002
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: reserved1 [27:27] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved1_MASK   0x08000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved1_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved1_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved1_SHIFT  27
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: FORCE_DQ_ERROR_SEL [26:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DQ_ERROR_SEL_MASK 0x07000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DQ_ERROR_SEL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DQ_ERROR_SEL_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DQ_ERROR_SEL_SHIFT 24
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DQ_ERROR_SEL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: reserved2 [23:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved2_MASK   0x00800000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved2_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved2_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved2_SHIFT  23
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: FORCE_BL_ERROR_SEL [22:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_BL_ERROR_SEL_MASK 0x00700000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_BL_ERROR_SEL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_BL_ERROR_SEL_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_BL_ERROR_SEL_SHIFT 20
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_BL_ERROR_SEL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: reserved3 [19:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved3_MASK   0x000e0000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved3_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved3_BITS   3
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved3_SHIFT  17
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: FORCE_CTL_ERROR_SEL [16:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_SEL_MASK 0x0001f000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_SEL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_SEL_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_SEL_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_SEL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: reserved4 [11:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved4_MASK   0x00000c00
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved4_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved4_BITS   2
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_reserved4_SHIFT  10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: FORCE_DAT_ERROR [09:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DAT_ERROR_MASK 0x00000200
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DAT_ERROR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DAT_ERROR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DAT_ERROR_SHIFT 9
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_DAT_ERROR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: FORCE_CTL_ERROR [08:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_MASK 0x00000100
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_FORCE_CTL_ERROR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: SSO [07:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_SSO_MASK         0x000000c0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_SSO_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_SSO_BITS         2
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_SSO_SHIFT        6
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_SSO_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: LENGTH [05:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_LENGTH_MASK      0x00000030
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_LENGTH_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_LENGTH_BITS      2
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_LENGTH_SHIFT     4
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_LENGTH_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: MODE [03:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_MODE_MASK        0x0000000e
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_MODE_ALIGN       0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_MODE_BITS        3
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_MODE_SHIFT       1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_MODE_DEFAULT     0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CNTRL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_ENABLE_MASK      0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_ENABLE_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_ENABLE_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_ENABLE_SHIFT     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CNTRL_ENABLE_DEFAULT   0x00000000
+
+/***************************************************************************
+ *PHYBIST_SEED - PhyBist Seed Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_SEED :: SEED [31:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_SEED_SEED_MASK         0xffffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_SEED_SEED_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_SEED_SEED_BITS         32
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_SEED_SEED_SHIFT        0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_SEED_SEED_DEFAULT      0xba5eba11
+
+/***************************************************************************
+ *PHYBIST_CA_MASK - PhyBist Command/Address Bus Mask
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CA_MASK :: MASK [31:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CA_MASK_MASK_MASK      0xffffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CA_MASK_MASK_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CA_MASK_MASK_BITS      32
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CA_MASK_MASK_SHIFT     0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CA_MASK_MASK_DEFAULT   0x00000000
+
+/***************************************************************************
+ *PHYBIST_STATUS - PhyBist General Status Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_STATUS :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_reserved0_MASK  0xfffffff0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_reserved0_BITS  28
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_reserved0_SHIFT 4
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_STATUS :: DAT_PASS [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_DAT_PASS_MASK   0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_DAT_PASS_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_DAT_PASS_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_DAT_PASS_SHIFT  3
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_STATUS :: CTL_PASS [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_CTL_PASS_MASK   0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_CTL_PASS_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_CTL_PASS_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_CTL_PASS_SHIFT  2
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_STATUS :: DAT_DONE [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_DAT_DONE_MASK   0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_DAT_DONE_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_DAT_DONE_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_DAT_DONE_SHIFT  1
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_STATUS :: CTL_DONE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_CTL_DONE_MASK   0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_CTL_DONE_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_CTL_DONE_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_STATUS_CTL_DONE_SHIFT  0
+
+/***************************************************************************
+ *PHYBIST_CTL_STATUS - PhyBist Per-Bit Control Pad Status Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CTL_STATUS :: reserved0 [31:31] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS_reserved0_MASK 0x80000000
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS_reserved0_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS_reserved0_SHIFT 31
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_CTL_STATUS :: CTL_ERRORS [30:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS_CTL_ERRORS_MASK 0x7fffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS_CTL_ERRORS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS_CTL_ERRORS_BITS 31
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_CTL_STATUS_CTL_ERRORS_SHIFT 0
+
+/***************************************************************************
+ *PHYBIST_BL0_STATUS - PhyBist Byte Lane #0 Status Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL0_STATUS :: reserved0 [31:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_reserved0_MASK 0xfffffc00
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_reserved0_BITS 22
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_reserved0_SHIFT 10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL0_STATUS :: EDC [09:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_EDC_MASK    0x00000200
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_EDC_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_EDC_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_EDC_SHIFT   9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL0_STATUS :: DM [08:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_DM_MASK     0x00000100
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_DM_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_DM_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_DM_SHIFT    8
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL0_STATUS :: DQ [07:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_DQ_MASK     0x000000ff
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_DQ_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_DQ_BITS     8
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL0_STATUS_DQ_SHIFT    0
+
+/***************************************************************************
+ *PHYBIST_BL1_STATUS - PhyBist Byte Lane #1 Status Register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL1_STATUS :: reserved0 [31:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_reserved0_MASK 0xfffffc00
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_reserved0_BITS 22
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_reserved0_SHIFT 10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL1_STATUS :: EDC [09:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_EDC_MASK    0x00000200
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_EDC_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_EDC_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_EDC_SHIFT   9
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL1_STATUS :: DM [08:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_DM_MASK     0x00000100
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_DM_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_DM_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_DM_SHIFT    8
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: PHYBIST_BL1_STATUS :: DQ [07:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_DQ_MASK     0x000000ff
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_DQ_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_DQ_BITS     8
+#define DDR34_CORE_PHY_CONTROL_REGS_PHYBIST_BL1_STATUS_DQ_SHIFT    0
+
+/***************************************************************************
+ *STANDBY_CONTROL - Standby Control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: reserved0 [31:23] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_reserved0_MASK 0xff800000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_reserved0_BITS 9
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_reserved0_SHIFT 23
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: STANDBY_READY [22:22] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_READY_MASK 0x00400000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_READY_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_READY_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_READY_SHIFT 22
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_READY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: STANDBY_EXIT_PIN_EN [21:21] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_EXIT_PIN_EN_MASK 0x00200000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_EXIT_PIN_EN_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_EXIT_PIN_EN_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_EXIT_PIN_EN_SHIFT 21
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_EXIT_PIN_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: STANDBY_ACTIVE [20:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_ACTIVE_MASK 0x00100000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_ACTIVE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_ACTIVE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_ACTIVE_SHIFT 20
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_ACTIVE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: ARMED [19:19] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_ARMED_MASK     0x00080000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_ARMED_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_ARMED_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_ARMED_SHIFT    19
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_ARMED_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: WARMSTART [18:18] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_WARMSTART_MASK 0x00040000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_WARMSTART_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_WARMSTART_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_WARMSTART_SHIFT 18
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_WARMSTART_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: PWRDOWN_LDO_BIAS [17:16] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_BIAS_MASK 0x00030000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_BIAS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_BIAS_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_BIAS_SHIFT 16
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_BIAS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: PWRDOWN_LDO_VOLTS [15:14] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_VOLTS_MASK 0x0000c000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_VOLTS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_VOLTS_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_VOLTS_SHIFT 14
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_LDO_VOLTS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: PWRDOWN_SKIP_MRS [13:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_SKIP_MRS_MASK 0x00002000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_SKIP_MRS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_SKIP_MRS_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_SKIP_MRS_SHIFT 13
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_SKIP_MRS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: PWRDOWN_RST_N [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_RST_N_MASK 0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_RST_N_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_RST_N_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_RST_N_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_RST_N_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: PWRDOWN_CKE [11:11] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_CKE_MASK 0x00000800
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_CKE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_CKE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_CKE_SHIFT 11
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_PWRDOWN_CKE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: LDO_BIAS [10:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_BIAS_MASK  0x00000600
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_BIAS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_BIAS_BITS  2
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_BIAS_SHIFT 9
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_BIAS_DEFAULT 0x00000003
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: LDO_VOLTS [08:07] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_VOLTS_MASK 0x00000180
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_VOLTS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_VOLTS_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_VOLTS_SHIFT 7
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_LDO_VOLTS_DEFAULT 0x00000003
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: SKIP_MRS [06:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_SKIP_MRS_MASK  0x00000040
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_SKIP_MRS_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_SKIP_MRS_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_SKIP_MRS_SHIFT 6
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_SKIP_MRS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: RST_N [05:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_RST_N_MASK     0x00000020
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_RST_N_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_RST_N_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_RST_N_SHIFT    5
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_RST_N_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: CKE [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_CKE_MASK       0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_CKE_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_CKE_BITS       1
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_CKE_SHIFT      4
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_CKE_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: STANDBY_CONTROL :: STANDBY [03:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_MASK   0x0000000f
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_BITS   4
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_SHIFT  0
+#define DDR34_CORE_PHY_CONTROL_REGS_STANDBY_CONTROL_STANDBY_DEFAULT 0x00000000
+
+/***************************************************************************
+ *DEBUG_FREEZE_ENABLE - Freeze-on-error enable register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_FREEZE_ENABLE :: reserved0 [31:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_reserved0_MASK 0xffffffe0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_reserved0_BITS 27
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_reserved0_SHIFT 5
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_FREEZE_ENABLE :: WLECC [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WLECC_MASK 0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WLECC_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WLECC_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WLECC_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WLECC_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_FREEZE_ENABLE :: WL1_BL1 [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL1_MASK 0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL1_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL1_SHIFT 3
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_FREEZE_ENABLE :: WL1_BL0 [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL0_MASK 0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL0_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL0_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL1_BL0_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_FREEZE_ENABLE :: WL0_BL1 [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL1_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL1_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL1_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_FREEZE_ENABLE :: WL0_BL0 [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL0_MASK 0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL0_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL0_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_FREEZE_ENABLE_WL0_BL0_DEFAULT 0x00000000
+
+/***************************************************************************
+ *DEBUG_MUX_CONTROL - Debug Mux Control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_MUX_CONTROL :: reserved0 [31:11] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_reserved0_MASK 0xfffff800
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_reserved0_BITS 21
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_reserved0_SHIFT 11
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_MUX_CONTROL :: BYTE_SEL [10:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_BYTE_SEL_MASK 0x00000700
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_BYTE_SEL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_BYTE_SEL_BITS 3
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_BYTE_SEL_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_BYTE_SEL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_MUX_CONTROL :: reserved1 [07:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_reserved1_MASK 0x000000c0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_reserved1_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_reserved1_SHIFT 6
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_MUX_CONTROL :: PHASE_SEL [05:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_PHASE_SEL_MASK 0x00000030
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_PHASE_SEL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_PHASE_SEL_BITS 2
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_PHASE_SEL_SHIFT 4
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_PHASE_SEL_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DEBUG_MUX_CONTROL :: SOURCE_SEL [03:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_SOURCE_SEL_MASK 0x0000000f
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_SOURCE_SEL_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_SOURCE_SEL_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_SOURCE_SEL_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DEBUG_MUX_CONTROL_SOURCE_SEL_DEFAULT 0x00000000
+
+/***************************************************************************
+ *DFI_CNTRL - DFI Interface Ownership Control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: reserved0 [31:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_reserved0_MASK       0xfffffc00
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_reserved0_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_reserved0_BITS       22
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_reserved0_SHIFT      10
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: SELF_REFRESH_CS1 [09:09] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_SELF_REFRESH_CS1_MASK 0x00000200
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_SELF_REFRESH_CS1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_SELF_REFRESH_CS1_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_SELF_REFRESH_CS1_SHIFT 9
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_SELF_REFRESH_CS1_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: SELF_REFRESH_CS0 [08:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_SELF_REFRESH_CS0_MASK 0x00000100
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_SELF_REFRESH_CS0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_SELF_REFRESH_CS0_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_SELF_REFRESH_CS0_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_SELF_REFRESH_CS0_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: DFI_CS1 [07:07] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS1_MASK         0x00000080
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS1_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS1_BITS         1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS1_SHIFT        7
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS1_DEFAULT      0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: DFI_CS0 [06:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS0_MASK         0x00000040
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS0_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS0_BITS         1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS0_SHIFT        6
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CS0_DEFAULT      0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: DFI_RST_N [05:05] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_RST_N_MASK       0x00000020
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_RST_N_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_RST_N_BITS       1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_RST_N_SHIFT      5
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_RST_N_DEFAULT    0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: DFI_CKE1 [04:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CKE1_MASK        0x00000010
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CKE1_ALIGN       0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CKE1_BITS        1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CKE1_SHIFT       4
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CKE1_DEFAULT     0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: DFI_CKE0 [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CKE0_MASK        0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CKE0_ALIGN       0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CKE0_BITS        1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CKE0_SHIFT       3
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_DFI_CKE0_DEFAULT     0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: ACK_ENABLE [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_ENABLE_MASK      0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_ENABLE_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_ENABLE_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_ENABLE_SHIFT     2
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_ENABLE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: ACK_STATUS [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_STATUS_MASK      0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_STATUS_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_STATUS_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_STATUS_SHIFT     1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ACK_STATUS_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: DFI_CNTRL :: ASSERT_REQ [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ASSERT_REQ_MASK      0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ASSERT_REQ_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ASSERT_REQ_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ASSERT_REQ_SHIFT     0
+#define DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL_ASSERT_REQ_DEFAULT   0x00000001
+
+/***************************************************************************
+ *WRITE_ODT_CNTRL - Write ODT Control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_ODT_CNTRL :: reserved0 [31:13] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_reserved0_MASK 0xffffe000
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_reserved0_BITS 19
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_reserved0_SHIFT 13
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_ODT_CNTRL :: ODT_FORCE_VALUE [12:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_VALUE_MASK 0x00001000
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_VALUE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_VALUE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_VALUE_SHIFT 12
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_VALUE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_ODT_CNTRL :: ODT_FORCE [11:11] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_MASK 0x00000800
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_SHIFT 11
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_FORCE_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_ODT_CNTRL :: ODT_ENABLE [10:10] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_ENABLE_MASK 0x00000400
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_ENABLE_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_ENABLE_SHIFT 10
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_ODT_CNTRL :: ODT_LENGTH [09:06] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_LENGTH_MASK 0x000003c0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_LENGTH_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_LENGTH_BITS 4
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_LENGTH_SHIFT 6
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_LENGTH_DEFAULT 0x00000004
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: WRITE_ODT_CNTRL :: ODT_DELAY [05:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_DELAY_MASK 0x0000003f
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_DELAY_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_DELAY_BITS 6
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_DELAY_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL_ODT_DELAY_DEFAULT 0x00000010
+
+/***************************************************************************
+ *ABI_PAR_CNTRL - ABI and PAR Control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: ABI_PAR_CNTRL :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_reserved0_MASK   0xfffffff0
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_reserved0_BITS   28
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_reserved0_SHIFT  4
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ABI_PAR_CNTRL :: PAR_INCLUDE_AUX [03:03] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_INCLUDE_AUX_MASK 0x00000008
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_INCLUDE_AUX_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_INCLUDE_AUX_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_INCLUDE_AUX_SHIFT 3
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_INCLUDE_AUX_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ABI_PAR_CNTRL :: PAR_ENABLE [02:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_ENABLE_MASK  0x00000004
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_ENABLE_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_ENABLE_SHIFT 2
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_PAR_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ABI_PAR_CNTRL :: ABI_INCLUDE_AUX [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_INCLUDE_AUX_MASK 0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_INCLUDE_AUX_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_INCLUDE_AUX_BITS 1
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_INCLUDE_AUX_SHIFT 1
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_INCLUDE_AUX_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ABI_PAR_CNTRL :: ABI_ENABLE [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_ENABLE_MASK  0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_ENABLE_BITS  1
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_ABI_PAR_CNTRL_ABI_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *ZQ_CAL - ZQ Calibration Control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_reserved0_MASK          0xfff00000
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_reserved0_ALIGN         0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_reserved0_BITS          12
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_reserved0_SHIFT         20
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: ZQ_PCOMP_STATUS [19:19] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_STATUS_MASK    0x00080000
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_STATUS_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_STATUS_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_STATUS_SHIFT   19
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_STATUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: ZQ_NCOMP_STATUS [18:18] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_STATUS_MASK    0x00040000
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_STATUS_ALIGN   0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_STATUS_BITS    1
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_STATUS_SHIFT   18
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_STATUS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: ZQ_IDDQ [17:17] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_IDDQ_MASK            0x00020000
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_IDDQ_ALIGN           0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_IDDQ_BITS            1
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_IDDQ_SHIFT           17
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_IDDQ_DEFAULT         0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: ZQ_DRIVE_P [16:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_P_MASK         0x0001f000
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_P_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_P_BITS         5
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_P_SHIFT        12
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_P_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: ZQ_DRIVE_N [11:07] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_N_MASK         0x00000f80
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_N_ALIGN        0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_N_BITS         5
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_N_SHIFT        7
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_DRIVE_N_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: reserved_for_padding1 [06:02] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_reserved_for_padding1_MASK 0x0000007c
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_reserved_for_padding1_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_reserved_for_padding1_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_reserved_for_padding1_SHIFT 2
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: ZQ_PCOMP_ENB [01:01] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_ENB_MASK       0x00000002
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_ENB_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_ENB_BITS       1
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_ENB_SHIFT      1
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_PCOMP_ENB_DEFAULT    0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: ZQ_CAL :: ZQ_NCOMP_ENB [00:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_ENB_MASK       0x00000001
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_ENB_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_ENB_BITS       1
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_ENB_SHIFT      0
+#define DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL_ZQ_NCOMP_ENB_DEFAULT    0x00000001
+
+/***************************************************************************
+ *RO_PROC_MON_CTL - Ring-Osc control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: RO_PROC_MON_CTL :: reserved0 [31:27] */
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_reserved0_MASK 0xf8000000
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_reserved0_BITS 5
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_reserved0_SHIFT 27
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: RO_PROC_MON_CTL :: BUSY [26:26] */
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_BUSY_MASK      0x04000000
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_BUSY_ALIGN     0
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_BUSY_BITS      1
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_BUSY_SHIFT     26
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_BUSY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: RO_PROC_MON_CTL :: TRIGGER [25:25] */
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_TRIGGER_MASK   0x02000000
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_TRIGGER_ALIGN  0
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_TRIGGER_BITS   1
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_TRIGGER_SHIFT  25
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_TRIGGER_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: RO_PROC_MON_CTL :: RESET [24:24] */
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_RESET_MASK     0x01000000
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_RESET_ALIGN    0
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_RESET_BITS     1
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_RESET_SHIFT    24
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_RESET_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: RO_PROC_MON_CTL :: SEL [23:12] */
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_SEL_MASK       0x00fff000
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_SEL_ALIGN      0
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_SEL_BITS       12
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_SEL_SHIFT      12
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_SEL_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: RO_PROC_MON_CTL :: EN [11:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_EN_MASK        0x00000fff
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_EN_ALIGN       0
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_EN_BITS        12
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_EN_SHIFT       0
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_CTL_EN_DEFAULT     0x00000000
+
+/***************************************************************************
+ *RO_PROC_MON_STATUS - Ring-Osc count register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: RO_PROC_MON_STATUS :: CLK_COUNT [31:08] */
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_STATUS_CLK_COUNT_MASK 0xffffff00
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_STATUS_CLK_COUNT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_STATUS_CLK_COUNT_BITS 24
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_STATUS_CLK_COUNT_SHIFT 8
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_STATUS_CLK_COUNT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_CONTROL_REGS :: RO_PROC_MON_STATUS :: RO_COUNT [07:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_STATUS_RO_COUNT_MASK 0x000000ff
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_STATUS_RO_COUNT_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_STATUS_RO_COUNT_BITS 8
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_STATUS_RO_COUNT_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_RO_PROC_MON_STATUS_RO_COUNT_DEFAULT 0x00000000
+
+/***************************************************************************
+ *AC_SPARE_REG - Address and Control Spare register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_CONTROL_REGS :: AC_SPARE_REG :: reserved_for_eco0 [31:00] */
+#define DDR34_CORE_PHY_CONTROL_REGS_AC_SPARE_REG_reserved_for_eco0_MASK 0xffffffff
+#define DDR34_CORE_PHY_CONTROL_REGS_AC_SPARE_REG_reserved_for_eco0_ALIGN 0
+#define DDR34_CORE_PHY_CONTROL_REGS_AC_SPARE_REG_reserved_for_eco0_BITS 32
+#define DDR34_CORE_PHY_CONTROL_REGS_AC_SPARE_REG_reserved_for_eco0_SHIFT 0
+#define DDR34_CORE_PHY_CONTROL_REGS_AC_SPARE_REG_reserved_for_eco0_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQS_P - Write channel DQS-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_BUSY_MASK  0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_BUSY_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_P :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_P :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQS_N - Write channel DQS-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_BUSY_MASK  0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_BUSY_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_N :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQS_N :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ0 - Write channel DQ0 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ0 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ0 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ1 - Write channel DQ1 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ1 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ1 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ2 - Write channel DQ2 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ2 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ2 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ2 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ2 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ2 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ2 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ2 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ3 - Write channel DQ3 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ3 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ3 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ3 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ3 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ3 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ3 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ3 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ4 - Write channel DQ4 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ4 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ4 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ4 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ4 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ4 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ4 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ4 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ5 - Write channel DQ5 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ5 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ5 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ5 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ5 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ5 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ5 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ5 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ6 - Write channel DQ6 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ6 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ6 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ6 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ6 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ6 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ6 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ6 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ7 - Write channel DQ7 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ7 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ7 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ7 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ7 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ7 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ7 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DQ7 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DM - Write channel DM VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DM :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_BUSY_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DM :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DM :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_FORCE_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DM :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DM :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DM :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_DM :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_EDC - Write channel EDC VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_EDC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_EDC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_EDC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_EDC :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_EDC :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_EDC :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_WR_EDC :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQSP - Read channel DQSP VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQSN - Read channel DQSP VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQSN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ0P - Read channel DQ0-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ0N - Read channel DQ0-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ0N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ1P - Read channel DQ1-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ1N - Read channel DQ1-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ1N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ2P - Read channel DQ2-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ2N - Read channel DQ2-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ2N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ3P - Read channel DQ3-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ3N - Read channel DQ3-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ3N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ4P - Read channel DQ4-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ4N - Read channel DQ4-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ4N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ5P - Read channel DQ5-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ5N - Read channel DQ5-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ5N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ6P - Read channel DQ6-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ6N - Read channel DQ6-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ6N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ7P - Read channel DQ7-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ7N - Read channel DQ7-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DQ7N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DMP - Read channel DM-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DMN - Read channel DM-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_DMN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EDCP - Read channel EDC-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EDCN - Read channel EDC-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EDCN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EN_CS0 - Read channel CS_N[0] read enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS0 :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS0 :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EN_CS1 - Read channel CS_N[1] read enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS1 :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CONTROL_RD_EN_CS1 :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CLK_CONTROL - DDR interface signal Write Leveling CLK VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CLK_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CLK_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CLK_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CLK_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved1_MASK  0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved1_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CLK_CONTROL :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_ADJ_EN_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_ADJ_EN_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_ADJ_EN_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_ADJ_EN_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_ADJ_EN_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CLK_CONTROL :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved2_MASK  0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved2_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_CLK_CONTROL :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_VDL_STEP_MASK   0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_VDL_STEP_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_VDL_STEP_BITS   9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_VDL_STEP_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_CLK_CONTROL_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_LDE_CONTROL - DDR interface signal Write Leveling Capture Enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_LDE_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_LDE_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_LDE_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_LDE_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved1_MASK  0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved1_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_LDE_CONTROL :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_ADJ_EN_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_ADJ_EN_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_ADJ_EN_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_ADJ_EN_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_ADJ_EN_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_LDE_CONTROL :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved2_MASK  0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved2_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: VDL_LDE_CONTROL :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_VDL_STEP_MASK   0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_VDL_STEP_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_VDL_STEP_BITS   9
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_VDL_STEP_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_VDL_LDE_CONTROL_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *RD_EN_DLY_CYC - Read enable bit-clock cycle delay control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DLY_CYC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_BUSY_MASK         0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_BUSY_ALIGN        0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_BUSY_BITS         1
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_BUSY_SHIFT        31
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_BUSY_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DLY_CYC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_reserved0_MASK    0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_reserved0_BITS    14
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_reserved0_SHIFT   17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DLY_CYC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_FORCE_MASK        0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_FORCE_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_FORCE_BITS        1
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_FORCE_SHIFT       16
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_FORCE_DEFAULT     0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DLY_CYC :: reserved1 [15:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_reserved1_MASK    0x0000ff00
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_reserved1_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_reserved1_BITS    8
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_reserved1_SHIFT   8
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DLY_CYC :: CS1_CYCLES [07:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS1_CYCLES_MASK   0x000000f0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS1_CYCLES_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS1_CYCLES_BITS   4
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS1_CYCLES_SHIFT  4
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS1_CYCLES_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DLY_CYC :: CS0_CYCLES [03:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS0_CYCLES_MASK   0x0000000f
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS0_CYCLES_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS0_CYCLES_BITS   4
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS0_CYCLES_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC_CS0_CYCLES_DEFAULT 0x00000000
+
+/***************************************************************************
+ *WR_CHAN_DLY_CYC - Write leveling bit-clock cycle delay control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_CHAN_DLY_CYC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_CHAN_DLY_CYC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_CHAN_DLY_CYC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_CHAN_DLY_CYC :: reserved1 [15:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_reserved1_MASK  0x0000fff8
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_reserved1_BITS  13
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_reserved1_SHIFT 3
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_CHAN_DLY_CYC :: CYCLES [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_CYCLES_MASK     0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_CYCLES_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_CYCLES_BITS     3
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_CYCLES_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC_CYCLES_DEFAULT  0x00000000
+
+/***************************************************************************
+ *READ_CONTROL - Read channel datapath control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_CONTROL :: reserved0 [31:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_reserved0_MASK     0xffffffe0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_reserved0_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_reserved0_BITS     27
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_reserved0_SHIFT    5
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_CONTROL :: MODE [04:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_MODE_MASK          0x00000010
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_MODE_ALIGN         0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_MODE_BITS          1
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_MODE_SHIFT         4
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_MODE_DEFAULT       0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_CONTROL :: reserved1 [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_reserved1_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_reserved1_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_reserved1_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_reserved1_SHIFT    3
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_CONTROL :: RD_DATA_DLY [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_RD_DATA_DLY_MASK   0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_RD_DATA_DLY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_RD_DATA_DLY_BITS   3
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_RD_DATA_DLY_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL_RD_DATA_DLY_DEFAULT 0x00000007
+
+/***************************************************************************
+ *READ_FIFO_ADDR - Read fifo addresss pointer register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_ADDR :: reserved0 [31:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_reserved0_MASK   0xfffffff8
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_reserved0_BITS   29
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_reserved0_SHIFT  3
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_ADDR :: ADDR [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_ADDR_MASK        0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_ADDR_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_ADDR_BITS        3
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_ADDR_SHIFT       0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_ADDR_ADDR_DEFAULT     0x00000000
+
+/***************************************************************************
+ *READ_FIFO_DATA - Read fifo data register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_DATA :: DATA [31:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DATA_DATA_MASK        0xffffffff
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DATA_DATA_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DATA_DATA_BITS        32
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DATA_DATA_SHIFT       0
+
+/***************************************************************************
+ *READ_FIFO_DM_DBI - Read fifo dm/dbi register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_DM_DBI :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI_reserved0_MASK 0xfffffff0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI_reserved0_BITS 28
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI_reserved0_SHIFT 4
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_DM_DBI :: DM_DBI [03:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI_DM_DBI_MASK    0x0000000f
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI_DM_DBI_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI_DM_DBI_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_DM_DBI_DM_DBI_SHIFT   0
+
+/***************************************************************************
+ *READ_FIFO_STATUS - Read fifo status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_STATUS :: reserved0 [31:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_reserved0_MASK 0xfffffffc
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_reserved0_BITS 30
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_reserved0_SHIFT 2
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_STATUS :: OVERFLOW [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_OVERFLOW_MASK  0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_OVERFLOW_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_OVERFLOW_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_OVERFLOW_SHIFT 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_OVERFLOW_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_STATUS :: UNDERFLOW [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_UNDERFLOW_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_UNDERFLOW_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_UNDERFLOW_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_UNDERFLOW_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_STATUS_UNDERFLOW_DEFAULT 0x00000000
+
+/***************************************************************************
+ *READ_FIFO_CLEAR - Read fifo status clear register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_reserved0_MASK  0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_reserved0_BITS  31
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: READ_FIFO_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_CLEAR_MASK      0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_CLEAR_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_CLEAR_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_CLEAR_SHIFT     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR_CLEAR_DEFAULT   0x00000000
+
+/***************************************************************************
+ *IDLE_PAD_CONTROL - Idle mode SSTL pad control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: IDLE [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDLE_MASK      0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDLE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDLE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDLE_SHIFT     31
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDLE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: reserved0 [30:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_reserved0_MASK 0x7ff00000
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_reserved0_BITS 11
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: AUTO_DQ_RXENB_MODE [19:18] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_MASK 0x000c0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_SHIFT 18
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: AUTO_DQ_IDDQ_MODE [17:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_MASK 0x00030000
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: reserved_for_padding1 [15:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_reserved_for_padding1_MASK 0x00008000
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_reserved_for_padding1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_reserved_for_padding1_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_reserved_for_padding1_SHIFT 15
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: IO_IDLE_ENABLE [14:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_MASK 0x00007ff0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_BITS 11
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: RXENB [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_RXENB_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_RXENB_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_RXENB_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_RXENB_SHIFT    3
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_RXENB_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: IDDQ [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDDQ_MASK      0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDDQ_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDDQ_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDDQ_SHIFT     2
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_IDDQ_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: DOUT_N [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_N_MASK    0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_N_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_N_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_N_SHIFT   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_N_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: IDLE_PAD_CONTROL :: DOUT_P [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_P_MASK    0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_P_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_P_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_P_SHIFT   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL_DOUT_P_DEFAULT 0x00000000
+
+/***************************************************************************
+ *DRIVE_PAD_CTL - SSTL pad drive characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: DRIVE_PAD_CTL :: reserved0 [31:30] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_reserved0_MASK    0xc0000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_reserved0_BITS    2
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_reserved0_SHIFT   30
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: DRIVE_PAD_CTL :: BL_PD_IDLE_STRENGTH [29:25] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_MASK 0x3e000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_SHIFT 25
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: DRIVE_PAD_CTL :: BL_ND_IDLE_STRENGTH [24:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_MASK 0x01f00000
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_SHIFT 20
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: DRIVE_PAD_CTL :: BL_PD_TERM_STRENGTH [19:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_MASK 0x000f8000
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_SHIFT 15
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_DEFAULT 0x00000006
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: DRIVE_PAD_CTL :: BL_ND_TERM_STRENGTH [14:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_MASK 0x00007c00
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_SHIFT 10
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_DEFAULT 0x00000006
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: DRIVE_PAD_CTL :: BL_PD_STRENGTH [09:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_STRENGTH_MASK 0x000003e0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_STRENGTH_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: DRIVE_PAD_CTL :: BL_ND_STRENGTH [04:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_STRENGTH_MASK 0x0000001f
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_STRENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL_BL_ND_STRENGTH_DEFAULT 0x0000001f
+
+/***************************************************************************
+ *RD_EN_DRIVE_PAD_CTL - SSTL read enable pad drive characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DRIVE_PAD_CTL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_reserved0_BITS 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DRIVE_PAD_CTL :: EDC_RD_EN_PD_STRENGTH [19:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_MASK 0x000f8000
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_SHIFT 15
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DRIVE_PAD_CTL :: EDC_RD_EN_ND_STRENGTH [14:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_MASK 0x00007c00
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_SHIFT 10
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DRIVE_PAD_CTL :: BL_RD_EN_PD_STRENGTH [09:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_MASK 0x000003e0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: RD_EN_DRIVE_PAD_CTL :: BL_RD_EN_ND_STRENGTH [04:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_MASK 0x0000001f
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_DEFAULT 0x0000001f
+
+/***************************************************************************
+ *STATIC_PAD_CTL - pad rx and tx characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: reserved0 [31:21] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved0_MASK   0xffe00000
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved0_BITS   11
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved0_SHIFT  21
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: DQS_MODE [20:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_MODE_MASK    0x00100000
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_MODE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_MODE_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_MODE_SHIFT   20
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: reserved1 [19:18] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved1_MASK   0x000c0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved1_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved1_BITS   2
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved1_SHIFT  18
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: EDC_MODE [17:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_EDC_MODE_MASK    0x00030000
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_EDC_MODE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_EDC_MODE_BITS    2
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_EDC_MODE_SHIFT   16
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_EDC_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: reserved2 [15:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved2_MASK   0x00008000
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved2_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved2_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved2_SHIFT  15
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: WDBI_ENABLE [14:14] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_WDBI_ENABLE_MASK 0x00004000
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_WDBI_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_WDBI_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_WDBI_ENABLE_SHIFT 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_WDBI_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: RDBI_ENABLE [13:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RDBI_ENABLE_MASK 0x00002000
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RDBI_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RDBI_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RDBI_ENABLE_SHIFT 13
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RDBI_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: DM_MODE [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DM_MODE_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DM_MODE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DM_MODE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DM_MODE_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DM_MODE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: reserved3 [11:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved3_MASK   0x00000c00
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved3_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved3_BITS   2
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved3_SHIFT  10
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: DQS_TX_DIS [09:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_TX_DIS_MASK  0x00000200
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_TX_DIS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_TX_DIS_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_TX_DIS_SHIFT 9
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_DQS_TX_DIS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: reserved4 [08:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved4_MASK   0x000001fc
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved4_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved4_BITS   7
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_reserved4_SHIFT  2
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: STATIC_PAD_CTL :: RX_MODE [01:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RX_MODE_MASK     0x00000003
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RX_MODE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RX_MODE_BITS     2
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RX_MODE_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_STATIC_PAD_CTL_RX_MODE_DEFAULT  0x00000000
+
+/***************************************************************************
+ *WR_PREAMBLE_MODE - Write cycle preamble control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_PREAMBLE_MODE :: reserved0 [31:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_reserved0_MASK 0xffff0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_reserved0_BITS 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_reserved0_SHIFT 16
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_PREAMBLE_MODE :: DQ_POSTAM_BITS [15:14] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_MASK 0x0000c000
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_SHIFT 14
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_PREAMBLE_MODE :: DQ_PREAM_BITS [13:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_PREAM_BITS_MASK 0x00003000
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_PREAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_PREAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_PREAM_BITS_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQ_PREAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_PREAMBLE_MODE :: DQS [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_MASK       0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_BITS       4
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_SHIFT      8
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_DEFAULT    0x0000000e
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_PREAMBLE_MODE :: reserved1 [07:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_reserved1_MASK 0x000000e0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_reserved1_SHIFT 5
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_PREAMBLE_MODE :: DQS_POSTAM_BITS [04:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_MASK 0x00000018
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: WR_PREAMBLE_MODE :: DQS_PREAM_BITS [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_PREAM_BITS_MASK 0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_PREAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_PREAM_BITS_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_PREAM_BITS_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE_DQS_PREAM_BITS_DEFAULT 0x00000002
+
+/***************************************************************************
+ *ODT_CONTROL - Read channel ODT control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: ODT_CONTROL :: reserved_for_padding0 [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_reserved_for_padding0_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_reserved_for_padding0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_reserved_for_padding0_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_reserved_for_padding0_SHIFT 31
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: ODT_CONTROL :: reserved1 [30:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_reserved1_MASK      0x7ffffc00
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_reserved1_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_reserved1_BITS      21
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_reserved1_SHIFT     10
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: ODT_CONTROL :: ODT_ENABLE [09:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_ENABLE_MASK     0x00000200
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_ENABLE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_ENABLE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_ENABLE_SHIFT    9
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_ENABLE_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: ODT_CONTROL :: ODT_DELAY [08:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_DELAY_MASK      0x000001c0
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_DELAY_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_DELAY_BITS      3
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_DELAY_SHIFT     6
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_DELAY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: ODT_CONTROL :: ODT_POST_LENGTH [05:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_POST_LENGTH_MASK 0x00000038
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_POST_LENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_POST_LENGTH_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_POST_LENGTH_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_POST_LENGTH_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: ODT_CONTROL :: ODT_PRE_LENGTH [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_PRE_LENGTH_MASK 0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_PRE_LENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_PRE_LENGTH_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_PRE_LENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL_ODT_PRE_LENGTH_DEFAULT 0x00000003
+
+/***************************************************************************
+ *EDC_DPD_CONTROL - GDDR5M EDC digital phase detector control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_CONTROL :: reserved0 [31:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_reserved0_MASK  0xffffffc0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_reserved0_BITS  26
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_reserved0_SHIFT 6
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_CONTROL :: DQS_PHASE_OVERRIDE_VALUE [05:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_MASK 0x00000020
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_CONTROL :: DQS_PHASE_OVERRIDE_ENABLE [04:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_MASK 0x00000010
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_CONTROL :: SET_ADJ_EN [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_SET_ADJ_EN_MASK 0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_SET_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_SET_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_SET_ADJ_EN_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_SET_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_CONTROL :: UPDATE [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_UPDATE_MASK     0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_UPDATE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_UPDATE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_UPDATE_SHIFT    2
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_UPDATE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_CONTROL :: MONITOR [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_MONITOR_MASK    0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_MONITOR_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_MONITOR_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_MONITOR_SHIFT   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_MONITOR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_CONTROL :: INIT [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_INIT_MASK       0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_INIT_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_INIT_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_INIT_SHIFT      0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_CONTROL_INIT_DEFAULT    0x00000000
+
+/***************************************************************************
+ *EDC_DPD_STATUS - GDDR5M EDC digital phase detector status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: reserved0 [31:25] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_reserved0_MASK   0xfe000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_reserved0_BITS   7
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_reserved0_SHIFT  25
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: CURRENT_DQS_PHASE [24:24] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_DQS_PHASE_MASK 0x01000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_DQS_PHASE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_DQS_PHASE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_DQS_PHASE_SHIFT 24
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_DQS_PHASE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: CURRENT_VDL_SETTING [23:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_VDL_SETTING_MASK 0x00ff0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_VDL_SETTING_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_CURRENT_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_reserved1_MASK   0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_reserved1_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_reserved1_BITS   3
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_reserved1_SHIFT  13
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: INIT_DQS_PHASE [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DQS_PHASE_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DQS_PHASE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DQS_PHASE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DQS_PHASE_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DQS_PHASE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: INIT_VDL_SETTING [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_VDL_SETTING_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_VDL_SETTING_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: EDGE_ERROR [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_EDGE_ERROR_MASK  0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_EDGE_ERROR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_EDGE_ERROR_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_EDGE_ERROR_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_EDGE_ERROR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: MONITOR_BUSY [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_MONITOR_BUSY_MASK 0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_MONITOR_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_MONITOR_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_MONITOR_BUSY_SHIFT 2
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_MONITOR_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: INIT_BUSY [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_BUSY_MASK   0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_BUSY_SHIFT  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_STATUS :: INIT_DONE [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DONE_MASK   0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DONE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DONE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DONE_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_STATUS_INIT_DONE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_CONTROL - GDDR5M EDC digital phase detector output signal control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_CONTROL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_reserved0_BITS 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_CONTROL :: LOWER_LIMIT [19:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_MASK 0x000ff000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_CONTROL :: UPPER_LIMIT [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_CONTROL :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_CONTROL_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_STATUS - GDDR5M EDC digital phase detector output signal status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_STATUS :: reserved0 [31:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_reserved0_MASK 0xfffff000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_reserved0_BITS 20
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_reserved0_SHIFT 12
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_STATUS :: VDL_SETTING [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VDL_SETTING_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VDL_SETTING_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_STATUS :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_STATUS :: VALID [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VALID_MASK   0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VALID_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VALID_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VALID_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_VALID_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_STATUS_CLEAR - GDDR5M EDC digital phase detector output signal status clear register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_STATUS_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_reserved0_MASK 0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_reserved0_BITS 31
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_DPD_OUT_STATUS_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_CRC_CONTROL - GDDR5M EDC signal path CRC control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: reserved1 [15:11] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved1_MASK  0x0000f800
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved1_BITS  5
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved1_SHIFT 11
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: CRCWL [10:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCWL_MASK      0x00000700
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCWL_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCWL_BITS      3
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCWL_SHIFT     8
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCWL_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: reserved2 [07:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved2_MASK  0x000000c0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved2_BITS  2
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved2_SHIFT 6
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: CRCRL [05:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCRL_MASK      0x00000030
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCRL_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCRL_BITS      2
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCRL_SHIFT     4
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_CRCRL_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: reserved3 [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved3_MASK  0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved3_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved3_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_reserved3_SHIFT 3
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: COUNT_MODE [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_COUNT_MODE_MASK 0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_COUNT_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_COUNT_MODE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_COUNT_MODE_SHIFT 2
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_COUNT_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: ENABLE_WR [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_WR_MASK  0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_WR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_WR_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_WR_SHIFT 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_WR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_CONTROL :: ENABLE_RD [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_RD_MASK  0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_RD_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_RD_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_RD_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_CONTROL_ENABLE_RD_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_CRC_STATUS - GDDR5M EDC signal path CRC status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_STATUS :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_reserved0_MASK   0xfffffff0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_reserved0_BITS   28
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_reserved0_SHIFT  4
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_STATUS :: WR_FAIL [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_FAIL_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_FAIL_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_FAIL_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_FAIL_SHIFT    3
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_FAIL_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_STATUS :: WR_PASS [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_PASS_MASK     0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_PASS_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_PASS_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_PASS_SHIFT    2
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_WR_PASS_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_STATUS :: RD_FAIL [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_FAIL_MASK     0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_FAIL_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_FAIL_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_FAIL_SHIFT    1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_FAIL_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_STATUS :: RD_PASS [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_PASS_MASK     0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_PASS_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_PASS_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_PASS_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_RD_PASS_DEFAULT  0x00000000
+
+/***************************************************************************
+ *EDC_CRC_COUNT - GDDR5M EDC signal path CRC counter register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_COUNT :: reserved0 [31:28] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_reserved0_MASK    0xf0000000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_reserved0_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_reserved0_SHIFT   28
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_COUNT :: WR_COUNT [27:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_WR_COUNT_MASK     0x0fff0000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_WR_COUNT_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_WR_COUNT_BITS     12
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_WR_COUNT_SHIFT    16
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_WR_COUNT_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_COUNT :: reserved1 [15:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_reserved1_MASK    0x0000f000
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_reserved1_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_reserved1_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_reserved1_SHIFT   12
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_COUNT :: RD_COUNT [11:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_RD_COUNT_MASK     0x00000fff
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_RD_COUNT_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_RD_COUNT_BITS     12
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_RD_COUNT_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_COUNT_RD_COUNT_DEFAULT  0x00000000
+
+/***************************************************************************
+ *EDC_CRC_STATUS_CLEAR - GDDR5M EDC signal path CRC counter register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_STATUS_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_reserved0_MASK 0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_reserved0_BITS 31
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: EDC_CRC_STATUS_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_CLEAR_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_CLEAR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_CLEAR_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_CLEAR_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_EDC_CRC_STATUS_CLEAR_CLEAR_DEFAULT 0x00000000
+
+/***************************************************************************
+ *BL_SPARE_REG - Byte-Lane Spare register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_0 :: BL_SPARE_REG :: reserved_for_eco0 [31:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_0_BL_SPARE_REG_reserved_for_eco0_MASK 0xffffffff
+#define DDR34_CORE_PHY_BYTE_LANE_0_BL_SPARE_REG_reserved_for_eco0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_BL_SPARE_REG_reserved_for_eco0_BITS 32
+#define DDR34_CORE_PHY_BYTE_LANE_0_BL_SPARE_REG_reserved_for_eco0_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_0_BL_SPARE_REG_reserved_for_eco0_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQS_P - Write channel DQS-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_BUSY_MASK  0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_BUSY_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_P :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_P :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQS_N - Write channel DQS-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_BUSY_MASK  0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_BUSY_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_N :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQS_N :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ0 - Write channel DQ0 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ0 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ0 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ1 - Write channel DQ1 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ1 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ1 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ2 - Write channel DQ2 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ2 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ2 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ2 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ2 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ2 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ2 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ2 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ3 - Write channel DQ3 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ3 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ3 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ3 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ3 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ3 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ3 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ3 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ4 - Write channel DQ4 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ4 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ4 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ4 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ4 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ4 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ4 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ4 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ5 - Write channel DQ5 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ5 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ5 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ5 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ5 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ5 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ5 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ5 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ6 - Write channel DQ6 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ6 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ6 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ6 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ6 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ6 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ6 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ6 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DQ7 - Write channel DQ7 VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ7 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ7 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ7 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ7 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ7 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ7 :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DQ7 :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_DM - Write channel DM VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DM :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_BUSY_MASK     0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_BUSY_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_BUSY_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_BUSY_SHIFT    31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_BUSY_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DM :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DM :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_FORCE_MASK    0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_FORCE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_FORCE_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_FORCE_SHIFT   16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DM :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DM :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_ADJ_EN_MASK   0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_ADJ_EN_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_ADJ_EN_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_ADJ_EN_SHIFT  12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DM :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_DM :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_WR_EDC - Write channel EDC VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_EDC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_EDC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_EDC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_EDC :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_EDC :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_EDC :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved2_MASK 0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved2_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_WR_EDC :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_VDL_STEP_MASK 0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_VDL_STEP_BITS 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQSP - Read channel DQSP VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQSN - Read channel DQSP VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQSN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ0P - Read channel DQ0-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ0N - Read channel DQ0-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ0N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ1P - Read channel DQ1-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ1N - Read channel DQ1-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ1N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ2P - Read channel DQ2-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ2N - Read channel DQ2-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ2N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ3P - Read channel DQ3-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ3N - Read channel DQ3-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ3N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ4P - Read channel DQ4-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ4N - Read channel DQ4-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ4N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ5P - Read channel DQ5-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ5N - Read channel DQ5-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ5N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ6P - Read channel DQ6-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ6N - Read channel DQ6-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ6N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ7P - Read channel DQ7-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7P :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7P :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7P :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7P :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7P :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7P :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7P :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DQ7N - Read channel DQ7-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7N :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7N :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7N :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7N :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7N :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7N :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DQ7N :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DMP - Read channel DM-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_DMN - Read channel DM-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_BUSY_MASK    0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_BUSY_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_BUSY_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_BUSY_SHIFT   31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_FORCE_MASK   0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_FORCE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_FORCE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_FORCE_SHIFT  16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_ADJ_EN_MASK  0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_ADJ_EN_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_DMN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EDCP - Read channel EDC-P VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCP :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCP :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCP :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCP :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCP :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCP :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCP :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EDCN - Read channel EDC-N VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCN :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_BUSY_MASK   0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_BUSY_SHIFT  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCN :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCN :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_FORCE_MASK  0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_FORCE_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCN :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCN :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCN :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EDCN :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EN_CS0 - Read channel CS_N[0] read enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS0 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS0 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS0 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS0 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS0 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS0 :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS0 :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CONTROL_RD_EN_CS1 - Read channel CS_N[1] read enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS1 :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_BUSY_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_BUSY_SHIFT 31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS1 :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved0_MASK 0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved0_BITS 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS1 :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_FORCE_MASK 0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_FORCE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_FORCE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_FORCE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_FORCE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS1 :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved1_MASK 0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS1 :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_ADJ_EN_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_ADJ_EN_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS1 :: reserved2 [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved2_MASK 0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved2_BITS 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_reserved2_SHIFT 8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CONTROL_RD_EN_CS1 :: VDL_STEP [07:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_VDL_STEP_MASK 0x000000ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_VDL_STEP_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_VDL_STEP_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_VDL_STEP_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_CLK_CONTROL - DDR interface signal Write Leveling CLK VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CLK_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CLK_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CLK_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CLK_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved1_MASK  0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved1_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CLK_CONTROL :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_ADJ_EN_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_ADJ_EN_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_ADJ_EN_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_ADJ_EN_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_ADJ_EN_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CLK_CONTROL :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved2_MASK  0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved2_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_CLK_CONTROL :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_VDL_STEP_MASK   0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_VDL_STEP_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_VDL_STEP_BITS   9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_VDL_STEP_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_CLK_CONTROL_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *VDL_LDE_CONTROL - DDR interface signal Write Leveling Capture Enable VDL control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_LDE_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_LDE_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_LDE_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_LDE_CONTROL :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved1_MASK  0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved1_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved1_SHIFT 13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_LDE_CONTROL :: ADJ_EN [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_ADJ_EN_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_ADJ_EN_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_ADJ_EN_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_ADJ_EN_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_ADJ_EN_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_LDE_CONTROL :: reserved2 [11:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved2_MASK  0x00000e00
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved2_BITS  3
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_reserved2_SHIFT 9
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: VDL_LDE_CONTROL :: VDL_STEP [08:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_VDL_STEP_MASK   0x000001ff
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_VDL_STEP_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_VDL_STEP_BITS   9
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_VDL_STEP_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_VDL_LDE_CONTROL_VDL_STEP_DEFAULT 0x00000000
+
+/***************************************************************************
+ *RD_EN_DLY_CYC - Read enable bit-clock cycle delay control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DLY_CYC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_BUSY_MASK         0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_BUSY_ALIGN        0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_BUSY_BITS         1
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_BUSY_SHIFT        31
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_BUSY_DEFAULT      0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DLY_CYC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_reserved0_MASK    0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_reserved0_BITS    14
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_reserved0_SHIFT   17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DLY_CYC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_FORCE_MASK        0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_FORCE_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_FORCE_BITS        1
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_FORCE_SHIFT       16
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_FORCE_DEFAULT     0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DLY_CYC :: reserved1 [15:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_reserved1_MASK    0x0000ff00
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_reserved1_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_reserved1_BITS    8
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_reserved1_SHIFT   8
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DLY_CYC :: CS1_CYCLES [07:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS1_CYCLES_MASK   0x000000f0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS1_CYCLES_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS1_CYCLES_BITS   4
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS1_CYCLES_SHIFT  4
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS1_CYCLES_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DLY_CYC :: CS0_CYCLES [03:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS0_CYCLES_MASK   0x0000000f
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS0_CYCLES_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS0_CYCLES_BITS   4
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS0_CYCLES_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC_CS0_CYCLES_DEFAULT 0x00000000
+
+/***************************************************************************
+ *WR_CHAN_DLY_CYC - Write leveling bit-clock cycle delay control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_CHAN_DLY_CYC :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_CHAN_DLY_CYC :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_CHAN_DLY_CYC :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_CHAN_DLY_CYC :: reserved1 [15:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_reserved1_MASK  0x0000fff8
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_reserved1_BITS  13
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_reserved1_SHIFT 3
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_CHAN_DLY_CYC :: CYCLES [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_CYCLES_MASK     0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_CYCLES_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_CYCLES_BITS     3
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_CYCLES_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC_CYCLES_DEFAULT  0x00000000
+
+/***************************************************************************
+ *READ_CONTROL - Read channel datapath control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_CONTROL :: reserved0 [31:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_reserved0_MASK     0xffffffe0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_reserved0_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_reserved0_BITS     27
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_reserved0_SHIFT    5
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_CONTROL :: MODE [04:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_MODE_MASK          0x00000010
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_MODE_ALIGN         0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_MODE_BITS          1
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_MODE_SHIFT         4
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_MODE_DEFAULT       0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_CONTROL :: reserved1 [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_reserved1_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_reserved1_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_reserved1_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_reserved1_SHIFT    3
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_CONTROL :: RD_DATA_DLY [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_RD_DATA_DLY_MASK   0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_RD_DATA_DLY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_RD_DATA_DLY_BITS   3
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_RD_DATA_DLY_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL_RD_DATA_DLY_DEFAULT 0x00000007
+
+/***************************************************************************
+ *READ_FIFO_ADDR - Read fifo addresss pointer register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_ADDR :: reserved0 [31:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_reserved0_MASK   0xfffffff8
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_reserved0_BITS   29
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_reserved0_SHIFT  3
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_ADDR :: ADDR [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_ADDR_MASK        0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_ADDR_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_ADDR_BITS        3
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_ADDR_SHIFT       0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_ADDR_ADDR_DEFAULT     0x00000000
+
+/***************************************************************************
+ *READ_FIFO_DATA - Read fifo data register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_DATA :: DATA [31:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DATA_DATA_MASK        0xffffffff
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DATA_DATA_ALIGN       0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DATA_DATA_BITS        32
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DATA_DATA_SHIFT       0
+
+/***************************************************************************
+ *READ_FIFO_DM_DBI - Read fifo dm/dbi register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_DM_DBI :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI_reserved0_MASK 0xfffffff0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI_reserved0_BITS 28
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI_reserved0_SHIFT 4
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_DM_DBI :: DM_DBI [03:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI_DM_DBI_MASK    0x0000000f
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI_DM_DBI_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI_DM_DBI_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_DM_DBI_DM_DBI_SHIFT   0
+
+/***************************************************************************
+ *READ_FIFO_STATUS - Read fifo status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_STATUS :: reserved0 [31:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_reserved0_MASK 0xfffffffc
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_reserved0_BITS 30
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_reserved0_SHIFT 2
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_STATUS :: OVERFLOW [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_OVERFLOW_MASK  0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_OVERFLOW_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_OVERFLOW_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_OVERFLOW_SHIFT 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_OVERFLOW_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_STATUS :: UNDERFLOW [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_UNDERFLOW_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_UNDERFLOW_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_UNDERFLOW_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_UNDERFLOW_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_STATUS_UNDERFLOW_DEFAULT 0x00000000
+
+/***************************************************************************
+ *READ_FIFO_CLEAR - Read fifo status clear register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_reserved0_MASK  0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_reserved0_BITS  31
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: READ_FIFO_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_CLEAR_MASK      0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_CLEAR_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_CLEAR_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_CLEAR_SHIFT     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR_CLEAR_DEFAULT   0x00000000
+
+/***************************************************************************
+ *IDLE_PAD_CONTROL - Idle mode SSTL pad control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: IDLE [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDLE_MASK      0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDLE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDLE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDLE_SHIFT     31
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDLE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: reserved0 [30:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_reserved0_MASK 0x7ff00000
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_reserved0_BITS 11
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: AUTO_DQ_RXENB_MODE [19:18] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_MASK 0x000c0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_SHIFT 18
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_RXENB_MODE_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: AUTO_DQ_IDDQ_MODE [17:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_MASK 0x00030000
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_AUTO_DQ_IDDQ_MODE_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: reserved_for_padding1 [15:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_reserved_for_padding1_MASK 0x00008000
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_reserved_for_padding1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_reserved_for_padding1_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_reserved_for_padding1_SHIFT 15
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: IO_IDLE_ENABLE [14:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_MASK 0x00007ff0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_BITS 11
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IO_IDLE_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: RXENB [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_RXENB_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_RXENB_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_RXENB_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_RXENB_SHIFT    3
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_RXENB_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: IDDQ [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDDQ_MASK      0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDDQ_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDDQ_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDDQ_SHIFT     2
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_IDDQ_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: DOUT_N [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_N_MASK    0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_N_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_N_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_N_SHIFT   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_N_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: IDLE_PAD_CONTROL :: DOUT_P [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_P_MASK    0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_P_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_P_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_P_SHIFT   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL_DOUT_P_DEFAULT 0x00000000
+
+/***************************************************************************
+ *DRIVE_PAD_CTL - SSTL pad drive characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: DRIVE_PAD_CTL :: reserved0 [31:30] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_reserved0_MASK    0xc0000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_reserved0_BITS    2
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_reserved0_SHIFT   30
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: DRIVE_PAD_CTL :: BL_PD_IDLE_STRENGTH [29:25] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_MASK 0x3e000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_SHIFT 25
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_IDLE_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: DRIVE_PAD_CTL :: BL_ND_IDLE_STRENGTH [24:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_MASK 0x01f00000
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_SHIFT 20
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_IDLE_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: DRIVE_PAD_CTL :: BL_PD_TERM_STRENGTH [19:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_MASK 0x000f8000
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_SHIFT 15
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_TERM_STRENGTH_DEFAULT 0x00000006
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: DRIVE_PAD_CTL :: BL_ND_TERM_STRENGTH [14:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_MASK 0x00007c00
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_SHIFT 10
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_TERM_STRENGTH_DEFAULT 0x00000006
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: DRIVE_PAD_CTL :: BL_PD_STRENGTH [09:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_STRENGTH_MASK 0x000003e0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_STRENGTH_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: DRIVE_PAD_CTL :: BL_ND_STRENGTH [04:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_STRENGTH_MASK 0x0000001f
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_STRENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL_BL_ND_STRENGTH_DEFAULT 0x0000001f
+
+/***************************************************************************
+ *RD_EN_DRIVE_PAD_CTL - SSTL read enable pad drive characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DRIVE_PAD_CTL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_reserved0_BITS 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DRIVE_PAD_CTL :: EDC_RD_EN_PD_STRENGTH [19:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_MASK 0x000f8000
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_SHIFT 15
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DRIVE_PAD_CTL :: EDC_RD_EN_ND_STRENGTH [14:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_MASK 0x00007c00
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_SHIFT 10
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_EDC_RD_EN_ND_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DRIVE_PAD_CTL :: BL_RD_EN_PD_STRENGTH [09:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_MASK 0x000003e0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_PD_STRENGTH_DEFAULT 0x0000001f
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: RD_EN_DRIVE_PAD_CTL :: BL_RD_EN_ND_STRENGTH [04:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_MASK 0x0000001f
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_BITS 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL_BL_RD_EN_ND_STRENGTH_DEFAULT 0x0000001f
+
+/***************************************************************************
+ *STATIC_PAD_CTL - pad rx and tx characteristics control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: reserved0 [31:21] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved0_MASK   0xffe00000
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved0_BITS   11
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved0_SHIFT  21
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: DQS_MODE [20:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_MODE_MASK    0x00100000
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_MODE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_MODE_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_MODE_SHIFT   20
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: reserved1 [19:18] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved1_MASK   0x000c0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved1_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved1_BITS   2
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved1_SHIFT  18
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: EDC_MODE [17:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_EDC_MODE_MASK    0x00030000
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_EDC_MODE_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_EDC_MODE_BITS    2
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_EDC_MODE_SHIFT   16
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_EDC_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: reserved2 [15:15] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved2_MASK   0x00008000
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved2_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved2_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved2_SHIFT  15
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: WDBI_ENABLE [14:14] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_WDBI_ENABLE_MASK 0x00004000
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_WDBI_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_WDBI_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_WDBI_ENABLE_SHIFT 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_WDBI_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: RDBI_ENABLE [13:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RDBI_ENABLE_MASK 0x00002000
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RDBI_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RDBI_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RDBI_ENABLE_SHIFT 13
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RDBI_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: DM_MODE [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DM_MODE_MASK     0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DM_MODE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DM_MODE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DM_MODE_SHIFT    12
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DM_MODE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: reserved3 [11:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved3_MASK   0x00000c00
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved3_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved3_BITS   2
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved3_SHIFT  10
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: DQS_TX_DIS [09:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_TX_DIS_MASK  0x00000200
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_TX_DIS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_TX_DIS_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_TX_DIS_SHIFT 9
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_DQS_TX_DIS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: reserved4 [08:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved4_MASK   0x000001fc
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved4_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved4_BITS   7
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_reserved4_SHIFT  2
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: STATIC_PAD_CTL :: RX_MODE [01:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RX_MODE_MASK     0x00000003
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RX_MODE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RX_MODE_BITS     2
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RX_MODE_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_STATIC_PAD_CTL_RX_MODE_DEFAULT  0x00000000
+
+/***************************************************************************
+ *WR_PREAMBLE_MODE - Write cycle preamble control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_PREAMBLE_MODE :: reserved0 [31:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_reserved0_MASK 0xffff0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_reserved0_BITS 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_reserved0_SHIFT 16
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_PREAMBLE_MODE :: DQ_POSTAM_BITS [15:14] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_MASK 0x0000c000
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_SHIFT 14
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_POSTAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_PREAMBLE_MODE :: DQ_PREAM_BITS [13:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_PREAM_BITS_MASK 0x00003000
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_PREAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_PREAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_PREAM_BITS_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQ_PREAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_PREAMBLE_MODE :: DQS [11:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_MASK       0x00000f00
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_BITS       4
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_SHIFT      8
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_DEFAULT    0x0000000e
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_PREAMBLE_MODE :: reserved1 [07:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_reserved1_MASK 0x000000e0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_reserved1_SHIFT 5
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_PREAMBLE_MODE :: DQS_POSTAM_BITS [04:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_MASK 0x00000018
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_BITS 2
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_POSTAM_BITS_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: WR_PREAMBLE_MODE :: DQS_PREAM_BITS [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_PREAM_BITS_MASK 0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_PREAM_BITS_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_PREAM_BITS_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_PREAM_BITS_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE_DQS_PREAM_BITS_DEFAULT 0x00000002
+
+/***************************************************************************
+ *ODT_CONTROL - Read channel ODT control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: ODT_CONTROL :: reserved_for_padding0 [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_reserved_for_padding0_MASK 0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_reserved_for_padding0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_reserved_for_padding0_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_reserved_for_padding0_SHIFT 31
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: ODT_CONTROL :: reserved1 [30:10] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_reserved1_MASK      0x7ffffc00
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_reserved1_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_reserved1_BITS      21
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_reserved1_SHIFT     10
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: ODT_CONTROL :: ODT_ENABLE [09:09] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_ENABLE_MASK     0x00000200
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_ENABLE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_ENABLE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_ENABLE_SHIFT    9
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_ENABLE_DEFAULT  0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: ODT_CONTROL :: ODT_DELAY [08:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_DELAY_MASK      0x000001c0
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_DELAY_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_DELAY_BITS      3
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_DELAY_SHIFT     6
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_DELAY_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: ODT_CONTROL :: ODT_POST_LENGTH [05:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_POST_LENGTH_MASK 0x00000038
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_POST_LENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_POST_LENGTH_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_POST_LENGTH_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_POST_LENGTH_DEFAULT 0x00000001
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: ODT_CONTROL :: ODT_PRE_LENGTH [02:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_PRE_LENGTH_MASK 0x00000007
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_PRE_LENGTH_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_PRE_LENGTH_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_PRE_LENGTH_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL_ODT_PRE_LENGTH_DEFAULT 0x00000003
+
+/***************************************************************************
+ *EDC_DPD_CONTROL - GDDR5M EDC digital phase detector control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_CONTROL :: reserved0 [31:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_reserved0_MASK  0xffffffc0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_reserved0_BITS  26
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_reserved0_SHIFT 6
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_CONTROL :: DQS_PHASE_OVERRIDE_VALUE [05:05] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_MASK 0x00000020
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_SHIFT 5
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_VALUE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_CONTROL :: DQS_PHASE_OVERRIDE_ENABLE [04:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_MASK 0x00000010
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_DQS_PHASE_OVERRIDE_ENABLE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_CONTROL :: SET_ADJ_EN [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_SET_ADJ_EN_MASK 0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_SET_ADJ_EN_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_SET_ADJ_EN_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_SET_ADJ_EN_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_SET_ADJ_EN_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_CONTROL :: UPDATE [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_UPDATE_MASK     0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_UPDATE_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_UPDATE_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_UPDATE_SHIFT    2
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_UPDATE_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_CONTROL :: MONITOR [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_MONITOR_MASK    0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_MONITOR_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_MONITOR_BITS    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_MONITOR_SHIFT   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_MONITOR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_CONTROL :: INIT [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_INIT_MASK       0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_INIT_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_INIT_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_INIT_SHIFT      0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_CONTROL_INIT_DEFAULT    0x00000000
+
+/***************************************************************************
+ *EDC_DPD_STATUS - GDDR5M EDC digital phase detector status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: reserved0 [31:25] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_reserved0_MASK   0xfe000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_reserved0_BITS   7
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_reserved0_SHIFT  25
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: CURRENT_DQS_PHASE [24:24] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_DQS_PHASE_MASK 0x01000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_DQS_PHASE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_DQS_PHASE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_DQS_PHASE_SHIFT 24
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_DQS_PHASE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: CURRENT_VDL_SETTING [23:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_VDL_SETTING_MASK 0x00ff0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_VDL_SETTING_SHIFT 16
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_CURRENT_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: reserved1 [15:13] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_reserved1_MASK   0x0000e000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_reserved1_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_reserved1_BITS   3
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_reserved1_SHIFT  13
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: INIT_DQS_PHASE [12:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DQS_PHASE_MASK 0x00001000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DQS_PHASE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DQS_PHASE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DQS_PHASE_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DQS_PHASE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: INIT_VDL_SETTING [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_VDL_SETTING_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_VDL_SETTING_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: EDGE_ERROR [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_EDGE_ERROR_MASK  0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_EDGE_ERROR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_EDGE_ERROR_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_EDGE_ERROR_SHIFT 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_EDGE_ERROR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: MONITOR_BUSY [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_MONITOR_BUSY_MASK 0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_MONITOR_BUSY_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_MONITOR_BUSY_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_MONITOR_BUSY_SHIFT 2
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_MONITOR_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: INIT_BUSY [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_BUSY_MASK   0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_BUSY_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_BUSY_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_BUSY_SHIFT  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_BUSY_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_STATUS :: INIT_DONE [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DONE_MASK   0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DONE_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DONE_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DONE_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_STATUS_INIT_DONE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_CONTROL - GDDR5M EDC digital phase detector output signal control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_CONTROL :: reserved0 [31:20] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_reserved0_MASK 0xfff00000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_reserved0_BITS 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_reserved0_SHIFT 20
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_CONTROL :: LOWER_LIMIT [19:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_MASK 0x000ff000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_SHIFT 12
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_LOWER_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_CONTROL :: UPPER_LIMIT [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_UPPER_LIMIT_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_CONTROL :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_CONTROL :: ENABLE [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_ENABLE_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_ENABLE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_ENABLE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_ENABLE_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_CONTROL_ENABLE_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_STATUS - GDDR5M EDC digital phase detector output signal status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_STATUS :: reserved0 [31:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_reserved0_MASK 0xfffff000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_reserved0_BITS 20
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_reserved0_SHIFT 12
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_STATUS :: VDL_SETTING [11:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VDL_SETTING_MASK 0x00000ff0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VDL_SETTING_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VDL_SETTING_BITS 8
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VDL_SETTING_SHIFT 4
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VDL_SETTING_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_STATUS :: reserved1 [03:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_reserved1_MASK 0x0000000e
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_reserved1_BITS 3
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_reserved1_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_STATUS :: VALID [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VALID_MASK   0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VALID_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VALID_BITS   1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VALID_SHIFT  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_VALID_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_DPD_OUT_STATUS_CLEAR - GDDR5M EDC digital phase detector output signal status clear register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_STATUS_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_reserved0_MASK 0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_reserved0_BITS 31
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_DPD_OUT_STATUS_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_DPD_OUT_STATUS_CLEAR_CLEAR_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_CRC_CONTROL - GDDR5M EDC signal path CRC control register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: BUSY [31:31] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_BUSY_MASK       0x80000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_BUSY_ALIGN      0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_BUSY_BITS       1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_BUSY_SHIFT      31
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_BUSY_DEFAULT    0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: reserved0 [30:17] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved0_MASK  0x7ffe0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved0_BITS  14
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved0_SHIFT 17
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: FORCE [16:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_FORCE_MASK      0x00010000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_FORCE_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_FORCE_BITS      1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_FORCE_SHIFT     16
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_FORCE_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: reserved1 [15:11] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved1_MASK  0x0000f800
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved1_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved1_BITS  5
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved1_SHIFT 11
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: CRCWL [10:08] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCWL_MASK      0x00000700
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCWL_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCWL_BITS      3
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCWL_SHIFT     8
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCWL_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: reserved2 [07:06] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved2_MASK  0x000000c0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved2_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved2_BITS  2
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved2_SHIFT 6
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: CRCRL [05:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCRL_MASK      0x00000030
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCRL_ALIGN     0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCRL_BITS      2
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCRL_SHIFT     4
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_CRCRL_DEFAULT   0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: reserved3 [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved3_MASK  0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved3_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved3_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_reserved3_SHIFT 3
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: COUNT_MODE [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_COUNT_MODE_MASK 0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_COUNT_MODE_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_COUNT_MODE_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_COUNT_MODE_SHIFT 2
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_COUNT_MODE_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: ENABLE_WR [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_WR_MASK  0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_WR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_WR_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_WR_SHIFT 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_WR_DEFAULT 0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_CONTROL :: ENABLE_RD [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_RD_MASK  0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_RD_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_RD_BITS  1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_RD_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_CONTROL_ENABLE_RD_DEFAULT 0x00000000
+
+/***************************************************************************
+ *EDC_CRC_STATUS - GDDR5M EDC signal path CRC status register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_STATUS :: reserved0 [31:04] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_reserved0_MASK   0xfffffff0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_reserved0_ALIGN  0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_reserved0_BITS   28
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_reserved0_SHIFT  4
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_STATUS :: WR_FAIL [03:03] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_FAIL_MASK     0x00000008
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_FAIL_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_FAIL_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_FAIL_SHIFT    3
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_FAIL_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_STATUS :: WR_PASS [02:02] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_PASS_MASK     0x00000004
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_PASS_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_PASS_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_PASS_SHIFT    2
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_WR_PASS_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_STATUS :: RD_FAIL [01:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_FAIL_MASK     0x00000002
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_FAIL_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_FAIL_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_FAIL_SHIFT    1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_FAIL_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_STATUS :: RD_PASS [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_PASS_MASK     0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_PASS_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_PASS_BITS     1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_PASS_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_RD_PASS_DEFAULT  0x00000000
+
+/***************************************************************************
+ *EDC_CRC_COUNT - GDDR5M EDC signal path CRC counter register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_COUNT :: reserved0 [31:28] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_reserved0_MASK    0xf0000000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_reserved0_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_reserved0_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_reserved0_SHIFT   28
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_COUNT :: WR_COUNT [27:16] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_WR_COUNT_MASK     0x0fff0000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_WR_COUNT_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_WR_COUNT_BITS     12
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_WR_COUNT_SHIFT    16
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_WR_COUNT_DEFAULT  0x00000000
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_COUNT :: reserved1 [15:12] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_reserved1_MASK    0x0000f000
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_reserved1_ALIGN   0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_reserved1_BITS    4
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_reserved1_SHIFT   12
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_COUNT :: RD_COUNT [11:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_RD_COUNT_MASK     0x00000fff
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_RD_COUNT_ALIGN    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_RD_COUNT_BITS     12
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_RD_COUNT_SHIFT    0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_COUNT_RD_COUNT_DEFAULT  0x00000000
+
+/***************************************************************************
+ *EDC_CRC_STATUS_CLEAR - GDDR5M EDC signal path CRC counter register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_STATUS_CLEAR :: reserved0 [31:01] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_reserved0_MASK 0xfffffffe
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_reserved0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_reserved0_BITS 31
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_reserved0_SHIFT 1
+
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: EDC_CRC_STATUS_CLEAR :: CLEAR [00:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_CLEAR_MASK 0x00000001
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_CLEAR_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_CLEAR_BITS 1
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_CLEAR_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_EDC_CRC_STATUS_CLEAR_CLEAR_DEFAULT 0x00000000
+
+/***************************************************************************
+ *BL_SPARE_REG - Byte-Lane Spare register
+ ***************************************************************************/
+/* DDR34_CORE_PHY_BYTE_LANE_1 :: BL_SPARE_REG :: reserved_for_eco0 [31:00] */
+#define DDR34_CORE_PHY_BYTE_LANE_1_BL_SPARE_REG_reserved_for_eco0_MASK 0xffffffff
+#define DDR34_CORE_PHY_BYTE_LANE_1_BL_SPARE_REG_reserved_for_eco0_ALIGN 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_BL_SPARE_REG_reserved_for_eco0_BITS 32
+#define DDR34_CORE_PHY_BYTE_LANE_1_BL_SPARE_REG_reserved_for_eco0_SHIFT 0
+#define DDR34_CORE_PHY_BYTE_LANE_1_BL_SPARE_REG_reserved_for_eco0_DEFAULT 0x00000000
+
+#endif /* #ifndef DDR34_PHY_REGISTERS_H__ */
+
+/* End of File */
diff --git a/arch/arm/cpu/armv7/iproc/shmoo_and28/phy_reg_access.c b/arch/arm/cpu/armv7/iproc/shmoo_and28/phy_reg_access.c
new file mode 100755
index 0000000..2fa938b
--- /dev/null
+++ b/arch/arm/cpu/armv7/iproc/shmoo_and28/phy_reg_access.c
@@ -0,0 +1,30 @@
+/***************************************************************************
+ *     Copyright (c) 2014, Broadcom Corporation
+ *     All Rights Reserved
+ *     Confidential Property of Broadcom Corporation
+ *
+ *  THIS SOFTWARE MAY ONLY BE USED SUBJECT TO AN EXECUTED SOFTWARE LICENSE
+ *  AGREEMENT  BETWEEN THE USER AND BROADCOM.  YOU HAVE NO RIGHT TO USE OR
+ *  EXPLOIT THIS MATERIAL EXCEPT SUBJECT TO THE TERMS OF SUCH AN AGREEMENT.
+ *
+ ***************************************************************************/
+ 
+#include <common.h>
+#include "phy_reg_access.h"
+
+uint32 REGRD (uint32 address) {
+
+  volatile unsigned long data;
+  
+  data = cpu_to_le32(* (volatile uint32 *) ( ((uint32)GLOBAL_REG_RBUS_START) | (address)));
+  //printf("REGRD %08X=%08X\n", address, data);
+  return data;
+}
+
+uint32 REGWR (uint32 address, uint32 data) {
+
+  ((* (volatile uint32 *) ( ((uint32)GLOBAL_REG_RBUS_START) | (address))) = cpu_to_le32(data));
+  //printf("REGWR %08X=%08X\n", address, data);
+//  return SOC_E_NONE;
+   return 0;
+}
diff --git a/arch/arm/cpu/armv7/iproc/shmoo_and28/phy_reg_access.h b/arch/arm/cpu/armv7/iproc/shmoo_and28/phy_reg_access.h
new file mode 100755
index 0000000..745262a
--- /dev/null
+++ b/arch/arm/cpu/armv7/iproc/shmoo_and28/phy_reg_access.h
@@ -0,0 +1,30 @@
+/***************************************************************************
+ *     Copyright (c) 2014, Broadcom Corporation
+ *     All Rights Reserved
+ *     Confidential Property of Broadcom Corporation
+ *
+ *  THIS SOFTWARE MAY ONLY BE USED SUBJECT TO AN EXECUTED SOFTWARE LICENSE
+ *  AGREEMENT  BETWEEN THE USER AND BROADCOM.  YOU HAVE NO RIGHT TO USE OR
+ *  EXPLOIT THIS MATERIAL EXCEPT SUBJECT TO THE TERMS OF SUCH AN AGREEMENT.
+ *
+ ***************************************************************************/
+ 
+#define GLOBAL_REG_RBUS_START   0x0000000000000000LL
+#define uint32                  unsigned long
+
+uint32 REGRD (uint32 address) ;
+uint32 REGWR (uint32 address, uint32 data) ;
+
+#define DDR_PHY_REG_READ(_unit, _pc, flags, _reg_addr, _val) \
+            *(uint32 *)_val = REGRD((_pc) + (_reg_addr))
+/*            soc_ddr40_phy_reg_ci_read((_unit), (_pc), (_reg_addr), (_val)) */
+#define DDR_PHY_REG_WRITE(_unit, _pc, _flags, _reg_addr, _val) \
+            REGWR((_pc) + (_reg_addr), (_val))
+/*            soc_ddr40_phy_reg_ci_write((_unit), (_pc), (_reg_addr), (_val)) */
+#define DDR_PHY_REG_MODIFY(_unit, _pc, _flags, _reg_addr, _val, _mask) \
+            REGWR((_pc) + (_reg_addr), (REGRD((_pc) + (_reg_addr)) & ~(_mask)) | ((_val) & (_mask)))
+/*            soc_ddr40_phy_reg_ci_modify((_unit), (_pc), (_reg_addr), (_val), (_mask)) */
+#define DDR_PHY_GET_FIELD(m,c,r,f) \
+            GET_FIELD(m,c,r,f)
+#define DDR_PHY_SET_FIELD(m,c,r,f,d) \
+            SET_FIELD(m,c,r,f,d)
diff --git a/arch/arm/cpu/armv7/iproc/shmoo_and28/shmoo_and28.c b/arch/arm/cpu/armv7/iproc/shmoo_and28/shmoo_and28.c
new file mode 100755
index 0000000..e429e5a
--- /dev/null
+++ b/arch/arm/cpu/armv7/iproc/shmoo_and28/shmoo_and28.c
@@ -0,0 +1,4699 @@
+/*
+ * $Id: shmoo_and28.c,v 1.1.1.1 2014/05/05 07:55:34 mbasoglu Exp $
+ * $Copyright: (c) 2013 Broadcom Corp.
+ * All Rights Reserved.$
+ *
+ * Andover 28nm PHY Support by SJ DDR Team
+ */
+
+#include <config.h>
+#include <common.h>
+#include "asm/arch/socregs.h"
+#include "asm/iproc/iproc_common.h"
+#include "asm/iproc/reg_utils.h"
+
+#define STATIC static
+
+#define SOC_IF_ERROR_RETURN(x)      (x)
+#define sal_alloc(x,y)              malloc(x)
+#define sal_memset(x,y,z)           memset(x,y,z)
+#define sal_free(x)                 free(x)
+#define sal_usleep(x)               udelay(x)
+
+#define TRUE                        (1)
+#define FALSE                       (0)
+
+/* BEGIN: TEMPORARY */
+#if defined(CONFIG_CYGNUS)
+#define CHIP_IS_CYGNUS              TRUE
+#else
+#define CHIP_IS_CYGNUS              FALSE
+#endif
+#if defined (CONFIG_GREYHOUND)
+#define CHIP_IS_GREYHOUND           TRUE
+#else
+#define CHIP_IS_GREYHOUND           FALSE
+#endif
+#if defined (CONFIG_SABER2)
+#define CHIP_IS_SABER2              TRUE
+#else
+#define CHIP_IS_SABER2              FALSE
+#endif
+
+
+#ifndef BCM_AND28_SUPPORT
+#define BCM_AND28_SUPPORT
+#endif
+/* END: TEMPORARY */
+
+#ifdef BCM_AND28_SUPPORT
+#include "shmoo_and28.h"
+#include "phy_reg_access.h"
+#include "ydc_ddr_bist.h"
+    #ifdef PHY_AND28_E0
+    #include "phy_and28_e0.h"
+    #endif
+    #ifdef PHY_AND28_E2
+    #include "phy_and28_e2.h"
+    #endif
+#endif
+
+#define shmoo_dram_info (*((and28_shmoo_dram_info_t *)CONFIG_SHMOO_SRAM_BUF))
+
+const uint32 shmoo_order_and28_ddr3[SHMOO_AND28_DDR3_SEQUENCE_COUNT] =
+{
+    SHMOO_AND28_RD_EN,
+    SHMOO_AND28_RD_EXTENDED,
+    SHMOO_AND28_WR_EXTENDED,
+    SHMOO_AND28_ADDR_EXTENDED,
+    SHMOO_AND28_CTRL_EXTENDED
+};
+
+const uint32 shmoo_order_and28_ddr3l[SHMOO_AND28_DDR3L_SEQUENCE_COUNT] =
+{
+    SHMOO_AND28_RD_EN,
+    SHMOO_AND28_RD_EXTENDED,
+    SHMOO_AND28_WR_EXTENDED,
+    SHMOO_AND28_ADDR_EXTENDED,
+    SHMOO_AND28_CTRL_EXTENDED
+};
+
+uint32
+_shmoo_and28_check_dram(int phy_ndx)
+{
+    return ((shmoo_dram_info.dram_bitmap >> phy_ndx) & 0x1);
+}
+
+STATIC int
+_initialize_bist(int unit, int phy_ndx, int bit, and28_shmoo_container_t *scPtr)
+{
+    ydc_ddr_bist_info_t bist_info;
+    
+    switch ((*scPtr).shmooType) {
+        case SHMOO_AND28_RD_EN:
+            bist_info.write_weight = 255;
+            bist_info.read_weight = 255;
+            bist_info.bist_timer_us = 0;
+            bist_info.bist_num_actions = 510;
+            bist_info.bist_start_address = 0x00000000;
+            bist_info.bist_end_address = 0x00FFFFFF;
+            bist_info.mpr_mode = 0;
+            bist_info.prbs_mode = 1;
+            break;
+        case SHMOO_AND28_RD_EXTENDED:
+            bist_info.write_weight = 255;
+            bist_info.read_weight = 255;
+            bist_info.bist_timer_us = 0;
+            bist_info.bist_num_actions = 510;
+            bist_info.bist_start_address = 0x00000000;
+            bist_info.bist_end_address = 0x00FFFFFF;
+            bist_info.mpr_mode = 0;
+            bist_info.prbs_mode = 1;
+            break;
+        case SHMOO_AND28_WR_EXTENDED:
+            bist_info.write_weight = 255;
+            bist_info.read_weight = 255;
+            bist_info.bist_timer_us = 0;
+            bist_info.bist_num_actions = 510;
+            bist_info.bist_start_address = 0x00000000;
+            bist_info.bist_end_address = 0x00FFFFFF;
+            bist_info.mpr_mode = 0;
+            bist_info.prbs_mode = 1;
+            break;
+        case SHMOO_AND28_ADDR_EXTENDED:
+            bist_info.write_weight = 255;
+            bist_info.read_weight = 255;
+            bist_info.bist_timer_us = 0;
+            bist_info.bist_num_actions = 510;
+            bist_info.bist_start_address = 0x00000000;
+            bist_info.bist_end_address = 0x00FFFFFF;
+            bist_info.mpr_mode = 0;
+            bist_info.prbs_mode = 1;
+            break;
+        case SHMOO_AND28_CTRL_EXTENDED:
+            bist_info.write_weight = 255;
+            bist_info.read_weight = 255;
+            bist_info.bist_timer_us = 0;
+            bist_info.bist_num_actions = 510;
+            bist_info.bist_start_address = 0x00000000;
+            bist_info.bist_end_address = 0x00FFFFFF;
+            bist_info.mpr_mode = 0;
+            bist_info.prbs_mode = 1;
+            break;
+        default:
+            printf("Unsupported shmoo type: %02lu\n", (*scPtr).shmooType);
+            return SOC_E_FAIL;
+    }
+    
+    return soc_ydc_ddr_bist_config_set(unit, phy_ndx, &bist_info);
+}
+
+STATIC int
+_run_bist(int unit, int phy_ndx, and28_shmoo_container_t *scPtr, and28_shmoo_error_array_t *seaPtr)
+{
+    ydc_ddr_bist_err_cnt_t be;
+    
+    switch ((*scPtr).shmooType) {
+        case SHMOO_AND28_RD_EN:
+            SOC_IF_ERROR_RETURN(soc_ydc_ddr_bist_run(unit, phy_ndx, &be));
+            
+            if(shmoo_dram_info.interface_bitwidth == 16)
+            {
+                (*seaPtr)[0] = (((be.bist_err_occur) >> 16) | (be.bist_err_occur)) & 0xFFFF;
+            }
+            else
+            {
+                (*seaPtr)[0] = be.bist_err_occur;
+            }
+            break;
+        case SHMOO_AND28_RD_EXTENDED:
+            SOC_IF_ERROR_RETURN(soc_ydc_ddr_bist_run(unit, phy_ndx, &be));
+            
+            if(shmoo_dram_info.interface_bitwidth == 16)
+            {
+                (*seaPtr)[0] = (((be.bist_err_occur) >> 16) | (be.bist_err_occur)) & 0xFFFF;
+            }
+            else
+            {
+                (*seaPtr)[0] = be.bist_err_occur;
+            }
+            break;
+        case SHMOO_AND28_WR_EXTENDED:
+            SOC_IF_ERROR_RETURN(soc_ydc_ddr_bist_run(unit, phy_ndx, &be));
+            
+            if(shmoo_dram_info.interface_bitwidth == 16)
+            {
+                (*seaPtr)[0] = (((be.bist_err_occur) >> 16) | (be.bist_err_occur)) & 0xFFFF;
+            }
+            else
+            {
+                (*seaPtr)[0] = be.bist_err_occur;
+            }
+            break;
+        case SHMOO_AND28_ADDR_EXTENDED:
+            SOC_IF_ERROR_RETURN(soc_ydc_ddr_bist_run(unit, phy_ndx, &be));
+            
+            if(shmoo_dram_info.interface_bitwidth == 16)
+            {
+                (*seaPtr)[0] = (((be.bist_err_occur) >> 16) | (be.bist_err_occur)) & 0xFFFF;
+            }
+            else
+            {
+                (*seaPtr)[0] = be.bist_err_occur;
+            }
+            break;
+        case SHMOO_AND28_CTRL_EXTENDED:
+            SOC_IF_ERROR_RETURN(soc_ydc_ddr_bist_run(unit, phy_ndx, &be));
+            
+            if(shmoo_dram_info.interface_bitwidth == 16)
+            {
+                (*seaPtr)[0] = (((be.bist_err_occur) >> 16) | (be.bist_err_occur)) & 0xFFFF;
+            }
+            else
+            {
+                (*seaPtr)[0] = be.bist_err_occur;
+            }
+            break;
+        default:
+            printf("Unsupported shmoo type: %02lu\n", (*scPtr).shmooType);
+            return SOC_E_FAIL;
+    }
+    
+    return SOC_E_NONE;
+}
+
+STATIC int
+_shmoo_and28_rd_en(int unit, int phy_ndx, and28_shmoo_container_t *scPtr)
+{
+    uint32 x;
+    uint32 y;
+    uint32 jump;
+    uint32 yCapMin;
+    uint32 yCapMax;
+    uint32 xStart;
+    uint32 data;
+    and28_shmoo_error_array_t sea;
+
+    yCapMin = 0;
+    yCapMax = (*scPtr).sizeY;
+    jump = (*scPtr).yJump;
+    xStart = 0;
+
+    (*scPtr).engageUIshift = 0;
+    (*scPtr).yCapMin = yCapMin;
+    (*scPtr).yCapMax = yCapMax;
+    (*scPtr).shmooType = SHMOO_AND28_RD_EN;
+    
+    _initialize_bist(unit, phy_ndx, -1, scPtr);
+    
+    for(y = yCapMin; y < yCapMax; y++)
+    {
+        data = 0;
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQ0P, FORCE, 1);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQ0P, VDL_STEP, y << jump);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN, data);
+        
+        #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+        if(shmoo_dram_info.interface_bitwidth == 32)
+        {
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN, data);
+        }
+        #endif
+
+        for(x = 0; x < (*scPtr).sizeX; x++)
+        {
+            data = 0;
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, x);
+            
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1, data);
+            
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1, data);
+            }
+            #endif
+            
+            data = 0;
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, READ_FIFO_CLEAR, CLEAR, 1);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR, data);
+            
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR, data);
+            }
+            #endif
+
+            sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+            
+            _run_bist(unit, phy_ndx, scPtr, &sea);
+            
+            (*scPtr).result2D[x + xStart] = sea[0];
+        }
+        
+        xStart += (*scPtr).sizeX;
+    }
+    
+    return SOC_E_NONE;
+}
+
+STATIC int
+_shmoo_and28_wr_extended(int unit, int phy_ndx, and28_shmoo_container_t *scPtr)
+{
+    uint32 x;
+    uint32 data;
+    and28_shmoo_error_array_t sea;
+
+    (*scPtr).engageUIshift = 0;
+    (*scPtr).sizeY = 1;
+    (*scPtr).yCapMin = 0;
+    (*scPtr).yCapMax = 1;
+    (*scPtr).shmooType = SHMOO_AND28_WR_EXTENDED;
+    
+    _initialize_bist(unit, phy_ndx, -1, scPtr);
+
+    for(x = 0; x < (*scPtr).sizeX; x++)
+    {
+        data = 0;
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_WR_DQ0, FORCE, 1);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_WR_DQ0, VDL_STEP, x);
+        
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC, data);
+        
+        #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+        if(shmoo_dram_info.interface_bitwidth == 32)
+        {
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC, data);
+        }
+        #endif
+        
+        data = 0;
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, READ_FIFO_CLEAR, CLEAR, 1);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR, data);
+        
+        #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+        if(shmoo_dram_info.interface_bitwidth == 32)
+        {
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR, data);
+        }
+        #endif
+
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        
+        _run_bist(unit, phy_ndx, scPtr, &sea);
+        
+        (*scPtr).result2D[x] = sea[0];
+    }
+    
+    return SOC_E_NONE;
+}
+
+STATIC int
+_shmoo_and28_rd_extended(int unit, int phy_ndx, and28_shmoo_container_t *scPtr)
+{
+    uint32 x;
+    uint32 y;
+    uint32 yCapMin;
+    uint32 yCapMax;
+    uint32 xStart;
+    uint32 data, temp;
+    uint32 rd_dqs_pos0, rd_dqs_pos1, rd_en_pos0, rd_en_pos1, rd_dqs_delta0, rd_dqs_delta1;
+    uint32 rd_dq_fail_count0, rd_dq_fail_count1;
+    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+        uint32 rd_dqs_pos2, rd_dqs_pos3, rd_en_pos2, rd_en_pos3, rd_dqs_delta2, rd_dqs_delta3;
+        uint32 rd_dq_fail_count2, rd_dq_fail_count3;
+    #endif
+    and28_shmoo_error_array_t sea;
+
+    yCapMin = 16;
+    yCapMax = 49;
+    xStart = 0;
+
+    (*scPtr).engageUIshift = 0;
+    (*scPtr).sizeY = SHMOO_AND28_MAX_VREF_RANGE;
+    (*scPtr).yCapMin = yCapMin;
+    (*scPtr).yCapMax = yCapMax;
+    (*scPtr).yJump = 0;
+    (*scPtr).shmooType = SHMOO_AND28_RD_EXTENDED;
+    
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP, &data);
+    rd_dqs_pos0 = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQSP, VDL_STEP);
+    
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP, &data);
+    rd_dqs_pos1 = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_DQSP, VDL_STEP);
+    
+    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+    if(shmoo_dram_info.interface_bitwidth == 32)
+    {
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP, &data);
+        rd_dqs_pos2 = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_DQSP, VDL_STEP);
+        
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP, &data);
+        rd_dqs_pos3 = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_DQSP, VDL_STEP);
+    }
+    #endif
+    
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0, &data);
+    rd_en_pos0 = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP);
+    
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0, &data);
+    rd_en_pos1 = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP);
+    
+    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+    if(shmoo_dram_info.interface_bitwidth == 32)
+    {
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0, &data);
+        rd_en_pos2 = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP);
+        
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0, &data);
+        rd_en_pos3 = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP);
+    }
+    #endif
+    
+    _initialize_bist(unit, phy_ndx, -1, scPtr);
+    
+    x = 0;
+    data = 0;
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQSP, FORCE, 1);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQSP, VDL_STEP, x);
+    
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP, data);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN, data);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP, data);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN, data);
+    
+    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+    if(shmoo_dram_info.interface_bitwidth == 32)
+    {
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN, data);
+    }
+    #endif
+    
+    rd_dqs_delta0 = x - rd_dqs_pos0;
+    rd_dqs_delta1 = x - rd_dqs_pos1;
+    
+    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+    if(shmoo_dram_info.interface_bitwidth == 32)
+    {
+        rd_dqs_delta2 = x - rd_dqs_pos2;
+        rd_dqs_delta3 = x - rd_dqs_pos3;
+    }
+    #endif
+    
+    temp = rd_en_pos0 + rd_dqs_delta0;
+    data = 0;
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+    if(temp & 0x80000000)
+    {
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+    }
+    else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+    {
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+    }
+    else
+    {
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+    }
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0, data);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1, data);
+    
+    temp = rd_en_pos1 + rd_dqs_delta1;
+    data = 0;
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+    if(temp & 0x80000000)
+    {
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+    }
+    else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+    {
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+    }
+    else
+    {
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+    }
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0, data);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1, data);
+    
+    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+    if(shmoo_dram_info.interface_bitwidth == 32)
+    {
+        temp = rd_en_pos2 + rd_dqs_delta2;
+        data = 0;
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+        if(temp & 0x80000000)
+        {
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+        }
+        else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+        {
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+        }
+        else
+        {
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+        }
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1, data);
+        
+        temp = rd_en_pos3 + rd_dqs_delta3;
+        data = 0;
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+        if(temp & 0x80000000)
+        {
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+        }
+        else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+        {
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+        }
+        else
+        {
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+        }
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1, data);
+    }
+    #endif
+    
+    rd_dq_fail_count0 = 0;
+    rd_dq_fail_count1 = 0;
+    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+    if(shmoo_dram_info.interface_bitwidth == 32)
+    {
+        rd_dq_fail_count2 = 0;
+        rd_dq_fail_count3 = 0;
+    }
+    #endif
+    
+    for(x = 0; x < (*scPtr).sizeX; x++)
+    {
+        data = 0;
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQ0P, FORCE, 1);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQ0P, VDL_STEP, x);
+        if(rd_dq_fail_count0 <= SHMOO_AND28_RD_DQ_FAIL_CAP)
+        {
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN, data);
+        }
+        if(rd_dq_fail_count1 <= SHMOO_AND28_RD_DQ_FAIL_CAP)
+        {
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN, data);
+        }
+        
+        #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+        if(shmoo_dram_info.interface_bitwidth == 32)
+        {
+            if(rd_dq_fail_count2 <= SHMOO_AND28_RD_DQ_FAIL_CAP)
+            {
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN, data);
+            }
+            if(rd_dq_fail_count3 <= SHMOO_AND28_RD_DQ_FAIL_CAP)
+            {
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN, data);
+            }
+        }
+        #endif
+    
+        data = 0;
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, READ_FIFO_CLEAR, CLEAR, 1);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR, data);
+        
+        #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+        if(shmoo_dram_info.interface_bitwidth == 32)
+        {
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR, data);
+        }
+        #endif
+        
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        
+        _run_bist(unit, phy_ndx, scPtr, &sea);
+        
+        if((sea[0] & 0x000000FF) == 0x000000FF)
+        {
+            rd_dq_fail_count0++;
+        }
+        if((sea[0] & 0x0000FF00) == 0x0000FF00)
+        {
+            rd_dq_fail_count1++;
+        }
+        
+        #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+        if(shmoo_dram_info.interface_bitwidth == 32)
+        {
+            if((sea[0] & 0x00FF0000) == 0x00FF0000)
+            {
+                rd_dq_fail_count2++;
+            }
+            if((sea[0] & 0xFF000000) == 0xFF000000)
+            {
+                rd_dq_fail_count3++;
+            }
+        }
+        #endif
+        
+        if((rd_dq_fail_count0 > SHMOO_AND28_RD_DQ_FAIL_CAP) && (rd_dq_fail_count1 > SHMOO_AND28_RD_DQ_FAIL_CAP))
+        {
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                if((rd_dq_fail_count2 > SHMOO_AND28_RD_DQ_FAIL_CAP) && (rd_dq_fail_count3 > SHMOO_AND28_RD_DQ_FAIL_CAP))
+                {
+                    break;
+                }
+            }
+            else
+            {
+                break;
+            }
+            #else
+                break;
+            #endif
+        }
+    }
+
+    for(y = yCapMin; y < yCapMax; y++)
+    {
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL, &data);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VREF_DAC_CONTROL, DAC0, y);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VREF_DAC_CONTROL, DAC1, y);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL, data);
+        
+        for(x = 0; x < (*scPtr).sizeX; x++)
+        {
+            data = 0;
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQSP, FORCE, 1);
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQSP, VDL_STEP, x);
+            
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN, data);
+            
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN, data);
+            }
+            #endif
+            
+            rd_dqs_delta0 = x - rd_dqs_pos0;
+            rd_dqs_delta1 = x - rd_dqs_pos1;
+            
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                rd_dqs_delta2 = x - rd_dqs_pos2;
+                rd_dqs_delta3 = x - rd_dqs_pos3;
+            }
+            #endif
+            
+            temp = rd_en_pos0 + rd_dqs_delta0;
+            data = 0;
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+            if(temp & 0x80000000)
+            {
+                DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+            }
+            else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+            {
+                DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+            }
+            else
+            {
+                DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+            }
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1, data);
+            
+            temp = rd_en_pos1 + rd_dqs_delta1;
+            data = 0;
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+            if(temp & 0x80000000)
+            {
+                DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+            }
+            else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+            {
+                DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+            }
+            else
+            {
+                DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+            }
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1, data);
+            
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                temp = rd_en_pos2 + rd_dqs_delta2;
+                data = 0;
+                DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                if(temp & 0x80000000)
+                {
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+                }
+                else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+                {
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+                }
+                else
+                {
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+                }
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1, data);
+                
+                temp = rd_en_pos3 + rd_dqs_delta3;
+                data = 0;
+                DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                if(temp & 0x80000000)
+                {
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+                }
+                else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+                {
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+                }
+                else
+                {
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+                }
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1, data);
+            }
+            #endif
+        
+            data = 0;
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, READ_FIFO_CLEAR, CLEAR, 1);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR, data);
+            
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR, data);
+            }
+            #endif
+            
+            sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+            
+            _run_bist(unit, phy_ndx, scPtr, &sea);
+            
+            (*scPtr).result2D[x + xStart] = sea[0];
+        }
+        
+        xStart += (*scPtr).sizeX;
+    }
+    
+    return SOC_E_NONE;
+}
+
+STATIC int
+_shmoo_and28_addr_extended(int unit, int phy_ndx, and28_shmoo_container_t *scPtr)
+{
+    uint32 x;
+    uint32 data;
+    and28_shmoo_error_array_t sea;
+
+    (*scPtr).engageUIshift = 0;
+    (*scPtr).sizeY = 1;
+    (*scPtr).yCapMin = 0;
+    (*scPtr).yCapMax = 1;
+    (*scPtr).shmooType = SHMOO_AND28_ADDR_EXTENDED;
+    
+    _initialize_bist(unit, phy_ndx, -1, scPtr);
+
+    for(x = 0; x < (*scPtr).sizeX; x++)
+    {
+        data = 0;
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CONTROL_AD00, FORCE, 1);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CONTROL_AD00, VDL_STEP, x);
+        
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09, data);
+        
+        data = 0;
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, READ_FIFO_CLEAR, CLEAR, 1);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR, data);
+        
+        #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+        if(shmoo_dram_info.interface_bitwidth == 32)
+        {
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR, data);
+        }
+        #endif
+
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        
+        _run_bist(unit, phy_ndx, scPtr, &sea);
+        
+        (*scPtr).result2D[x] = sea[0];
+    }
+    
+    return SOC_E_NONE;
+}
+
+STATIC int
+_shmoo_and28_ctrl_extended(int unit, int phy_ndx, and28_shmoo_container_t *scPtr)
+{
+    uint32 x;
+    uint32 data;
+    and28_shmoo_error_array_t sea;
+
+    (*scPtr).engageUIshift = 0;
+    (*scPtr).sizeY = 1;
+    (*scPtr).yCapMin = 0;
+    (*scPtr).yCapMax = 1;
+    (*scPtr).shmooType = SHMOO_AND28_CTRL_EXTENDED;
+    
+    _initialize_bist(unit, phy_ndx, -1, scPtr);
+
+    for(x = 0; x < (*scPtr).sizeX; x++)
+    {
+        data = 0;
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CONTROL_AD00, FORCE, 1);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CONTROL_AD00, VDL_STEP, x);
+        
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N, data);
+        
+        data = 0;
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, READ_FIFO_CLEAR, CLEAR, 1);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR, data);
+        
+        #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+        if(shmoo_dram_info.interface_bitwidth == 32)
+        {
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR, data);
+        }
+        #endif
+
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        
+        _run_bist(unit, phy_ndx, scPtr, &sea);
+        
+        (*scPtr).result2D[x] = sea[0];
+    }
+    
+    return SOC_E_NONE;
+}
+
+STATIC int
+_shmoo_and28_do(int unit, int phy_ndx, and28_shmoo_container_t *scPtr)
+{
+    switch ((*scPtr).shmooType) {
+        case SHMOO_AND28_RD_EN:
+            return _shmoo_and28_rd_en(unit, phy_ndx, scPtr);
+        case SHMOO_AND28_RD_EXTENDED:
+            return _shmoo_and28_rd_extended(unit, phy_ndx, scPtr);
+        case SHMOO_AND28_WR_EXTENDED:
+            return _shmoo_and28_wr_extended(unit, phy_ndx, scPtr);
+        case SHMOO_AND28_ADDR_EXTENDED:
+            return _shmoo_and28_addr_extended(unit, phy_ndx, scPtr);
+        case SHMOO_AND28_CTRL_EXTENDED:
+            if(!SHMOO_AND28_QUICK_SHMOO_CTRL_EXTENDED)
+            {
+                return _shmoo_and28_ctrl_extended(unit, phy_ndx, scPtr);
+            }
+            break;
+        default:
+            printf("Unsupported shmoo type: %02lu\n", (*scPtr).shmooType);
+            return SOC_E_FAIL;
+    }
+    return SOC_E_NONE;
+}
+
+STATIC int
+_calib_2D(int unit, int phy_ndx, and28_shmoo_container_t *scPtr, uint32 calibMode, uint32 calibPos)
+{
+    uint32 x;
+    uint32 y;
+    uint32 xStart;
+    uint32 sizeX;
+    uint32 calibStart;
+    uint32 yCapMin;
+    uint32 yCapMax;
+    uint32 i;
+    uint32 iter;
+    uint32 shiftAmount;
+    uint32 dataMask;
+    int32 passStart;
+    int32 failStart;
+    int32 passStartSeen;
+    int32 failStartSeen;
+    int32 passLength;
+    int32 maxPassStart;
+    int32 maxPassLength;
+    int32 maxMidPointX;
+    uint32 maxPassLengthArray[SHMOO_AND28_WORD];
+
+    xStart = 0;
+    sizeX = (*scPtr).sizeX;
+    calibStart = (*scPtr).calibStart;
+    yCapMin = (*scPtr).yCapMin;
+    yCapMax = (*scPtr).yCapMax;
+
+    switch(calibMode)
+    {
+        case SHMOO_AND28_BIT:
+            iter = shmoo_dram_info.interface_bitwidth;
+            shiftAmount = 0;
+            dataMask = 0x1;
+            break;
+        case SHMOO_AND28_BYTE:
+            iter = shmoo_dram_info.interface_bitwidth >> 3;
+            shiftAmount = 3;
+            dataMask = 0xFF;
+            break;
+        case SHMOO_AND28_HALFWORD:
+            iter = shmoo_dram_info.interface_bitwidth >> 4;
+            shiftAmount = 4;
+            dataMask = 0xFFFF;
+            break;
+        case SHMOO_AND28_WORD:
+            iter = 1;
+            shiftAmount = 5;
+            dataMask = 0xFFFFFFFF;
+            break;
+        default:
+            printf("Unsupported 2D calibration mode: %02lu\n", calibMode);
+            return SOC_E_FAIL;
+    }
+
+    for(i = 0; i < iter; i++)
+    {
+        (*scPtr).resultData[i] = 0;
+        maxPassLengthArray[i] = 0;
+    }
+
+    for(y = yCapMin; y < yCapMax; y++)
+    {   
+        for(i = 0; i < iter; i++)
+        {
+            passStart = -1;
+            failStart = -1;
+            passLength = -1;
+            passStartSeen = -1;
+            failStartSeen = -1;
+            maxPassStart = -2;
+            maxPassLength = -2;
+            maxMidPointX = -2;
+            for(x = calibStart; x < sizeX; x++)
+            {
+                if(((*scPtr).result2D[xStart + x] >> (i << shiftAmount)) & dataMask)
+                {   /* FAIL */
+                    if(failStart < 0) {
+                        failStart = x;
+                        if(maxPassLength < passLength)
+                        {
+                            maxPassStart = passStart;
+                            maxPassLength = passLength;
+                        }
+                        passStart = -1;
+                        passLength = -1;
+                        if((failStartSeen < 0) && (maxPassLength > 0))
+                        {
+                            failStartSeen = x;
+                        }
+                    }
+                }
+                else
+                {   /* PASS */
+                    if(passStart < 0)
+                    {
+                        passStart = x;
+                        passLength = 1;
+                        failStart = -1;
+                        if((passStartSeen < 0) && (passLength < x))
+                        {
+                            passStartSeen = x;
+                        }
+                    }
+                    else
+                    {
+                        passLength++;
+                    }
+                    
+                    if(x == sizeX - 1)
+                    {
+                        if(maxPassLength < passLength)
+                        {
+                            maxPassStart = passStart;
+                            maxPassLength = passLength;
+                        }
+                    }
+                }
+            }
+            
+            switch (calibPos) {
+                case SHMOO_AND28_CALIB_FAIL_START:
+                case SHMOO_AND28_CALIB_RISING_EDGE:
+                    if(failStartSeen > 0)
+                    {
+                        maxMidPointX = failStartSeen;
+                        (*scPtr).resultData[i] = (y << 16) | (maxMidPointX & 0xFFFF);
+                    }
+                    break;
+                case SHMOO_AND28_CALIB_PASS_START:
+                case SHMOO_AND28_CALIB_FALLING_EDGE:
+                    if(passStartSeen > 0)
+                    {
+                        maxMidPointX = passStartSeen;
+                        (*scPtr).resultData[i] = (y << 16) | (maxMidPointX & 0xFFFF);
+                    }
+                    break;
+                case SHMOO_AND28_CALIB_CENTER_PASS:
+                    if((maxPassLength > 0) && (maxPassLengthArray[i] < maxPassLength))
+                    {
+                        maxMidPointX = (maxPassStart + maxPassStart + maxPassLength) >> 1;
+                        (*scPtr).resultData[i] = (y << 16) | (maxMidPointX & 0xFFFF);
+                        maxPassLengthArray[i] = maxPassLength;
+                    }
+                    break;
+                case SHMOO_AND28_CALIB_VDL_ZERO:
+                    maxMidPointX = 0;
+                    (*scPtr).resultData[i] = (y << 16) | (maxMidPointX & 0xFFFF);
+                    break;
+                default:
+                    printf("Unsupported calibration position: %02lu\n", calibPos);
+                    return SOC_E_FAIL;
+            }
+        }
+        xStart += sizeX;
+    }
+
+    (*scPtr).calibMode = calibMode;
+    (*scPtr).calibPos = calibPos;
+    
+    return SOC_E_NONE;
+}
+
+STATIC int
+_shmoo_and28_calib_2D(int unit, int phy_ndx, and28_shmoo_container_t *scPtr)
+{
+    switch ((*scPtr).shmooType) {
+        case SHMOO_AND28_RD_EN:
+            return _calib_2D(unit, phy_ndx, scPtr, SHMOO_AND28_BYTE, SHMOO_AND28_CALIB_CENTER_PASS);
+        case SHMOO_AND28_RD_EXTENDED:
+            return _calib_2D(unit, phy_ndx, scPtr, SHMOO_AND28_BYTE, SHMOO_AND28_CALIB_CENTER_PASS);
+        case SHMOO_AND28_WR_EXTENDED:
+            return _calib_2D(unit, phy_ndx, scPtr, SHMOO_AND28_BYTE, SHMOO_AND28_CALIB_CENTER_PASS);
+        case SHMOO_AND28_ADDR_EXTENDED:
+            return _calib_2D(unit, phy_ndx, scPtr, SHMOO_AND28_WORD, SHMOO_AND28_CALIB_CENTER_PASS);
+        case SHMOO_AND28_CTRL_EXTENDED:
+            if(!SHMOO_AND28_QUICK_SHMOO_CTRL_EXTENDED)
+            {
+                return _calib_2D(unit, phy_ndx, scPtr, SHMOO_AND28_WORD, SHMOO_AND28_CALIB_CENTER_PASS);
+            }
+            break;
+        default:
+            printf("Unsupported shmoo type: %02lu\n", (*scPtr).shmooType);
+            return SOC_E_FAIL;
+    }
+    return SOC_E_NONE;
+}
+
+STATIC int
+_shmoo_and28_set_new_step(int unit, int phy_ndx, and28_shmoo_container_t *scPtr)
+{
+    uint32 calibMode;
+/*    uint32 engageUIshift; */
+    uint32 val, yVal;
+    uint32 data, temp;
+    uint32 rd_dqs_pos0, rd_dqs_pos1, rd_en_pos0, rd_en_pos1, rd_dqs_delta0, rd_dqs_delta1;
+    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+        uint32 rd_dqs_pos2, rd_dqs_pos3, rd_en_pos2, rd_en_pos3, rd_dqs_delta2, rd_dqs_delta3;
+    #endif
+    
+    calibMode = (*scPtr).calibMode;
+/*    engageUIshift = (*scPtr).engageUIshift; */
+    
+    switch ((*scPtr).shmooType) {
+        case SHMOO_AND28_RD_EN:
+            switch(calibMode)
+            {
+                case SHMOO_AND28_BIT:
+                    printf("Unsupported shmoo type and calibration mode combination during set new step: %02lu / %02lu\n", (*scPtr).shmooType, calibMode);
+                    return SOC_E_FAIL;
+                case SHMOO_AND28_BYTE:
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, (*scPtr).resultData[0] & 0xFFFF);
+                    
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1, data);
+                    
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP, (*scPtr).resultData[1] & 0xFFFF);
+                    
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1, data);
+                    
+                    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+                    if(shmoo_dram_info.interface_bitwidth == 32)
+                    {
+                        data = 0;
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, (*scPtr).resultData[2] & 0xFFFF);
+                        
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1, data);
+                        
+                        data = 0;
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP, (*scPtr).resultData[3] & 0xFFFF);
+                        
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1, data);
+                    }
+                    #endif
+                    
+                    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+                    break;
+                case SHMOO_AND28_HALFWORD:
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, (*scPtr).resultData[0] & 0xFFFF);
+                    
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1, data);
+                    
+                    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+                    if(shmoo_dram_info.interface_bitwidth == 32)
+                    {
+                        data = 0;
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, (*scPtr).resultData[1] & 0xFFFF);
+                        
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1, data);
+                    }
+                    #endif
+                    
+                    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+                    break;
+                case SHMOO_AND28_WORD:
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, (*scPtr).resultData[0] & 0xFFFF);
+                    
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1, data);
+                    
+                    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+                    if(shmoo_dram_info.interface_bitwidth == 32)
+                    {
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1, data);
+                    }
+                    #endif
+                    
+                    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+                    break;
+                default:
+                    printf("Unsupported shmoo type and calibration mode combination during set new step: %02lu / %02lu\n", (*scPtr).shmooType, calibMode);
+                    return SOC_E_FAIL;
+            }
+            break;
+        case SHMOO_AND28_RD_EXTENDED:
+            DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP, &data);
+            rd_dqs_pos0 = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQSP, VDL_STEP);
+            
+            DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP, &data);
+            rd_dqs_pos1 = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_DQSP, VDL_STEP);
+            
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP, &data);
+                rd_dqs_pos2 = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_DQSP, VDL_STEP);
+                
+                DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP, &data);
+                rd_dqs_pos3 = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_DQSP, VDL_STEP);
+            }
+            #endif
+            
+            DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0, &data);
+            rd_en_pos0 = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP);
+            
+            DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0, &data);
+            rd_en_pos1 = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP);
+            
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0, &data);
+                rd_en_pos2 = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP);
+                
+                DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0, &data);
+                rd_en_pos3 = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP);
+            }
+            #endif
+            
+            switch(calibMode)
+            {
+                case SHMOO_AND28_BIT:
+                    printf("Unsupported shmoo type and calibration mode combination during set new step: %02lu / %02lu\n", (*scPtr).shmooType, calibMode);
+                    return SOC_E_FAIL;
+                case SHMOO_AND28_BYTE:
+                    val = (*scPtr).resultData[0] & 0xFFFF;
+                    rd_dqs_delta0 = val - rd_dqs_pos0;
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQSP, FORCE, 1);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQSP, VDL_STEP, val);
+                    
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN, data);
+                    
+                    temp = rd_en_pos0 + rd_dqs_delta0;
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                    if(temp & 0x80000000)
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+                    }
+                    else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+                    }
+                    else
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+                    }
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1, data);
+                    
+                    val = (*scPtr).resultData[1] & 0xFFFF;
+                    rd_dqs_delta1 = val - rd_dqs_pos1;
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_DQSP, FORCE, 1);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_DQSP, VDL_STEP, val);
+                    
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN, data);
+                    
+                    temp = rd_en_pos1 + rd_dqs_delta1;
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                    if(temp & 0x80000000)
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+                    }
+                    else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+                    }
+                    else
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+                    }
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1, data);
+                    
+                    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+                    if(shmoo_dram_info.interface_bitwidth == 32)
+                    {
+                        val = (*scPtr).resultData[2] & 0xFFFF;
+                        rd_dqs_delta2 = val - rd_dqs_pos2;
+                        data = 0;
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_DQSP, FORCE, 1);
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_DQSP, VDL_STEP, val);
+                        
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN, data);
+                        
+                        temp = rd_en_pos2 + rd_dqs_delta2;
+                        data = 0;
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                        if(temp & 0x80000000)
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+                        }
+                        else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+                        }
+                        else
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+                        }
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1, data);
+                        
+                        val = (*scPtr).resultData[3] & 0xFFFF;
+                        rd_dqs_delta3 = val - rd_dqs_pos3;
+                        data = 0;
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_DQSP, FORCE, 1);
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_DQSP, VDL_STEP, val);
+                        
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN, data);
+                        
+                        temp = rd_en_pos3 + rd_dqs_delta3;
+                        data = 0;
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                        if(temp & 0x80000000)
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+                        }
+                        else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+                        }
+                        else
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+                        }
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1, data);
+                    }
+                    #endif
+                    
+                    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+                    if(shmoo_dram_info.interface_bitwidth == 32)
+                    {
+                        yVal = ((((*scPtr).resultData[0] >> 16) & 0xFFFF) + (((*scPtr).resultData[1] >> 16) & 0xFFFF)
+                                + (((*scPtr).resultData[2] >> 16) & 0xFFFF) + (((*scPtr).resultData[3] >> 16) & 0xFFFF)) >> 2;
+                    }
+                    else
+                    {
+                        yVal = ((((*scPtr).resultData[0] >> 16) & 0xFFFF) + (((*scPtr).resultData[1] >> 16) & 0xFFFF)) >> 1;
+                    }
+                    #else
+                        yVal = ((((*scPtr).resultData[0] >> 16) & 0xFFFF) + (((*scPtr).resultData[1] >> 16) & 0xFFFF)) >> 1;
+                    #endif
+                    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL, &data);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VREF_DAC_CONTROL, DAC0, yVal);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VREF_DAC_CONTROL, DAC1, yVal);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL, data);
+                    
+                    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+                    break;
+                case SHMOO_AND28_HALFWORD:
+                    val = (*scPtr).resultData[0] & 0xFFFF;
+                    rd_dqs_delta0 = val - rd_dqs_pos0;
+                    rd_dqs_delta1 = val - rd_dqs_pos1;
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQSP, FORCE, 1);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQSP, VDL_STEP, val);
+                    
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN, data);
+                    
+                    temp = rd_en_pos0 + rd_dqs_delta0;
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                    if(temp & 0x80000000)
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+                    }
+                    else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+                    }
+                    else
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+                    }
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1, data);
+                    
+                    temp = rd_en_pos1 + rd_dqs_delta1;
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                    if(temp & 0x80000000)
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+                    }
+                    else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+                    }
+                    else
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+                    }
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1, data);
+                    
+                    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+                    if(shmoo_dram_info.interface_bitwidth == 32)
+                    {
+                        val = (*scPtr).resultData[1] & 0xFFFF;
+                        rd_dqs_delta2 = val - rd_dqs_pos2;
+                        rd_dqs_delta3 = val - rd_dqs_pos3;
+                        data = 0;
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_DQSP, FORCE, 1);
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_DQSP, VDL_STEP, val);
+                        
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN, data);
+                        
+                        temp = rd_en_pos2 + rd_dqs_delta2;
+                        data = 0;
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                        if(temp & 0x80000000)
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+                        }
+                        else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+                        }
+                        else
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+                        }
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1, data);
+                        
+                        temp = rd_en_pos3 + rd_dqs_delta3;
+                        data = 0;
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                        if(temp & 0x80000000)
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+                        }
+                        else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+                        }
+                        else
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+                        }
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1, data);
+                    }
+                    #endif
+                    
+                    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+                    if(shmoo_dram_info.interface_bitwidth == 32)
+                    {
+                        yVal = ((((*scPtr).resultData[0] >> 16) & 0xFFFF) + (((*scPtr).resultData[1] >> 16) & 0xFFFF)) >> 1;
+                    }
+                    else
+                    {
+                        yVal = ((*scPtr).resultData[0] >> 16) & 0xFFFF;
+                    }
+                    #else
+                        yVal = ((*scPtr).resultData[0] >> 16) & 0xFFFF;
+                    #endif
+                    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL, &data);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VREF_DAC_CONTROL, DAC0, yVal);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VREF_DAC_CONTROL, DAC1, yVal);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL, data);
+                    
+                    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+                    break;
+                case SHMOO_AND28_WORD:
+                    val = (*scPtr).resultData[0] & 0xFFFF;
+                    rd_dqs_delta0 = val - rd_dqs_pos0;
+                    rd_dqs_delta1 = val - rd_dqs_pos1;
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQSP, FORCE, 1);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQSP, VDL_STEP, val);
+                    
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN, data);
+                    
+                    temp = rd_en_pos0 + rd_dqs_delta0;
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                    if(temp & 0x80000000)
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+                    }
+                    else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+                    }
+                    else
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+                    }
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1, data);
+                    
+                    temp = rd_en_pos1 + rd_dqs_delta1;
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                    if(temp & 0x80000000)
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+                    }
+                    else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+                    }
+                    else
+                    {
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+                    }
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1, data);
+                    
+                    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+                    if(shmoo_dram_info.interface_bitwidth == 32)
+                    {
+                        rd_dqs_delta2 = val - rd_dqs_pos2;
+                        rd_dqs_delta3 = val - rd_dqs_pos3;
+                        
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN, data);
+                        
+                        temp = rd_en_pos2 + rd_dqs_delta2;
+                        data = 0;
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                        if(temp & 0x80000000)
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+                        }
+                        else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+                        }
+                        else
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+                        }
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1, data);
+                        
+                        temp = rd_en_pos3 + rd_dqs_delta3;
+                        data = 0;
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+                        if(temp & 0x80000000)
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP, 0);
+                        }
+                        else if(temp >= SHMOO_AND28_MAX_VDL_LENGTH)
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+                        }
+                        else
+                        {
+                            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_RD_EN_CS0, VDL_STEP, temp);
+                        }
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1, data);
+                    }
+                    #endif
+                    
+                    yVal = ((*scPtr).resultData[0] >> 16) & 0xFFFF;
+                    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL, &data);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VREF_DAC_CONTROL, DAC0, yVal);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VREF_DAC_CONTROL, DAC1, yVal);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL, data);
+                    
+                    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+                    break;
+                default:
+                    printf("Unsupported shmoo type and calibration mode combination during set new step: %02lu / %02lu\n", (*scPtr).shmooType, calibMode);
+                    return SOC_E_FAIL;
+            }
+            break;
+        case SHMOO_AND28_WR_EXTENDED:
+            switch(calibMode)
+            {
+                case SHMOO_AND28_BIT:
+                    printf("Unsupported shmoo type and calibration mode combination during set new step: %02lu / %02lu\n", (*scPtr).shmooType, calibMode);
+                    return SOC_E_FAIL;
+                case SHMOO_AND28_BYTE:
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_WR_DQ0, FORCE, 1);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_WR_DQ0, VDL_STEP, (*scPtr).resultData[0] & 0xFFFF);
+                    
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC, data);
+                    
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_WR_DQ0, FORCE, 1);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_1, VDL_CONTROL_WR_DQ0, VDL_STEP, (*scPtr).resultData[1] & 0xFFFF);
+                    
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC, data);
+                    
+                    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+                    if(shmoo_dram_info.interface_bitwidth == 32)
+                    {
+                        data = 0;
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_WR_DQ0, FORCE, 1);
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_WR_DQ0, VDL_STEP, (*scPtr).resultData[2] & 0xFFFF);
+                        
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC, data);
+                        
+                        data = 0;
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_WR_DQ0, FORCE, 1);
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_3, VDL_CONTROL_WR_DQ0, VDL_STEP, (*scPtr).resultData[3] & 0xFFFF);
+                        
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC, data);
+                    }
+                    #endif
+                    
+                    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+                    break;
+                case SHMOO_AND28_HALFWORD:
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_WR_DQ0, FORCE, 1);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_WR_DQ0, VDL_STEP, (*scPtr).resultData[0] & 0xFFFF);
+                    
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC, data);
+                    
+                    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+                    if(shmoo_dram_info.interface_bitwidth == 32)
+                    {
+                        data = 0;
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_WR_DQ0, FORCE, 1);
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_2, VDL_CONTROL_WR_DQ0, VDL_STEP, (*scPtr).resultData[1] & 0xFFFF);
+                        
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC, data);
+                    }
+                    #endif
+                    
+                    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+                    break;
+                case SHMOO_AND28_WORD:
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_WR_DQ0, FORCE, 1);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_WR_DQ0, VDL_STEP, (*scPtr).resultData[0] & 0xFFFF);
+                    
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC, data);
+                    
+                    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+                    if(shmoo_dram_info.interface_bitwidth == 32)
+                    {
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC, data);
+                    }
+                    #endif
+                    
+                    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+                    break;
+                default:
+                    printf("Unsupported shmoo type and calibration mode combination during set new step: %02lu / %02lu\n", (*scPtr).shmooType, calibMode);
+                    return SOC_E_FAIL;
+            }
+            break;
+        case SHMOO_AND28_ADDR_EXTENDED:
+            switch(calibMode)
+            {
+                case SHMOO_AND28_BIT:
+                    printf("Unsupported shmoo type and calibration mode combination during set new step: %02lu / %02lu\n", (*scPtr).shmooType, calibMode);
+                    return SOC_E_FAIL;
+                case SHMOO_AND28_BYTE:
+                    printf("Unsupported shmoo type and calibration mode combination during set new step: %02lu / %02lu\n", (*scPtr).shmooType, calibMode);
+                    return SOC_E_FAIL;
+                case SHMOO_AND28_HALFWORD:
+                    printf("Unsupported shmoo type and calibration mode combination during set new step: %02lu / %02lu\n", (*scPtr).shmooType, calibMode);
+                    return SOC_E_FAIL;
+                case SHMOO_AND28_WORD:
+                    data = 0;
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CONTROL_AD00, FORCE, 1);
+                    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CONTROL_AD00, VDL_STEP, (*scPtr).resultData[0] & 0xFFFF);
+                    
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08, data);
+                    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09, data);
+                    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+                    break;
+                default:
+                    printf("Unsupported shmoo type and calibration mode combination during set new step: %02lu / %02lu\n", (*scPtr).shmooType, calibMode);
+                    return SOC_E_FAIL;
+            }
+            break;
+        case SHMOO_AND28_CTRL_EXTENDED:
+            if(SHMOO_AND28_QUICK_SHMOO_CTRL_EXTENDED)
+            {
+                DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00, &data);
+                DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CONTROL_AD00, FORCE, 1);
+                
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N, data);
+                sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+            }
+            else
+            {
+                switch(calibMode)
+                {
+                    case SHMOO_AND28_BIT:
+                        printf("Unsupported shmoo type and calibration mode combination during set new step: %02lu / %02lu\n", (*scPtr).shmooType, calibMode);
+                        return SOC_E_FAIL;
+                    case SHMOO_AND28_BYTE:
+                        printf("Unsupported shmoo type and calibration mode combination during set new step: %02lu / %02lu\n", (*scPtr).shmooType, calibMode);
+                        return SOC_E_FAIL;
+                    case SHMOO_AND28_HALFWORD:
+                        printf("Unsupported shmoo type and calibration mode combination during set new step: %02lu / %02lu\n", (*scPtr).shmooType, calibMode);
+                        return SOC_E_FAIL;
+                    case SHMOO_AND28_WORD:
+                        data = 0;
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CONTROL_AD00, FORCE, 1);
+                        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CONTROL_AD00, VDL_STEP, (*scPtr).resultData[0] & 0xFFFF);
+                        
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT, data);
+                        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N, data);
+                        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+                        break;
+                    default:
+                        printf("Unsupported shmoo type and calibration mode combination during set new step: %02lu / %02lu\n", (*scPtr).shmooType, calibMode);
+                        return SOC_E_FAIL;
+                }
+            }
+            break;
+        default:
+            printf("Unsupported shmoo type: %02lu\n", (*scPtr).shmooType);
+            return SOC_E_FAIL;
+    }
+    
+    data = 0;
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, READ_FIFO_CLEAR, CLEAR, 1);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR, data);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR, data);
+    
+    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+    if(shmoo_dram_info.interface_bitwidth == 32)
+    {
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR, data);
+    }
+    #endif
+
+    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        
+    return SOC_E_NONE;
+}
+
+STATIC int
+_plot(int unit, int phy_ndx, and28_shmoo_container_t *scPtr, uint32 plotMode)
+{
+    uint32 x;
+    uint32 y;
+    uint32 xStart;
+    uint32 sizeX;
+    uint32 sizeY;
+    uint32 yCapMin;
+    uint32 yCapMax;
+    uint32 yJump;
+    uint32 i;
+    uint32 ui;
+    uint32 iter;
+    uint32 shiftAmount;
+    uint32 dataMask;
+    uint32 calibMode;
+    uint32 calibPos;
+    uint32 calibStart;
+    uint32 engageUIshift;
+    uint32 step1000;
+    uint32 size1000UI;
+    uint32 calibShiftAmount;
+    uint32 maxMidPointX;
+    uint32 maxMidPointY;
+    char str0[SHMOO_AND28_STRING_LENGTH];
+    char str1[SHMOO_AND28_STRING_LENGTH];
+    char str2[SHMOO_AND28_STRING_LENGTH];
+    char pass_low[2];
+    char fail_high[2];
+    char outOfSearch[2];
+    
+    outOfSearch[0] = ' ';
+    outOfSearch[1] = 0;
+
+    sizeX = (*scPtr).sizeX;
+    sizeY = (*scPtr).sizeY;
+    yCapMin = (*scPtr).yCapMin;
+    yCapMax = (*scPtr).yCapMax;
+    yJump = (*scPtr).yJump;
+    calibMode = (*scPtr).calibMode;
+    calibPos = (*scPtr).calibPos;
+    calibStart = (*scPtr).calibStart;
+    engageUIshift = (*scPtr).engageUIshift;
+    step1000 = (*scPtr).step1000;
+    size1000UI = (*scPtr).size1000UI;
+
+    switch (calibPos) {
+        case SHMOO_AND28_CALIB_RISING_EDGE:
+        case SHMOO_AND28_CALIB_FALLING_EDGE:
+            pass_low[0] = '_';
+            pass_low[1] = 0;
+            fail_high[0] = '|';
+            fail_high[1] = 0;
+            break;
+        case SHMOO_AND28_CALIB_CENTER_PASS:
+        case SHMOO_AND28_CALIB_PASS_START:
+        case SHMOO_AND28_CALIB_FAIL_START:
+        case SHMOO_AND28_CALIB_VDL_ZERO:
+            pass_low[0] = '+';
+            pass_low[1] = 0;
+            fail_high[0] = '-';
+            fail_high[1] = 0;
+            break;
+        default:
+            printf("Unsupported calibration position: %02lu\n", calibPos);
+            return SOC_E_FAIL;
+    }
+
+    printf("\n\n");
+
+    switch(plotMode)
+    {
+        case SHMOO_AND28_BIT:
+            iter = shmoo_dram_info.interface_bitwidth;
+            shiftAmount = 0;
+            dataMask = 0x1;
+            switch(calibMode)
+            {
+                case SHMOO_AND28_BIT:
+                    calibShiftAmount = 0;
+                    break;
+                case SHMOO_AND28_BYTE:
+                    calibShiftAmount = 3;
+                    break;
+                case SHMOO_AND28_HALFWORD:
+                    calibShiftAmount = 4;
+                    break;
+                case SHMOO_AND28_WORD:
+                    calibShiftAmount = 5;
+                    break;
+                default:
+                    printf("Unsupported calibration mode during plot: %02lu\n", calibMode);
+                    return SOC_E_FAIL;
+            }
+            break;
+        case SHMOO_AND28_BYTE:
+            iter = shmoo_dram_info.interface_bitwidth >> 3;
+            shiftAmount = 3;
+            dataMask = 0xFF;
+            switch(calibMode)
+            {
+                case SHMOO_AND28_BIT:
+                    printf("WARNING: Plot mode coerced from byte mode to bit mode\n");
+                    iter = shmoo_dram_info.interface_bitwidth;
+                    shiftAmount = 0;
+                    dataMask = 0x1;
+                    calibShiftAmount = 0;
+                    break;
+                case SHMOO_AND28_BYTE:
+                    calibShiftAmount = 0;
+                    break;
+                case SHMOO_AND28_HALFWORD:
+                    calibShiftAmount = 1;
+                    break;
+                case SHMOO_AND28_WORD:
+                    calibShiftAmount = 2;
+                    break;
+                default:
+                    printf("Unsupported calibration mode during plot: %02lu\n", calibMode);
+                    return SOC_E_FAIL;
+            }
+            break;
+        case SHMOO_AND28_HALFWORD:
+            iter = shmoo_dram_info.interface_bitwidth >> 4;
+            shiftAmount = 4;
+            dataMask = 0xFFFF;
+            switch(calibMode)
+            {
+                case SHMOO_AND28_BIT:
+                    printf("WARNING: Plot mode coerced from halfword mode to bit mode\n");
+                    iter = 32;
+                    shiftAmount = 0;
+                    dataMask = 0x1;
+                    calibShiftAmount = 0;
+                    break;
+                case SHMOO_AND28_BYTE:
+                    printf("WARNING: Plot mode coerced from halfword mode to byte mode\n");
+                    iter = 4;
+                    shiftAmount = 3;
+                    dataMask = 0xFF;
+                    calibShiftAmount = 0;
+                    break;
+                case SHMOO_AND28_HALFWORD:
+                    calibShiftAmount = 0;
+                    break;
+                case SHMOO_AND28_WORD:
+                    calibShiftAmount = 1;
+                    break;
+                default:
+                    printf("Unsupported calibration mode during plot: %02lu\n", calibMode);
+                    return SOC_E_FAIL;
+            }
+            break;
+        case SHMOO_AND28_WORD:
+            iter = 1;
+            shiftAmount = 5;
+            dataMask = 0xFFFFFFFF;
+            switch(calibMode)
+            {
+                case SHMOO_AND28_BIT:
+                    printf("WARNING: Plot mode coerced from word mode to bit mode\n");
+                    iter = 32;
+                    shiftAmount = 0;
+                    dataMask = 0x1;
+                    calibShiftAmount = 0;
+                    break;
+                case SHMOO_AND28_BYTE:
+                    printf("WARNING: Plot mode coerced from word mode to byte mode\n");
+                    iter = 4;
+                    shiftAmount = 3;
+                    dataMask = 0xFF;
+                    calibShiftAmount = 0;
+                    break;
+                case SHMOO_AND28_HALFWORD:
+                    printf("WARNING: Plot mode coerced from word mode to halfword mode\n");
+                    iter = 2;
+                    shiftAmount = 4;
+                    dataMask = 0xFFFF;
+                    calibShiftAmount = 0;
+                    break;
+                case SHMOO_AND28_WORD:
+                    calibShiftAmount = 0;
+                    break;
+                default:
+                    printf("Unsupported calibration mode during plot: %02lu\n", calibMode);
+                    return SOC_E_FAIL;
+            }
+            break;
+        default:
+            printf("Unsupported plot mode: %02lu\n", plotMode);
+            return SOC_E_FAIL;
+    }
+/*    
+    if(engageUIshift)
+    { */
+        ui = 0;
+        
+        for(x = 0; x < sizeX; x++)
+        {
+            if((ui < SHMOO_AND28_MAX_VISIBLE_UI_COUNT) && (x > (*scPtr).endUI[ui]))
+            {
+                str0[x] = ' ';
+                str1[x] = ' ';
+                str2[x] = ' ';
+                ui++;
+            }
+            else
+            {
+                str0[x] = '0' + (x / 100);
+                str1[x] = '0' + ((x % 100) / 10);
+                str2[x] = '0' + (x % 10);
+            }
+        }
+/*    }
+    else
+    {
+        for(x = 0; x < sizeX; x++)
+        {
+            str0[x] = '0' + (x / 100);
+            str1[x] = '0' + ((x % 100) / 10);
+            str2[x] = '0' + (x % 10);
+        }
+    } */
+    
+    str0[x] = 0;
+    str1[x] = 0;
+    str2[x] = 0;
+
+    for(i = 0; i < iter; i++)
+    {
+        xStart = 0;
+        maxMidPointX = (*scPtr).resultData[i >> calibShiftAmount] & 0xFFFF;
+        maxMidPointY = ((*scPtr).resultData[i >> calibShiftAmount] >> 16) & 0xFFFF;
+        
+        if((sizeY > 1) || (i == 0))
+        {
+            printf("***** Interface.......: %3d\n", phy_ndx);
+            printf(" **** VDL step size...: %3lu.%03lu ps\n", (step1000 / 1000), (step1000 % 1000));
+            printf(" **** UI size.........: %3lu.%03lu steps\n", (size1000UI / 1000), (size1000UI % 1000));
+            
+            switch((*scPtr).shmooType)
+            {
+                case SHMOO_AND28_RD_EN:
+                    printf(" **** Shmoo type......: RD_EN\n");
+                    break;
+                case SHMOO_AND28_RD_EXTENDED:
+                    printf(" **** Shmoo type......: RD_EXTENDED\n");
+                    break;
+                case SHMOO_AND28_WR_EXTENDED:
+                    printf(" **** Shmoo type......: WR_EXTENDED\n");
+                    break;
+                case SHMOO_AND28_ADDR_EXTENDED:
+                    printf(" **** Shmoo type......: ADDR_EXTENDED\n");
+                    break;
+                case SHMOO_AND28_CTRL_EXTENDED:
+                    printf(" **** Shmoo type......: CTRL_EXTENDED\n");
+                    printf("  *** Quick Shmoo.....: Off\n");
+                    break;
+                default:
+                    printf("Unsupported shmoo type: %02lu\n", (*scPtr).shmooType);
+                    return SOC_E_FAIL;
+            }
+            
+            if(engageUIshift)
+            {
+                printf("  *** UI shift........: On\n");
+            }
+            else
+            {
+                printf("  *** UI shift........: Off or N/A\n");
+            }
+        }
+        
+        if(sizeY > 1)
+        {
+            switch(calibMode)
+            {
+                case SHMOO_AND28_BIT:
+                    printf("  *** Calib mode......: 2D Bit-wise\n");
+                    break;
+                case SHMOO_AND28_BYTE:
+                    printf("  *** Calib mode......: 2D Byte-wise\n");
+                    break;
+                case SHMOO_AND28_HALFWORD:
+                    printf("  *** Calib mode......: 2D Halfword-wise\n");
+                    break;
+                case SHMOO_AND28_WORD:
+                    printf("  *** Calib mode......: 2D Word-wise\n");
+                    break;
+                default:
+                    printf("Unsupported calibration mode during plot: %02lu\n", calibMode);
+                    return SOC_E_FAIL;
+            }
+            
+            switch(plotMode)
+            {
+                case SHMOO_AND28_BIT:
+                    printf("  *** Plot mode.......: 2D Bit-wise\n");
+                    printf("   ** Bit.............: %03lu\n", i);
+                    break;
+                case SHMOO_AND28_BYTE:
+                    printf("  *** Plot mode.......: 2D Byte-wise\n");
+                    printf("   ** Byte............: %03lu\n", i);
+                    break;
+                case SHMOO_AND28_HALFWORD:
+                    printf("  *** Plot mode.......: 2D Halfword-wise\n");
+                    printf("   ** Halfword........: %03lu\n", i);
+                    break;
+                case SHMOO_AND28_WORD:
+                    printf("  *** Plot mode.......: 2D Word-wise\n");
+                    printf("   ** Word............: %03lu\n", i);
+                    break;
+                default:
+                    printf("Unsupported plot mode: %02lu\n", plotMode);
+                    return SOC_E_FAIL;
+            }
+
+            printf("    * Center X........: %03lu\n", maxMidPointX);
+            printf("    * Center Y........: %03lu\n", maxMidPointY);
+            printf("      %s\n", str0);
+            printf("      %s\n", str1);
+            printf("      %s\n", str2);
+
+            for(y = yCapMin; y < yCapMax; y++)
+            {
+                printf("  %03lu ", y << yJump);
+                
+                for(x = 0; x < calibStart; x++)
+                {
+                    printf("%s", outOfSearch);
+                }
+                
+                for(x = calibStart; x < sizeX; x++)
+                {
+                    if(((*scPtr).result2D[xStart + x] >> (i << shiftAmount)) & dataMask)
+                    {   /* FAIL - RISING EDGE */
+                        if(x != maxMidPointX)
+                        {   /* REGULAR FAIL */
+                            printf("%s", fail_high);
+                        }
+                        else
+                        {   /* FAIL - RISING EDGE */
+                            if((calibPos == SHMOO_AND28_CALIB_RISING_EDGE) || (calibPos == SHMOO_AND28_CALIB_FAIL_START))
+                            {   /* RISING EDGE */
+                                printf("X");
+                            }
+                            else
+                            {   /* FAIL */
+                                printf("%s", fail_high);
+                            }
+                        }
+                    }
+                    else
+                    {   /* PASS - MIDPOINT - FALLING EDGE */
+                        if(x != maxMidPointX)
+                        {   /* REGULAR PASS */
+                            printf("%s", pass_low);
+                        }
+                        else
+                        {   /* POTENTIAL MIDPOINT - FALLING EDGE */
+                            if(y == maxMidPointY)
+                            {   /* MID POINT - FALLING EDGE */
+                                printf("X");
+                            }
+                            else
+                            {   /* PASS */
+                                printf("%s", pass_low);
+                            }
+                        }
+                    }
+                }
+                printf("\n");
+                xStart += sizeX;
+            }
+            printf("\n");
+        }
+        else
+        {
+            if(i == 0)
+            {
+                switch(calibMode)
+                {
+                    case SHMOO_AND28_BIT:
+                        printf("  *** Calib mode......: 1D Bit-wise\n");
+                        break;
+                    case SHMOO_AND28_BYTE:
+                        printf("  *** Calib mode......: 1D Byte-wise\n");
+                        break;
+                    case SHMOO_AND28_HALFWORD:
+                        printf("  *** Calib mode......: 1D Halfword-wise\n");
+                        break;
+                    case SHMOO_AND28_WORD:
+                        printf("  *** Calib mode......: 1D Word-wise\n");
+                        break;
+                    default:
+                        printf("Unsupported calibration mode during plot: %02lu\n", calibMode);
+                        return SOC_E_FAIL;
+                }
+                
+                switch(plotMode)
+                {
+                    case SHMOO_AND28_BIT:
+                        printf("  *** Plot mode.......: 1D Bit-wise\n");
+                        break;
+                    case SHMOO_AND28_BYTE:
+                        printf("  *** Plot mode.......: 1D Byte-wise\n");
+                        break;
+                    case SHMOO_AND28_HALFWORD:
+                        printf("  *** Plot mode.......: 1D Halfword-wise\n");
+                        break;
+                    case SHMOO_AND28_WORD:
+                        printf("  *** Plot mode.......: 1D Word-wise\n");
+                        break;
+                    default:
+                        printf("Unsupported plot mode: %02lu\n", plotMode);
+                        return SOC_E_FAIL;
+                }
+                printf("      %s\n", str0);
+                printf("      %s\n", str1);
+                printf("      %s\n", str2);
+            }
+            
+            printf("  %03lu ", i);
+            
+            for(x = 0; x < calibStart; x++)
+            {
+                printf("%s", outOfSearch);
+            }
+            
+            for(x = calibStart; x < sizeX; x++)
+            {
+                if(((*scPtr).result2D[x] >> (i << shiftAmount)) & dataMask)
+                {   /* FAIL - RISING EDGE */
+                    if(x != maxMidPointX)
+                    {   /* REGULAR FAIL */
+                        printf("%s", fail_high);
+                    }
+                    else
+                    {   /* FAIL - RISING EDGE */
+                        if((calibPos == SHMOO_AND28_CALIB_RISING_EDGE) || (calibPos == SHMOO_AND28_CALIB_FAIL_START))
+                        {   /* RISING EDGE */
+                            printf("X");
+                        }
+                        else
+                        {   /* FAIL */
+                            printf("%s", fail_high);
+                        }
+                    }
+                }
+                else
+                {   /* PASS - MIDPOINT - FALLING EDGE */
+                    if(x != maxMidPointX)
+                    {   /* REGULAR PASS */
+                        printf("%s", pass_low);
+                    }
+                    else
+                    {   /* MID POINT - FALLING EDGE */
+                        printf("X");
+                    }
+                }
+            }
+            printf("\n");
+        }
+    }
+    printf("\n");
+    
+    return SOC_E_NONE;
+}
+
+STATIC int
+_shmoo_and28_plot(int unit, int phy_ndx, and28_shmoo_container_t *scPtr)
+{
+    switch ((*scPtr).shmooType) {
+        case SHMOO_AND28_RD_EN:
+            return _plot(unit, phy_ndx, scPtr, SHMOO_AND28_BYTE);
+        case SHMOO_AND28_RD_EXTENDED:
+            return _plot(unit, phy_ndx, scPtr, SHMOO_AND28_BYTE);
+        case SHMOO_AND28_WR_EXTENDED:
+            return _plot(unit, phy_ndx, scPtr, SHMOO_AND28_BIT);
+        case SHMOO_AND28_ADDR_EXTENDED:
+            return _plot(unit, phy_ndx, scPtr, SHMOO_AND28_WORD);
+        case SHMOO_AND28_CTRL_EXTENDED:
+            if(!SHMOO_AND28_QUICK_SHMOO_CTRL_EXTENDED)
+            {
+                return _plot(unit, phy_ndx, scPtr, SHMOO_AND28_WORD);
+            }
+            else
+            {
+                printf("\n\n");
+                printf("***** Interface.......: %3d\n", phy_ndx);
+                printf(" **** Shmoo type......: CTRL_EXTENDED\n");
+                printf("  *** Quick Shmoo.....: On\n");
+                printf("  *** Plot............: Off\n");
+                printf("  *** Copying.........: VDL_STEP\n");
+                printf("   ** From............: AD00 - AD09\n");
+                printf("   ** To..............: AD10 - WE_N\n");
+                printf("\n");
+            }
+            break;
+        default:
+            printf("Unsupported shmoo type: %02lu\n", (*scPtr).shmooType);
+            return SOC_E_FAIL;
+    }
+    return SOC_E_NONE;
+}
+
+int
+_and28_calculate_step_size(int unit, int phy_ndx, and28_step_size_t *ssPtr)
+{
+    uint32 data;
+    uint32 timeout;
+    
+    if(shmoo_dram_info.sim_system_mode)
+    {
+        (*ssPtr).step1000 = 8000;
+        (*ssPtr).size1000UI = 78125;
+        
+        return SOC_E_NONE;
+    }
+    
+    data = 0;
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE, data);
+    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+    
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CALIBRATE, CALIB_ONCE, 1);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CALIBRATE, UPDATE_REGS, 0);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CALIBRATE, UPDATE_FAST, 0);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE, data);
+    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+    
+    timeout = 2000;
+    do
+    {
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIB_STATUS1, &data);
+        
+        if(DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CALIB_STATUS1, CALIB_IDLE))
+        {
+        /*    printf("     VDL calibration complete.\n"); */
+            break;
+        }
+        
+        if (timeout == 0)
+        {
+            printf("     VDL calibration failed!!! (Timeout)\n");
+            return SOC_E_TIMEOUT;
+        }
+        
+        timeout--;
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+    }
+    while(TRUE);
+    
+    if(DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CALIB_STATUS1, CALIB_LOCK_4B) == 0)
+    {           
+        printf("     VDL calibration failed!!! (No lock)\n");
+        return SOC_E_FAIL;
+    }
+    
+    (*ssPtr).size1000UI = DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CALIB_STATUS1, CALIB_TOTAL_STEPS) * 500;
+    (*ssPtr).step1000 = ((1000000000 / shmoo_dram_info.data_rate_mbps) * 1000) / ((*ssPtr).size1000UI);
+    
+    data = 0;
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CALIBRATE, data);
+    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+    
+    return SOC_E_NONE;
+}
+
+int
+_and28_zq_calibration(int unit, int phy_ndx)
+{
+    int i;
+    uint32 data;
+    uint32 p_drive, n_drive;
+    uint32 p_term, n_term;
+    uint32 p_idle, n_idle;
+    
+    p_drive = 16;
+    n_drive = 16;
+    
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL, &data);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_PCOMP_ENB, 1);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_NCOMP_ENB, 1);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL, data);
+    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+    
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_IDDQ, 0);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_DRIVE_P, 0);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_DRIVE_N, 31);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL, data);
+    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+    
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_PCOMP_ENB, 0);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_NCOMP_ENB, 1);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL, data);
+    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+    
+    for(i = 0; i < SHMOO_AND28_MAX_ZQ_CAL_RANGE; i++)
+    {
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_DRIVE_P, i);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL, data);
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL, &data);
+        if(DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_PCOMP_STATUS))
+        {
+            p_drive = i;
+            break;
+        }
+    }
+    
+    if(i == SHMOO_AND28_MAX_ZQ_CAL_RANGE)
+    {
+        printf("     WARNING: ZQ calibration error (P) - Manual IO programming required for correct operation\n");
+        /* return SOC_E_FAIL; */
+    }
+
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_PCOMP_ENB, 0);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_NCOMP_ENB, 0);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL, data);
+    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+    
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_DRIVE_P, 31);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_DRIVE_N, 0);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL, data);
+    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+    
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_PCOMP_ENB, 1);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_NCOMP_ENB, 0);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL, data);
+    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+    
+    for(i = 0; i < SHMOO_AND28_MAX_ZQ_CAL_RANGE; i++)
+    {
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_DRIVE_N, i);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL, data);
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL, &data);
+        if(DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_NCOMP_STATUS))
+        {
+            n_drive = i;
+            break;
+        }
+    }
+    
+    if(i == SHMOO_AND28_MAX_ZQ_CAL_RANGE)
+    {
+        printf("     WARNING: ZQ calibration error (N) - Manual IO programming required for correct operation\n");
+        /* return SOC_E_FAIL; */
+    }
+    
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_PCOMP_ENB, 1);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_NCOMP_ENB, 1);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL, data);
+    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+    
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_IDDQ, 0);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_DRIVE_P, 0);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, ZQ_CAL, ZQ_DRIVE_N, 0);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_ZQ_CAL, data);
+    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+    
+    p_term = 6;
+    n_term = 6;
+    
+    p_idle = 0;
+    n_idle = 0;
+    
+    data = 0;
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, DRIVE_PAD_CTL, ADDR_CTL_PD_IDLE_STRENGTH, p_idle);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, DRIVE_PAD_CTL, ADDR_CTL_ND_IDLE_STRENGTH, n_idle);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, DRIVE_PAD_CTL, ADDR_CTL_PD_TERM_STRENGTH, p_term);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, DRIVE_PAD_CTL, ADDR_CTL_ND_TERM_STRENGTH, n_term);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, DRIVE_PAD_CTL, ADDR_CTL_PD_STRENGTH, p_drive);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, DRIVE_PAD_CTL, ADDR_CTL_ND_STRENGTH, n_drive);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_DRIVE_PAD_CTL, data);
+    
+    data = 0;
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, DRIVE_PAD_CTL, BL_PD_IDLE_STRENGTH, p_idle);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, DRIVE_PAD_CTL, BL_ND_IDLE_STRENGTH, n_idle);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, DRIVE_PAD_CTL, BL_PD_TERM_STRENGTH, p_term);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, DRIVE_PAD_CTL, BL_ND_TERM_STRENGTH, n_term);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, DRIVE_PAD_CTL, BL_PD_STRENGTH, p_drive);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, DRIVE_PAD_CTL, BL_ND_STRENGTH, n_drive);
+    
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_DRIVE_PAD_CTL, data);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_DRIVE_PAD_CTL, data);
+    
+    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+    if(shmoo_dram_info.interface_bitwidth == 32)
+    {
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_DRIVE_PAD_CTL, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_DRIVE_PAD_CTL, data);
+    }
+    #endif
+    
+    data = 0;
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, RD_EN_DRIVE_PAD_CTL, EDC_RD_EN_PD_STRENGTH, p_drive);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, RD_EN_DRIVE_PAD_CTL, EDC_RD_EN_ND_STRENGTH, n_drive);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, RD_EN_DRIVE_PAD_CTL, BL_RD_EN_PD_STRENGTH, p_drive);
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, RD_EN_DRIVE_PAD_CTL, BL_RD_EN_ND_STRENGTH, n_drive);
+    
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DRIVE_PAD_CTL, data);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DRIVE_PAD_CTL, data);
+    
+    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+    if(shmoo_dram_info.interface_bitwidth == 32)
+    {
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DRIVE_PAD_CTL, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DRIVE_PAD_CTL, data);
+    }
+    #endif
+    
+    printf("     P drive..........: 0x%02lX\n", p_drive);
+    printf("     N drive..........: 0x%02lX\n", n_drive);
+    printf("     P termination....: 0x%02lX\n", p_term);
+    printf("     N termination....: 0x%02lX\n", n_term);
+    printf("     P idle...........: 0x%02lX\n", p_idle);
+    printf("     N idle...........: 0x%02lX\n", n_idle);
+    
+    return SOC_E_NONE;
+}
+
+STATIC int
+_shmoo_and28_entry(int unit, int phy_ndx, and28_shmoo_container_t *scPtr, uint32 mode)
+{
+    /* Mode 0: Sequential entry
+     * Mode 1: Single entry
+     */
+    
+    uint32 i;
+    uint32 data, temp;
+    and28_step_size_t ss;
+    
+    (*scPtr).calibStart = 0;
+    
+    switch ((*scPtr).shmooType) {
+        case SHMOO_AND28_RD_EN:
+    /*A04*/ printf("R04. Configure reference voltage\n");
+    /*R04*/ DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL, &data);
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VREF_DAC_CONTROL, DAC0, 32);
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VREF_DAC_CONTROL, DAC1, 32);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL, data);
+            sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+            
+    /*A08*/ printf("R08. ZQ calibration\n");
+    /*R08*/ if(shmoo_dram_info.sim_system_mode)
+            {
+                printf("     Skipped for emulation\n");
+                
+                goto SHMOO_AND28_RD_EN_ZQ_CALIBRATION_END;
+            }
+            
+            _and28_zq_calibration(unit, phy_ndx);
+            
+            SHMOO_AND28_RD_EN_ZQ_CALIBRATION_END:
+        
+            _and28_calculate_step_size(unit, phy_ndx, &ss);
+            (*scPtr).step1000 = ss.step1000;
+            (*scPtr).size1000UI = ss.size1000UI;
+            temp = (ss.size1000UI * 3) / 1000;      /* 300% */
+            if(temp > SHMOO_AND28_MAX_VDL_LENGTH)
+            {
+                (*scPtr).sizeX = SHMOO_AND28_MAX_VDL_LENGTH;
+            }
+            else
+            {
+                (*scPtr).sizeX = temp;
+            }
+            
+            temp = (ss.size1000UI * 125) / 100000;      /* 125% */
+            (*scPtr).yJump = 2;
+            temp = temp >> (*scPtr).yJump;
+            if(temp > SHMOO_AND28_MAX_VREF_RANGE)
+            {
+                (*scPtr).sizeY = SHMOO_AND28_MAX_VREF_RANGE;
+            }
+            else
+            {
+                (*scPtr).sizeY = temp;
+            }
+            
+            for(i = 0; i < SHMOO_AND28_MAX_VISIBLE_UI_COUNT; i++)
+            {
+                (*scPtr).endUI[i] = ((i + 1) * (ss.size1000UI)) / 1000;
+            }
+            
+            data = 0;
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, READ_CONTROL, MODE, 1);
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, READ_CONTROL, RD_DATA_DLY, SHMOO_AND28_RD_DATA_DLY_INIT);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL, data);
+            
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL, data);
+            }
+            #endif
+        
+            data = 0;
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, RD_EN_DLY_CYC, FORCE, 1);
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, RD_EN_DLY_CYC, CS0_CYCLES, SHMOO_AND28_RD_EN_CYC_INIT);
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, RD_EN_DLY_CYC, CS1_CYCLES, SHMOO_AND28_RD_EN_CYC_INIT);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC, data);
+            
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC, data);
+            }
+            #endif
+        
+            data = 0;
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, FORCE, 1);
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS0, VDL_STEP, SHMOO_AND28_RD_EN_VDL_INIT);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0, data);
+            
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0, data);
+            }
+            #endif
+        
+            data = 0;
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS1, FORCE, 1);
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_EN_CS1, VDL_STEP, SHMOO_AND28_RD_EN_VDL_INIT);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS1, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS1, data);
+            
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS1, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS1, data);
+            }
+            #endif
+        
+            data = 0;
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQ0P, FORCE, 1);
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQ0P, VDL_STEP, SHMOO_AND28_RD_DQ_VDL_INIT);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCP, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EDCN, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCP, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EDCN, data);
+            
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCP, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EDCN, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCP, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EDCN, data);
+            }
+            #endif
+        
+            data = 0;
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQSP, FORCE, 1);
+            temp = (((*scPtr).size1000UI * 3) / 4000) + SHMOO_AND28_RD_DQS_VDL_OFFSET;       /* 75% + Offset */
+            if(temp > SHMOO_AND28_MAX_VDL_LENGTH)
+            {
+                DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQSP, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+            }
+            else
+            {
+                DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_RD_DQSP, VDL_STEP, temp);
+            }
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN, data);
+            
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN, data);
+            }
+            #endif
+        
+            data = 0;
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, WR_CHAN_DLY_CYC, FORCE, 1);
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, WR_CHAN_DLY_CYC, CYCLES, SHMOO_AND28_WR_CYC_INIT);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC, data);
+            
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC, data);
+            }
+            #endif
+        
+            data = 0;
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_WR_DQ0, FORCE, 1);
+            temp = (*scPtr).size1000UI / 2000;
+            if(temp > SHMOO_AND28_MAX_VDL_LENGTH)
+            {
+                DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_WR_DQ0, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+            }
+            else
+            {
+                DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, VDL_CONTROL_WR_DQ0, VDL_STEP, temp);
+            }
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC, data);
+            
+            #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+            if(shmoo_dram_info.interface_bitwidth == 32)
+            {
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM, data);
+                DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC, data);
+            }
+            #endif
+        
+            sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+            break;
+        case SHMOO_AND28_RD_EXTENDED:
+            _and28_calculate_step_size(unit, phy_ndx, &ss);
+            (*scPtr).step1000 = ss.step1000;
+            (*scPtr).size1000UI = ss.size1000UI;
+            temp = (ss.size1000UI * 125) / 100000;      /* 125% */
+            if(temp > SHMOO_AND28_MAX_VDL_LENGTH)
+            {
+                (*scPtr).sizeX = SHMOO_AND28_MAX_VDL_LENGTH;
+            }
+            else
+            {
+                (*scPtr).sizeX = temp;
+            }
+            
+            for(i = 0; i < SHMOO_AND28_MAX_VISIBLE_UI_COUNT; i++)
+            {
+                (*scPtr).endUI[i] = ((i + 1) * (ss.size1000UI)) / 1000;
+            }
+            break;
+        case SHMOO_AND28_WR_EXTENDED:
+            _and28_calculate_step_size(unit, phy_ndx, &ss);
+            (*scPtr).step1000 = ss.step1000;
+            (*scPtr).size1000UI = ss.size1000UI;
+            temp = (ss.size1000UI * 125) / 100000;      /* 125% */
+            if(temp > SHMOO_AND28_MAX_VDL_LENGTH)
+            {
+                (*scPtr).sizeX = SHMOO_AND28_MAX_VDL_LENGTH;
+            }
+            else
+            {
+                (*scPtr).sizeX = temp;
+            }
+            
+            for(i = 0; i < SHMOO_AND28_MAX_VISIBLE_UI_COUNT; i++)
+            {
+                (*scPtr).endUI[i] = ((i + 1) * (ss.size1000UI)) / 1000;
+            }
+            break;
+        case SHMOO_AND28_ADDR_EXTENDED:
+            _and28_calculate_step_size(unit, phy_ndx, &ss);
+            (*scPtr).step1000 = ss.step1000;
+            (*scPtr).size1000UI = ss.size1000UI;
+            temp = (ss.size1000UI * 25) / 10000;      /* 250% */
+            if(temp > SHMOO_AND28_MAX_VDL_LENGTH)
+            {
+                (*scPtr).sizeX = SHMOO_AND28_MAX_VDL_LENGTH;
+            }
+            else
+            {
+                (*scPtr).sizeX = temp;
+            }
+            
+            for(i = 0; i < SHMOO_AND28_MAX_VISIBLE_UI_COUNT; i++)
+            {
+                (*scPtr).endUI[i] = ((i + 1) * (ss.size1000UI)) / 1000;
+            }
+            break;
+        case SHMOO_AND28_CTRL_EXTENDED:
+            _and28_calculate_step_size(unit, phy_ndx, &ss);
+            (*scPtr).step1000 = ss.step1000;
+            (*scPtr).size1000UI = ss.size1000UI;
+            temp = (ss.size1000UI * 25) / 10000;      /* 250% */
+            if(temp > SHMOO_AND28_MAX_VDL_LENGTH)
+            {
+                (*scPtr).sizeX = SHMOO_AND28_MAX_VDL_LENGTH;
+            }
+            else
+            {
+                (*scPtr).sizeX = temp;
+            }
+            
+            for(i = 0; i < SHMOO_AND28_MAX_VISIBLE_UI_COUNT; i++)
+            {
+                (*scPtr).endUI[i] = ((i + 1) * (ss.size1000UI)) / 1000;
+            }
+            break;
+        default:
+            printf("Unsupported shmoo type: %02lu\n", (*scPtr).shmooType);
+            return SOC_E_FAIL;
+    }
+    return SOC_E_NONE;
+}
+
+STATIC int
+_shmoo_and28_exit(int unit, int phy_ndx, and28_shmoo_container_t *scPtr, uint32 mode)
+{
+    /* Mode 0: Sequential exit
+     * Mode 1: Single exit
+     */
+    
+    switch ((*scPtr).shmooType) {
+        case SHMOO_AND28_RD_EN:
+            break;
+        case SHMOO_AND28_RD_EXTENDED:
+            break;
+        case SHMOO_AND28_WR_EXTENDED:
+            break;
+        case SHMOO_AND28_ADDR_EXTENDED:
+            break;
+        case SHMOO_AND28_CTRL_EXTENDED:
+            break;
+        default:
+            printf("Unsupported shmoo type: %02lu\n", (*scPtr).shmooType);
+            return SOC_E_FAIL;
+    }
+    
+    return SOC_E_NONE;
+}
+
+STATIC int
+_shmoo_and28_save(int unit, int phy_ndx, and28_shmoo_config_param_t *config_param)
+{
+    uint32 data;
+    
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00, &data);
+    (*config_param).control_regs_ad[0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01, &data);
+    (*config_param).control_regs_ad[1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02, &data);
+    (*config_param).control_regs_ad[2] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03, &data);
+    (*config_param).control_regs_ad[3] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04, &data);
+    (*config_param).control_regs_ad[4] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05, &data);
+    (*config_param).control_regs_ad[5] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06, &data);
+    (*config_param).control_regs_ad[6] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07, &data);
+    (*config_param).control_regs_ad[7] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08, &data);
+    (*config_param).control_regs_ad[8] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09, &data);
+    (*config_param).control_regs_ad[9] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10, &data);
+    (*config_param).control_regs_ad[10] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11, &data);
+    (*config_param).control_regs_ad[11] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12, &data);
+    (*config_param).control_regs_ad[12] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13, &data);
+    (*config_param).control_regs_ad[13] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14, &data);
+    (*config_param).control_regs_ad[14] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15, &data);
+    (*config_param).control_regs_ad[15] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0, &data);
+    (*config_param).control_regs_ba[0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1, &data);
+    (*config_param).control_regs_ba[1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2, &data);
+    (*config_param).control_regs_ba[2] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0, &data);
+    (*config_param).control_regs_aux[0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1, &data);
+    (*config_param).control_regs_aux[1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2, &data);
+    (*config_param).control_regs_aux[2] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0, &data);
+    (*config_param).control_regs_cs[0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1, &data);
+    (*config_param).control_regs_cs[1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR, &data);
+    (*config_param).control_regs_par = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N, &data);
+    (*config_param).control_regs_ras_n = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N, &data);
+    (*config_param).control_regs_cas_n = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE, &data);
+    (*config_param).control_regs_cke = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N, &data);
+    (*config_param).control_regs_rst_n = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT, &data);
+    (*config_param).control_regs_odt = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N, &data);
+    (*config_param).control_regs_we_n = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL, &data);
+    (*config_param).control_regs_vref_dac_control = data;
+    
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P, &data);
+    (*config_param).wr_vdl_dqsp[0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N, &data);
+    (*config_param).wr_vdl_dqsn[0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0, &data);
+    (*config_param).wr_vdl_dq[0][0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1, &data);
+    (*config_param).wr_vdl_dq[0][1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2, &data);
+    (*config_param).wr_vdl_dq[0][2] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3, &data);
+    (*config_param).wr_vdl_dq[0][3] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4, &data);
+    (*config_param).wr_vdl_dq[0][4] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5, &data);
+    (*config_param).wr_vdl_dq[0][5] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6, &data);
+    (*config_param).wr_vdl_dq[0][6] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7, &data);
+    (*config_param).wr_vdl_dq[0][7] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM, &data);
+    (*config_param).wr_vdl_dm[0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC, &data);
+    (*config_param).wr_vdl_edc[0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC, &data);
+    (*config_param).wr_chan_dly_cyc[0] = (uint8) data;
+    
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP, &data);
+    (*config_param).rd_vdl_dqsp[0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN, &data);
+    (*config_param).rd_vdl_dqsn[0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P, &data);
+    (*config_param).rd_vdl_dqp[0][0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P, &data);
+    (*config_param).rd_vdl_dqp[0][1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P, &data);
+    (*config_param).rd_vdl_dqp[0][2] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P, &data);
+    (*config_param).rd_vdl_dqp[0][3] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P, &data);
+    (*config_param).rd_vdl_dqp[0][4] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P, &data);
+    (*config_param).rd_vdl_dqp[0][5] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P, &data);
+    (*config_param).rd_vdl_dqp[0][6] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P, &data);
+    (*config_param).rd_vdl_dqp[0][7] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N, &data);
+    (*config_param).rd_vdl_dqn[0][0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N, &data);
+    (*config_param).rd_vdl_dqn[0][1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N, &data);
+    (*config_param).rd_vdl_dqn[0][2] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N, &data);
+    (*config_param).rd_vdl_dqn[0][3] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N, &data);
+    (*config_param).rd_vdl_dqn[0][4] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N, &data);
+    (*config_param).rd_vdl_dqn[0][5] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N, &data);
+    (*config_param).rd_vdl_dqn[0][6] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N, &data);
+    (*config_param).rd_vdl_dqn[0][7] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP, &data);
+    (*config_param).rd_vdl_dmp[0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN, &data);
+    (*config_param).rd_vdl_dmn[0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0, &data);
+    (*config_param).rd_en_vdl_cs[0][0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0, &data);
+    (*config_param).rd_en_vdl_cs[0][1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC, &data);
+    (*config_param).rd_en_dly_cyc[0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL, &data);
+    (*config_param).rd_control[0] = (uint8) data;
+    
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P, &data);
+    (*config_param).wr_vdl_dqsp[1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N, &data);
+    (*config_param).wr_vdl_dqsn[1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0, &data);
+    (*config_param).wr_vdl_dq[1][0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1, &data);
+    (*config_param).wr_vdl_dq[1][1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2, &data);
+    (*config_param).wr_vdl_dq[1][2] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3, &data);
+    (*config_param).wr_vdl_dq[1][3] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4, &data);
+    (*config_param).wr_vdl_dq[1][4] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5, &data);
+    (*config_param).wr_vdl_dq[1][5] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6, &data);
+    (*config_param).wr_vdl_dq[1][6] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7, &data);
+    (*config_param).wr_vdl_dq[1][7] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM, &data);
+    (*config_param).wr_vdl_dm[1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC, &data);
+    (*config_param).wr_vdl_edc[1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC, &data);
+    (*config_param).wr_chan_dly_cyc[1] = (uint8) data;
+    
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP, &data);
+    (*config_param).rd_vdl_dqsp[1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN, &data);
+    (*config_param).rd_vdl_dqsn[1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P, &data);
+    (*config_param).rd_vdl_dqp[1][0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P, &data);
+    (*config_param).rd_vdl_dqp[1][1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P, &data);
+    (*config_param).rd_vdl_dqp[1][2] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P, &data);
+    (*config_param).rd_vdl_dqp[1][3] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P, &data);
+    (*config_param).rd_vdl_dqp[1][4] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P, &data);
+    (*config_param).rd_vdl_dqp[1][5] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P, &data);
+    (*config_param).rd_vdl_dqp[1][6] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P, &data);
+    (*config_param).rd_vdl_dqp[1][7] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N, &data);
+    (*config_param).rd_vdl_dqn[1][0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N, &data);
+    (*config_param).rd_vdl_dqn[1][1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N, &data);
+    (*config_param).rd_vdl_dqn[1][2] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N, &data);
+    (*config_param).rd_vdl_dqn[1][3] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N, &data);
+    (*config_param).rd_vdl_dqn[1][4] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N, &data);
+    (*config_param).rd_vdl_dqn[1][5] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N, &data);
+    (*config_param).rd_vdl_dqn[1][6] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N, &data);
+    (*config_param).rd_vdl_dqn[1][7] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP, &data);
+    (*config_param).rd_vdl_dmp[1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN, &data);
+    (*config_param).rd_vdl_dmn[1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0, &data);
+    (*config_param).rd_en_vdl_cs[1][0] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0, &data);
+    (*config_param).rd_en_vdl_cs[1][1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC, &data);
+    (*config_param).rd_en_dly_cyc[1] = (uint16) data;
+    DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL, &data);
+    (*config_param).rd_control[1] = (uint8) data;
+    
+    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+    if(shmoo_dram_info.interface_bitwidth == 32)
+    {
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P, &data);
+        (*config_param).wr_vdl_dqsp[2] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N, &data);
+        (*config_param).wr_vdl_dqsn[2] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0, &data);
+        (*config_param).wr_vdl_dq[2][0] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1, &data);
+        (*config_param).wr_vdl_dq[2][1] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2, &data);
+        (*config_param).wr_vdl_dq[2][2] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3, &data);
+        (*config_param).wr_vdl_dq[2][3] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4, &data);
+        (*config_param).wr_vdl_dq[2][4] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5, &data);
+        (*config_param).wr_vdl_dq[2][5] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6, &data);
+        (*config_param).wr_vdl_dq[2][6] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7, &data);
+        (*config_param).wr_vdl_dq[2][7] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM, &data);
+        (*config_param).wr_vdl_dm[2] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC, &data);
+        (*config_param).wr_vdl_edc[2] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC, &data);
+        (*config_param).wr_chan_dly_cyc[2] = (uint8) data;
+        
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP, &data);
+        (*config_param).rd_vdl_dqsp[2] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN, &data);
+        (*config_param).rd_vdl_dqsn[2] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P, &data);
+        (*config_param).rd_vdl_dqp[2][0] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P, &data);
+        (*config_param).rd_vdl_dqp[2][1] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P, &data);
+        (*config_param).rd_vdl_dqp[2][2] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P, &data);
+        (*config_param).rd_vdl_dqp[2][3] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P, &data);
+        (*config_param).rd_vdl_dqp[2][4] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P, &data);
+        (*config_param).rd_vdl_dqp[2][5] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P, &data);
+        (*config_param).rd_vdl_dqp[2][6] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P, &data);
+        (*config_param).rd_vdl_dqp[2][7] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N, &data);
+        (*config_param).rd_vdl_dqn[2][0] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N, &data);
+        (*config_param).rd_vdl_dqn[2][1] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N, &data);
+        (*config_param).rd_vdl_dqn[2][2] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N, &data);
+        (*config_param).rd_vdl_dqn[2][3] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N, &data);
+        (*config_param).rd_vdl_dqn[2][4] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N, &data);
+        (*config_param).rd_vdl_dqn[2][5] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N, &data);
+        (*config_param).rd_vdl_dqn[2][6] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N, &data);
+        (*config_param).rd_vdl_dqn[2][7] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP, &data);
+        (*config_param).rd_vdl_dmp[2] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN, &data);
+        (*config_param).rd_vdl_dmn[2] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0, &data);
+        (*config_param).rd_en_vdl_cs[2][0] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0, &data);
+        (*config_param).rd_en_vdl_cs[2][1] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC, &data);
+        (*config_param).rd_en_dly_cyc[2] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL, &data);
+        (*config_param).rd_control[2] = (uint8) data;
+        
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P, &data);
+        (*config_param).wr_vdl_dqsp[3] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N, &data);
+        (*config_param).wr_vdl_dqsn[3] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0, &data);
+        (*config_param).wr_vdl_dq[3][0] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1, &data);
+        (*config_param).wr_vdl_dq[3][1] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2, &data);
+        (*config_param).wr_vdl_dq[3][2] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3, &data);
+        (*config_param).wr_vdl_dq[3][3] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4, &data);
+        (*config_param).wr_vdl_dq[3][4] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5, &data);
+        (*config_param).wr_vdl_dq[3][5] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6, &data);
+        (*config_param).wr_vdl_dq[3][6] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7, &data);
+        (*config_param).wr_vdl_dq[3][7] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM, &data);
+        (*config_param).wr_vdl_dm[3] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC, &data);
+        (*config_param).wr_vdl_edc[3] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC, &data);
+        (*config_param).wr_chan_dly_cyc[3] = (uint8) data;
+        
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP, &data);
+        (*config_param).rd_vdl_dqsp[3] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN, &data);
+        (*config_param).rd_vdl_dqsn[3] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P, &data);
+        (*config_param).rd_vdl_dqp[3][0] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P, &data);
+        (*config_param).rd_vdl_dqp[3][1] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P, &data);
+        (*config_param).rd_vdl_dqp[3][2] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P, &data);
+        (*config_param).rd_vdl_dqp[3][3] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P, &data);
+        (*config_param).rd_vdl_dqp[3][4] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P, &data);
+        (*config_param).rd_vdl_dqp[3][5] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P, &data);
+        (*config_param).rd_vdl_dqp[3][6] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P, &data);
+        (*config_param).rd_vdl_dqp[3][7] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N, &data);
+        (*config_param).rd_vdl_dqn[3][0] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N, &data);
+        (*config_param).rd_vdl_dqn[3][1] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N, &data);
+        (*config_param).rd_vdl_dqn[3][2] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N, &data);
+        (*config_param).rd_vdl_dqn[3][3] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N, &data);
+        (*config_param).rd_vdl_dqn[3][4] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N, &data);
+        (*config_param).rd_vdl_dqn[3][5] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N, &data);
+        (*config_param).rd_vdl_dqn[3][6] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N, &data);
+        (*config_param).rd_vdl_dqn[3][7] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP, &data);
+        (*config_param).rd_vdl_dmp[3] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN, &data);
+        (*config_param).rd_vdl_dmn[3] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0, &data);
+        (*config_param).rd_en_vdl_cs[3][0] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0, &data);
+        (*config_param).rd_en_vdl_cs[3][1] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC, &data);
+        (*config_param).rd_en_dly_cyc[3] = (uint16) data;
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL, &data);
+        (*config_param).rd_control[3] = (uint8) data;
+    }
+    #endif
+    
+    return SOC_E_NONE;
+}
+
+STATIC int
+_shmoo_and28_restore(int unit, int phy_ndx, and28_shmoo_config_param_t *config_param)
+{
+    uint32 data;
+    
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ad[0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ad[1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ad[2]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ad[3]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ad[4]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ad[5]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ad[6]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ad[7]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ad[8]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ad[9]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ad[10]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ad[11]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ad[12]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ad[13]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ad[14]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ad[15]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ba[0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ba[1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ba[2]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_aux[0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_aux[1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_aux[2]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_cs[0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_cs[1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_par);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_ras_n);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_cas_n);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_cke);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_rst_n);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_odt);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT, data);
+    data = SET_ADDR_VDL_FORCE((uint32) (*config_param).control_regs_we_n);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N, data);
+    data = SET_VREF_DAC_CONTROL((*config_param).control_regs_vref_dac_control);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL, data);
+    
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dqsp[0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_P, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dqsn[0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQS_N, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[0][0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ0, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[0][1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ1, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[0][2]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ2, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[0][3]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ3, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[0][4]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ4, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[0][5]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ5, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[0][6]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ6, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[0][7]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DQ7, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dm[0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_DM, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_edc[0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_WR_EDC, data);
+    data = SET_WR_CHAN_DLY_CYC_FORCE((uint32) (*config_param).wr_chan_dly_cyc[0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_WR_CHAN_DLY_CYC, data);
+    
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqsp[0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSP, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqsn[0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQSN, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[0][0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0P, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[0][1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1P, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[0][2]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2P, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[0][3]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3P, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[0][4]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4P, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[0][5]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5P, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[0][6]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6P, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[0][7]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7P, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[0][0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ0N, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[0][1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ1N, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[0][2]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ2N, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[0][3]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ3N, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[0][4]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ4N, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[0][5]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ5N, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[0][6]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ6N, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[0][7]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DQ7N, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dmp[0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMP, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dmn[0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_DMN, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_en_vdl_cs[0][0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_en_vdl_cs[0][1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_VDL_CONTROL_RD_EN_CS0, data);
+    data = SET_RD_EN_DLY_CYC_FORCE((uint32) (*config_param).rd_en_dly_cyc[0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_RD_EN_DLY_CYC, data);
+    data = SET_RD_CONTROL((uint32) (*config_param).rd_control[0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_READ_CONTROL, data);
+    
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dqsp[1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_P, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dqsn[1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQS_N, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[1][0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ0, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[1][1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ1, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[1][2]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ2, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[1][3]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ3, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[1][4]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ4, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[1][5]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ5, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[1][6]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ6, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[1][7]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DQ7, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dm[1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_DM, data);
+    data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_edc[1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_WR_EDC, data);
+    data = SET_WR_CHAN_DLY_CYC_FORCE((uint32) (*config_param).wr_chan_dly_cyc[1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_WR_CHAN_DLY_CYC, data);
+    
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqsp[1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSP, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqsn[1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQSN, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[1][0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0P, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[1][1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1P, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[1][2]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2P, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[1][3]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3P, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[1][4]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4P, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[1][5]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5P, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[1][6]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6P, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[1][7]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7P, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[1][0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ0N, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[1][1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ1N, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[1][2]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ2N, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[1][3]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ3N, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[1][4]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ4N, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[1][5]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ5N, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[1][6]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ6N, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[1][7]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DQ7N, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dmp[1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMP, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dmn[1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_DMN, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_en_vdl_cs[1][0]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0, data);
+    data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_en_vdl_cs[1][1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_VDL_CONTROL_RD_EN_CS0, data);
+    data = SET_RD_EN_DLY_CYC_FORCE((uint32) (*config_param).rd_en_dly_cyc[1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_RD_EN_DLY_CYC, data);
+    data = SET_RD_CONTROL((uint32) (*config_param).rd_control[1]);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_READ_CONTROL, data);
+    
+    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+    if(shmoo_dram_info.interface_bitwidth == 32)
+    {
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dqsp[2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_P, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dqsn[2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQS_N, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[2][0]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ0, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[2][1]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ1, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[2][2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ2, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[2][3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ3, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[2][4]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ4, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[2][5]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ5, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[2][6]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ6, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[2][7]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DQ7, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dm[2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_DM, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_edc[2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_WR_EDC, data);
+        data = SET_WR_CHAN_DLY_CYC_FORCE((uint32) (*config_param).wr_chan_dly_cyc[2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_WR_CHAN_DLY_CYC, data);
+        
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqsp[2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSP, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqsn[2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQSN, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[2][0]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0P, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[2][1]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1P, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[2][2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2P, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[2][3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3P, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[2][4]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4P, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[2][5]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5P, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[2][6]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6P, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[2][7]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7P, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[2][0]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ0N, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[2][1]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ1N, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[2][2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ2N, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[2][3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ3N, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[2][4]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ4N, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[2][5]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ5N, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[2][6]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ6N, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[2][7]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DQ7N, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dmp[2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMP, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dmn[2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_DMN, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_en_vdl_cs[2][0]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_en_vdl_cs[2][1]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_VDL_CONTROL_RD_EN_CS0, data);
+        data = SET_RD_EN_DLY_CYC_FORCE((uint32) (*config_param).rd_en_dly_cyc[2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_RD_EN_DLY_CYC, data);
+        data = SET_RD_CONTROL((uint32) (*config_param).rd_control[2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_READ_CONTROL, data);
+        
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dqsp[3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_P, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dqsn[3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQS_N, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[3][0]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ0, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[3][1]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ1, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[3][2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ2, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[3][3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ3, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[3][4]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ4, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[3][5]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ5, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[3][6]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ6, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dq[3][7]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DQ7, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_dm[3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_DM, data);
+        data = SET_WR_VDL_FORCE((uint32) (*config_param).wr_vdl_edc[3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_WR_EDC, data);
+        data = SET_WR_CHAN_DLY_CYC_FORCE((uint32) (*config_param).wr_chan_dly_cyc[3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_WR_CHAN_DLY_CYC, data);
+        
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqsp[3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSP, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqsn[3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQSN, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[3][0]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0P, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[3][1]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1P, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[3][2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2P, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[3][3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3P, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[3][4]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4P, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[3][5]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5P, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[3][6]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6P, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqp[3][7]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7P, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[3][0]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ0N, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[3][1]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ1N, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[3][2]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ2N, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[3][3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ3N, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[3][4]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ4N, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[3][5]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ5N, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[3][6]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ6N, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dqn[3][7]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DQ7N, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dmp[3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMP, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_vdl_dmn[3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_DMN, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_en_vdl_cs[3][0]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0, data);
+        data = SET_RD_VDL_FORCE((uint32) (*config_param).rd_en_vdl_cs[3][1]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_VDL_CONTROL_RD_EN_CS0, data);
+        data = SET_RD_EN_DLY_CYC_FORCE((uint32) (*config_param).rd_en_dly_cyc[3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_RD_EN_DLY_CYC, data);
+        data = SET_RD_CONTROL((uint32) (*config_param).rd_control[3]);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_READ_CONTROL, data);
+    }
+    #endif
+
+    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+    
+    data = 0;
+    DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, READ_FIFO_CLEAR, CLEAR, 1);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_READ_FIFO_CLEAR, data);
+    DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_READ_FIFO_CLEAR, data);
+    
+    #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+    if(shmoo_dram_info.interface_bitwidth == 32)
+    {
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_READ_FIFO_CLEAR, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_READ_FIFO_CLEAR, data);
+    }
+    #endif
+
+    sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+    
+    return SOC_E_NONE;
+}
+
+/*
+ * Function:
+ *      soc_and28_shmoo_ctl
+ * Purpose:
+ *      Perform shmoo (PHY calibration) on specific DRC index.
+ * Parameters:
+ *      unit                - unit number
+ *      phy_ndx             - DRC index to perform shmoo on.
+ *      shmoo_type          - Selects shmoo sub-section to be performs (-1 for full shmoo)
+ *      stat                - RFU
+ *      plot                - Plot shmoo results when not equal to 0
+ *      action              - Save/restore functionality
+ *      *config_param       - PHY configuration saved/restored
+ * Returns:
+ *      SOC_E_XXX
+ *      This routine may be called after a device is attached
+ *      or whenever a chip reset is required.
+ */
+
+int
+soc_and28_shmoo_ctl(int unit, int phy_ndx, int shmoo_type, int stat, int plot, int action, and28_shmoo_config_param_t *config_param)
+{
+    and28_shmoo_container_t *scPtr = NULL;
+    uint32 dramType;
+    uint32 ctlType;
+    uint32 i;
+    int ndx, ndxEnd;
+    const uint32 *seqPtr;
+    uint32 seqCount;
+    
+    dramType = shmoo_dram_info.dram_type;
+    ctlType = shmoo_dram_info.ctl_type;
+    
+    if(!stat)
+    {
+    /*    scPtr = sal_alloc(sizeof(and28_shmoo_container_t), "AND28 Shmoo Container"); */
+
+        scPtr = (and28_shmoo_container_t *)(CONFIG_SHMOO_SRAM_BUF + sizeof(and28_shmoo_dram_info_t));
+
+        if(scPtr == NULL)
+        {
+            return SOC_E_MEMORY;
+        }
+        sal_memset(scPtr, 0, sizeof(and28_shmoo_container_t));
+        
+        if(phy_ndx != SHMOO_AND28_INTERFACE_RSVP)
+        {
+            ndx = phy_ndx;
+            ndxEnd = phy_ndx + 1;
+        }
+        else
+        {
+            ndx = 0;
+            ndxEnd = SHMOO_AND28_MAX_INTERFACES;
+        }
+        
+        for(; ndx < ndxEnd; ndx++)
+        {
+            if(!_shmoo_and28_check_dram(ndx)) {
+                continue;
+            }
+            
+            if(action == SHMOO_AND28_ACTION_RESTORE)
+            {
+                switch(ctlType)
+                {
+                    case SHMOO_AND28_CTL_TYPE_RSVP:
+                        break;
+                    case SHMOO_AND28_CTL_TYPE_1:
+                        _shmoo_and28_restore(unit, phy_ndx, config_param);
+                        break;
+                    default:
+                        if(scPtr != NULL)
+                        {
+                        /*    sal_free(scPtr); */
+                            scPtr = NULL;
+                        }
+                        
+                        printf("Unsupported controller type: %02lu\n", ctlType);
+                        return SOC_E_FAIL;
+                }
+            }
+            else if((action == SHMOO_AND28_ACTION_RUN) || (action == SHMOO_AND28_ACTION_RUN_AND_SAVE))
+            {
+                switch(ctlType)
+                {
+                    case SHMOO_AND28_CTL_TYPE_RSVP:
+                        break;
+                    case SHMOO_AND28_CTL_TYPE_1:
+                        switch(dramType)
+                        {
+                            case SHMOO_AND28_DRAM_TYPE_DDR3:
+                                seqPtr = &shmoo_order_and28_ddr3[0];
+                                seqCount = SHMOO_AND28_DDR3_SEQUENCE_COUNT;
+                                break;
+                            case SHMOO_AND28_DRAM_TYPE_DDR3L:
+                                seqPtr = &shmoo_order_and28_ddr3l[0];
+                                seqCount = SHMOO_AND28_DDR3L_SEQUENCE_COUNT;
+                                break;
+                            default:
+                                printf("Unsupported dram type: %02lu\n", dramType);
+                                return SOC_E_FAIL;
+                        }
+                        
+                        (*scPtr).dramType = dramType;
+                        (*scPtr).ctlType = ctlType;
+                        
+                        if(shmoo_type != SHMOO_AND28_SHMOO_RSVP)
+                        {
+                            (*scPtr).shmooType = shmoo_type;
+                            _shmoo_and28_entry(unit, ndx, scPtr, SHMOO_AND28_SINGLE);
+                            _shmoo_and28_do(unit, ndx, scPtr);
+                            _shmoo_and28_calib_2D(unit, ndx, scPtr);
+                            _shmoo_and28_set_new_step(unit, ndx, scPtr);
+                            if(plot)
+                            {
+                                _shmoo_and28_plot(unit, ndx, scPtr);
+                            }
+                            _shmoo_and28_exit(unit, ndx, scPtr, SHMOO_AND28_SINGLE);
+                        }
+                        else
+                        {
+                            for(i = 0; i < seqCount; i++)
+                            {
+                                (*scPtr).shmooType = seqPtr[i];
+                                _shmoo_and28_entry(unit, ndx, scPtr, SHMOO_AND28_SEQUENTIAL);
+                                _shmoo_and28_do(unit, ndx, scPtr);
+                                _shmoo_and28_calib_2D(unit, ndx, scPtr);
+                                _shmoo_and28_set_new_step(unit, ndx, scPtr);
+                                if(plot)
+                                {
+                                    _shmoo_and28_plot(unit, ndx, scPtr);
+                                }
+                                _shmoo_and28_exit(unit, ndx, scPtr, SHMOO_AND28_SEQUENTIAL);
+                            }
+                        }
+                        
+                        break;
+                    default:
+                        if(scPtr != NULL)
+                        {
+                        /*    sal_free(scPtr); */
+                            scPtr = NULL;
+                        }
+                        
+                        printf("Unsupported controller type: %02lu\n", ctlType);
+                        return SOC_E_FAIL;
+                }
+            }
+            
+            if((action == SHMOO_AND28_ACTION_RUN_AND_SAVE) || (action == SHMOO_AND28_ACTION_SAVE))
+            {
+                _shmoo_and28_save(unit, phy_ndx, config_param);
+            }
+        }
+        
+        if(scPtr != NULL)
+        {
+        /*    sal_free(scPtr); */
+            scPtr = NULL;
+        }
+        
+        printf("DDR Tuning Complete\n");
+    }
+    else
+    {
+        /* Report only */
+        switch(ctlType)
+        {
+            case SHMOO_AND28_CTL_TYPE_RSVP:
+                break;
+            case SHMOO_AND28_CTL_TYPE_1:
+                break;
+            default:
+                printf("Unsupported controller type: %02lu\n", ctlType);
+                return SOC_E_FAIL;
+        }
+    }
+    return SOC_E_NONE;
+}
+
+/* Set Dram Parameters/Info to Shmoo driver */ 
+int
+soc_and28_shmoo_dram_info_set(int unit, and28_shmoo_dram_info_t *sdi)
+{
+#if(!SHMOO_AND28_PHY_CONSTANT_CONFIG)
+    shmoo_dram_info.ctl_type = (*sdi).ctl_type;
+    shmoo_dram_info.dram_type = (*sdi).dram_type;
+    shmoo_dram_info.dram_bitmap = (*sdi).dram_bitmap;
+    shmoo_dram_info.interface_bitwidth = (*sdi).interface_bitwidth;
+    shmoo_dram_info.num_columns = (*sdi).num_columns;
+    shmoo_dram_info.num_rows = (*sdi).num_rows;
+    shmoo_dram_info.num_banks = (*sdi).num_banks;
+    shmoo_dram_info.data_rate_mbps = (*sdi).data_rate_mbps;
+    shmoo_dram_info.ref_clk_mhz = (*sdi).ref_clk_mhz;
+    shmoo_dram_info.refi = (*sdi).refi;
+    shmoo_dram_info.command_parity_latency = (*sdi).command_parity_latency;
+    shmoo_dram_info.sim_system_mode = (*sdi).sim_system_mode;
+#endif
+    return SOC_E_NONE;
+}
+
+/* Configure PHY PLL and wait for lock */
+int
+_soc_and28_shmoo_phy_cfg_pll(int unit, int phy_ndx)
+{
+    int ndx, ndxEnd;
+    uint32 data;
+    uint32 timeout;
+    uint32 pll_config;
+    uint32 pll_control2;
+    uint32 pll_dividers;
+    uint32 pll_frac_divider;
+    
+    if(shmoo_dram_info.ref_clk_mhz != 50)
+    {
+        printf("     Unsupported reference flock frequency: %4d MHz\n", shmoo_dram_info.ref_clk_mhz);
+        return SOC_E_FAIL;
+    }
+    
+    switch(shmoo_dram_info.data_rate_mbps)
+    {
+        case 800:
+            pll_config = 0x018D0012;
+            pll_control2 = 0x94000000;
+            pll_dividers = 0x004030C0;
+            pll_frac_divider = 0x00000000;
+            break;
+        case 1066:
+            pll_config = 0x018D0012;
+            pll_control2 = 0x94000000;
+            pll_dividers = 0x003030BF;
+            pll_frac_divider = 0x000E147A;
+            break;
+        case 1333:
+            pll_config = 0x018D0012;
+            pll_control2 = 0x94000000;
+            pll_dividers = 0x002030A0;
+            pll_frac_divider = 0x000147AE;
+            break;
+        case 1600:
+            pll_config = 0x018D0012;
+            pll_control2 = 0x94000000;
+            pll_dividers = 0x002030C0;
+            pll_frac_divider = 0x00000000;
+            break;
+        default:
+            printf("     Unsupported data rate: %4d Mbps\n", shmoo_dram_info.data_rate_mbps);
+            return SOC_E_FAIL;
+    }
+    
+    printf("     PHY PLL Configuration\n");
+    printf("     Fref.............: %4d MHz\n", shmoo_dram_info.ref_clk_mhz);
+    printf("     Data rate........: %4d Mbps\n", shmoo_dram_info.data_rate_mbps);
+
+    if(phy_ndx != SHMOO_AND28_INTERFACE_RSVP)
+    {
+        ndx = phy_ndx;
+        ndxEnd = phy_ndx + 1;
+    }
+    else
+    {
+        ndx = 0;
+        ndxEnd = SHMOO_AND28_MAX_INTERFACES;
+    }
+    
+    for(; ndx < ndxEnd; ndx++)
+    {
+        if(!_shmoo_and28_check_dram(ndx))
+        {
+            continue;
+        }
+        
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG, pll_config);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_PLL_CONTROL2, pll_control2);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_PLL_DIVIDERS, pll_dividers);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_PLL_FRAC_DIVIDER, pll_frac_divider);
+        
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG, &data);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, PLL_CONFIG, RESET, 0);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG, data);
+        
+        timeout = 2000;
+        do
+        {
+            DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_PLL_STATUS, &data);
+            
+            if(DDR_PHY_GET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, PLL_STATUS, LOCK))
+            {
+                printf("     PLL locked.\n");
+                break;
+            }
+            
+            if (timeout == 0)
+            {
+                printf("     PLL not locked!!! (Timeout)\n");
+                return SOC_E_TIMEOUT;
+            }
+            
+            timeout--;
+            sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        }
+        while(TRUE);
+        
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG, &data);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, PLL_CONFIG, RESET_POST_DIV, 0);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_PLL_CONFIG, data);
+    }
+
+    return SOC_E_NONE;
+}
+
+int
+soc_and28_shmoo_phy_init(int unit, int phy_ndx)
+{
+    int ndx, ndxEnd;
+    uint32 data;
+    uint32 dfi_ctrl;
+    uint32 dram_config;
+    uint32 dram_timing1;
+    uint32 dram_timing2;
+    uint32 dram_timing3;
+    uint32 dram_timing4;
+    uint32 step1000, size1000UI, sizeUI;
+    and28_step_size_t ss;
+    
+    if(phy_ndx != SHMOO_AND28_INTERFACE_RSVP)
+    {
+        ndx = phy_ndx;
+        ndxEnd = phy_ndx + 1;
+    }
+    else
+    {
+        ndx = 0;
+        ndxEnd = SHMOO_AND28_MAX_INTERFACES;
+    }
+    
+    for(; ndx < ndxEnd; ndx++)
+    {
+        if(!_shmoo_and28_check_dram(ndx))
+        {
+            continue;
+        }
+        
+        printf("A Series - PHY Initialization (PHY index: %02d)\n", ndx);
+        
+/*A01*/ printf("A01. Turn off CKE\n");
+        dfi_ctrl = 0;
+        DDR_PHY_SET_FIELD(dfi_ctrl, DDR34_CORE_PHY_CONTROL_REGS, DFI_CNTRL, ASSERT_REQ, 1);
+        DDR_PHY_SET_FIELD(dfi_ctrl, DDR34_CORE_PHY_CONTROL_REGS, DFI_CNTRL, DFI_CS0 , 1);
+        DDR_PHY_SET_FIELD(dfi_ctrl, DDR34_CORE_PHY_CONTROL_REGS, DFI_CNTRL, DFI_CS1 , 1);
+        #ifdef PHY_AND28_E0
+            DDR_PHY_SET_FIELD(dfi_ctrl, DDR34_CORE_PHY_CONTROL_REGS, DFI_CNTRL, DFI_CKE , 0);
+        #endif
+        #ifdef PHY_AND28_E2
+            DDR_PHY_SET_FIELD(dfi_ctrl, DDR34_CORE_PHY_CONTROL_REGS, DFI_CNTRL, DFI_CKE0 , 0);
+            DDR_PHY_SET_FIELD(dfi_ctrl, DDR34_CORE_PHY_CONTROL_REGS, DFI_CNTRL, DFI_CKE1 , 0);
+        #endif
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL, dfi_ctrl);
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        
+/*A02*/ printf("A02. Configure timing parameters\n");
+        if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+        {
+            switch(shmoo_dram_info.data_rate_mbps)
+            {
+                case 800:
+                    dram_timing1 = 0x0F040606;
+                    dram_timing2 = 0x04060506;
+                    dram_timing3 = 0x00044068;
+                    dram_timing4 = 0x00000000;
+                    break;
+                case 1066:
+                    dram_timing1 = 0x14040707;
+                    dram_timing2 = 0x04080607;
+                    dram_timing3 = 0x0004408C;
+                    dram_timing4 = 0x00000000;
+                    break;
+                case 1333:
+                    dram_timing1 = 0x18050909;
+                    dram_timing2 = 0x050A0709;
+                    dram_timing3 = 0x000450B0;
+                    dram_timing4 = 0x00000000;
+                    break;
+                case 1600:
+                    dram_timing1 = 0x1C060B0B;
+                    dram_timing2 = 0x060C080B;
+                    dram_timing3 = 0x000460D0;
+                    dram_timing4 = 0x00000000;
+                    break;
+                default:
+                    printf("Unsupported data rate: %4d Mbps\n", shmoo_dram_info.data_rate_mbps);
+                    return SOC_E_FAIL;
+            }
+        }
+        else
+        {
+            switch(shmoo_dram_info.data_rate_mbps)
+            {
+                case 800:
+                    dram_timing1 = 0x0F040606;
+                    dram_timing2 = 0x04060506;
+                    dram_timing3 = 0x00044068;
+                    dram_timing4 = 0x00000000;
+                    break;
+                case 1066:
+                    dram_timing1 = 0x14040707;
+                    dram_timing2 = 0x04080607;
+                    dram_timing3 = 0x0004408C;
+                    dram_timing4 = 0x00000000;
+                    break;
+                case 1333:
+                    dram_timing1 = 0x18040909;
+                    dram_timing2 = 0x050A0709;
+                    dram_timing3 = 0x000450B0;
+                    dram_timing4 = 0x00000000;
+                    break;
+                case 1600:
+                    dram_timing1 = 0x1C050B0B;
+                    dram_timing2 = 0x060C080B;
+                    dram_timing3 = 0x000460D0;
+                    dram_timing4 = 0x00000000;
+                    break;
+                default:
+                    printf("Unsupported data rate: %4d Mbps\n", shmoo_dram_info.data_rate_mbps);
+                    return SOC_E_FAIL;
+            }
+        }
+        
+        dram_config = 0x00001000;
+        if (!SHMOO_AND28_PHY_BITWIDTH_IS_32) 
+            dram_config |= 0x02000000;
+        switch(shmoo_dram_info.num_rows) 
+        {
+            case 4096:  dram_config |= 0x00000000; break;
+            case 8192:  dram_config |= 0x00000010; break;
+            case 16384: dram_config |= 0x00000020; break;
+            case 32768: dram_config |= 0x00000030; break;
+            case 65536: dram_config |= 0x00000040; break;
+            default:
+                printf("Unsupported number of rows: %d\n", shmoo_dram_info.num_rows);
+                return SOC_E_FAIL;
+        }
+        switch(shmoo_dram_info.num_columns) 
+        {
+            case 512:   dram_config |= 0x00000000; break;
+            case 1024:  dram_config |= 0x00000100; break;
+            case 2048:  dram_config |= 0x00000200; break;
+            default:
+                printf("Unsupported number of columns: %d\n", shmoo_dram_info.num_columns);
+                return SOC_E_FAIL;
+        }
+        switch(shmoo_dram_info.num_banks) 
+        {
+            case 4:     dram_config |= 0x00000000; break;
+            case 8:     dram_config |= 0x00000400; break;
+            default:
+                printf("Unsupported number of banks: %d\n", shmoo_dram_info.num_banks);
+                return SOC_E_FAIL;
+        }
+        
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_DRAM_CONFIG, dram_config);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING1, dram_timing1);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING2, dram_timing2);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING3, dram_timing3);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_DRAM_TIMING4, dram_timing4);
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        
+/*A03*/ printf("A03. Configure PHY PLL\n");
+        _soc_and28_shmoo_phy_cfg_pll(unit, ndx);
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        
+/*A04*/ printf("A04. Configure reference voltage\n");
+/*R04*/ DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL, &data);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VREF_DAC_CONTROL, DAC0, 32);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VREF_DAC_CONTROL, DAC1, 32);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL, data);
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VREF_DAC_CONTROL, PDN0, 0);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VREF_DAC_CONTROL, PDN1, 0);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VREF_DAC_CONTROL, PDN2, 0);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VREF_DAC_CONTROL, PDN3, 0);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VREF_DAC_CONTROL, data);
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        
+/*A05*/ printf("A05. Compute VDL step size\n");
+        _and28_calculate_step_size(unit, ndx, &ss);
+        
+        step1000 = ss.step1000;
+        size1000UI = ss.size1000UI;
+        sizeUI = size1000UI / 1000;
+        printf("     VDL calibration complete.\n");
+        printf("     VDL step size....: %3lu.%03lu ps\n", (step1000 / 1000), (step1000 % 1000));
+        printf("     UI size..........: %3lu.%03lu steps\n", sizeUI, (size1000UI % 1000));
+        
+/*A06*/ printf("A06. Configure ADDR/CTRL VDLs\n");
+        data = 0;
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CONTROL_AD00, FORCE, 1);
+        if(sizeUI > SHMOO_AND28_MAX_VDL_LENGTH)
+        {
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CONTROL_AD00, VDL_STEP, SHMOO_AND28_MAX_VDL_LENGTH - 1);
+        }
+        else
+        {
+            DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VDL_CONTROL_AD00, VDL_STEP, sizeUI);
+        }
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD00, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD01, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD02, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD03, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD04, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD05, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD06, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD07, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD08, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD09, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD10, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD11, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD12, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD13, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD14, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AD15, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA0, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA1, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_BA2, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX0, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX1, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_AUX2, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS0, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CS1, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_PAR, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RAS_N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CAS_N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_CKE, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_RST_N, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_ODT, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VDL_CONTROL_WE_N, data);
+        
+/*A07*/ printf("A07. Disable Virtual VTT\n");
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL, &data);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VIRTUAL_VTT_CONTROL, ENABLE_CTL_IDLE, 0);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VIRTUAL_VTT_CONTROL, ENABLE_CS_IDLE, 0);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, VIRTUAL_VTT_CONTROL, ENABLE_CKE_IDLE, 0);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_VIRTUAL_VTT_CONTROL, data);
+        
+/*A08*/ printf("A08. ZQ calibration\n");
+/*R08*/ if(shmoo_dram_info.sim_system_mode)
+        {
+            printf("     Skipped for emulation\n");
+            
+            goto SHMOO_AND28_ZQ_CALIBRATION_END;
+        }
+        
+        _and28_zq_calibration(unit, ndx);
+        
+        SHMOO_AND28_ZQ_CALIBRATION_END:
+        
+/*A09*/ printf("A09. Configure Static Pad Control\n");
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL, &data);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, STATIC_PAD_CTL, IDDQ_CLK1, 1);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, STATIC_PAD_CTL, AUTO_OEB, 1);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_STATIC_PAD_CTL, data);
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        
+/*A10*/ printf("A10. Configure ODT\n");
+        data = 0;
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, WRITE_ODT_CNTRL, ODT_FORCE, 1);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_CONTROL_REGS, WRITE_ODT_CNTRL, ODT_FORCE_VALUE, 1);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_WRITE_ODT_CNTRL, data);
+        
+        data = 0;
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, ODT_CONTROL, ODT_ENABLE, 1);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, ODT_CONTROL, ODT_DELAY, 0);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, ODT_CONTROL, ODT_POST_LENGTH, 2);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, ODT_CONTROL, ODT_PRE_LENGTH, 4);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_ODT_CONTROL, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_ODT_CONTROL, data);
+        #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+        if(shmoo_dram_info.interface_bitwidth == 32)
+        {
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_ODT_CONTROL, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_ODT_CONTROL, data);
+        }
+        #endif
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        
+/*A11*/ printf("A11. Configure Write Pre-/Post-amble\n");
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE, &data);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, WR_PREAMBLE_MODE, DQ_POSTAM_BITS, 1);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, WR_PREAMBLE_MODE, DQ_PREAM_BITS, 1);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, WR_PREAMBLE_MODE, DQS, 0xE);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, WR_PREAMBLE_MODE, DQS_POSTAM_BITS, 0);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, WR_PREAMBLE_MODE, DQS_PREAM_BITS, 2);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_WR_PREAMBLE_MODE, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_WR_PREAMBLE_MODE, data);
+        #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+        if(shmoo_dram_info.interface_bitwidth == 32)
+        {
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_WR_PREAMBLE_MODE, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_WR_PREAMBLE_MODE, data);
+        }
+        #endif
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        
+/*A12*/ printf("A12. Configure Auto Idle\n");
+        DDR_PHY_REG_READ(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL, &data);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, IDLE_PAD_CONTROL, AUTO_DQ_RXENB_MODE, 3);
+        DDR_PHY_SET_FIELD(data, DDR34_CORE_PHY_BYTE_LANE_0, IDLE_PAD_CONTROL, AUTO_DQ_IDDQ_MODE, 3);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_0_IDLE_PAD_CONTROL, data);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_1_IDLE_PAD_CONTROL, data);
+        #if(SHMOO_AND28_PHY_BITWIDTH_IS_32)
+        if(shmoo_dram_info.interface_bitwidth == 32)
+        {
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_2_IDLE_PAD_CONTROL, data);
+            DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_BYTE_LANE_3_IDLE_PAD_CONTROL, data);
+        }
+        #endif
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+
+/*A13*/ printf("A13. Release PHY control\n");
+        DDR_PHY_SET_FIELD(dfi_ctrl, DDR34_CORE_PHY_CONTROL_REGS, DFI_CNTRL, ASSERT_REQ, 0);
+        DDR_PHY_REG_WRITE(unit, SHMOO_AND28_PHY_REG_BASE, 0, DDR34_CORE_PHY_CONTROL_REGS_DFI_CNTRL, data);
+        sal_usleep(SHMOO_AND28_SHORT_SLEEP);
+        
+        printf("A Series - PHY Initialization complete (PHY index: %02d)\n", ndx);
+    }
+    
+    return SOC_E_NONE;
+}
diff --git a/arch/arm/cpu/armv7/iproc/shmoo_and28/shmoo_and28.h b/arch/arm/cpu/armv7/iproc/shmoo_and28/shmoo_and28.h
new file mode 100755
index 0000000..c2b46d6
--- /dev/null
+++ b/arch/arm/cpu/armv7/iproc/shmoo_and28/shmoo_and28.h
@@ -0,0 +1,289 @@
+/*
+ * $Id: shmoo_and28.h,v 1.1 2014/04/04 11:11:11 mbasoglu Exp $
+ * $Copyright: (c) 2014 Broadcom Corp.
+ * All Rights Reserved.$
+ *
+ * Andover 28nm PHY Support by San Jose DDR Team
+ * Author: Mehmet Basoglu
+ */
+
+/* BEGIN: TEMPORARY */
+/* END: TEMPORARY */
+
+#ifndef _SHMOO_AND28_H
+#define _SHMOO_AND28_H
+
+#define uint8                                       unsigned char
+#define uint16                                      unsigned short
+#define uint32                                      unsigned long
+#define int32                                       long
+#ifdef SOC_E_NONE
+#undef SOC_E_NONE
+#endif
+#define SOC_E_NONE                                  0x0
+#ifdef SOC_E_FAIL
+#undef SOC_E_FAIL
+#endif
+#define SOC_E_FAIL                                  0x1
+#ifdef SOC_E_TIMEOUT
+#undef SOC_E_TIMEOUT
+#endif
+#define SOC_E_TIMEOUT                               0x2
+#ifdef SOC_E_MEMORY
+#undef SOC_E_MEMORY
+#endif
+#define SOC_E_MEMORY                                0x4
+
+#define SET_ADDR_VDL_FORCE(v)                       ( 0x10000 | ( (v) & 0x011FF ) )
+#define SET_VREF_DAC_CONTROL(v)                     ( (v) & 0xFFFFF ) 
+#define SET_WR_VDL_FORCE(v)                         ( 0x10000 | ( (v) & 0x011FF ) )
+#define SET_WR_CHAN_DLY_CYC_FORCE(v)                ( 0x10000 | ( (v) & 0x000F7 ) )
+#define SET_RD_VDL_FORCE(v)                         ( 0x10000 | ( (v) & 0x010FF ) )
+#define SET_RD_EN_DLY_CYC_FORCE(v)                  ( 0x10000 | ( (v) & 0x001FF ) )
+#define SET_RD_CONTROL(v)                           ( (v) & 0x0001F )
+
+#define SHMOO_AND28_PHY_TYPE_RSVP                   0
+#define SHMOO_AND28_PHY_TYPE_E0                     0xE0
+#define SHMOO_AND28_PHY_TYPE_E2                     0xE2
+
+#define SHMOO_AND28_CTL_TYPE_RSVP                   0
+#define SHMOO_AND28_CTL_TYPE_RSVP_STR               "t0"
+#define SHMOO_AND28_CTL_TYPE_1                      1
+#define SHMOO_AND28_CTL_TYPE_1_STR                  "t1"
+
+#define SHMOO_AND28_DRAM_TYPE_RSVP                  0
+#define SHMOO_AND28_DRAM_TYPE_DDR3                  3
+#define SHMOO_AND28_DRAM_TYPE_DDR3L                 31
+#define SHMOO_AND28_DRAM_TYPE_DDR4                  4
+#define SHMOO_AND28_DRAM_TYPE_GDDR5                 5
+
+#define SHMOO_AND28_PHY_REG_BASE_RSVP               0
+#define SHMOO_AND28_PHY_REG_BASE_CYGNUS             0x18011000
+#define SHMOO_AND28_PHY_REG_BASE_GREYHOUND          0x18011000
+
+#define SHMOO_AND28_YDC_DDR_BIST_REG_BASE_RSVP      0
+#define SHMOO_AND28_YDC_DDR_BIST_REG_BASE_GREYHOUND 0x18010C00
+
+#define SHMOO_AND28_CHIP_ID_RSVP                    0
+#define SHMOO_AND28_CHIP_ID_CYGNUS                  0xC
+#define SHMOO_AND28_CHIP_ID_GREYHOUND               0x6
+
+#if(CHIP_IS_CYGNUS)
+    #define SHMOO_AND28_CHIP_ID                     SHMOO_AND28_CHIP_ID_CYGNUS
+    #define SHMOO_AND28_PHY_TYPE                    SHMOO_AND28_PHY_TYPE_E2
+    #define SHMOO_AND28_PHY_REG_BASE                SHMOO_AND28_PHY_REG_BASE_CYGNUS
+    #define SHMOO_AND28_YDC_DDR_BIST_REG_BASE       SHMOO_AND28_YDC_DDR_BIST_REG_BASE_CYGNUS
+    #define SHMOO_AND28_CTL_TYPE                    SHMOO_AND28_CTL_TYPE_1
+    #define SHMOO_AND28_DRAM_TYPE                   SHMOO_AND28_DRAM_TYPE_DDR3L
+    #define SHMOO_AND28_PHY_BITWIDTH                16
+    #define SHMOO_AND28_PHY_CONSTANT_CONFIG         0
+    #define PHY_AND28_E2                            SHMOO_AND28_PHY_TYPE
+#elif(CHIP_IS_GREYHOUND)
+    #define SHMOO_AND28_CHIP_ID                     SHMOO_AND28_CHIP_ID_GREYHOUND
+    #define SHMOO_AND28_PHY_TYPE                    SHMOO_AND28_PHY_TYPE_E0
+    #define SHMOO_AND28_PHY_REG_BASE                SHMOO_AND28_PHY_REG_BASE_GREYHOUND
+    #define SHMOO_AND28_YDC_DDR_BIST_REG_BASE       SHMOO_AND28_YDC_DDR_BIST_REG_BASE_GREYHOUND
+    #define SHMOO_AND28_CTL_TYPE                    SHMOO_AND28_CTL_TYPE_1
+    #define SHMOO_AND28_DRAM_TYPE                   SHMOO_AND28_DRAM_TYPE_DDR3
+    #define SHMOO_AND28_PHY_BITWIDTH                32
+    #define SHMOO_AND28_PHY_CONSTANT_CONFIG         0
+    #define PHY_AND28_E0                            SHMOO_AND28_PHY_TYPE
+#elif(CHIP_IS_SABER2)  /* NEED TO MODIFY */
+    #define SHMOO_AND28_CHIP_ID                     SHMOO_AND28_CHIP_ID_GREYHOUND
+    #define SHMOO_AND28_PHY_TYPE                    SHMOO_AND28_PHY_TYPE_E0
+    #define SHMOO_AND28_PHY_REG_BASE                SHMOO_AND28_PHY_REG_BASE_GREYHOUND
+    #define SHMOO_AND28_YDC_DDR_BIST_REG_BASE       SHMOO_AND28_YDC_DDR_BIST_REG_BASE_GREYHOUND
+    #define SHMOO_AND28_CTL_TYPE                    SHMOO_AND28_CTL_TYPE_1
+    #define SHMOO_AND28_DRAM_TYPE                   SHMOO_AND28_DRAM_TYPE_DDR3
+    #define SHMOO_AND28_PHY_BITWIDTH                16
+    #define SHMOO_AND28_PHY_CONSTANT_CONFIG         0
+    #define PHY_AND28_E0                            SHMOO_AND28_PHY_TYPE
+#endif
+
+#define SHMOO_AND28_PHY_BITWIDTH_IS_32              (SHMOO_AND28_PHY_BITWIDTH >> 5)
+#define YDC_DDR_BIST_PHY_BITWIDTH_IS_32             SHMOO_AND28_PHY_BITWIDTH_IS_32
+#define YDC_DDR_BIST_REG_BASE                       SHMOO_AND28_YDC_DDR_BIST_REG_BASE
+
+#define SHMOO_AND28_BIT                             1
+#define SHMOO_AND28_BYTE                            (SHMOO_AND28_BIT << 3)
+#define SHMOO_AND28_HALFWORD                        (SHMOO_AND28_BYTE << 1)
+#define SHMOO_AND28_WORD                            (SHMOO_AND28_HALFWORD << 1)
+#define SHMOO_AND28_DOUBLEWORD                      (SHMOO_AND28_WORD << 1)
+#define SHMOO_AND28_QUADWORD                        (SHMOO_AND28_DOUBLEWORD << 1)
+
+#define SHMOO_AND28_SHORT_SLEEP                     1
+#define SHMOO_AND28_LONG_SLEEP                      10
+#define SHMOO_AND28_DEEP_SLEEP                      100
+#define SHMOO_AND28_HIBERNATION                     1000
+#define SHMOO_AND28_STASIS                          1000000
+
+#define SHMOO_AND28_SHMOO_RSVP                      -1
+#define SHMOO_AND28_RD_EN                           23
+#define SHMOO_AND28_RD_EXTENDED                     50
+#define SHMOO_AND28_WR_EXTENDED                     60
+#define SHMOO_AND28_ADDR_EXTENDED                   71
+#define SHMOO_AND28_CTRL_EXTENDED                   72
+#define SHMOO_AND28_DDR3_SEQUENCE_COUNT             5
+#define SHMOO_AND28_DDR3L_SEQUENCE_COUNT            5
+/* BEGIN: EXTRA */
+/* END: EXTRA */
+
+#define SHMOO_AND28_QUICK_SHMOO_CTRL_EXTENDED       1
+
+#define SHMOO_AND28_REPEAT                          9
+#define SHMOO_AND28_REPEAT_HALF                     (SHMOO_COMBO28_REPEAT >> 1)
+
+#define SHMOO_AND28_SEQUENTIAL                      0
+#define SHMOO_AND28_SINGLE                          1
+
+#define SHMOO_AND28_ACTION_RSVP                     -1
+#define SHMOO_AND28_ACTION_RESTORE                  0
+#define SHMOO_AND28_ACTION_RUN                      1
+#define SHMOO_AND28_ACTION_SAVE                     2
+#define SHMOO_AND28_ACTION_RUN_AND_SAVE             3
+
+#define SHMOO_AND28_MAX_INTERFACES                  8
+#define SHMOO_AND28_INTERFACE_RSVP                  -1
+#define SHMOO_AND28_BYTES_PER_INTERFACE             4
+
+#define SHMOO_AND28_BIST_NOF_PATTERNS               8
+#define SHMOO_AND28_BIST_MPR_NOF_PATTERNS           4
+
+#define SHMOO_AND28_MAX_VISIBLE_UI_COUNT            4
+#define SHMOO_AND28_MAX_EFFECTIVE_UI_COUNT          4
+#define SHMOO_AND28_LAST_EFFECTIVE_UI               (SHMOO_AND28_MAX_EFFECTIVE_UI_COUNT - 1)
+#define SHMOO_AND28_MAX_VDL_LENGTH                  256
+#define SHMOO_AND28_MAX_VREF_RANGE                  64
+#define SHMOO_AND28_MAX_ZQ_CAL_RANGE                32
+
+#define SHMOO_AND28_RESULT2D_X                      SHMOO_AND28_MAX_VDL_LENGTH
+#define SHMOO_AND28_RESULT2D_Y                      SHMOO_AND28_MAX_VREF_RANGE
+
+#define SHMOO_AND28_STRING_LENGTH                   (SHMOO_AND28_RESULT2D_X + 1)
+#define SHMOO_AND28_ERROR_ARRAY_LENGTH              4
+
+#define SHMOO_AND28_CALIB_CENTER_PASS               111
+#define SHMOO_AND28_CALIB_RISING_EDGE               011
+#define SHMOO_AND28_CALIB_FALLING_EDGE              100
+#define SHMOO_AND28_CALIB_PASS_START                001
+#define SHMOO_AND28_CALIB_FAIL_START                110
+#define SHMOO_AND28_CALIB_VDL_ZERO                  000
+
+#define SHMOO_AND28_VDL_TFIX                        18
+
+#define SHMOO_AND28_RD_DATA_DLY_INIT                7
+
+#define SHMOO_AND28_RD_EN_CYC_INIT                  1
+
+#define SHMOO_AND28_RD_EN_VDL_INIT                  0
+
+#define SHMOO_AND28_RD_DQ_VDL_INIT                  0
+#define SHMOO_AND28_RD_DQ_FAIL_CAP                  5
+
+#define SHMOO_AND28_RD_DQS_VDL_OFFSET               SHMOO_AND28_RD_DQ_VDL_INIT
+
+#define SHMOO_AND28_WR_CYC_INIT                     0
+
+#define SHMOO_AND28_PHY_NOF_AD                      16
+#define SHMOO_AND28_PHY_NOF_BA                      3
+#define SHMOO_AND28_PHY_NOF_AUX                     3
+#define SHMOO_AND28_PHY_NOF_CS                      2
+
+typedef struct and28_shmoo_dram_info_s
+{ 
+    uint32 ctl_type;
+    uint32 dram_type;
+    uint32 dram_bitmap;
+    uint32 interface_bitwidth;
+    int    num_columns;
+    int    num_rows;
+    int    num_banks;
+    int    data_rate_mbps;
+    int    ref_clk_mhz; 
+    uint32 refi;
+    uint32 command_parity_latency;
+    int sim_system_mode;
+} and28_shmoo_dram_info_t;
+
+typedef struct and28_shmoo_config_param_s
+{
+    uint16  control_regs_ad[SHMOO_AND28_PHY_NOF_AD];
+    uint16  control_regs_ba[SHMOO_AND28_PHY_NOF_BA];
+    uint16  control_regs_aux[SHMOO_AND28_PHY_NOF_AUX];
+    uint16  control_regs_cs[SHMOO_AND28_PHY_NOF_CS];
+    uint16  control_regs_par;
+    uint16  control_regs_ras_n;
+    uint16  control_regs_cas_n;
+    uint16  control_regs_cke;
+    uint16  control_regs_rst_n;
+    uint16  control_regs_odt;
+    uint16  control_regs_we_n;
+    uint32  control_regs_vref_dac_control;
+    
+    uint16  wr_vdl_dqsp[SHMOO_AND28_BYTES_PER_INTERFACE];
+    uint16  wr_vdl_dqsn[SHMOO_AND28_BYTES_PER_INTERFACE];
+    uint16  wr_vdl_dq[SHMOO_AND28_BYTES_PER_INTERFACE][SHMOO_AND28_BYTE];
+    uint16  wr_vdl_dm[SHMOO_AND28_BYTES_PER_INTERFACE];
+    uint16  wr_vdl_edc[SHMOO_AND28_BYTES_PER_INTERFACE];
+    uint8   wr_chan_dly_cyc[SHMOO_AND28_BYTES_PER_INTERFACE];
+    
+    uint16  rd_vdl_dqsp[SHMOO_AND28_BYTES_PER_INTERFACE];
+    uint16  rd_vdl_dqsn[SHMOO_AND28_BYTES_PER_INTERFACE];
+    uint16  rd_vdl_dqp[SHMOO_AND28_BYTES_PER_INTERFACE][SHMOO_AND28_BYTE];
+    uint16  rd_vdl_dqn[SHMOO_AND28_BYTES_PER_INTERFACE][SHMOO_AND28_BYTE];
+    uint16  rd_vdl_dmp[SHMOO_AND28_BYTES_PER_INTERFACE];
+    uint16  rd_vdl_dmn[SHMOO_AND28_BYTES_PER_INTERFACE];
+    uint16  rd_en_vdl_cs[SHMOO_AND28_BYTES_PER_INTERFACE][SHMOO_AND28_PHY_NOF_CS];
+    uint16  rd_en_dly_cyc[SHMOO_AND28_BYTES_PER_INTERFACE];
+    uint8   rd_control[SHMOO_AND28_BYTES_PER_INTERFACE];
+} and28_shmoo_config_param_t;
+
+typedef struct and28_vendor_info_s { 
+    uint32 dram_density;
+    uint32 fifo_depth;
+    uint32 revision_id;        
+    uint32 manufacture_id;
+} and28_vendor_info_t;
+
+typedef struct and28_shmoo_container_s
+{
+    uint32 sizeX;
+    uint32 sizeY;
+    uint32 yCapMin;
+    uint32 yCapMax;
+    uint32 yJump;
+    uint32 calibMode;
+    uint32 calibPos;
+    uint32 calibStart;
+    uint32 result2D[(SHMOO_AND28_RESULT2D_X)*(SHMOO_AND28_RESULT2D_Y)];
+    uint32 resultData[SHMOO_AND28_WORD];
+    uint32 shmooType;
+    uint32 dramType;
+    uint32 ctlType;
+    uint32 trefi;
+    uint32 step1000;
+    uint32 size1000UI;
+    uint32 endUI[SHMOO_AND28_MAX_VISIBLE_UI_COUNT];
+    uint32 engageUIshift;
+    uint32 wckInv;
+} and28_shmoo_container_t;
+
+typedef struct and28_step_size_s
+{
+    uint32 step1000;
+    uint32 size1000UI;
+} and28_step_size_t;
+
+typedef struct and28_ui_position_s
+{
+    uint32 ui;
+    uint32 position;
+} and28_ui_position_t;
+
+typedef uint32 and28_shmoo_error_array_t[SHMOO_AND28_ERROR_ARRAY_LENGTH];
+
+extern int soc_and28_shmoo_dram_info_set(int unit, and28_shmoo_dram_info_t *sdi);
+extern int soc_and28_shmoo_phy_init(int unit, int phy_ndx);
+extern int soc_and28_shmoo_ctl(int unit, int phy_ndx, int shmoo_type, int stat, int plot, int action, and28_shmoo_config_param_t *config_param);
+
+#endif /* _SHMOO_AND28_H */
diff --git a/arch/arm/cpu/armv7/iproc/shmoo_and28/ydc_ddr_bist.c b/arch/arm/cpu/armv7/iproc/shmoo_and28/ydc_ddr_bist.c
new file mode 100755
index 0000000..5b6e413
--- /dev/null
+++ b/arch/arm/cpu/armv7/iproc/shmoo_and28/ydc_ddr_bist.c
@@ -0,0 +1,173 @@
+/*
+ * $Id: shmoo_and28.c,v 1.1.1.1 2014/05/05 07:55:34 mbasoglu Exp $
+ * $Copyright: (c) 2013 Broadcom Corp.
+ * All Rights Reserved.$
+ *
+ * Andover 28nm PHY Support by SJ DDR Team
+ */
+
+#include <config.h>
+#include <common.h>
+#include "asm/arch/socregs.h"
+#include "asm/iproc/iproc_common.h"
+#include "asm/iproc/reg_utils.h"
+
+#define STATIC static
+
+#define SOC_IF_ERROR_RETURN(x)      (x)
+#define sal_alloc(x,y)              malloc(x)
+#define sal_memset(x,y,z)           memset(x,y,z)
+#define sal_free(x)                 free(x)
+#define sal_usleep(x)               udelay(x)
+
+#define TRUE                        (1)
+#define FALSE                       (0)
+
+/* BEGIN: TEMPORARY */
+#ifndef BCM_AND28_SUPPORT
+#define BCM_AND28_SUPPORT
+#endif
+/* END: TEMPORARY */
+
+#ifdef BCM_AND28_SUPPORT
+#include "ydc_ddr_bist.h"
+#include "phy_reg_access.h"
+#endif
+
+/* BEGIN: HELPER FUNCTIONS */
+STATIC uint32
+_get_random28(void)
+{
+    static uint32 m_w = 6483;       /* must not be zero */
+    static uint32 m_z = 31245;      /* must not be zero */
+    
+    m_z = 36969 * (m_z & 65535) + (m_z >> 16);
+    m_w = 18000 * (m_w & 65535) + (m_w >> 16);
+    return (m_z << 16) + m_w;       /* 32-bit result */
+}
+/* END: HELPER FUNCTIONS */
+
+int
+soc_ydc_ddr_bist_config_set(int unit, int phy_ndx, ydc_ddr_bist_info_t *bist_info)
+{
+    uint32 data;
+
+    READ_YDC_DDR_BIST_CONFIGURATIONSr(0, YDC_DDR_BIST_REG_BASE, &data);
+    YDC_DDR_BIST_SET_FIELD(data, YDC_DDR_BIST, CONFIGURATIONS, WRITE_WEIGHT, (*bist_info).write_weight);
+    YDC_DDR_BIST_SET_FIELD(data, YDC_DDR_BIST, CONFIGURATIONS, READ_WEIGHT, (*bist_info).read_weight);
+    YDC_DDR_BIST_SET_FIELD(data, YDC_DDR_BIST, CONFIGURATIONS, PATTERN_BIT_MODE, 0);
+    YDC_DDR_BIST_SET_FIELD(data, YDC_DDR_BIST, CONFIGURATIONS, PRBS_MODE, (*bist_info).prbs_mode);
+    YDC_DDR_BIST_SET_FIELD(data, YDC_DDR_BIST, CONFIGURATIONS, CONS_ADDR_8_BANKS, 1);
+    YDC_DDR_BIST_SET_FIELD(data, YDC_DDR_BIST, CONFIGURATIONS, ADDRESS_SHIFT_MODE, 0);
+    YDC_DDR_BIST_SET_FIELD(data, YDC_DDR_BIST, CONFIGURATIONS, DATA_SHIFT_MODE, 0);
+    YDC_DDR_BIST_SET_FIELD(data, YDC_DDR_BIST, CONFIGURATIONS, DATA_ADDR_MODE, 0);
+    YDC_DDR_BIST_SET_FIELD(data, YDC_DDR_BIST, CONFIGURATIONS, IND_WR_RD_ADDR_MODE, 1);
+    WRITE_YDC_DDR_BIST_CONFIGURATIONSr(0, YDC_DDR_BIST_REG_BASE, data);
+    
+    if(!((*bist_info).prbs_mode))
+    {
+        if((*bist_info).mpr_mode)
+        {
+            if(YDC_DDR_BIST_PHY_BITWITDH_IS_32)
+            {
+                WRITE_YDC_DDR_BIST_PATTERN_WORD_0r(0, YDC_DDR_BIST_REG_BASE, 0xFFFFFFFF);
+                WRITE_YDC_DDR_BIST_PATTERN_WORD_1r(0, YDC_DDR_BIST_REG_BASE, 0x00000000);
+                WRITE_YDC_DDR_BIST_PATTERN_WORD_2r(0, YDC_DDR_BIST_REG_BASE, 0xFFFFFFFF);
+                WRITE_YDC_DDR_BIST_PATTERN_WORD_3r(0, YDC_DDR_BIST_REG_BASE, 0x00000000);
+                WRITE_YDC_DDR_BIST_PATTERN_WORD_4r(0, YDC_DDR_BIST_REG_BASE, 0xFFFFFFFF);
+                WRITE_YDC_DDR_BIST_PATTERN_WORD_5r(0, YDC_DDR_BIST_REG_BASE, 0x00000000);
+                WRITE_YDC_DDR_BIST_PATTERN_WORD_6r(0, YDC_DDR_BIST_REG_BASE, 0xFFFFFFFF);
+                WRITE_YDC_DDR_BIST_PATTERN_WORD_7r(0, YDC_DDR_BIST_REG_BASE, 0x00000000);
+            }
+            else
+            {
+                WRITE_YDC_DDR_BIST_PATTERN_WORD_0r(0, YDC_DDR_BIST_REG_BASE, 0xFFFF0000);
+                WRITE_YDC_DDR_BIST_PATTERN_WORD_1r(0, YDC_DDR_BIST_REG_BASE, 0xFFFF0000);
+                WRITE_YDC_DDR_BIST_PATTERN_WORD_2r(0, YDC_DDR_BIST_REG_BASE, 0xFFFF0000);
+                WRITE_YDC_DDR_BIST_PATTERN_WORD_3r(0, YDC_DDR_BIST_REG_BASE, 0xFFFF0000);
+                WRITE_YDC_DDR_BIST_PATTERN_WORD_4r(0, YDC_DDR_BIST_REG_BASE, 0xFFFF0000);
+                WRITE_YDC_DDR_BIST_PATTERN_WORD_5r(0, YDC_DDR_BIST_REG_BASE, 0xFFFF0000);
+                WRITE_YDC_DDR_BIST_PATTERN_WORD_6r(0, YDC_DDR_BIST_REG_BASE, 0xFFFF0000);
+                WRITE_YDC_DDR_BIST_PATTERN_WORD_7r(0, YDC_DDR_BIST_REG_BASE, 0xFFFF0000);
+            }
+        }
+        else
+        {
+            WRITE_YDC_DDR_BIST_PATTERN_WORD_0r(0, YDC_DDR_BIST_REG_BASE, _get_random28());
+            WRITE_YDC_DDR_BIST_PATTERN_WORD_1r(0, YDC_DDR_BIST_REG_BASE, _get_random28());
+            WRITE_YDC_DDR_BIST_PATTERN_WORD_2r(0, YDC_DDR_BIST_REG_BASE, _get_random28());
+            WRITE_YDC_DDR_BIST_PATTERN_WORD_3r(0, YDC_DDR_BIST_REG_BASE, _get_random28());
+            WRITE_YDC_DDR_BIST_PATTERN_WORD_4r(0, YDC_DDR_BIST_REG_BASE, _get_random28());
+            WRITE_YDC_DDR_BIST_PATTERN_WORD_5r(0, YDC_DDR_BIST_REG_BASE, _get_random28());
+            WRITE_YDC_DDR_BIST_PATTERN_WORD_6r(0, YDC_DDR_BIST_REG_BASE, _get_random28());
+            WRITE_YDC_DDR_BIST_PATTERN_WORD_7r(0, YDC_DDR_BIST_REG_BASE, _get_random28());
+        }
+    }
+    
+    READ_YDC_DDR_BIST_NUMBER_OF_ACTIONSr(0, YDC_DDR_BIST_REG_BASE, &data);
+    YDC_DDR_BIST_SET_FIELD(data, YDC_DDR_BIST, NUMBER_OF_ACTIONS, BIST_NUM_ACTIONS, (*bist_info).bist_num_actions);
+    WRITE_YDC_DDR_BIST_NUMBER_OF_ACTIONSr(0, YDC_DDR_BIST_REG_BASE, data);
+    
+    READ_YDC_DDR_BIST_START_ADDRESSr(0, YDC_DDR_BIST_REG_BASE, &data);
+    YDC_DDR_BIST_SET_FIELD(data, YDC_DDR_BIST, START_ADDRESS, BIST_START_ADDRESS, (*bist_info).bist_start_address);
+    WRITE_YDC_DDR_BIST_START_ADDRESSr(0, YDC_DDR_BIST_REG_BASE, data);
+
+    READ_YDC_DDR_BIST_END_ADDRESSr(0, YDC_DDR_BIST_REG_BASE, &data);
+    YDC_DDR_BIST_SET_FIELD(data, YDC_DDR_BIST, END_ADDRESS, BIST_END_ADDRESS, (*bist_info).bist_end_address);
+    WRITE_YDC_DDR_BIST_END_ADDRESSr(0, YDC_DDR_BIST_REG_BASE, data);
+    
+    return SOC_E_NONE;
+}
+
+int
+soc_ydc_ddr_bist_run(int unit, int phy_ndx, ydc_ddr_bist_err_cnt_t *error_count)
+{
+    uint32 data;
+    uint32 poll_count;
+    
+    READ_YDC_DDR_BIST_CONFIGURATIONSr(0, YDC_DDR_BIST_REG_BASE, &data);
+    YDC_DDR_BIST_SET_FIELD(data, YDC_DDR_BIST, CONFIGURATIONS, BIST_EN, 1);
+    WRITE_YDC_DDR_BIST_CONFIGURATIONSr(0, YDC_DDR_BIST_REG_BASE, data);
+    
+    poll_count = 0;
+
+    while(TRUE) 
+    {
+        READ_YDC_DDR_BIST_STATUSESr(0, YDC_DDR_BIST_REG_BASE, &data);
+
+        if(YDC_DDR_BIST_GET_FIELD(data, YDC_DDR_BIST, STATUSES, BIST_FINISHED))
+        {
+            READ_YDC_DDR_BIST_CONFIGURATIONSr(0, YDC_DDR_BIST_REG_BASE, &data);
+            YDC_DDR_BIST_SET_FIELD(data, YDC_DDR_BIST, CONFIGURATIONS, BIST_EN, 0);
+            WRITE_YDC_DDR_BIST_CONFIGURATIONSr(0, YDC_DDR_BIST_REG_BASE, data);
+            break;
+        }
+
+        if(poll_count > YDC_DDR_BIST_POLL_COUNT_LIMIT)
+        {
+            READ_YDC_DDR_BIST_CONFIGURATIONSr(0, YDC_DDR_BIST_REG_BASE, &data);
+            YDC_DDR_BIST_SET_FIELD(data, YDC_DDR_BIST, CONFIGURATIONS, BIST_EN, 0);
+            WRITE_YDC_DDR_BIST_CONFIGURATIONSr(0, YDC_DDR_BIST_REG_BASE, data);
+            
+            printf("ERROR: YDC DDR BIST timeout!!!\n");
+            return SOC_E_TIMEOUT;
+        }
+        
+        poll_count++;
+        sal_usleep(YDC_DDR_BIST_POLL_INTERVAL_US);
+    }
+    
+    READ_YDC_DDR_BIST_ERROR_OCCURREDr(0, YDC_DDR_BIST_REG_BASE, &data);
+    (*error_count).bist_err_occur = YDC_DDR_BIST_GET_FIELD(data, YDC_DDR_BIST, ERROR_OCCURRED, ERR_OCCURRED);
+    
+    READ_YDC_DDR_BIST_FULL_MASK_ERROR_COUNTERr(0, YDC_DDR_BIST_REG_BASE, &data);
+    (*error_count).bist_full_err_cnt = YDC_DDR_BIST_GET_FIELD(data, YDC_DDR_BIST, FULL_MASK_ERROR_COUNTER, FULL_ERR_CNT);
+    
+    READ_YDC_DDR_BIST_SINGLE_BIT_MASK_ERROR_COUNTERr(0, YDC_DDR_BIST_REG_BASE, &data);
+    (*error_count).bist_single_err_cnt = YDC_DDR_BIST_GET_FIELD(data, YDC_DDR_BIST, SINGLE_BIT_MASK_ERROR_COUNTER, SINGLE_ERR_CNT);
+    
+    READ_YDC_DDR_BIST_GLOBAL_ERROR_COUNTERr(0, YDC_DDR_BIST_REG_BASE, &data);
+    (*error_count).bist_global_err_cnt = YDC_DDR_BIST_GET_FIELD(data, YDC_DDR_BIST, GLOBAL_ERROR_COUNTER, GLOBAL_ERR_CNT);
+    
+    return SOC_E_NONE;
+}
diff --git a/arch/arm/cpu/armv7/iproc/shmoo_and28/ydc_ddr_bist.h b/arch/arm/cpu/armv7/iproc/shmoo_and28/ydc_ddr_bist.h
new file mode 100755
index 0000000..2d4cbac
--- /dev/null
+++ b/arch/arm/cpu/armv7/iproc/shmoo_and28/ydc_ddr_bist.h
@@ -0,0 +1,1181 @@
+/***************************************************************************
+ *     Copyright (c) 1999-2014, Broadcom Corporation
+ *     All Rights Reserved
+ *     Confidential Property of Broadcom Corporation
+ *
+ *
+ * THIS SOFTWARE MAY ONLY BE USED SUBJECT TO AN EXECUTED SOFTWARE LICENSE
+ * AGREEMENT  BETWEEN THE USER AND BROADCOM.  YOU HAVE NO RIGHT TO USE OR
+ * EXPLOIT THIS MATERIAL EXCEPT SUBJECT TO THE TERMS OF SUCH AN AGREEMENT.
+ *
+ * $brcm_Workfile: $
+ * $brcm_Revision: $
+ * $brcm_Date: $
+ *
+ * Module Description:
+ *            THIS FILE WAS HAND-EDITED AFTER AUTO-GENERATION
+ *
+ * This module was generated magically with RDB from a source description
+ * file. You must edit the source file for changes to be made to this file.
+ *
+ *
+ * Date:           Generated on         Mon Feb 24 14:10:51 2014
+ *                 MD5 Checksum         f6fe7235fb0e1db2f39097636c29212b
+ *
+ * Compiled with:  RDB Utility          5.0
+ *                 RDB Parser           3.0
+ *                 rdb2macro.pm         4.0
+ *                 Perl Interpreter     5.008008
+ *                 Operating System     linux
+ *
+ * Spec Versions:  YDC_DDR_BIST_CTL     3
+ *
+ * RDB Files:  /projects/ntsw_ddr/users/mbasoglu/sw/SDK_TOT/src/soc/phy/regs/ddr40/ydc_ddr_bist_top_blockdef.rdb
+ *             /projects/ntsw_ddr/users/mbasoglu/sw/SDK_TOT/src/soc/phy/regs/ddr40/ydc_ddr_bist_ctl.rdb
+ *
+ * Revision History:
+ *
+ * $brcm_Log: $
+ *
+ ***************************************************************************/
+
+#ifndef YDC_DDR_BIST_H__
+#define YDC_DDR_BIST_H__
+
+#ifndef YDC_DDR_BIST_REG_BASE
+#define YDC_DDR_BIST_REG_BASE                       0x18010C00
+#endif
+
+#ifndef YDC_DDR_BIST_PHY_BITWITDH_IS_32
+#define YDC_DDR_BIST_PHY_BITWITDH_IS_32             1
+#endif
+
+#define YDC_DDR_BIST_POLL_INTERVAL_US               10
+#define YDC_DDR_BIST_POLL_COUNT_LIMIT               100000
+
+#define uint32                                      unsigned long
+#define int32                                       long
+#define SOC_E_NONE                                  0x0
+#define SOC_E_FAIL                                  0x1
+#define SOC_E_TIMEOUT                               0x2
+#define SOC_E_MEMORY                                0x4
+
+typedef struct ydc_ddr_bist_info_s
+{ 
+    uint32 write_weight;
+    uint32 read_weight;
+    uint32 bist_timer_us;        /* if bist_timer_us != 0, ignore bist_num_actions and wait bist_timer_us before stoping bist */
+    uint32 bist_num_actions;
+    uint32 bist_start_address;
+    uint32 bist_end_address;
+    uint32 prbs_mode;
+    uint32 mpr_mode;
+} ydc_ddr_bist_info_t;
+
+typedef struct ydc_ddr_bist_err_cnt_s
+{ 
+    uint32 bist_err_occur;
+    uint32 bist_full_err_cnt;
+    uint32 bist_single_err_cnt;
+    uint32 bist_global_err_cnt;
+} ydc_ddr_bist_err_cnt_t;
+
+extern int soc_ydc_ddr_bist_config_set(int unit, int phy_ndx, ydc_ddr_bist_info_t *bist_info);
+extern int soc_ydc_ddr_bist_run(int unit, int phy_ndx, ydc_ddr_bist_err_cnt_t *error_count);
+
+/**
+ * m = memory, c = core, r = register, f = field, d = data.
+ */
+#if !defined(GET_FIELD) && !defined(SET_FIELD)
+#define BRCM_ALIGN(c,r,f)   c##_##r##_##f##_ALIGN
+#define BRCM_BITS(c,r,f)    c##_##r##_##f##_BITS
+#define BRCM_MASK(c,r,f)    c##_##r##_##f##_MASK
+#define BRCM_SHIFT(c,r,f)   c##_##r##_##f##_SHIFT
+
+#define GET_FIELD(m,c,r,f) \
+	((((m) & BRCM_MASK(c,r,f)) >> BRCM_SHIFT(c,r,f)) << BRCM_ALIGN(c,r,f))
+
+#define SET_FIELD(m,c,r,f,d) \
+	((m) = (((m) & ~BRCM_MASK(c,r,f)) | ((((d) >> BRCM_ALIGN(c,r,f)) << \
+	 BRCM_SHIFT(c,r,f)) & BRCM_MASK(c,r,f))) \
+	)
+
+#define SET_TYPE_FIELD(m,c,r,f,d) SET_FIELD(m,c,r,f,c##_##d)
+#define SET_NAME_FIELD(m,c,r,f,d) SET_FIELD(m,c,r,f,c##_##r##_##f##_##d)
+#define SET_VALUE_FIELD(m,c,r,f,d) SET_FIELD(m,c,r,f,d)
+
+#endif /* GET & SET */
+
+#define YDC_DDR_BIST_REG_READ(_unit, _pc, flags, _reg_addr, _val) \
+            *(uint32 *)_val = REGRD((_pc) + (_reg_addr))
+/*            soc_ddr40_phy_reg_ci_read((_unit), (_pc), (_reg_addr), (_val)) */
+#define YDC_DDR_BIST_REG_WRITE(_unit, _pc, _flags, _reg_addr, _val) \
+            REGWR((_pc) + (_reg_addr), (_val))
+/*            soc_ddr40_phy_reg_ci_write((_unit), (_pc), (_reg_addr), (_val)) */
+#define YDC_DDR_BIST_REG_MODIFY(_unit, _pc, _flags, _reg_addr, _val, _mask) \
+            REGWR((_pc) + (_reg_addr), (REGRD((_pc) + (_reg_addr)) & ~(_mask)) | ((_val) & (_mask)))
+/*            soc_ddr40_phy_reg_ci_modify((_unit), (_pc), (_reg_addr), (_val), (_mask)) */
+#define YDC_DDR_BIST_GET_FIELD(m,c,r,f) \
+            GET_FIELD(m,c,r,f)
+#define YDC_DDR_BIST_SET_FIELD(m,c,r,f,d) \
+            SET_FIELD(m,c,r,f,d)
+
+/****************************************************************************
+ * Core Enums.
+ ***************************************************************************/
+#define YDC_DDR_BIST_CONFIG                                         0x00000000
+#define YDC_DDR_BIST_CONFIG_2                                       0x00000004
+#define YDC_DDR_BIST_GENERAL_CONFIGURATIONS                         0x00000008
+#define YDC_DDR_BIST_CONFIGURATIONS                                 0x0000000C
+#define YDC_DDR_BIST_NUMBER_OF_ACTIONS                              0x00000010
+#define YDC_DDR_BIST_START_ADDRESS                                  0x00000014
+#define YDC_DDR_BIST_END_ADDRESS                                    0x00000018
+#define YDC_DDR_BIST_SINGLE_BIT_MASK                                0x0000001C
+#define YDC_DDR_BIST_PATTERN_WORD_7                                 0x00000020
+#define YDC_DDR_BIST_PATTERN_WORD_6                                 0x00000024
+#define YDC_DDR_BIST_PATTERN_WORD_5                                 0x00000028
+#define YDC_DDR_BIST_PATTERN_WORD_4                                 0x0000002C
+#define YDC_DDR_BIST_PATTERN_WORD_3                                 0x00000030
+#define YDC_DDR_BIST_PATTERN_WORD_2                                 0x00000034
+#define YDC_DDR_BIST_PATTERN_WORD_1                                 0x00000038
+#define YDC_DDR_BIST_PATTERN_WORD_0                                 0x0000003C
+#define YDC_DDR_BIST_FULL_MASK_WORD_7                               0x00000040
+#define YDC_DDR_BIST_FULL_MASK_WORD_6                               0x00000044
+#define YDC_DDR_BIST_FULL_MASK_WORD_5                               0x00000048
+#define YDC_DDR_BIST_FULL_MASK_WORD_4                               0x0000004C
+#define YDC_DDR_BIST_FULL_MASK_WORD_3                               0x00000050
+#define YDC_DDR_BIST_FULL_MASK_WORD_2                               0x00000054
+#define YDC_DDR_BIST_FULL_MASK_WORD_1                               0x00000058
+#define YDC_DDR_BIST_FULL_MASK_WORD_0                               0x0000005C
+#define YDC_DDR_BIST_STATUSES                                       0x00000060
+#define YDC_DDR_BIST_FULL_MASK_ERROR_COUNTER                        0x00000064
+#define YDC_DDR_BIST_SINGLE_BIT_MASK_ERROR_COUNTER                  0x00000068
+#define YDC_DDR_BIST_ERROR_OCCURRED                                 0x0000006C
+#define YDC_DDR_BIST_GLOBAL_ERROR_COUNTER                           0x00000070
+#define YDC_DDR_BIST_LAST_ADDR_ERR                                  0x00000074
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_7                           0x00000078
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_6                           0x0000007C
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_5                           0x00000080
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_4                           0x00000084
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_3                           0x00000088
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_2                           0x0000008C
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_1                           0x00000090
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_0                           0x00000094
+
+/****************************************************************************
+ * YDC_DDR_BIST_YDC_DDR_BIST
+ ***************************************************************************/
+
+/* BIST Configuration Register */
+#define READ_YDC_DDR_BIST_CONFIGr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000000, (_val))
+#define WRITE_YDC_DDR_BIST_CONFIGr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000000, (_val))
+#define MODIFY_YDC_DDR_BIST_CONFIGr(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000000, (_val), (_mask))
+
+/* BIST Configuration Register 2 */
+#define READ_YDC_DDR_BIST_CONFIG_2r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000004, (_val))
+#define WRITE_YDC_DDR_BIST_CONFIG_2r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000004, (_val))
+#define MODIFY_YDC_DDR_BIST_CONFIG_2r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000004, (_val), (_mask))
+
+/* BIST General Configurations Register */
+#define READ_YDC_DDR_BIST_GENERAL_CONFIGURATIONSr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000008, (_val))
+#define WRITE_YDC_DDR_BIST_GENERAL_CONFIGURATIONSr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000008, (_val))
+#define MODIFY_YDC_DDR_BIST_GENERAL_CONFIGURATIONSr(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000008, (_val), (_mask))
+
+/* BIST Configurations Register */
+#define READ_YDC_DDR_BIST_CONFIGURATIONSr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x0000000c, (_val))
+#define WRITE_YDC_DDR_BIST_CONFIGURATIONSr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x0000000c, (_val))
+#define MODIFY_YDC_DDR_BIST_CONFIGURATIONSr(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x0000000c, (_val), (_mask))
+
+/* BIST Number of Actions Register */
+#define READ_YDC_DDR_BIST_NUMBER_OF_ACTIONSr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000010, (_val))
+#define WRITE_YDC_DDR_BIST_NUMBER_OF_ACTIONSr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000010, (_val))
+#define MODIFY_YDC_DDR_BIST_NUMBER_OF_ACTIONSr(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000010, (_val), (_mask))
+
+/* BIST Start Address Register */
+#define READ_YDC_DDR_BIST_START_ADDRESSr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000014, (_val))
+#define WRITE_YDC_DDR_BIST_START_ADDRESSr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000014, (_val))
+#define MODIFY_YDC_DDR_BIST_START_ADDRESSr(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000014, (_val), (_mask))
+
+/* BIST End Address Register */
+#define READ_YDC_DDR_BIST_END_ADDRESSr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000018, (_val))
+#define WRITE_YDC_DDR_BIST_END_ADDRESSr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000018, (_val))
+#define MODIFY_YDC_DDR_BIST_END_ADDRESSr(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000018, (_val), (_mask))
+
+/* BIST Single Bit Mask Register */
+#define READ_YDC_DDR_BIST_SINGLE_BIT_MASKr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x0000001c, (_val))
+#define WRITE_YDC_DDR_BIST_SINGLE_BIT_MASKr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x0000001c, (_val))
+#define MODIFY_YDC_DDR_BIST_SINGLE_BIT_MASKr(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x0000001c, (_val), (_mask))
+
+/* BIST Pattern Word 7 Register */
+#define READ_YDC_DDR_BIST_PATTERN_WORD_7r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000020, (_val))
+#define WRITE_YDC_DDR_BIST_PATTERN_WORD_7r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000020, (_val))
+#define MODIFY_YDC_DDR_BIST_PATTERN_WORD_7r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000020, (_val), (_mask))
+
+/* BIST Pattern Word 6 Register */
+#define READ_YDC_DDR_BIST_PATTERN_WORD_6r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000024, (_val))
+#define WRITE_YDC_DDR_BIST_PATTERN_WORD_6r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000024, (_val))
+#define MODIFY_YDC_DDR_BIST_PATTERN_WORD_6r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000024, (_val), (_mask))
+
+/* BIST Pattern Word 5 Register */
+#define READ_YDC_DDR_BIST_PATTERN_WORD_5r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000028, (_val))
+#define WRITE_YDC_DDR_BIST_PATTERN_WORD_5r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000028, (_val))
+#define MODIFY_YDC_DDR_BIST_PATTERN_WORD_5r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000028, (_val), (_mask))
+
+/* BIST Pattern Word 4 Register */
+#define READ_YDC_DDR_BIST_PATTERN_WORD_4r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x0000002c, (_val))
+#define WRITE_YDC_DDR_BIST_PATTERN_WORD_4r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x0000002c, (_val))
+#define MODIFY_YDC_DDR_BIST_PATTERN_WORD_4r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x0000002c, (_val), (_mask))
+
+/* BIST Pattern Word 3 Register */
+#define READ_YDC_DDR_BIST_PATTERN_WORD_3r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000030, (_val))
+#define WRITE_YDC_DDR_BIST_PATTERN_WORD_3r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000030, (_val))
+#define MODIFY_YDC_DDR_BIST_PATTERN_WORD_3r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000030, (_val), (_mask))
+
+/* BIST Pattern Word 2 Register */
+#define READ_YDC_DDR_BIST_PATTERN_WORD_2r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000034, (_val))
+#define WRITE_YDC_DDR_BIST_PATTERN_WORD_2r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000034, (_val))
+#define MODIFY_YDC_DDR_BIST_PATTERN_WORD_2r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000034, (_val), (_mask))
+
+/* BIST Pattern Word 1 Register */
+#define READ_YDC_DDR_BIST_PATTERN_WORD_1r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000038, (_val))
+#define WRITE_YDC_DDR_BIST_PATTERN_WORD_1r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000038, (_val))
+#define MODIFY_YDC_DDR_BIST_PATTERN_WORD_1r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000038, (_val), (_mask))
+
+/* BIST Pattern Word 0 Register */
+#define READ_YDC_DDR_BIST_PATTERN_WORD_0r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x0000003c, (_val))
+#define WRITE_YDC_DDR_BIST_PATTERN_WORD_0r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x0000003c, (_val))
+#define MODIFY_YDC_DDR_BIST_PATTERN_WORD_0r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x0000003c, (_val), (_mask))
+
+/* BIST Full Mask Word 7 Register */
+#define READ_YDC_DDR_BIST_FULL_MASK_WORD_7r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000040, (_val))
+#define WRITE_YDC_DDR_BIST_FULL_MASK_WORD_7r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000040, (_val))
+#define MODIFY_YDC_DDR_BIST_FULL_MASK_WORD_7r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000040, (_val), (_mask))
+
+/* BIST Full Mask Word 6 Register */
+#define READ_YDC_DDR_BIST_FULL_MASK_WORD_6r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000044, (_val))
+#define WRITE_YDC_DDR_BIST_FULL_MASK_WORD_6r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000044, (_val))
+#define MODIFY_YDC_DDR_BIST_FULL_MASK_WORD_6r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000044, (_val), (_mask))
+
+/* BIST Full Mask Word 5 Register */
+#define READ_YDC_DDR_BIST_FULL_MASK_WORD_5r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000048, (_val))
+#define WRITE_YDC_DDR_BIST_FULL_MASK_WORD_5r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000048, (_val))
+#define MODIFY_YDC_DDR_BIST_FULL_MASK_WORD_5r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000048, (_val), (_mask))
+
+/* BIST Full Mask Word 4 Register */
+#define READ_YDC_DDR_BIST_FULL_MASK_WORD_4r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x0000004c, (_val))
+#define WRITE_YDC_DDR_BIST_FULL_MASK_WORD_4r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x0000004c, (_val))
+#define MODIFY_YDC_DDR_BIST_FULL_MASK_WORD_4r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x0000004c, (_val), (_mask))
+
+/* BIST Full Mask Word 3 Register */
+#define READ_YDC_DDR_BIST_FULL_MASK_WORD_3r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000050, (_val))
+#define WRITE_YDC_DDR_BIST_FULL_MASK_WORD_3r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000050, (_val))
+#define MODIFY_YDC_DDR_BIST_FULL_MASK_WORD_3r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000050, (_val), (_mask))
+
+/* BIST Full Mask Word 2 Register */
+#define READ_YDC_DDR_BIST_FULL_MASK_WORD_2r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000054, (_val))
+#define WRITE_YDC_DDR_BIST_FULL_MASK_WORD_2r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000054, (_val))
+#define MODIFY_YDC_DDR_BIST_FULL_MASK_WORD_2r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000054, (_val), (_mask))
+
+/* BIST Full Mask Word 1 Register */
+#define READ_YDC_DDR_BIST_FULL_MASK_WORD_1r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000058, (_val))
+#define WRITE_YDC_DDR_BIST_FULL_MASK_WORD_1r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000058, (_val))
+#define MODIFY_YDC_DDR_BIST_FULL_MASK_WORD_1r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000058, (_val), (_mask))
+
+/* BIST Full Mask Word 0 Register */
+#define READ_YDC_DDR_BIST_FULL_MASK_WORD_0r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x0000005c, (_val))
+#define WRITE_YDC_DDR_BIST_FULL_MASK_WORD_0r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x0000005c, (_val))
+#define MODIFY_YDC_DDR_BIST_FULL_MASK_WORD_0r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x0000005c, (_val), (_mask))
+
+/* BIST Status Register */
+#define READ_YDC_DDR_BIST_STATUSESr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000060, (_val))
+#define WRITE_YDC_DDR_BIST_STATUSESr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000060, (_val))
+#define MODIFY_YDC_DDR_BIST_STATUSESr(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000060, (_val), (_mask))
+
+/* BIST Full Mask Error Counter Register */
+#define READ_YDC_DDR_BIST_FULL_MASK_ERROR_COUNTERr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000064, (_val))
+#define WRITE_YDC_DDR_BIST_FULL_MASK_ERROR_COUNTERr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000064, (_val))
+#define MODIFY_YDC_DDR_BIST_FULL_MASK_ERROR_COUNTERr(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000064, (_val), (_mask))
+
+/* BIST Single Bit Mask Error Counter Register */
+#define READ_YDC_DDR_BIST_SINGLE_BIT_MASK_ERROR_COUNTERr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000068, (_val))
+#define WRITE_YDC_DDR_BIST_SINGLE_BIT_MASK_ERROR_COUNTERr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000068, (_val))
+#define MODIFY_YDC_DDR_BIST_SINGLE_BIT_MASK_ERROR_COUNTERr(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000068, (_val), (_mask))
+
+/* BIST Error Occurred Register */
+#define READ_YDC_DDR_BIST_ERROR_OCCURREDr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x0000006c, (_val))
+#define WRITE_YDC_DDR_BIST_ERROR_OCCURREDr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x0000006c, (_val))
+#define MODIFY_YDC_DDR_BIST_ERROR_OCCURREDr(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x0000006c, (_val), (_mask))
+
+/* BIST Global Error Counter Register */
+#define READ_YDC_DDR_BIST_GLOBAL_ERROR_COUNTERr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000070, (_val))
+#define WRITE_YDC_DDR_BIST_GLOBAL_ERROR_COUNTERr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000070, (_val))
+#define MODIFY_YDC_DDR_BIST_GLOBAL_ERROR_COUNTERr(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000070, (_val), (_mask))
+
+/* BIST Last Error Address Register */
+#define READ_YDC_DDR_BIST_LAST_ADDR_ERRr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000074, (_val))
+#define WRITE_YDC_DDR_BIST_LAST_ADDR_ERRr(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000074, (_val))
+#define MODIFY_YDC_DDR_BIST_LAST_ADDR_ERRr(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000074, (_val), (_mask))
+
+/* BIST Last Data Error Word 7 Register */
+#define READ_YDC_DDR_BIST_LAST_DATA_ERR_WORD_7r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000078, (_val))
+#define WRITE_YDC_DDR_BIST_LAST_DATA_ERR_WORD_7r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000078, (_val))
+#define MODIFY_YDC_DDR_BIST_LAST_DATA_ERR_WORD_7r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000078, (_val), (_mask))
+
+/* BIST Last Data Error Word 6 Register */
+#define READ_YDC_DDR_BIST_LAST_DATA_ERR_WORD_6r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x0000007c, (_val))
+#define WRITE_YDC_DDR_BIST_LAST_DATA_ERR_WORD_6r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x0000007c, (_val))
+#define MODIFY_YDC_DDR_BIST_LAST_DATA_ERR_WORD_6r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x0000007c, (_val), (_mask))
+
+/* BIST Last Data Error Word 5 Register */
+#define READ_YDC_DDR_BIST_LAST_DATA_ERR_WORD_5r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000080, (_val))
+#define WRITE_YDC_DDR_BIST_LAST_DATA_ERR_WORD_5r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000080, (_val))
+#define MODIFY_YDC_DDR_BIST_LAST_DATA_ERR_WORD_5r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000080, (_val), (_mask))
+
+/* BIST Last Data Error Word 4 Register */
+#define READ_YDC_DDR_BIST_LAST_DATA_ERR_WORD_4r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000084, (_val))
+#define WRITE_YDC_DDR_BIST_LAST_DATA_ERR_WORD_4r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000084, (_val))
+#define MODIFY_YDC_DDR_BIST_LAST_DATA_ERR_WORD_4r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000084, (_val), (_mask))
+
+/* BIST Last Data Error Word 3 Register */
+#define READ_YDC_DDR_BIST_LAST_DATA_ERR_WORD_3r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000088, (_val))
+#define WRITE_YDC_DDR_BIST_LAST_DATA_ERR_WORD_3r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000088, (_val))
+#define MODIFY_YDC_DDR_BIST_LAST_DATA_ERR_WORD_3r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000088, (_val), (_mask))
+
+/* BIST Last Data Error Word 2 Register */
+#define READ_YDC_DDR_BIST_LAST_DATA_ERR_WORD_2r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x0000008c, (_val))
+#define WRITE_YDC_DDR_BIST_LAST_DATA_ERR_WORD_2r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x0000008c, (_val))
+#define MODIFY_YDC_DDR_BIST_LAST_DATA_ERR_WORD_2r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x0000008c, (_val), (_mask))
+
+/* BIST Last Data Error Word 1 Register */
+#define READ_YDC_DDR_BIST_LAST_DATA_ERR_WORD_1r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000090, (_val))
+#define WRITE_YDC_DDR_BIST_LAST_DATA_ERR_WORD_1r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000090, (_val))
+#define MODIFY_YDC_DDR_BIST_LAST_DATA_ERR_WORD_1r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000090, (_val), (_mask))
+
+/* BIST Last Data Error Word 0 Register */
+#define READ_YDC_DDR_BIST_LAST_DATA_ERR_WORD_0r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_READ((_unit), (_pc), 0x00, 0x00000094, (_val))
+#define WRITE_YDC_DDR_BIST_LAST_DATA_ERR_WORD_0r(_unit, _pc, _val) \
+             YDC_DDR_BIST_REG_WRITE((_unit), (_pc), 0x00, 0x00000094, (_val))
+#define MODIFY_YDC_DDR_BIST_LAST_DATA_ERR_WORD_0r(_unit, _pc, _val, _mask) \
+             YDC_DDR_BIST_REG_MODIFY((_unit), (_pc), 0x00, 0x00000094, (_val), (_mask))
+
+
+/****************************************************************************
+ * YDC_DDR_BIST_YDC_DDR_BIST
+ ***************************************************************************/
+/****************************************************************************
+ * YDC_DDR_BIST :: CONFIG
+ ***************************************************************************/
+/* YDC_DDR_BIST :: CONFIG :: reserved0 [31:25] */
+#define YDC_DDR_BIST_CONFIG_RESERVED0_MASK                         0xfe000000
+#define YDC_DDR_BIST_CONFIG_RESERVED0_ALIGN                        0
+#define YDC_DDR_BIST_CONFIG_RESERVED0_BITS                         7
+#define YDC_DDR_BIST_CONFIG_RESERVED0_SHIFT                        25
+#define YDC_DDR_BIST_CONFIG_RESERVED0_DEFAULT                      0x00000000
+
+/* YDC_DDR_BIST :: CONFIG :: BIST_FINISHED_PERIOD [24:17] */
+#define YDC_DDR_BIST_CONFIG_BIST_FINISHED_PERIOD_MASK              0x01fe0000
+#define YDC_DDR_BIST_CONFIG_BIST_FINISHED_PERIOD_ALIGN             0
+#define YDC_DDR_BIST_CONFIG_BIST_FINISHED_PERIOD_BITS              8
+#define YDC_DDR_BIST_CONFIG_BIST_FINISHED_PERIOD_SHIFT             17
+#define YDC_DDR_BIST_CONFIG_BIST_FINISHED_PERIOD_DEFAULT           0x00000000
+
+/* YDC_DDR_BIST :: CONFIG :: CLR_BIST_LAST_DATA_ERR [16:16] */
+#define YDC_DDR_BIST_CONFIG_CLR_BIST_LAST_DATA_ERR_MASK            0x00010000
+#define YDC_DDR_BIST_CONFIG_CLR_BIST_LAST_DATA_ERR_ALIGN           0
+#define YDC_DDR_BIST_CONFIG_CLR_BIST_LAST_DATA_ERR_BITS            1
+#define YDC_DDR_BIST_CONFIG_CLR_BIST_LAST_DATA_ERR_SHIFT           16
+#define YDC_DDR_BIST_CONFIG_CLR_BIST_LAST_DATA_ERR_DEFAULT         0x00000000
+
+/* YDC_DDR_BIST :: CONFIG :: BUS16_MODE [15:15] */
+#define YDC_DDR_BIST_CONFIG_BUS16_MODE_MASK                        0x00008000
+#define YDC_DDR_BIST_CONFIG_BUS16_MODE_ALIGN                       0
+#define YDC_DDR_BIST_CONFIG_BUS16_MODE_BITS                        1
+#define YDC_DDR_BIST_CONFIG_BUS16_MODE_SHIFT                       15
+#define YDC_DDR_BIST_CONFIG_BUS16_MODE_DEFAULT                     0x00000000
+
+/* YDC_DDR_BIST :: CONFIG :: ENABLE_8_BANKS_MODE [14:14] */
+#define YDC_DDR_BIST_CONFIG_ENABLE_8_BANKS_MODE_MASK               0x00004000
+#define YDC_DDR_BIST_CONFIG_ENABLE_8_BANKS_MODE_ALIGN              0
+#define YDC_DDR_BIST_CONFIG_ENABLE_8_BANKS_MODE_BITS               1
+#define YDC_DDR_BIST_CONFIG_ENABLE_8_BANKS_MODE_SHIFT              14
+#define YDC_DDR_BIST_CONFIG_ENABLE_8_BANKS_MODE_DEFAULT            0x00000000
+
+/* YDC_DDR_BIST :: CONFIG :: DISABLE_COL_BANK_SWAPPING [13:13] */
+#define YDC_DDR_BIST_CONFIG_DISABLE_COL_BANK_SWAPPING_MASK         0x00002000
+#define YDC_DDR_BIST_CONFIG_DISABLE_COL_BANK_SWAPPING_ALIGN        0
+#define YDC_DDR_BIST_CONFIG_DISABLE_COL_BANK_SWAPPING_BITS         1
+#define YDC_DDR_BIST_CONFIG_DISABLE_COL_BANK_SWAPPING_SHIFT        13
+#define YDC_DDR_BIST_CONFIG_DISABLE_COL_BANK_SWAPPING_DEFAULT      0x00000000
+
+/* YDC_DDR_BIST :: CONFIG :: BIST_ARPRIORITY [12:10] */
+#define YDC_DDR_BIST_CONFIG_BIST_ARPRIORITY_MASK                   0x00001c00
+#define YDC_DDR_BIST_CONFIG_BIST_ARPRIORITY_ALIGN                  0
+#define YDC_DDR_BIST_CONFIG_BIST_ARPRIORITY_BITS                   3
+#define YDC_DDR_BIST_CONFIG_BIST_ARPRIORITY_SHIFT                  10
+#define YDC_DDR_BIST_CONFIG_BIST_ARPRIORITY_DEFAULT                0x00000000
+
+/* YDC_DDR_BIST :: CONFIG :: BIST_ARAPCMD [09:09] */
+#define YDC_DDR_BIST_CONFIG_BIST_ARAPCMD_MASK                      0x00000200
+#define YDC_DDR_BIST_CONFIG_BIST_ARAPCMD_ALIGN                     0
+#define YDC_DDR_BIST_CONFIG_BIST_ARAPCMD_BITS                      1
+#define YDC_DDR_BIST_CONFIG_BIST_ARAPCMD_SHIFT                     9
+#define YDC_DDR_BIST_CONFIG_BIST_ARAPCMD_DEFAULT                   0x00000000
+
+/* YDC_DDR_BIST :: CONFIG :: BIST_AWUSER [08:08] */
+#define YDC_DDR_BIST_CONFIG_BIST_AWUSER_MASK                       0x00000100
+#define YDC_DDR_BIST_CONFIG_BIST_AWUSER_ALIGN                      0
+#define YDC_DDR_BIST_CONFIG_BIST_AWUSER_BITS                       1
+#define YDC_DDR_BIST_CONFIG_BIST_AWUSER_SHIFT                      8
+#define YDC_DDR_BIST_CONFIG_BIST_AWUSER_DEFAULT                    0x00000000
+
+/* YDC_DDR_BIST :: CONFIG :: BIST_AWPRIORITY [07:05] */
+#define YDC_DDR_BIST_CONFIG_BIST_AWPRIORITY_MASK                   0x000000e0
+#define YDC_DDR_BIST_CONFIG_BIST_AWPRIORITY_ALIGN                  0
+#define YDC_DDR_BIST_CONFIG_BIST_AWPRIORITY_BITS                   3
+#define YDC_DDR_BIST_CONFIG_BIST_AWPRIORITY_SHIFT                  5
+#define YDC_DDR_BIST_CONFIG_BIST_AWPRIORITY_DEFAULT                0x00000000
+
+/* YDC_DDR_BIST :: CONFIG :: BIST_AWCOBUF [04:04] */
+#define YDC_DDR_BIST_CONFIG_BIST_AWCOBUF_MASK                      0x00000010
+#define YDC_DDR_BIST_CONFIG_BIST_AWCOBUF_ALIGN                     0
+#define YDC_DDR_BIST_CONFIG_BIST_AWCOBUF_BITS                      1
+#define YDC_DDR_BIST_CONFIG_BIST_AWCOBUF_SHIFT                     4
+#define YDC_DDR_BIST_CONFIG_BIST_AWCOBUF_DEFAULT                   0x00000000
+
+/* YDC_DDR_BIST :: CONFIG :: BIST_AWAPCMD [03:03] */
+#define YDC_DDR_BIST_CONFIG_BIST_AWAPCMD_MASK                      0x00000008
+#define YDC_DDR_BIST_CONFIG_BIST_AWAPCMD_ALIGN                     0
+#define YDC_DDR_BIST_CONFIG_BIST_AWAPCMD_BITS                      1
+#define YDC_DDR_BIST_CONFIG_BIST_AWAPCMD_SHIFT                     3
+#define YDC_DDR_BIST_CONFIG_BIST_AWAPCMD_DEFAULT                   0x00000000
+
+/* YDC_DDR_BIST :: CONFIG :: BIST_AWCACHE_0 [02:02] */
+#define YDC_DDR_BIST_CONFIG_BIST_AWCACHE_0_MASK                    0x00000004
+#define YDC_DDR_BIST_CONFIG_BIST_AWCACHE_0_ALIGN                   0
+#define YDC_DDR_BIST_CONFIG_BIST_AWCACHE_0_BITS                    1
+#define YDC_DDR_BIST_CONFIG_BIST_AWCACHE_0_SHIFT                   2
+#define YDC_DDR_BIST_CONFIG_BIST_AWCACHE_0_DEFAULT                 0x00000000
+
+/* YDC_DDR_BIST :: CONFIG :: AXI_PORT_SEL [01:01] */
+#define YDC_DDR_BIST_CONFIG_AXI_PORT_SEL_MASK                      0x00000002
+#define YDC_DDR_BIST_CONFIG_AXI_PORT_SEL_ALIGN                     0
+#define YDC_DDR_BIST_CONFIG_AXI_PORT_SEL_BITS                      1
+#define YDC_DDR_BIST_CONFIG_AXI_PORT_SEL_SHIFT                     1
+#define YDC_DDR_BIST_CONFIG_AXI_PORT_SEL_DEFAULT                   0x00000000
+
+/* YDC_DDR_BIST :: CONFIG :: BIST_RESETB [00:00] */
+#define YDC_DDR_BIST_CONFIG_BIST_RESETB_MASK                       0x00000001
+#define YDC_DDR_BIST_CONFIG_BIST_RESETB_ALIGN                      0
+#define YDC_DDR_BIST_CONFIG_BIST_RESETB_BITS                       1
+#define YDC_DDR_BIST_CONFIG_BIST_RESETB_SHIFT                      0
+#define YDC_DDR_BIST_CONFIG_BIST_RESETB_DEFAULT                    0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: CONFIG_2
+ ***************************************************************************/
+/* YDC_DDR_BIST :: CONFIG_2 :: reserved0 [31:19] */
+#define YDC_DDR_BIST_CONFIG_2_RESERVED0_MASK                       0xfff80000
+#define YDC_DDR_BIST_CONFIG_2_RESERVED0_ALIGN                      0
+#define YDC_DDR_BIST_CONFIG_2_RESERVED0_BITS                       13
+#define YDC_DDR_BIST_CONFIG_2_RESERVED0_SHIFT                      19
+#define YDC_DDR_BIST_CONFIG_2_RESERVED0_DEFAULT                    0x00000000
+
+/* YDC_DDR_BIST :: CONFIG_2 :: FIFO_RADDR_ALMOST_FULL_LEVEL [18:16] */
+#define YDC_DDR_BIST_CONFIG_2_FIFO_RADDR_ALMOST_FULL_LEVEL_MASK    0x00070000
+#define YDC_DDR_BIST_CONFIG_2_FIFO_RADDR_ALMOST_FULL_LEVEL_ALIGN   0
+#define YDC_DDR_BIST_CONFIG_2_FIFO_RADDR_ALMOST_FULL_LEVEL_BITS    3
+#define YDC_DDR_BIST_CONFIG_2_FIFO_RADDR_ALMOST_FULL_LEVEL_SHIFT   16
+#define YDC_DDR_BIST_CONFIG_2_FIFO_RADDR_ALMOST_FULL_LEVEL_DEFAULT 0x00000004
+
+/* YDC_DDR_BIST :: CONFIG_2 :: reserved1 [15:11] */
+#define YDC_DDR_BIST_CONFIG_2_RESERVED1_MASK                       0x0000f800
+#define YDC_DDR_BIST_CONFIG_2_RESERVED1_ALIGN                      0
+#define YDC_DDR_BIST_CONFIG_2_RESERVED1_BITS                       5
+#define YDC_DDR_BIST_CONFIG_2_RESERVED1_SHIFT                      11
+#define YDC_DDR_BIST_CONFIG_2_RESERVED1_DEFAULT                    0x00000000
+
+/* YDC_DDR_BIST :: CONFIG_2 :: FIFO_CMD_ALMOST_FULL_LEVEL [10:08] */
+#define YDC_DDR_BIST_CONFIG_2_FIFO_CMD_ALMOST_FULL_LEVEL_MASK      0x00000700
+#define YDC_DDR_BIST_CONFIG_2_FIFO_CMD_ALMOST_FULL_LEVEL_ALIGN     0
+#define YDC_DDR_BIST_CONFIG_2_FIFO_CMD_ALMOST_FULL_LEVEL_BITS      3
+#define YDC_DDR_BIST_CONFIG_2_FIFO_CMD_ALMOST_FULL_LEVEL_SHIFT     8
+#define YDC_DDR_BIST_CONFIG_2_FIFO_CMD_ALMOST_FULL_LEVEL_DEFAULT   0x00000002
+
+/* YDC_DDR_BIST :: CONFIG_2 :: reserved2 [07:03] */
+#define YDC_DDR_BIST_CONFIG_2_RESERVED2_MASK                       0x000000f8
+#define YDC_DDR_BIST_CONFIG_2_RESERVED2_ALIGN                      0
+#define YDC_DDR_BIST_CONFIG_2_RESERVED2_BITS                       5
+#define YDC_DDR_BIST_CONFIG_2_RESERVED2_SHIFT                      3
+#define YDC_DDR_BIST_CONFIG_2_RESERVED2_DEFAULT                    0x00000000
+
+/* YDC_DDR_BIST :: CONFIG_2 :: FIFO_WDATA_ALMOST_FULL_LEVEL [02:00] */
+#define YDC_DDR_BIST_CONFIG_2_FIFO_WDATA_ALMOST_FULL_LEVEL_MASK    0x00000007
+#define YDC_DDR_BIST_CONFIG_2_FIFO_WDATA_ALMOST_FULL_LEVEL_ALIGN   0
+#define YDC_DDR_BIST_CONFIG_2_FIFO_WDATA_ALMOST_FULL_LEVEL_BITS    3
+#define YDC_DDR_BIST_CONFIG_2_FIFO_WDATA_ALMOST_FULL_LEVEL_SHIFT   0
+#define YDC_DDR_BIST_CONFIG_2_FIFO_WDATA_ALMOST_FULL_LEVEL_DEFAULT 0x00000002
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: GENERAL_CONFIGURATIONS
+ ***************************************************************************/
+/* YDC_DDR_BIST :: GENERAL_CONFIGURATIONS :: reserved0 [31:07] */
+#define YDC_DDR_BIST_GENERAL_CONFIGURATIONS_RESERVED0_MASK         0xffffff80
+#define YDC_DDR_BIST_GENERAL_CONFIGURATIONS_RESERVED0_ALIGN        0
+#define YDC_DDR_BIST_GENERAL_CONFIGURATIONS_RESERVED0_BITS         25
+#define YDC_DDR_BIST_GENERAL_CONFIGURATIONS_RESERVED0_SHIFT        7
+#define YDC_DDR_BIST_GENERAL_CONFIGURATIONS_RESERVED0_DEFAULT      0x00000000
+
+/* YDC_DDR_BIST :: GENERAL_CONFIGURATIONS :: NUM_COLS [06:04] */
+#define YDC_DDR_BIST_GENERAL_CONFIGURATIONS_NUM_COLS_MASK          0x00000070
+#define YDC_DDR_BIST_GENERAL_CONFIGURATIONS_NUM_COLS_ALIGN         0
+#define YDC_DDR_BIST_GENERAL_CONFIGURATIONS_NUM_COLS_BITS          3
+#define YDC_DDR_BIST_GENERAL_CONFIGURATIONS_NUM_COLS_SHIFT         4
+#define YDC_DDR_BIST_GENERAL_CONFIGURATIONS_NUM_COLS_DEFAULT       0x00000002
+
+/* YDC_DDR_BIST :: GENERAL_CONFIGURATIONS :: reserved1 [03:00] */
+#define YDC_DDR_BIST_GENERAL_CONFIGURATIONS_RESERVED1_MASK         0x0000000f
+#define YDC_DDR_BIST_GENERAL_CONFIGURATIONS_RESERVED1_ALIGN        0
+#define YDC_DDR_BIST_GENERAL_CONFIGURATIONS_RESERVED1_BITS         4
+#define YDC_DDR_BIST_GENERAL_CONFIGURATIONS_RESERVED1_SHIFT        0
+#define YDC_DDR_BIST_GENERAL_CONFIGURATIONS_RESERVED1_DEFAULT      0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: CONFIGURATIONS
+ ***************************************************************************/
+/* YDC_DDR_BIST :: CONFIGURATIONS :: reserved0 [31:26] */
+#define YDC_DDR_BIST_CONFIGURATIONS_RESERVED0_MASK                 0xfc000000
+#define YDC_DDR_BIST_CONFIGURATIONS_RESERVED0_ALIGN                0
+#define YDC_DDR_BIST_CONFIGURATIONS_RESERVED0_BITS                 6
+#define YDC_DDR_BIST_CONFIGURATIONS_RESERVED0_SHIFT                26
+#define YDC_DDR_BIST_CONFIGURATIONS_RESERVED0_DEFAULT              0x00000000
+
+/* YDC_DDR_BIST :: CONFIGURATIONS :: BIST_EN [25:25] */
+#define YDC_DDR_BIST_CONFIGURATIONS_BIST_EN_MASK                   0x02000000
+#define YDC_DDR_BIST_CONFIGURATIONS_BIST_EN_ALIGN                  0
+#define YDC_DDR_BIST_CONFIGURATIONS_BIST_EN_BITS                   1
+#define YDC_DDR_BIST_CONFIGURATIONS_BIST_EN_SHIFT                  25
+#define YDC_DDR_BIST_CONFIGURATIONS_BIST_EN_DEFAULT                0x00000000
+
+/* YDC_DDR_BIST :: CONFIGURATIONS :: DATA_ADDR_MODE [24:24] */
+#define YDC_DDR_BIST_CONFIGURATIONS_DATA_ADDR_MODE_MASK            0x01000000
+#define YDC_DDR_BIST_CONFIGURATIONS_DATA_ADDR_MODE_ALIGN           0
+#define YDC_DDR_BIST_CONFIGURATIONS_DATA_ADDR_MODE_BITS            1
+#define YDC_DDR_BIST_CONFIGURATIONS_DATA_ADDR_MODE_SHIFT           24
+#define YDC_DDR_BIST_CONFIGURATIONS_DATA_ADDR_MODE_DEFAULT         0x00000000
+
+/* YDC_DDR_BIST :: CONFIGURATIONS :: DATA_SHIFT_MODE [23:23] */
+#define YDC_DDR_BIST_CONFIGURATIONS_DATA_SHIFT_MODE_MASK           0x00800000
+#define YDC_DDR_BIST_CONFIGURATIONS_DATA_SHIFT_MODE_ALIGN          0
+#define YDC_DDR_BIST_CONFIGURATIONS_DATA_SHIFT_MODE_BITS           1
+#define YDC_DDR_BIST_CONFIGURATIONS_DATA_SHIFT_MODE_SHIFT          23
+#define YDC_DDR_BIST_CONFIGURATIONS_DATA_SHIFT_MODE_DEFAULT        0x00000000
+
+/* YDC_DDR_BIST :: CONFIGURATIONS :: ADDRESS_SHIFT_MODE [22:22] */
+#define YDC_DDR_BIST_CONFIGURATIONS_ADDRESS_SHIFT_MODE_MASK        0x00400000
+#define YDC_DDR_BIST_CONFIGURATIONS_ADDRESS_SHIFT_MODE_ALIGN       0
+#define YDC_DDR_BIST_CONFIGURATIONS_ADDRESS_SHIFT_MODE_BITS        1
+#define YDC_DDR_BIST_CONFIGURATIONS_ADDRESS_SHIFT_MODE_SHIFT       22
+#define YDC_DDR_BIST_CONFIGURATIONS_ADDRESS_SHIFT_MODE_DEFAULT     0x00000000
+
+/* YDC_DDR_BIST :: CONFIGURATIONS :: CONS_ADDR_8_BANKS [21:21] */
+#define YDC_DDR_BIST_CONFIGURATIONS_CONS_ADDR_8_BANKS_MASK         0x00200000
+#define YDC_DDR_BIST_CONFIGURATIONS_CONS_ADDR_8_BANKS_ALIGN        0
+#define YDC_DDR_BIST_CONFIGURATIONS_CONS_ADDR_8_BANKS_BITS         1
+#define YDC_DDR_BIST_CONFIGURATIONS_CONS_ADDR_8_BANKS_SHIFT        21
+#define YDC_DDR_BIST_CONFIGURATIONS_CONS_ADDR_8_BANKS_DEFAULT      0x00000000
+
+/* YDC_DDR_BIST :: CONFIGURATIONS :: CONS_ADDR_4_BANKS [20:20] */
+#define YDC_DDR_BIST_CONFIGURATIONS_CONS_ADDR_4_BANKS_MASK         0x00100000
+#define YDC_DDR_BIST_CONFIGURATIONS_CONS_ADDR_4_BANKS_ALIGN        0
+#define YDC_DDR_BIST_CONFIGURATIONS_CONS_ADDR_4_BANKS_BITS         1
+#define YDC_DDR_BIST_CONFIGURATIONS_CONS_ADDR_4_BANKS_SHIFT        20
+#define YDC_DDR_BIST_CONFIGURATIONS_CONS_ADDR_4_BANKS_DEFAULT      0x00000000
+
+/* YDC_DDR_BIST :: CONFIGURATIONS :: IND_WR_RD_ADDR_MODE [19:19] */
+#define YDC_DDR_BIST_CONFIGURATIONS_IND_WR_RD_ADDR_MODE_MASK       0x00080000
+#define YDC_DDR_BIST_CONFIGURATIONS_IND_WR_RD_ADDR_MODE_ALIGN      0
+#define YDC_DDR_BIST_CONFIGURATIONS_IND_WR_RD_ADDR_MODE_BITS       1
+#define YDC_DDR_BIST_CONFIGURATIONS_IND_WR_RD_ADDR_MODE_SHIFT      19
+#define YDC_DDR_BIST_CONFIGURATIONS_IND_WR_RD_ADDR_MODE_DEFAULT    0x00000000
+
+/* YDC_DDR_BIST :: CONFIGURATIONS :: PRBS_MODE [18:18] */
+#define YDC_DDR_BIST_CONFIGURATIONS_PRBS_MODE_MASK                 0x00040000
+#define YDC_DDR_BIST_CONFIGURATIONS_PRBS_MODE_ALIGN                0
+#define YDC_DDR_BIST_CONFIGURATIONS_PRBS_MODE_BITS                 1
+#define YDC_DDR_BIST_CONFIGURATIONS_PRBS_MODE_SHIFT                18
+#define YDC_DDR_BIST_CONFIGURATIONS_PRBS_MODE_DEFAULT              0x00000000
+
+/* YDC_DDR_BIST :: CONFIGURATIONS :: TWO_ADDR_MODE [17:17] */
+#define YDC_DDR_BIST_CONFIGURATIONS_TWO_ADDR_MODE_MASK             0x00020000
+#define YDC_DDR_BIST_CONFIGURATIONS_TWO_ADDR_MODE_ALIGN            0
+#define YDC_DDR_BIST_CONFIGURATIONS_TWO_ADDR_MODE_BITS             1
+#define YDC_DDR_BIST_CONFIGURATIONS_TWO_ADDR_MODE_SHIFT            17
+#define YDC_DDR_BIST_CONFIGURATIONS_TWO_ADDR_MODE_DEFAULT          0x00000000
+
+/* YDC_DDR_BIST :: CONFIGURATIONS :: PATTERN_BIT_MODE [16:16] */
+#define YDC_DDR_BIST_CONFIGURATIONS_PATTERN_BIT_MODE_MASK          0x00010000
+#define YDC_DDR_BIST_CONFIGURATIONS_PATTERN_BIT_MODE_ALIGN         0
+#define YDC_DDR_BIST_CONFIGURATIONS_PATTERN_BIT_MODE_BITS          1
+#define YDC_DDR_BIST_CONFIGURATIONS_PATTERN_BIT_MODE_SHIFT         16
+#define YDC_DDR_BIST_CONFIGURATIONS_PATTERN_BIT_MODE_DEFAULT       0x00000000
+
+/* YDC_DDR_BIST :: CONFIGURATIONS :: READ_WEIGHT [15:08] */
+#define YDC_DDR_BIST_CONFIGURATIONS_READ_WEIGHT_MASK               0x0000ff00
+#define YDC_DDR_BIST_CONFIGURATIONS_READ_WEIGHT_ALIGN              0
+#define YDC_DDR_BIST_CONFIGURATIONS_READ_WEIGHT_BITS               8
+#define YDC_DDR_BIST_CONFIGURATIONS_READ_WEIGHT_SHIFT              8
+#define YDC_DDR_BIST_CONFIGURATIONS_READ_WEIGHT_DEFAULT            0x00000000
+
+/* YDC_DDR_BIST :: CONFIGURATIONS :: WRITE_WEIGHT [07:00] */
+#define YDC_DDR_BIST_CONFIGURATIONS_WRITE_WEIGHT_MASK              0x000000ff
+#define YDC_DDR_BIST_CONFIGURATIONS_WRITE_WEIGHT_ALIGN             0
+#define YDC_DDR_BIST_CONFIGURATIONS_WRITE_WEIGHT_BITS              8
+#define YDC_DDR_BIST_CONFIGURATIONS_WRITE_WEIGHT_SHIFT             0
+#define YDC_DDR_BIST_CONFIGURATIONS_WRITE_WEIGHT_DEFAULT           0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: NUMBER_OF_ACTIONS
+ ***************************************************************************/
+/* YDC_DDR_BIST :: NUMBER_OF_ACTIONS :: BIST_NUM_ACTIONS [31:00] */
+#define YDC_DDR_BIST_NUMBER_OF_ACTIONS_BIST_NUM_ACTIONS_MASK       0xffffffff
+#define YDC_DDR_BIST_NUMBER_OF_ACTIONS_BIST_NUM_ACTIONS_ALIGN      0
+#define YDC_DDR_BIST_NUMBER_OF_ACTIONS_BIST_NUM_ACTIONS_BITS       32
+#define YDC_DDR_BIST_NUMBER_OF_ACTIONS_BIST_NUM_ACTIONS_SHIFT      0
+#define YDC_DDR_BIST_NUMBER_OF_ACTIONS_BIST_NUM_ACTIONS_DEFAULT    0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: START_ADDRESS
+ ***************************************************************************/
+/* YDC_DDR_BIST :: START_ADDRESS :: reserved0 [31:26] */
+#define YDC_DDR_BIST_START_ADDRESS_RESERVED0_MASK                  0xfc000000
+#define YDC_DDR_BIST_START_ADDRESS_RESERVED0_ALIGN                 0
+#define YDC_DDR_BIST_START_ADDRESS_RESERVED0_BITS                  6
+#define YDC_DDR_BIST_START_ADDRESS_RESERVED0_SHIFT                 26
+#define YDC_DDR_BIST_START_ADDRESS_RESERVED0_DEFAULT               0x00000000
+
+/* YDC_DDR_BIST :: START_ADDRESS :: BIST_START_ADDRESS [25:00] */
+#define YDC_DDR_BIST_START_ADDRESS_BIST_START_ADDRESS_MASK         0x03ffffff
+#define YDC_DDR_BIST_START_ADDRESS_BIST_START_ADDRESS_ALIGN        0
+#define YDC_DDR_BIST_START_ADDRESS_BIST_START_ADDRESS_BITS         26
+#define YDC_DDR_BIST_START_ADDRESS_BIST_START_ADDRESS_SHIFT        0
+#define YDC_DDR_BIST_START_ADDRESS_BIST_START_ADDRESS_DEFAULT      0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: END_ADDRESS
+ ***************************************************************************/
+/* YDC_DDR_BIST :: END_ADDRESS :: reserved0 [31:26] */
+#define YDC_DDR_BIST_END_ADDRESS_RESERVED0_MASK                    0xfc000000
+#define YDC_DDR_BIST_END_ADDRESS_RESERVED0_ALIGN                   0
+#define YDC_DDR_BIST_END_ADDRESS_RESERVED0_BITS                    6
+#define YDC_DDR_BIST_END_ADDRESS_RESERVED0_SHIFT                   26
+#define YDC_DDR_BIST_END_ADDRESS_RESERVED0_DEFAULT                 0x00000000
+
+/* YDC_DDR_BIST :: END_ADDRESS :: BIST_END_ADDRESS [25:00] */
+#define YDC_DDR_BIST_END_ADDRESS_BIST_END_ADDRESS_MASK             0x03ffffff
+#define YDC_DDR_BIST_END_ADDRESS_BIST_END_ADDRESS_ALIGN            0
+#define YDC_DDR_BIST_END_ADDRESS_BIST_END_ADDRESS_BITS             26
+#define YDC_DDR_BIST_END_ADDRESS_BIST_END_ADDRESS_SHIFT            0
+#define YDC_DDR_BIST_END_ADDRESS_BIST_END_ADDRESS_DEFAULT          0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: SINGLE_BIT_MASK
+ ***************************************************************************/
+/* YDC_DDR_BIST :: SINGLE_BIT_MASK :: BIST_SINGLE_MASK [31:00] */
+#define YDC_DDR_BIST_SINGLE_BIT_MASK_BIST_SINGLE_MASK_MASK         0xffffffff
+#define YDC_DDR_BIST_SINGLE_BIT_MASK_BIST_SINGLE_MASK_ALIGN        0
+#define YDC_DDR_BIST_SINGLE_BIT_MASK_BIST_SINGLE_MASK_BITS         32
+#define YDC_DDR_BIST_SINGLE_BIT_MASK_BIST_SINGLE_MASK_SHIFT        0
+#define YDC_DDR_BIST_SINGLE_BIT_MASK_BIST_SINGLE_MASK_DEFAULT      0xffffffff
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: PATTERN_WORD_7
+ ***************************************************************************/
+/* YDC_DDR_BIST :: PATTERN_WORD_7 :: BIST_PATTERN_7 [31:00] */
+#define YDC_DDR_BIST_PATTERN_WORD_7_BIST_PATTERN_7_MASK            0xffffffff
+#define YDC_DDR_BIST_PATTERN_WORD_7_BIST_PATTERN_7_ALIGN           0
+#define YDC_DDR_BIST_PATTERN_WORD_7_BIST_PATTERN_7_BITS            32
+#define YDC_DDR_BIST_PATTERN_WORD_7_BIST_PATTERN_7_SHIFT           0
+#define YDC_DDR_BIST_PATTERN_WORD_7_BIST_PATTERN_7_DEFAULT         0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: PATTERN_WORD_6
+ ***************************************************************************/
+/* YDC_DDR_BIST :: PATTERN_WORD_6 :: BIST_PATTERN_6 [31:00] */
+#define YDC_DDR_BIST_PATTERN_WORD_6_BIST_PATTERN_6_MASK            0xffffffff
+#define YDC_DDR_BIST_PATTERN_WORD_6_BIST_PATTERN_6_ALIGN           0
+#define YDC_DDR_BIST_PATTERN_WORD_6_BIST_PATTERN_6_BITS            32
+#define YDC_DDR_BIST_PATTERN_WORD_6_BIST_PATTERN_6_SHIFT           0
+#define YDC_DDR_BIST_PATTERN_WORD_6_BIST_PATTERN_6_DEFAULT         0xffffffff
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: PATTERN_WORD_5
+ ***************************************************************************/
+/* YDC_DDR_BIST :: PATTERN_WORD_5 :: BIST_PATTERN_5 [31:00] */
+#define YDC_DDR_BIST_PATTERN_WORD_5_BIST_PATTERN_5_MASK            0xffffffff
+#define YDC_DDR_BIST_PATTERN_WORD_5_BIST_PATTERN_5_ALIGN           0
+#define YDC_DDR_BIST_PATTERN_WORD_5_BIST_PATTERN_5_BITS            32
+#define YDC_DDR_BIST_PATTERN_WORD_5_BIST_PATTERN_5_SHIFT           0
+#define YDC_DDR_BIST_PATTERN_WORD_5_BIST_PATTERN_5_DEFAULT         0xffffffff
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: PATTERN_WORD_4
+ ***************************************************************************/
+/* YDC_DDR_BIST :: PATTERN_WORD_4 :: BIST_PATTERN_4 [31:00] */
+#define YDC_DDR_BIST_PATTERN_WORD_4_BIST_PATTERN_4_MASK            0xffffffff
+#define YDC_DDR_BIST_PATTERN_WORD_4_BIST_PATTERN_4_ALIGN           0
+#define YDC_DDR_BIST_PATTERN_WORD_4_BIST_PATTERN_4_BITS            32
+#define YDC_DDR_BIST_PATTERN_WORD_4_BIST_PATTERN_4_SHIFT           0
+#define YDC_DDR_BIST_PATTERN_WORD_4_BIST_PATTERN_4_DEFAULT         0xffffffff
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: PATTERN_WORD_3
+ ***************************************************************************/
+/* YDC_DDR_BIST :: PATTERN_WORD_3 :: BIST_PATTERN_3 [31:00] */
+#define YDC_DDR_BIST_PATTERN_WORD_3_BIST_PATTERN_3_MASK            0xffffffff
+#define YDC_DDR_BIST_PATTERN_WORD_3_BIST_PATTERN_3_ALIGN           0
+#define YDC_DDR_BIST_PATTERN_WORD_3_BIST_PATTERN_3_BITS            32
+#define YDC_DDR_BIST_PATTERN_WORD_3_BIST_PATTERN_3_SHIFT           0
+#define YDC_DDR_BIST_PATTERN_WORD_3_BIST_PATTERN_3_DEFAULT         0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: PATTERN_WORD_2
+ ***************************************************************************/
+/* YDC_DDR_BIST :: PATTERN_WORD_2 :: BIST_PATTERN_2 [31:00] */
+#define YDC_DDR_BIST_PATTERN_WORD_2_BIST_PATTERN_2_MASK            0xffffffff
+#define YDC_DDR_BIST_PATTERN_WORD_2_BIST_PATTERN_2_ALIGN           0
+#define YDC_DDR_BIST_PATTERN_WORD_2_BIST_PATTERN_2_BITS            32
+#define YDC_DDR_BIST_PATTERN_WORD_2_BIST_PATTERN_2_SHIFT           0
+#define YDC_DDR_BIST_PATTERN_WORD_2_BIST_PATTERN_2_DEFAULT         0xffffffff
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: PATTERN_WORD_1
+ ***************************************************************************/
+/* YDC_DDR_BIST :: PATTERN_WORD_1 :: BIST_PATTERN_1 [31:00] */
+#define YDC_DDR_BIST_PATTERN_WORD_1_BIST_PATTERN_1_MASK            0xffffffff
+#define YDC_DDR_BIST_PATTERN_WORD_1_BIST_PATTERN_1_ALIGN           0
+#define YDC_DDR_BIST_PATTERN_WORD_1_BIST_PATTERN_1_BITS            32
+#define YDC_DDR_BIST_PATTERN_WORD_1_BIST_PATTERN_1_SHIFT           0
+#define YDC_DDR_BIST_PATTERN_WORD_1_BIST_PATTERN_1_DEFAULT         0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: PATTERN_WORD_0
+ ***************************************************************************/
+/* YDC_DDR_BIST :: PATTERN_WORD_0 :: BIST_PATTERN_0 [31:00] */
+#define YDC_DDR_BIST_PATTERN_WORD_0_BIST_PATTERN_0_MASK            0xffffffff
+#define YDC_DDR_BIST_PATTERN_WORD_0_BIST_PATTERN_0_ALIGN           0
+#define YDC_DDR_BIST_PATTERN_WORD_0_BIST_PATTERN_0_BITS            32
+#define YDC_DDR_BIST_PATTERN_WORD_0_BIST_PATTERN_0_SHIFT           0
+#define YDC_DDR_BIST_PATTERN_WORD_0_BIST_PATTERN_0_DEFAULT         0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: FULL_MASK_WORD_7
+ ***************************************************************************/
+/* YDC_DDR_BIST :: FULL_MASK_WORD_7 :: BIST_FULL_MASK_7 [31:00] */
+#define YDC_DDR_BIST_FULL_MASK_WORD_7_BIST_FULL_MASK_7_MASK        0xffffffff
+#define YDC_DDR_BIST_FULL_MASK_WORD_7_BIST_FULL_MASK_7_ALIGN       0
+#define YDC_DDR_BIST_FULL_MASK_WORD_7_BIST_FULL_MASK_7_BITS        32
+#define YDC_DDR_BIST_FULL_MASK_WORD_7_BIST_FULL_MASK_7_SHIFT       0
+#define YDC_DDR_BIST_FULL_MASK_WORD_7_BIST_FULL_MASK_7_DEFAULT     0xffffffff
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: FULL_MASK_WORD_6
+ ***************************************************************************/
+/* YDC_DDR_BIST :: FULL_MASK_WORD_6 :: BIST_FULL_MASK_6 [31:00] */
+#define YDC_DDR_BIST_FULL_MASK_WORD_6_BIST_FULL_MASK_6_MASK        0xffffffff
+#define YDC_DDR_BIST_FULL_MASK_WORD_6_BIST_FULL_MASK_6_ALIGN       0
+#define YDC_DDR_BIST_FULL_MASK_WORD_6_BIST_FULL_MASK_6_BITS        32
+#define YDC_DDR_BIST_FULL_MASK_WORD_6_BIST_FULL_MASK_6_SHIFT       0
+#define YDC_DDR_BIST_FULL_MASK_WORD_6_BIST_FULL_MASK_6_DEFAULT     0xffffffff
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: FULL_MASK_WORD_5
+ ***************************************************************************/
+/* YDC_DDR_BIST :: FULL_MASK_WORD_5 :: BIST_FULL_MASK_5 [31:00] */
+#define YDC_DDR_BIST_FULL_MASK_WORD_5_BIST_FULL_MASK_5_MASK        0xffffffff
+#define YDC_DDR_BIST_FULL_MASK_WORD_5_BIST_FULL_MASK_5_ALIGN       0
+#define YDC_DDR_BIST_FULL_MASK_WORD_5_BIST_FULL_MASK_5_BITS        32
+#define YDC_DDR_BIST_FULL_MASK_WORD_5_BIST_FULL_MASK_5_SHIFT       0
+#define YDC_DDR_BIST_FULL_MASK_WORD_5_BIST_FULL_MASK_5_DEFAULT     0xffffffff
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: FULL_MASK_WORD_4
+ ***************************************************************************/
+/* YDC_DDR_BIST :: FULL_MASK_WORD_4 :: BIST_FULL_MASK_4 [31:00] */
+#define YDC_DDR_BIST_FULL_MASK_WORD_4_BIST_FULL_MASK_4_MASK        0xffffffff
+#define YDC_DDR_BIST_FULL_MASK_WORD_4_BIST_FULL_MASK_4_ALIGN       0
+#define YDC_DDR_BIST_FULL_MASK_WORD_4_BIST_FULL_MASK_4_BITS        32
+#define YDC_DDR_BIST_FULL_MASK_WORD_4_BIST_FULL_MASK_4_SHIFT       0
+#define YDC_DDR_BIST_FULL_MASK_WORD_4_BIST_FULL_MASK_4_DEFAULT     0xffffffff
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: FULL_MASK_WORD_3
+ ***************************************************************************/
+/* YDC_DDR_BIST :: FULL_MASK_WORD_3 :: BIST_FULL_MASK_3 [31:00] */
+#define YDC_DDR_BIST_FULL_MASK_WORD_3_BIST_FULL_MASK_3_MASK        0xffffffff
+#define YDC_DDR_BIST_FULL_MASK_WORD_3_BIST_FULL_MASK_3_ALIGN       0
+#define YDC_DDR_BIST_FULL_MASK_WORD_3_BIST_FULL_MASK_3_BITS        32
+#define YDC_DDR_BIST_FULL_MASK_WORD_3_BIST_FULL_MASK_3_SHIFT       0
+#define YDC_DDR_BIST_FULL_MASK_WORD_3_BIST_FULL_MASK_3_DEFAULT     0xffffffff
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: FULL_MASK_WORD_2
+ ***************************************************************************/
+/* YDC_DDR_BIST :: FULL_MASK_WORD_2 :: BIST_FULL_MASK_2 [31:00] */
+#define YDC_DDR_BIST_FULL_MASK_WORD_2_BIST_FULL_MASK_2_MASK        0xffffffff
+#define YDC_DDR_BIST_FULL_MASK_WORD_2_BIST_FULL_MASK_2_ALIGN       0
+#define YDC_DDR_BIST_FULL_MASK_WORD_2_BIST_FULL_MASK_2_BITS        32
+#define YDC_DDR_BIST_FULL_MASK_WORD_2_BIST_FULL_MASK_2_SHIFT       0
+#define YDC_DDR_BIST_FULL_MASK_WORD_2_BIST_FULL_MASK_2_DEFAULT     0xffffffff
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: FULL_MASK_WORD_1
+ ***************************************************************************/
+/* YDC_DDR_BIST :: FULL_MASK_WORD_1 :: BIST_FULL_MASK_1 [31:00] */
+#define YDC_DDR_BIST_FULL_MASK_WORD_1_BIST_FULL_MASK_1_MASK        0xffffffff
+#define YDC_DDR_BIST_FULL_MASK_WORD_1_BIST_FULL_MASK_1_ALIGN       0
+#define YDC_DDR_BIST_FULL_MASK_WORD_1_BIST_FULL_MASK_1_BITS        32
+#define YDC_DDR_BIST_FULL_MASK_WORD_1_BIST_FULL_MASK_1_SHIFT       0
+#define YDC_DDR_BIST_FULL_MASK_WORD_1_BIST_FULL_MASK_1_DEFAULT     0xffffffff
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: FULL_MASK_WORD_0
+ ***************************************************************************/
+/* YDC_DDR_BIST :: FULL_MASK_WORD_0 :: BIST_FULL_MASK_0 [31:00] */
+#define YDC_DDR_BIST_FULL_MASK_WORD_0_BIST_FULL_MASK_0_MASK        0xffffffff
+#define YDC_DDR_BIST_FULL_MASK_WORD_0_BIST_FULL_MASK_0_ALIGN       0
+#define YDC_DDR_BIST_FULL_MASK_WORD_0_BIST_FULL_MASK_0_BITS        32
+#define YDC_DDR_BIST_FULL_MASK_WORD_0_BIST_FULL_MASK_0_SHIFT       0
+#define YDC_DDR_BIST_FULL_MASK_WORD_0_BIST_FULL_MASK_0_DEFAULT     0xffffffff
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: STATUSES
+ ***************************************************************************/
+/* YDC_DDR_BIST :: STATUSES :: reserved0 [31:04] */
+#define YDC_DDR_BIST_STATUSES_RESERVED0_MASK                       0xfffffff0
+#define YDC_DDR_BIST_STATUSES_RESERVED0_ALIGN                      0
+#define YDC_DDR_BIST_STATUSES_RESERVED0_BITS                       28
+#define YDC_DDR_BIST_STATUSES_RESERVED0_SHIFT                      4
+#define YDC_DDR_BIST_STATUSES_RESERVED0_DEFAULT                    0x00000000
+
+/* YDC_DDR_BIST :: STATUSES :: OVERFLOW_FIFO_RADDR [03:03] */
+#define YDC_DDR_BIST_STATUSES_OVERFLOW_FIFO_RADDR_MASK             0x00000008
+#define YDC_DDR_BIST_STATUSES_OVERFLOW_FIFO_RADDR_ALIGN            0
+#define YDC_DDR_BIST_STATUSES_OVERFLOW_FIFO_RADDR_BITS             1
+#define YDC_DDR_BIST_STATUSES_OVERFLOW_FIFO_RADDR_SHIFT            3
+#define YDC_DDR_BIST_STATUSES_OVERFLOW_FIFO_RADDR_DEFAULT          0x00000000
+
+/* YDC_DDR_BIST :: STATUSES :: OVERFLOW_FIFO_CMD [02:02] */
+#define YDC_DDR_BIST_STATUSES_OVERFLOW_FIFO_CMD_MASK               0x00000004
+#define YDC_DDR_BIST_STATUSES_OVERFLOW_FIFO_CMD_ALIGN              0
+#define YDC_DDR_BIST_STATUSES_OVERFLOW_FIFO_CMD_BITS               1
+#define YDC_DDR_BIST_STATUSES_OVERFLOW_FIFO_CMD_SHIFT              2
+#define YDC_DDR_BIST_STATUSES_OVERFLOW_FIFO_CMD_DEFAULT            0x00000000
+
+/* YDC_DDR_BIST :: STATUSES :: OVERFLOW_FIFO_WDATA [01:01] */
+#define YDC_DDR_BIST_STATUSES_OVERFLOW_FIFO_WDATA_MASK             0x00000002
+#define YDC_DDR_BIST_STATUSES_OVERFLOW_FIFO_WDATA_ALIGN            0
+#define YDC_DDR_BIST_STATUSES_OVERFLOW_FIFO_WDATA_BITS             1
+#define YDC_DDR_BIST_STATUSES_OVERFLOW_FIFO_WDATA_SHIFT            1
+#define YDC_DDR_BIST_STATUSES_OVERFLOW_FIFO_WDATA_DEFAULT          0x00000000
+
+/* YDC_DDR_BIST :: STATUSES :: BIST_FINISHED [00:00] */
+#define YDC_DDR_BIST_STATUSES_BIST_FINISHED_MASK                   0x00000001
+#define YDC_DDR_BIST_STATUSES_BIST_FINISHED_ALIGN                  0
+#define YDC_DDR_BIST_STATUSES_BIST_FINISHED_BITS                   1
+#define YDC_DDR_BIST_STATUSES_BIST_FINISHED_SHIFT                  0
+#define YDC_DDR_BIST_STATUSES_BIST_FINISHED_DEFAULT                0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: FULL_MASK_ERROR_COUNTER
+ ***************************************************************************/
+/* YDC_DDR_BIST :: FULL_MASK_ERROR_COUNTER :: FULL_ERR_CNT [31:00] */
+#define YDC_DDR_BIST_FULL_MASK_ERROR_COUNTER_FULL_ERR_CNT_MASK     0xffffffff
+#define YDC_DDR_BIST_FULL_MASK_ERROR_COUNTER_FULL_ERR_CNT_ALIGN    0
+#define YDC_DDR_BIST_FULL_MASK_ERROR_COUNTER_FULL_ERR_CNT_BITS     32
+#define YDC_DDR_BIST_FULL_MASK_ERROR_COUNTER_FULL_ERR_CNT_SHIFT    0
+#define YDC_DDR_BIST_FULL_MASK_ERROR_COUNTER_FULL_ERR_CNT_DEFAULT  0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: SINGLE_BIT_MASK_ERROR_COUNTER
+ ***************************************************************************/
+/* YDC_DDR_BIST :: SINGLE_BIT_MASK_ERROR_COUNTER :: SINGLE_ERR_CNT [31:00] */
+#define YDC_DDR_BIST_SINGLE_BIT_MASK_ERROR_COUNTER_SINGLE_ERR_CNT_MASK      0xffffffff
+#define YDC_DDR_BIST_SINGLE_BIT_MASK_ERROR_COUNTER_SINGLE_ERR_CNT_ALIGN     0
+#define YDC_DDR_BIST_SINGLE_BIT_MASK_ERROR_COUNTER_SINGLE_ERR_CNT_BITS      32
+#define YDC_DDR_BIST_SINGLE_BIT_MASK_ERROR_COUNTER_SINGLE_ERR_CNT_SHIFT     0
+#define YDC_DDR_BIST_SINGLE_BIT_MASK_ERROR_COUNTER_SINGLE_ERR_CNT_DEFAULT   0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: ERROR_OCCURRED
+ ***************************************************************************/
+/* YDC_DDR_BIST :: ERROR_OCCURRED :: ERR_OCCURRED [31:00] */
+#define YDC_DDR_BIST_ERROR_OCCURRED_ERR_OCCURRED_MASK              0xffffffff
+#define YDC_DDR_BIST_ERROR_OCCURRED_ERR_OCCURRED_ALIGN             0
+#define YDC_DDR_BIST_ERROR_OCCURRED_ERR_OCCURRED_BITS              32
+#define YDC_DDR_BIST_ERROR_OCCURRED_ERR_OCCURRED_SHIFT             0
+#define YDC_DDR_BIST_ERROR_OCCURRED_ERR_OCCURRED_DEFAULT           0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: GLOBAL_ERROR_COUNTER
+ ***************************************************************************/
+/* YDC_DDR_BIST :: GLOBAL_ERROR_COUNTER :: GLOBAL_ERR_CNT [31:00] */
+#define YDC_DDR_BIST_GLOBAL_ERROR_COUNTER_GLOBAL_ERR_CNT_MASK      0xffffffff
+#define YDC_DDR_BIST_GLOBAL_ERROR_COUNTER_GLOBAL_ERR_CNT_ALIGN     0
+#define YDC_DDR_BIST_GLOBAL_ERROR_COUNTER_GLOBAL_ERR_CNT_BITS      32
+#define YDC_DDR_BIST_GLOBAL_ERROR_COUNTER_GLOBAL_ERR_CNT_SHIFT     0
+#define YDC_DDR_BIST_GLOBAL_ERROR_COUNTER_GLOBAL_ERR_CNT_DEFAULT   0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: LAST_ADDR_ERR
+ ***************************************************************************/
+/* YDC_DDR_BIST :: LAST_ADDR_ERR :: reserved0 [31:26] */
+#define YDC_DDR_BIST_LAST_ADDR_ERR_RESERVED0_MASK                  0xfc000000
+#define YDC_DDR_BIST_LAST_ADDR_ERR_RESERVED0_ALIGN                 0
+#define YDC_DDR_BIST_LAST_ADDR_ERR_RESERVED0_BITS                  6
+#define YDC_DDR_BIST_LAST_ADDR_ERR_RESERVED0_SHIFT                 26
+#define YDC_DDR_BIST_LAST_ADDR_ERR_RESERVED0_DEFAULT               0x00000000
+
+/* YDC_DDR_BIST :: LAST_ADDR_ERR :: BIST_LAST_ADDR_ERR [25:00] */
+#define YDC_DDR_BIST_LAST_ADDR_ERR_BIST_LAST_ADDR_ERR_MASK         0x03ffffff
+#define YDC_DDR_BIST_LAST_ADDR_ERR_BIST_LAST_ADDR_ERR_ALIGN        0
+#define YDC_DDR_BIST_LAST_ADDR_ERR_BIST_LAST_ADDR_ERR_BITS         26
+#define YDC_DDR_BIST_LAST_ADDR_ERR_BIST_LAST_ADDR_ERR_SHIFT        0
+#define YDC_DDR_BIST_LAST_ADDR_ERR_BIST_LAST_ADDR_ERR_DEFAULT      0x03ffffff
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: LAST_DATA_ERR_WORD_7
+ ***************************************************************************/
+/* YDC_DDR_BIST :: LAST_DATA_ERR_WORD_7 :: BIST_LAST_DATA_ERR_7 [31:00] */
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_7_BIST_LAST_DATA_ERR_7_MASK         0xffffffff
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_7_BIST_LAST_DATA_ERR_7_ALIGN        0
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_7_BIST_LAST_DATA_ERR_7_BITS         32
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_7_BIST_LAST_DATA_ERR_7_SHIFT        0
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_7_BIST_LAST_DATA_ERR_7_DEFAULT      0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: LAST_DATA_ERR_WORD_6
+ ***************************************************************************/
+/* YDC_DDR_BIST :: LAST_DATA_ERR_WORD_6 :: BIST_LAST_DATA_ERR_6 [31:00] */
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_6_BIST_LAST_DATA_ERR_6_MASK         0xffffffff
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_6_BIST_LAST_DATA_ERR_6_ALIGN        0
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_6_BIST_LAST_DATA_ERR_6_BITS         32
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_6_BIST_LAST_DATA_ERR_6_SHIFT        0
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_6_BIST_LAST_DATA_ERR_6_DEFAULT      0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: LAST_DATA_ERR_WORD_5
+ ***************************************************************************/
+/* YDC_DDR_BIST :: LAST_DATA_ERR_WORD_5 :: BIST_LAST_DATA_ERR_5 [31:00] */
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_5_BIST_LAST_DATA_ERR_5_MASK         0xffffffff
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_5_BIST_LAST_DATA_ERR_5_ALIGN        0
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_5_BIST_LAST_DATA_ERR_5_BITS         32
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_5_BIST_LAST_DATA_ERR_5_SHIFT        0
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_5_BIST_LAST_DATA_ERR_5_DEFAULT      0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: LAST_DATA_ERR_WORD_4
+ ***************************************************************************/
+/* YDC_DDR_BIST :: LAST_DATA_ERR_WORD_4 :: BIST_LAST_DATA_ERR_4 [31:00] */
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_4_BIST_LAST_DATA_ERR_4_MASK         0xffffffff
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_4_BIST_LAST_DATA_ERR_4_ALIGN        0
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_4_BIST_LAST_DATA_ERR_4_BITS         32
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_4_BIST_LAST_DATA_ERR_4_SHIFT        0
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_4_BIST_LAST_DATA_ERR_4_DEFAULT      0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: LAST_DATA_ERR_WORD_3
+ ***************************************************************************/
+/* YDC_DDR_BIST :: LAST_DATA_ERR_WORD_3 :: BIST_LAST_DATA_ERR_3 [31:00] */
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_3_BIST_LAST_DATA_ERR_3_MASK         0xffffffff
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_3_BIST_LAST_DATA_ERR_3_ALIGN        0
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_3_BIST_LAST_DATA_ERR_3_BITS         32
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_3_BIST_LAST_DATA_ERR_3_SHIFT        0
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_3_BIST_LAST_DATA_ERR_3_DEFAULT      0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: LAST_DATA_ERR_WORD_2
+ ***************************************************************************/
+/* YDC_DDR_BIST :: LAST_DATA_ERR_WORD_2 :: BIST_LAST_DATA_ERR_2 [31:00] */
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_2_BIST_LAST_DATA_ERR_2_MASK         0xffffffff
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_2_BIST_LAST_DATA_ERR_2_ALIGN        0
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_2_BIST_LAST_DATA_ERR_2_BITS         32
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_2_BIST_LAST_DATA_ERR_2_SHIFT        0
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_2_BIST_LAST_DATA_ERR_2_DEFAULT      0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: LAST_DATA_ERR_WORD_1
+ ***************************************************************************/
+/* YDC_DDR_BIST :: LAST_DATA_ERR_WORD_1 :: BIST_LAST_DATA_ERR_1 [31:00] */
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_1_BIST_LAST_DATA_ERR_1_MASK         0xffffffff
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_1_BIST_LAST_DATA_ERR_1_ALIGN        0
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_1_BIST_LAST_DATA_ERR_1_BITS         32
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_1_BIST_LAST_DATA_ERR_1_SHIFT        0
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_1_BIST_LAST_DATA_ERR_1_DEFAULT      0x00000000
+
+
+/****************************************************************************
+ * YDC_DDR_BIST :: LAST_DATA_ERR_WORD_0
+ ***************************************************************************/
+/* YDC_DDR_BIST :: LAST_DATA_ERR_WORD_0 :: BIST_LAST_DATA_ERR_0 [31:00] */
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_0_BIST_LAST_DATA_ERR_0_MASK         0xffffffff
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_0_BIST_LAST_DATA_ERR_0_ALIGN        0
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_0_BIST_LAST_DATA_ERR_0_BITS         32
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_0_BIST_LAST_DATA_ERR_0_SHIFT        0
+#define YDC_DDR_BIST_LAST_DATA_ERR_WORD_0_BIST_LAST_DATA_ERR_0_DEFAULT      0x00000000
+
+
+/****************************************************************************
+ * Datatype Definitions.
+ ***************************************************************************/
+#endif /* #ifndef YDC_DDR_BIST_H__ */
+
+/* End of File */
+
diff --git a/arch/arm/cpu/armv7/iproc/shmoo_and28_reuse.c b/arch/arm/cpu/armv7/iproc/shmoo_and28_reuse.c
new file mode 100755
index 0000000..5a02d92
--- /dev/null
+++ b/arch/arm/cpu/armv7/iproc/shmoo_and28_reuse.c
@@ -0,0 +1,467 @@
+#include <config.h>
+#include <common.h>
+#include <malloc.h>
+#include <linux/mtd/mtd.h>
+#include <spi_flash.h>
+#include <nand.h>
+#include <asm/arch/iproc_regs.h>
+#include "asm/arch/socregs.h"
+#include "asm/iproc/reg_utils.h"
+#include "asm/iproc/iproc_common.h"
+#include "asm/iproc/ddr40_phy_init.h"
+#include "asm/iproc/shmoo_public.h"
+
+#if defined(CONFIG_SHMOO_AND28_REUSE) && CONFIG_SHMOO_AND28_REUSE
+
+#include "shmoo_and28/shmoo_and28.h"
+
+#define SHMOO28_HEADER_MAGIC      0xdeadbeaf
+#define SHMOO_MIN_BLOCK_SIZE      0x10000
+
+/* Enable/disable debugging */
+#define SHMOO28_DEBUG   0
+
+struct shmoo_sig_t {
+    uint32_t        magic;
+    uint32_t        length;
+    uint32_t        checksum;
+};
+
+struct shmoo_datagram_t {
+    struct shmoo_sig_t sig;
+    and28_shmoo_config_param_t config;
+};
+
+#if defined(CONFIG_IPROC_NAND) && defined(CONFIG_ENV_IS_IN_NAND) && CONFIG_ENV_IS_IN_NAND
+
+/* If Shmoo data is saved to NAND */
+static int write_shmoo_to_flash(void *buf, int length)
+{
+    nand_info_t *nand;
+    int ret = 0;
+    uint32_t offset = CONFIG_SHMOO_REUSE_NAND_OFFSET;
+    uint32_t end = offset + CONFIG_SHMOO_REUSE_NAND_RANGE;
+    uint32_t blksize;
+    
+    /* Get flash handle */
+    nand = &nand_info[0];
+    if (nand->size < offset || nand->writesize == 0 || nand->erasesize == 0) {
+        printf("Failed to initialize NAND flash for saving Shmoo values!\n");
+        return -1;
+    }
+
+    /* For NAND with bad blocks, we always erase all blocks in the range */
+    {
+        nand_erase_options_t opts;
+        memset(&opts, 0, sizeof(opts));
+        opts.offset = offset / nand->erasesize * nand->erasesize;
+        opts.length = (CONFIG_SHMOO_REUSE_NAND_RANGE - 1) / nand->erasesize * nand->erasesize + 1;
+        opts.quiet  = 1;
+        ret = nand_erase_opts(nand, &opts);
+        if (ret) {
+            printf("NAND flash erase failed, error=%d\n", ret);
+            return ret;
+        }
+    }
+    
+    /* Write data */
+    blksize = nand->erasesize > SHMOO_MIN_BLOCK_SIZE? 
+        nand->erasesize : SHMOO_MIN_BLOCK_SIZE;
+    while (offset < end) {
+        if (nand_block_isbad(nand, offset)) {
+            offset += blksize;
+            continue;
+        }
+        ret = nand_write(nand, offset, (size_t *)&length, (u_char *)buf);
+        if (ret) {
+            printf("NAND flash write failed, error=%d\n", ret);
+        }
+        break;
+    }
+    return ret;
+}
+
+#elif defined (CONFIG_SPI_FLASH) && defined(CONFIG_ENV_IS_IN_SPI_FLASH) && CONFIG_ENV_IS_IN_SPI_FLASH
+
+/* If shmoo data is saved to SPI */
+static int write_shmoo_to_flash(void *buf, int length)
+{
+    struct spi_flash *flash;
+    int erase = 0;
+    volatile uint32_t *flptr;
+    int i, j, ret = 0;
+    uint32_t offset = CONFIG_SHMOO_REUSE_QSPI_OFFSET;
+    
+    /* Check if erasing is required */
+    flptr = (volatile uint32_t *)(IPROC_QSPI_MEM_BASE + offset / 4 * 4);    
+    j = (length - 1) / 4 + 1;
+    for(i=0; i<j; i++, flptr++) {
+        if (*flptr != 0xFFFFFFFF) {
+            erase = 1;
+            break;
+        }
+    }
+    
+    /* Probe flash */
+    flash = spi_flash_probe(
+                CONFIG_ENV_SPI_BUS, 
+                CONFIG_ENV_SPI_CS, 
+                CONFIG_ENV_SPI_MAX_HZ, 
+                CONFIG_ENV_SPI_MODE
+                );
+    if (!flash) {
+        printf("Failed to initialize SPI flash for saving Shmoo values!\n");
+        return -1;
+    }
+    
+    /* Erase if necessary */
+    if (erase) {
+        ret = spi_flash_erase(
+                flash, 
+                offset / flash->sector_size * flash->sector_size, 
+                flash->sector_size
+                );
+        if (ret) {
+            printf("SPI flash erase failed, error=%d\n", ret);
+            spi_flash_free(flash);
+            return ret;
+        }
+    }
+    
+    /* Write data */
+    ret = spi_flash_write(flash, offset, length, buf);
+    if (ret) {
+        printf("SPI flash write failed, error=%d\n", ret);
+    }
+   
+    /* Free flash instance */
+    spi_flash_free(flash);
+    
+    return ret;
+}
+
+#elif defined (CONFIG_ENV_IS_IN_FLASH)
+
+/* If shmoo data is saved to NOR flash */
+static int write_shmoo_to_flash(void *buf, int length)
+{
+    int erase = 0;
+    volatile uint32_t *flptr, shmoo_start;
+    int i, j, ret = 0;
+    uint32_t offset = CONFIG_SHMOO_REUSE_NOR_OFFSET;
+    int sect_len;
+
+    /* Check if erasing is required */
+    flptr = (volatile uint32_t *)(IPROC_NOR_MEM_BASE + offset / 4 * 4);
+    shmoo_start = flptr;
+    j = (length - 1) / 4 + 1;
+    for(i=0; i<j; i++, flptr++) {
+        if (*flptr != 0xFFFFFFFF) {
+            erase = 1;
+            break;
+        }
+    }
+
+    sect_len = (((length / 0x20000) + 1)*0x20000 - 1);   
+    /* Erase if necessary */
+    if (erase) {
+        ret = flash_sect_erase((ulong)shmoo_start, (ulong)shmoo_start + sect_len);
+        if (ret) {
+            printf("NOR flash erase failed, error=%d, start addr: 0x%x, end addr: 0x%x\n", 
+                            ret, (ulong)shmoo_start, (ulong)shmoo_start + sect_len);
+            return ret;
+        }
+    }
+
+    /* Write data */
+    ret = flash_write((char *)buf, (ulong)shmoo_start, length);
+
+    if (ret) {
+        printf("NOR flash write failed, error=%d\n", ret);
+    }
+
+    return ret;
+
+}
+#else
+ #error Flash (SPI or NAND) must be enabled 
+#endif
+
+/* Return flash pointer; or NULL if validation failed */
+static volatile uint32_t *validate_flash_shmoo_values(void)
+{
+    volatile char *ptr;
+    volatile char *flptr;
+    struct shmoo_sig_t *sig;
+    uint32_t checksum;
+    int offset;
+    int i;
+    int length;
+
+    /* Calculate required length (register/value pair) */
+    length = sizeof(and28_shmoo_config_param_t);
+    if (SHMOO28_DEBUG) 
+        printf("SHMOO28 Control structure size: %d\n", length);
+    
+#if defined(CONFIG_ENV_IS_IN_NAND) && CONFIG_ENV_IS_IN_NAND
+    /* Read SHMOO data from NAND */
+    flptr = (volatile char *)(IPROC_NAND_MEM_BASE + CONFIG_SHMOO_REUSE_NAND_OFFSET);
+//    offset = (CONFIG_SHMOO_REUSE_NAND_RANGE - 1) / SHMOO_MIN_BLOCK_SIZE * SHMOO_MIN_BLOCK_SIZE;
+    offset = 0;
+#elif defined (CONFIG_ENV_IS_IN_FLASH) 
+    /* Read SHMOO data from NOR */
+    flptr = (volatile char *)(IPROC_NOR_MEM_BASE + CONFIG_SHMOO_REUSE_NOR_OFFSET);
+    offset = 0;
+#else
+    /* Read SHMOO data from SPI */
+    flptr = (volatile char *)(IPROC_QSPI_MEM_BASE + CONFIG_SHMOO_REUSE_QSPI_OFFSET);
+    offset = 0;
+#endif
+    
+    if (SHMOO28_DEBUG) 
+        printf("SHMOO flash address: 0x%x, offset: 0x%x\n", (int)flptr, (int) offset);
+
+    /* Construct signature */
+    sig = (struct shmoo_sig_t *) (flptr + offset);
+
+    if (sig->magic == SHMOO28_HEADER_MAGIC) {
+        if (SHMOO28_DEBUG) 
+            printf("Shmoo signature matched\n");
+    } else {
+        return NULL;
+    }
+ 
+    if (sig->length == length) {
+        if (SHMOO28_DEBUG) 
+            printf("Shmoo data length matched\n");
+    } else {
+        return NULL;
+    }
+
+    /* Verify checksum */
+    checksum = 0;
+    ptr = (char *) (flptr + offset + sizeof (struct shmoo_sig_t));
+    for(i=0; i< length; i++, ptr++) {
+        checksum += *ptr;
+    }
+    if (sig->checksum != checksum) {
+        printf("Shmoo checksum is not matching!\n");
+        return NULL;
+    }
+    
+    if (SHMOO28_DEBUG) 
+        printf("Shmoo checksum verified\n");
+    return (volatile uint32_t *)(flptr + offset + sizeof(struct shmoo_sig_t));
+}
+
+void restore_shmoo_config(and28_shmoo_config_param_t *shmoo_control_para)
+{
+    volatile char *ptr;
+	volatile char *sptr;
+    volatile char *flptr;
+    int i;
+    int length, offset;
+
+    /* Calculate required length (register/value pair) */
+    length = sizeof(and28_shmoo_config_param_t);
+    if (SHMOO28_DEBUG) 
+        printf("SHMOO28 Control structure size: %d\n", length);
+    
+#if defined(CONFIG_ENV_IS_IN_NAND) && CONFIG_ENV_IS_IN_NAND
+    /* Read SHMOO data from NAND */
+    flptr = (volatile uint32_t *)(IPROC_NAND_MEM_BASE + CONFIG_SHMOO_REUSE_NAND_OFFSET);
+    offset = 0;
+#elif defined (CONFIG_ENV_IS_IN_FLASH) 
+    /* Read SHMOO data from NOR */
+    flptr = (volatile uint32_t *)(IPROC_NOR_MEM_BASE + CONFIG_SHMOO_REUSE_NOR_OFFSET);
+    offset = 0;
+#else
+    /* Read SHMOO data from SPI */
+    flptr = (volatile char *)(IPROC_QSPI_MEM_BASE + CONFIG_SHMOO_REUSE_QSPI_OFFSET);
+    offset = 0;
+#endif
+    
+    if (SHMOO28_DEBUG) 
+        printf("SHMOO flash address: 0x%x, offset: 0x%x\n", (int)flptr, (int) offset);
+    ptr = (char *) (flptr + offset + sizeof(struct shmoo_sig_t));
+	sptr = (char *)shmoo_control_para;
+	
+    for (i=0; i < length; i++) {
+	   /* Copy shmoo data from flash to shmoo pointer */    
+       *sptr = *ptr;
+	   sptr++;
+	   ptr++;
+	}
+   if (SHMOO28_DEBUG) {
+       display_shmoo_stored_data(shmoo_control_para);
+   }
+}
+
+int is_shmoo_data_valid(void)
+{
+    volatile uint32_t *flptr;
+    int valid = 1;
+    
+    /* Validate values in flash */
+    printf("Validate Shmoo parameters stored in flash ..... ");
+    flptr = validate_flash_shmoo_values();
+    if (flptr == NULL) {
+        printf("failed\n");
+        return 0;
+    }
+    printf("OK\n");
+
+    /* Check if user wants to skip restoring and run Shmoo */
+    if (CONFIG_SHMOO_REUSE_DELAY_MSECS > 0) {
+        char c = 0;
+        unsigned long start;
+        printf("Press Ctrl-C to run Shmoo ..... ");
+        start = get_timer(0);
+        while(get_timer(start) <= CONFIG_SHMOO_REUSE_DELAY_MSECS) {
+            if (tstc()) {
+                c = getc();
+                if (c == 0x03) {
+                    printf("Pressed.\n");
+                    printf("Do you want to run the Shmoo? [y/N] ");
+                    for(;;) {
+                        c = getc();
+                        if (c == 'y' || c == 'Y') {
+                            printf("Y\n");
+                            valid = 0;
+                            break;
+                        } else if (c == '\r' || c == 'n' || c == 'N') {
+                            if (c != '\r')
+                                printf("N\n");
+                            break;
+                        }
+                    }
+                    break;
+                } else {
+                    c = 0;
+                }
+            }
+        }
+        if (c == 0) 
+            printf("skipped\n");
+    }
+
+    return valid;
+}
+
+void display_shmoo_stored_data(and28_shmoo_config_param_t *config)
+{
+    int ix, jx;
+
+    for (ix=0; ix <  SHMOO_AND28_PHY_NOF_AD; ix++) {  
+        printf("control_regs_ad[%d]      : 0x%x\n", ix, config->control_regs_ad[ix]);
+    }
+
+    for (ix=0; ix <  SHMOO_AND28_PHY_NOF_BA; ix++) {  
+        printf("control_regs_ba[%d]      : 0x%x\n", ix, config->control_regs_ba[ix]);
+    }
+
+    for (ix=0; ix < SHMOO_AND28_PHY_NOF_AUX; ix++) {  
+        printf("control_regs_aux[%d]     : 0x%x\n", ix, config->control_regs_aux[ix]);
+    }
+
+    for (ix=0; ix <  SHMOO_AND28_PHY_NOF_CS; ix++) {  
+        printf("control_regs_cs[%d]      : 0x%x\n", ix, config->control_regs_cs[ix]);
+    }
+
+    printf("control_regs_par              : 0x%x\n",    config->control_regs_par);
+    printf("control_regs_ras_n            : 0x%x\n",    config->control_regs_ras_n);
+    printf("control_regs_cas_n            : 0x%x\n",    config->control_regs_cas_n);
+    printf("control_regs_cke              : 0x%x\n",    config->control_regs_cke);
+    printf("control_regs_rst_n            : 0x%x\n",    config->control_regs_rst_n);
+    printf("control_regs_odt              : 0x%x\n",    config->control_regs_odt);
+    printf("control_regs_we_n             : 0x%x\n",    config->control_regs_we_n);
+    printf("control_regs_vref_dac_control : 0x%x\n",  config->control_regs_vref_dac_control);
+ 
+    for (ix =0; ix < SHMOO_AND28_BYTES_PER_INTERFACE; ix++) {  
+        printf("wr_vdl_dqsp[%d]           : 0x%x\n",  ix, config->wr_vdl_dqsp[ix]);
+        printf("wr_vdl_dqsn[%d            : 0x%x\n",  ix, config->wr_vdl_dqsn[ix]);
+        printf("wr_vdl_dm[%d]             : 0x%x\n",  ix, config->wr_vdl_dm[ix]);
+        printf("wr_vdl_edc[%d]            : 0x%x\n",  ix, config->wr_vdl_edc[ix]);
+        printf("wr_chan_dly_cyc[%d]       : 0x%x\n",  ix, config->wr_chan_dly_cyc[ix]);
+
+        printf("rd_vdl_dqsp[%d]           : 0x%x\n",  ix, config->rd_vdl_dqsp[ix]);
+        printf("rd_vdl_dqsn[%d]           : 0x%x\n",  ix, config->rd_vdl_dqsn[ix]);
+        printf("rd_vdl_dmp[%d]            : 0x%x\n",  ix, config->rd_vdl_dmp[ix]);
+        printf("rd_vdl_dmn[%d]            : 0x%x\n",  ix, config->rd_vdl_dmn[ix]);
+        printf("rd_en_dly_cyc[%d]         : 0x%x\n",  ix, config->rd_en_dly_cyc[ix]);
+        printf("rd_control[%d]            : 0x%x\n",  ix, config->rd_control[ix]);
+    }
+
+    for (ix=0; ix < SHMOO_AND28_BYTES_PER_INTERFACE; ix++) {
+        for (jx=0; jx < SHMOO_AND28_BYTE; jx++) {
+            printf("rd_vdl_dqp[%d][%d]   : 0x%x\n", ix, jx, config->rd_vdl_dqp[ix][jx]);
+            printf("rd_vdl_dqn[%d][%d]   : 0x%x\n", ix, jx, config->rd_vdl_dqn[ix][jx]);
+            printf("wr_vdl_dq[%d][%d]    : 0x%x\n", ix, jx, config->wr_vdl_dq[ix][jx]);
+        }
+    }
+
+    for (ix=0; ix < SHMOO_AND28_BYTES_PER_INTERFACE; ix++) {
+        for (jx=0; jx < SHMOO_AND28_PHY_NOF_CS; jx++) {
+            printf("rd_en_vdl_cs[%d][%d] : 0x%x\n", ix, jx, config->rd_en_vdl_cs[ix][jx]);
+        }
+    }
+}
+
+void save_shmoo_to_flash(void)
+{
+    volatile uint32_t *flptr;
+    int length;
+    uint32_t checksum;
+    int i;
+    struct shmoo_datagram_t shmoo_buf;
+    and28_shmoo_config_param_t config_param;
+    char *fptr, *sptr;
+    
+    /* Get current SHMOO values */
+    soc_and28_shmoo_ctl(0, 0, SHMOO_AND28_SHMOO_RSVP, 0, 1, SHMOO_AND28_ACTION_SAVE, &config_param);
+    
+    /* Check if the flash already contains the same SHMOO values */
+    flptr = validate_flash_shmoo_values();
+    if (flptr != NULL) {
+        if (!memcmp((void *)flptr, &config_param, sizeof(and28_shmoo_config_param_t))) {
+            /* Not need to save */
+            return;
+        }
+    }
+    
+    /* calculate checksum and save to buffer */
+    checksum = 0;
+    sptr = (char *)&config_param;
+    length = sizeof(and28_shmoo_config_param_t);
+    for(i=0; i< length; i++, sptr++) {
+        checksum += *sptr;
+    }
+
+    shmoo_buf.sig.checksum = checksum;
+    shmoo_buf.sig.length = length;
+    shmoo_buf.sig.magic = SHMOO28_HEADER_MAGIC;
+    
+    /* Copy passed config to buffer */
+    fptr = (char *)&shmoo_buf.config;
+    sptr = (char *)&config_param;
+
+    for (i=0; i < length; i++) {
+        *fptr = *sptr;
+        fptr++;
+        sptr++;
+    }
+
+#if (SHMOO28_DEBUG == 1)
+    printf("\n shmoo config data to flash\n");
+    display_shmoo_stored_data(&shmoo_buf.config);
+
+    printf("\n shmoo config data from shmoo API\n");
+    display_shmoo_stored_data(&config_param);
+#endif
+
+    /* Now write buffer to flash */
+    printf("Writing Shmoo values into flash .....\n");
+    write_shmoo_to_flash((char *)&shmoo_buf, sizeof(struct shmoo_datagram_t));
+}
+
+#endif /* CONFIG_SHMOO_AND28_REUSE */
diff --git a/arch/arm/cpu/armv7/iproc/shmoo_sig.c b/arch/arm/cpu/armv7/iproc/shmoo_sig.c
new file mode 100644
index 0000000..90306cb
--- /dev/null
+++ b/arch/arm/cpu/armv7/iproc/shmoo_sig.c
@@ -0,0 +1,78 @@
+#include <stdint.h>
+
+#include "shmoo_sig.h"
+
+uint8_t shmoo_mem[] = {0x53,0x48,0x4D,0x4F,0x14,0xDC,0x00,0x00,0xB9,0x0b,0x00,0x00};
+
+#if 0
+this is not mixed endian friendly
+struct shmoo_sig_t {
+    char            magic[4];
+
+    uint32_t        dev_id:16;
+    uint32_t        sku_id:16;
+
+    uint32_t        ddr_type:2;
+    uint32_t        ddr_clock:12;
+    uint32_t        reserved1:18;
+}
+#endif
+
+void shmoo_mem2sig(uint8_t *mem, struct shmoo_signature *sig)
+{
+    memcpy(sig->magic,mem,4);
+    sig->dev_id = mem[4] | ((uint16_t)mem[5] << 8);
+    sig->sku_id = mem[6] | ((uint16_t)mem[7] << 8);
+    sig->ddr_type = mem[8] & 0x03;
+    sig->ddr_clock = (mem[8] & 0xFC | ((uint16_t)mem[9] << 8)) >> 2;
+}
+
+void shmoo_sig2mem(struct shmoo_signature *sig, uint8_t *mem)
+{
+    memset(mem,0,10);
+    memcpy(mem,sig->magic,4);
+    mem[4] = sig->dev_id & 0xff;
+    mem[5] = sig->dev_id >> 8;
+    mem[6] = sig->sku_id & 0xff;
+    mem[7] = sig->sku_id >> 8;
+    mem[8] = sig->ddr_type;
+    mem[8] |= (sig->ddr_clock << 2) & 0xFF;
+    mem[9] |= sig->ddr_clock >> 6;
+}
+
+int shmoo_sigmemcmp(struct shmoo_signature *sig, uint8_t *mem)
+{
+    uint8_t tmp[10];
+    shmoo_sig2mem(sig,tmp);
+#if 0
+    printf("%s tmp: %02X %02X %02X %02X %02x %02x %02x %02x %02x %02x\n",
+        __func__,tmp[0], tmp[1], tmp[2], tmp[3], tmp[4], tmp[5], tmp[6], tmp[7], tmp[8], tmp[9]);
+    printf("%s mem: %02X %02X %02X %02X %02x %02x %02x %02x %02x %02x\n",
+        __func__,mem[0], mem[1], mem[2], mem[3], mem[4], mem[5], mem[6], mem[7], mem[8], mem[9]);
+#endif
+    return(memcmp(tmp,mem,sizeof(tmp)));
+}
+
+
+void shmoo_dump_sig(struct shmoo_signature *sig)
+{
+    printf("shmoo sig: magic:%c%c%c%c dev_id:%x sku_id:%x ddr_type:%x ddr_clock:%x\n",
+        sig->magic[0], sig->magic[1], sig->magic[2], sig->magic[3],
+        sig->dev_id,sig->sku_id,sig->ddr_type,sig->ddr_clock);
+}
+
+#if 0
+int main()
+{
+    struct shmoo_signature sig;
+    uint8_t mem[10];
+
+    shmoo_mem2sig(shmoo_mem,&sig);
+    shmoo_dump_sig(&sig);
+    shmoo_sig2mem(&sig,mem);
+    printf("0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x,0x%02x\n",
+        mem[0],mem[1],mem[2],mem[3],mem[4],mem[5],mem[6],mem[7],mem[8],mem[9]);
+    printf("shmoo_sig_memcmp returned %d\n",shmoo_sigmemcmp(&sig,mem));
+    return;
+}
+#endif
diff --git a/arch/arm/cpu/armv7/iproc/shmoo_sig.h b/arch/arm/cpu/armv7/iproc/shmoo_sig.h
new file mode 100644
index 0000000..4038ff3
--- /dev/null
+++ b/arch/arm/cpu/armv7/iproc/shmoo_sig.h
@@ -0,0 +1,17 @@
+
+// endian agnostic wrapper of the shmoo signature which used to
+// be a bitfield
+struct shmoo_signature {
+    char            magic[4];
+    uint16_t        dev_id;
+    uint16_t        sku_id;
+    uint8_t         ddr_type;
+    uint16_t        ddr_clock;
+};
+
+void shmoo_mem2sig(uint8_t *mem, struct shmoo_signature *sig);
+void shmoo_sig2mem(struct shmoo_signature *sig, uint8_t *mem);
+int shmoo_sigmemcmp(struct shmoo_signature *sig, uint8_t *mem);
+void shmoo_dump_sig(struct shmoo_signature *sig);
+
+
diff --git a/arch/arm/cpu/armv7/iproc/timer.c b/arch/arm/cpu/armv7/iproc/timer.c
old mode 100644
new mode 100755
index 81d236a..555bcbf
--- a/arch/arm/cpu/armv7/iproc/timer.c
+++ b/arch/arm/cpu/armv7/iproc/timer.c
@@ -1,43 +1,45 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved. 
- *  
- * Permission to use, copy, modify, and/or distribute this software for any 
- * purpose with or without fee is hereby granted, provided that the above 
- * copyright notice and this permission notice appear in all copies. 
- *  
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY 
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION 
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
+ * $Copyright Open Broadcom Corporation$ 
  */
 #include <config.h>
 #include <asm/arch/iproc_regs.h>
+#include <asm/iproc/reg_utils.h>
 #include <asm/iproc/iproc_common.h>
-
+#include <common.h>
 iproc_clk_struct iproc_clk;
 
-void iproc_clk_enum()
+void iproc_clk_enum(void)
 {
-#if defined(CONFIG_HELIX4_EMULATION) || defined(CONFIG_NS_PLUS_EMULATION) || \
-	defined(CONFIG_HURRICANE2_EMULATION)
-		iproc_clk.arm_clk = IPROC_ARM_CLK;
-		iproc_clk.axi_clk = IPROC_AXI_CLK;
-		iproc_clk.apb_clk = IPROC_APB_CLK;
+#if defined(CONFIG_HELIX4_EMULATION) ||         \
+    defined(CONFIG_NS_PLUS_EMULATION) ||        \
+    defined(CONFIG_HURRICANE2_EMULATION) ||     \
+    defined(CONFIG_KATANA2_EMULATION) ||        \
+    defined(CONFIG_IPROC_EMULATION)   ||        \
+    defined(CONFIG_CYGNUS_EMULATION)
+    iproc_clk.arm_clk = IPROC_ARM_CLK;
+    iproc_clk.axi_clk = IPROC_AXI_CLK;
+    iproc_clk.apb_clk = IPROC_APB_CLK;
 #else
-	uint32_t pll_arma, pll_armb, ndiv_int,pdiv, freq_id;
+	uint32_t pll_arma, pll_armb, ndiv_int,pdiv, freq_id, mdiv;
 	unsigned long long vco_freq;
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 	pll_arma = *((uint32_t *)IHOST_PROC_CLK_PLLARMA);
 	pll_armb = *((uint32_t *)IHOST_PROC_CLK_PLLARMB);
+#else
+	pll_arma = swap_u32(*((uint32_t *)IHOST_PROC_CLK_PLLARMA));
+	pll_armb = swap_u32(*((uint32_t *)IHOST_PROC_CLK_PLLARMB));
+#endif
 	ndiv_int = (pll_arma >> 8) & 0x3FF;
 	if(!ndiv_int) 
 		ndiv_int = 512;
 	pdiv = (pll_arma >> IHOST_PROC_CLK_PLLARMA__pllarm_pdiv_R) & 0x07;
 	if(!pdiv)
 		pdiv = 0x0F;
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 	freq_id = (*((uint32_t *)IHOST_PROC_CLK_POLICY_FREQ)) & 0x07;
+#else
+	freq_id = swap_u32((*((uint32_t *)IHOST_PROC_CLK_POLICY_FREQ))) & 0x07;
+#endif
 	vco_freq = (ndiv_int << 20) + (pll_armb & 0xFFFFF);
 	vco_freq = ((vco_freq * CONFIG_SYS_REF_CLK) >> 20) / pdiv;
 	//printf("ndiv=%d, pdiv=%d, refclk=%d, vco=%d\n", ndiv_int, pdiv, CONFIG_SYS_REF_CLK,vco_freq); 
@@ -57,7 +59,13 @@ void iproc_clk_enum()
 		iproc_clk.apb_clk = iproc_clk.arm_clk / 4;
 	}
 	else if(freq_id == 7) {
-		iproc_clk.arm_clk = vco_freq / 2;
+		/* For freq_id 7, h_mdiv is the divider */
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
+		mdiv = *((volatile uint32_t *)IHOST_PROC_CLK_PLLARMCTRL5) & 0xff;
+#else
+		mdiv = swap_u32(*((volatile uint32_t *)IHOST_PROC_CLK_PLLARMCTRL5)) & 0xff;
+#endif
+		iproc_clk.arm_clk = vco_freq / mdiv;
 		iproc_clk.axi_clk = iproc_clk.arm_clk / 2;
 		iproc_clk.apb_clk = iproc_clk.arm_clk / 4;
 	}
@@ -67,19 +75,26 @@ void iproc_clk_enum()
 		iproc_clk.axi_clk = iproc_clk.arm_clk / 2;
 		iproc_clk.apb_clk = iproc_clk.arm_clk / 4;
 	}
+#endif
 
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_KATANA2))
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_KATANA2) || defined(CONFIG_GREYHOUND))
 	iproc_clk.axi_clk = iproc_get_axi_clk(CONFIG_SYS_REF_CLK);
 	iproc_clk.apb_clk = iproc_clk.axi_clk / 4;
 #endif
-#if (defined(CONFIG_NS_PLUS) && defined(CONFIG_GENPLL))
+#if defined(CONFIG_SABER2)
+	iproc_clk.axi_clk = iproc_get_axi_clk(CONFIG_IPROC_PLL_REF_CLK);
+	iproc_clk.apb_clk = iproc_clk.axi_clk / 4;
+#endif
+#if defined(CONFIG_NS_PLUS)
 	printf("org axi_clk=%dMHz\n", iproc_clk.axi_clk/1000000);
 	iproc_clk.axi_clk = iproc_get_axi_clk(CONFIG_SYS_REF_CLK);
 	iproc_clk.apb_clk = iproc_clk.axi_clk / 4;
 #endif
-
-#endif
+#ifdef CONFIG_CYGNUS_EMULATION
+	iproc_clk.arm_periph_clk = PCLK;
+#else
 	iproc_clk.arm_periph_clk = iproc_clk.arm_clk / 2;
+#endif
 	if(iproc_clk.apb_clk < 1000000 || iproc_clk.arm_periph_clk < 1000000) {
 		printf("arm_clk=%dHz, axi_clk=%dHz, apb_clk=%dHz, arm_periph_clk=%dHz\n", 
 		iproc_clk.arm_clk, iproc_clk.axi_clk, 
@@ -99,7 +114,11 @@ void glb_tim_init(void)
 	glb_tim_ptr->control = 0; /* Disable counter, interrupts and comparators */
 	glb_tim_ptr->counter_l = 0;
 	glb_tim_ptr->counter_h = 0;
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 	glb_tim_ptr->control |= IPROC_GLB_TIM_CTRL_TIM_EN;
+#else
+	glb_tim_ptr->control |= swap_u32(IPROC_GLB_TIM_CTRL_TIM_EN);
+#endif
 }
 
 int timer_init(void)
@@ -118,9 +137,15 @@ unsigned long get_timer(unsigned long base)
 	glb_tim_reg_struct_ptr glb_tim_ptr = (glb_tim_reg_struct_ptr)IPROC_PERIPH_GLB_TIM_REG_BASE;
 
 	do {
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 		count_h = glb_tim_ptr->counter_h;
 		count_l = glb_tim_ptr->counter_l;
 		count = glb_tim_ptr->counter_h;
+#else
+		count_h = swap_u32(glb_tim_ptr->counter_h);
+		count_l = swap_u32(glb_tim_ptr->counter_l);
+		count = swap_u32(glb_tim_ptr->counter_h);
+#endif
 	} while(count != count_h);
 	count = (count << 32) + count_l;
 
@@ -135,11 +160,17 @@ unsigned long get_timer(unsigned long base)
 			periph_clk = 500000000; /* 500 MHz */
 		}
 	}
+#elif defined(CONFIG_CYGNUS_EMULATION)
+	periph_clk = PCLK/2;
 #else
 		periph_clk = IPROC_ARM_CLK/2;
 #endif
 	
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
     ret = (count/(periph_clk/(((glb_tim_ptr->control&IPROC_GLB_TIM_CTRL_PRESC_MASK) >> 8) + 1)/1000)); /* returns msec */
+#else
+    ret = (count/(periph_clk/(((swap_u32(glb_tim_ptr->control)&IPROC_GLB_TIM_CTRL_PRESC_MASK) >> 8) + 1)/1000)); /* returns msec */
+#endif
 	return ret - base;
 }
 
@@ -163,16 +194,28 @@ void __udelay(unsigned long usec)
 			periph_clk = 500000000; /* 500 MHz */
 		}
 	}
+#elif defined(CONFIG_CYGNUS_EMULATION)
+	periph_clk = PCLK/2;
 #else
 		periph_clk = IPROC_ARM_CLK/2;
 #endif
 	
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 	tim_clk = (periph_clk/(((glb_tim_ptr->control&IPROC_GLB_TIM_CTRL_PRESC_MASK) >> 8) + 1));
+#else
+	tim_clk = (periph_clk/(((swap_u32(glb_tim_ptr->control)&IPROC_GLB_TIM_CTRL_PRESC_MASK) >> 8) + 1));
+#endif
 
 	do {
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 		count_h = glb_tim_ptr->counter_h;
 		count_l = glb_tim_ptr->counter_l;
 		curTick = glb_tim_ptr->counter_h;
+#else
+		count_h = swap_u32(glb_tim_ptr->counter_h);
+		count_l = swap_u32(glb_tim_ptr->counter_l);
+		curTick = swap_u32(glb_tim_ptr->counter_h);
+#endif
 	} while(curTick != count_h);
 
 	curTick = (curTick << 32) + count_l;
@@ -190,9 +233,15 @@ void __udelay(unsigned long usec)
 
 	do {
 		do {
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 			count_h = glb_tim_ptr->counter_h;
 			count_l = glb_tim_ptr->counter_l;
 			curTick = glb_tim_ptr->counter_h;
+#else
+			count_h = swap_u32(glb_tim_ptr->counter_h);
+			count_l = swap_u32(glb_tim_ptr->counter_l);
+			curTick = swap_u32(glb_tim_ptr->counter_h);
+#endif
 		} while(curTick != count_h);
 	} while (((curTick << 32) + count_l) < endTick);
 }
@@ -203,17 +252,29 @@ void iproc_systick_init(uint32_t tick_ms)
 
 	/* Disable timer and clear interrupt status*/
 	tim_ptr->control = 0; 
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 	tim_ptr->intstatus = IPROC_PVT_TIM_INT_STATUS_SET;
 	tim_ptr->load = (iproc_clk.arm_periph_clk/1000) * tick_ms;
 	tim_ptr->control = IPROC_PVT_TIM_CTRL_INT_EN | 
 					   IPROC_PVT_TIM_CTRL_AUTO_RELD |
 					   IPROC_PVT_TIM_CTRL_TIM_EN;
+#else
+	tim_ptr->intstatus = swap_u32(IPROC_PVT_TIM_INT_STATUS_SET);
+	tim_ptr->load = swap_u32((iproc_clk.arm_periph_clk/1000) * tick_ms);
+	tim_ptr->control = swap_u32(IPROC_PVT_TIM_CTRL_INT_EN | 
+					   IPROC_PVT_TIM_CTRL_AUTO_RELD |
+					   IPROC_PVT_TIM_CTRL_TIM_EN);
+#endif
 }
 
 void systick_isr(void *data)
 {
 	pvt_tim_reg_struct_ptr tim_ptr = (pvt_tim_reg_struct_ptr)IPROC_PERIPH_PVT_TIM_REG_BASE;
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
 	tim_ptr->intstatus = IPROC_PVT_TIM_INT_STATUS_SET;
+#else
+	tim_ptr->intstatus = swap_u32(IPROC_PVT_TIM_INT_STATUS_SET);
+#endif
 /*	printf("systick_isr: Entered\n"); */
 }
 /*
@@ -235,3 +296,4 @@ ulong get_tbclk (void)
 	
         return 1000;
 }
+
diff --git a/arch/arm/cpu/armv7/iproc/u-boot-spl-be.lds b/arch/arm/cpu/armv7/iproc/u-boot-spl-be.lds
new file mode 100755
index 0000000..4262558
--- /dev/null
+++ b/arch/arm/cpu/armv7/iproc/u-boot-spl-be.lds
@@ -0,0 +1,62 @@
+/*
+ * (C) Copyright 2002
+ * Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
+ *
+ * (C) Copyright 2010
+ * Texas Instruments, <www.ti.com>
+ *	Aneesh V <aneesh@ti.com>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+MEMORY { .sram : ORIGIN = CONFIG_SPL_TEXT_BASE,\
+		LENGTH = CONFIG_SPL_MAX_SIZE }
+MEMORY { .sdram : ORIGIN = CONFIG_SPL_BSS_START_ADDR, \
+		LENGTH = CONFIG_SPL_BSS_MAX_SIZE }
+
+OUTPUT_FORMAT("elf32-bigarm", "elf32-bigarm", "elf32-bigarm")
+OUTPUT_ARCH(arm)
+ENTRY(_start)
+SECTIONS
+{
+	.text      :
+	{
+		__start = .;
+		arch/arm/cpu/armv7/start.o	(.text)
+		*(.text*)
+	} >.sram
+
+	. = ALIGN(4);
+	.rodata : { *(SORT_BY_ALIGNMENT(.rodata*)) } >.sram
+
+	. = ALIGN(4);
+	.data : { *(SORT_BY_ALIGNMENT(.data*)) } >.sram
+	. = ALIGN(4);
+	__image_copy_end = .;
+	_end = .;
+
+	.bss :
+	{
+		. = ALIGN(4);
+		__bss_start = .;
+		*(.bss*)
+		. = ALIGN(4);
+		__bss_end__ = .;
+	} >.sdram
+}
diff --git a/arch/arm/cpu/armv7/iproc/u-boot-spl-le.lds b/arch/arm/cpu/armv7/iproc/u-boot-spl-le.lds
new file mode 100755
index 0000000..1d8efb2
--- /dev/null
+++ b/arch/arm/cpu/armv7/iproc/u-boot-spl-le.lds
@@ -0,0 +1,62 @@
+/*
+ * (C) Copyright 2002
+ * Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
+ *
+ * (C) Copyright 2010
+ * Texas Instruments, <www.ti.com>
+ *	Aneesh V <aneesh@ti.com>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+MEMORY { .sram : ORIGIN = CONFIG_SPL_TEXT_BASE,\
+		LENGTH = CONFIG_SPL_MAX_SIZE }
+MEMORY { .sdram : ORIGIN = CONFIG_SPL_BSS_START_ADDR, \
+		LENGTH = CONFIG_SPL_BSS_MAX_SIZE }
+
+OUTPUT_FORMAT("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")
+OUTPUT_ARCH(arm)
+ENTRY(_start)
+SECTIONS
+{
+	.text      :
+	{
+		__start = .;
+		arch/arm/cpu/armv7/start.o	(.text)
+		*(.text*)
+	} >.sram
+
+	. = ALIGN(4);
+	.rodata : { *(SORT_BY_ALIGNMENT(.rodata*)) } >.sram
+
+	. = ALIGN(4);
+	.data : { *(SORT_BY_ALIGNMENT(.data*)) } >.sram
+	. = ALIGN(4);
+	__image_copy_end = .;
+	_end = .;
+
+	.bss :
+	{
+		. = ALIGN(4);
+		__bss_start = .;
+		*(.bss*)
+		. = ALIGN(4);
+		__bss_end__ = .;
+	} >.sdram
+}
diff --git a/arch/arm/cpu/armv7/iproc/u-boot-spl.lds b/arch/arm/cpu/armv7/iproc/u-boot-spl.lds
old mode 100644
new mode 100755
diff --git a/arch/arm/cpu/armv7/start.S b/arch/arm/cpu/armv7/start.S
index a88b908..50a0ec7 100644
--- a/arch/arm/cpu/armv7/start.S
+++ b/arch/arm/cpu/armv7/start.S
@@ -44,6 +44,7 @@ _start: b	reset
 	ldr	pc, _not_used
 	ldr	pc, _irq
 	ldr	pc, _fiq
+	.word   0x55aa55aa
 #ifdef CONFIG_SPL_BUILD
 _undefined_instruction: .word _undefined_instruction
 _software_interrupt:	.word _software_interrupt
@@ -124,7 +125,11 @@ IRQ_STACK_START_IN:
  */
 
 reset:
+#if __BYTE_ORDER__ != __ORDER_LITTLE_ENDIAN__
+    .byte 0x00,0x02,0x01,0xF1   /* setend be */
+#endif
 	bl	save_boot_params
+#ifndef CONFIG_IPROC_SPL
 	/*
 	 * set the cpu to SVC32 mode
 	 */
@@ -132,6 +137,7 @@ reset:
 	bic	r0, r0, #0x1f
 	orr	r0, r0, #0xd3
 	msr	cpsr,r0
+#endif
 
 /*
  * Setup vector:
@@ -151,9 +157,11 @@ reset:
 
 	/* the mask ROM code should have PLL and others stable */
 #ifndef CONFIG_SKIP_LOWLEVEL_INIT
+#ifndef CONFIG_IPROC_SPL
 	bl	cpu_init_cp15
 	bl	cpu_init_crit
 #endif
+#endif
 
 /* Set stackpointer in internal RAM to call board_init_f */
 call_board_init_f:
diff --git a/arch/arm/include/asm/arch-helix4/bcmdmareg.h b/arch/arm/include/asm/arch-helix4/bcmdmareg.h
index 634bab6..afb9510 100644
--- a/arch/arm/include/asm/arch-helix4/bcmdmareg.h
+++ b/arch/arm/include/asm/arch-helix4/bcmdmareg.h
@@ -1,23 +1,11 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  */
 /*
  * Generic Broadcom Home Networking Division (HND) DMA engine HW interface
  * This supports the following chips: BCM42xx, 44xx, 47xx .
  *
- * $Id: bcmdmareg.h 278785 2011-08-19 22:09:15Z $
+ * $Id: bcmdmareg.h 278785 2011-08-19 22:09:15Z sushant $
  */
 
 #ifndef	_bcmdmareg_h_
@@ -253,7 +241,9 @@ typedef volatile struct {
 #define DMA_CTRL_ROC		(1 << 1)	/* rx overflow continue */
 #define DMA_CTRL_RXMULTI	(1 << 2)	/* allow rx scatter to multiple descriptors */
 #define DMA_CTRL_UNFRAMED	(1 << 3)	/* Unframed Rx/Tx data */
-#define DMA_CTRL_USB_BOUNDRY4KB_WAR (1 << 4)
+#define DMA_CTRL_USB_BOUNDRY4KB_WAR (1 << 4)	/* USB core REV9's SETUP dma channel's
+						*  buffer can not crossed 4K boundary PR80468
+						*/
 #define DMA_CTRL_DMA_AVOIDANCE_WAR (1 << 5)	/* DMA avoidance WAR for 4331 */
 
 /* receive descriptor table pointer */
diff --git a/arch/arm/include/asm/arch-helix4/bcmenetphy.h b/arch/arm/include/asm/arch-helix4/bcmenetphy.h
index 9c34d49..ca373a2 100644
--- a/arch/arm/include/asm/arch-helix4/bcmenetphy.h
+++ b/arch/arm/include/asm/arch-helix4/bcmenetphy.h
@@ -1,22 +1,10 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  */
 /*
  * Misc Broadcom BCM47XX MDC/MDIO enet phy definitions.
  *
- * $Id: bcmenetphy.h 241182 2011-02-17 21:50:03Z $
+ * $Id: bcmenetphy.h 241182 2011-02-17 21:50:03Z gmo $
  */
 
 #ifndef	_bcmenetphy_h_
diff --git a/arch/arm/include/asm/arch-helix4/bcmgmacmib.h b/arch/arm/include/asm/arch-helix4/bcmgmacmib.h
index b526e8e..112663b 100644
--- a/arch/arm/include/asm/arch-helix4/bcmgmacmib.h
+++ b/arch/arm/include/asm/arch-helix4/bcmgmacmib.h
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  */
 /*
  * Hardware-specific MIB definition for
diff --git a/arch/arm/include/asm/arch-helix4/bcmrobo.h b/arch/arm/include/asm/arch-helix4/bcmrobo.h
index b559b1d..c528c7e 100644
--- a/arch/arm/include/asm/arch-helix4/bcmrobo.h
+++ b/arch/arm/include/asm/arch-helix4/bcmrobo.h
@@ -1,21 +1,9 @@
 /*
  * RoboSwitch setup functions
  *
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  *
- * $Id: bcmrobo.h 309568 2012-01-20 01:40:56Z $
+ * $Id: bcmrobo.h 309568 2012-01-20 01:40:56Z kenlo $
  */
 
 #ifndef _bcm_robo_h_
diff --git a/arch/arm/include/asm/arch-helix4/bcmutils.h b/arch/arm/include/asm/arch-helix4/bcmutils.h
index 4b79b61..696b9f5 100644
--- a/arch/arm/include/asm/arch-helix4/bcmutils.h
+++ b/arch/arm/include/asm/arch-helix4/bcmutils.h
@@ -1,22 +1,10 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  */
 /*
  * Generic Broadcom Utilities
  *
- * $Id: bcm_utils.h 241182 2011-02-17 21:50:03Z $
+ * $Id: bcm_utils.h 241182 2011-02-17 21:50:03Z gmo $
  */
 
 #ifndef _bcm_utils_h_
diff --git a/arch/arm/include/asm/arch-helix4/ethHw.h b/arch/arm/include/asm/arch-helix4/ethHw.h
index 504aa2c..8acebc8 100644
--- a/arch/arm/include/asm/arch-helix4/ethHw.h
+++ b/arch/arm/include/asm/arch-helix4/ethHw.h
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  */
 /**
 *  @file    ethHw.h
@@ -347,11 +335,17 @@ static inline int ethHw_txFrameFormat(char **bufpp, int *lenp, int portMask, ETH
       
       tagp = (uint8_t *)&bufp[12];
       portMask = (int)tagp[3];
+#if 1
       /* Optimized tag initialization (tc and te do not need to be decoded,
       *  then encoded since the bit positions are aligned and only require a
       *  byte shift)
       */
       ethHw_brcmTagInitRaw( tagp );
+#else
+      tc = (int)((tagp[2] >> 2) & ETHHW_TC_MASK);
+      te = (int)(tagp[2] & ETHHW_TE_MASK);
+      ethHw_brcmTagInit( tagp, tc, te );
+#endif
       if (portMask == 0 ) {
          /* User only wants to specify the tc and te and let the ARL determine
          *  the port forwarding
diff --git a/arch/arm/include/asm/arch-helix4/ethHw_dma.h b/arch/arm/include/asm/arch-helix4/ethHw_dma.h
index 3ddf587..ed021da 100644
--- a/arch/arm/include/asm/arch-helix4/ethHw_dma.h
+++ b/arch/arm/include/asm/arch-helix4/ethHw_dma.h
@@ -1,23 +1,11 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  */
 /*
  * Generic Broadcom Home Networking Division (HND) DMA engine SW interface
  * This supports the following chips: BCM42xx, 44xx, 47xx .
  *
- * $Id: ethHw_dma.h 241182 2011-02-17 21:50:03Z $
+ * $Id: ethHw_dma.h 241182 2011-02-17 21:50:03Z gmo $
  */
 
 #ifndef	_eth_hw_dma_h_
@@ -70,6 +58,7 @@ typedef enum txd_range {
 /* Use 2nd half of reserved uncache RAM (2MB) for Rx buffer */
 #define RX_BUF_BASE        (rxDataBuf)
 #define RX_BUF_LEN         (RX_BUF_NUM * RX_BUF_SIZE)
+/* descriptor table needs to be on 4KB boundry xxxx-x000 */
 #define RX_DESC_BASE       (rxDescAlignedBuf)
 #define RX_DESC_LEN        (RX_DESC_NUM * sizeof( dma64dd_t ))
 /* descriptor base should be RX_BUFF_BASE + 0x4000 - so ok */
@@ -89,6 +78,7 @@ typedef enum txd_range {
 /* Starting from RX_BUF_BASE + 128KB for Tx buffer */
 #define TX_BUF_BASE        (txDataBuf)
 #define TX_BUF_LEN         (TX_BUF_NUM * TX_BUF_SIZE)
+/* descriptor table needs to be on 4KB boundry xxxx-x000 */
 #define TX_DESC_BASE       (txDescAlignedBuf)
 #define TX_DESC_LEN        (TX_DESC_NUM * sizeof( dma64dd_t ))
 /* descriptor base should be RX_BUFF_BASE + 0x1000 - so ok */
diff --git a/arch/arm/include/asm/arch-helix4/iproc.h b/arch/arm/include/asm/arch-helix4/iproc.h
index 6e95690..99673f1 100644
--- a/arch/arm/include/asm/arch-helix4/iproc.h
+++ b/arch/arm/include/asm/arch-helix4/iproc.h
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  */
 
 #ifndef __IPROC_H
@@ -36,7 +24,7 @@ void gic_config_interrupt(uint8_t intid, uint8_t secure_mode, uint8_t trig_mode,
 /* Function to install interrupt handler */
 void irq_install_handler (int irq, interrupt_handler_t handle_irq, void *data);
 void systick_isr(void *data);
-int l2cc_enable();
-void scu_enable();
+int l2cc_enable(void);
+void scu_enable(void);
 
 #endif /*__IPROC_H */
diff --git a/arch/arm/include/asm/arch-helix4/iproc_gmac_regs.h b/arch/arm/include/asm/arch-helix4/iproc_gmac_regs.h
old mode 100644
new mode 100755
index 0df3f5c..9ce594d
--- a/arch/arm/include/asm/arch-helix4/iproc_gmac_regs.h
+++ b/arch/arm/include/asm/arch-helix4/iproc_gmac_regs.h
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  */
 
 #ifndef	__IPROC_GMAC_REGS_H
@@ -268,7 +256,9 @@ typedef volatile struct _gmacregs {
 #define	SC_IDDQ_MASK			0x00000002
 #define	SC_PWR_DOWN_MASK		0x00000001
 
-#define	SC_PWR_DOWN_MASK	0x00000001
+/* serdes status0 */
+#define	SS0_TXPLL_LOCK			0x01000000
+
 /* clk control status */
 #define CS_FA				0x00000001
 #define CS_FH				0x00000002
@@ -324,4 +314,4 @@ typedef volatile struct _gmacregs {
 /* Core specific status flags */
 #define SISF_SW_ATTACHED	0x0800
 
-#endif /*__IPROC_GMAC_REGS_H */
+#endif /*__IPROC_GMAC_REGS_H */
\ No newline at end of file
diff --git a/arch/arm/include/asm/arch-helix4/iproc_regs.h b/arch/arm/include/asm/arch-helix4/iproc_regs.h
index 71740ed..27a0746 100644
--- a/arch/arm/include/asm/arch-helix4/iproc_regs.h
+++ b/arch/arm/include/asm/arch-helix4/iproc_regs.h
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  */
 
 #ifndef __IPROC_REGS_H
@@ -311,4 +299,4 @@ typedef volatile struct l2cc_reg_struct_t {
 	uint32_t power_ctrl; /* 0xF80 */
 } l2cc_reg_struct, * l2cc_reg_struct_ptr;
 
-#endif /*__IPROC_REGS_H */
+#endif /*__IPROC_REGS_H */
\ No newline at end of file
diff --git a/arch/arm/include/asm/arch-helix4/reg_utils.h b/arch/arm/include/asm/arch-helix4/reg_utils.h
index bb94abf..b57c126 100644
--- a/arch/arm/include/asm/arch-helix4/reg_utils.h
+++ b/arch/arm/include/asm/arch-helix4/reg_utils.h
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  */
 
 #ifndef REG_UTILS
@@ -186,3 +174,4 @@ reg8_read(volatile uint8_t *reg)
     return *reg;
 }
 #endif /* REG_UTILS */
+
diff --git a/arch/arm/include/asm/arch-helix4/socregs.h b/arch/arm/include/asm/arch-helix4/socregs.h
old mode 100644
new mode 100755
index 188c992..e17ac7a
--- a/arch/arm/include/asm/arch-helix4/socregs.h
+++ b/arch/arm/include/asm/arch-helix4/socregs.h
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  */
 
 
@@ -175,6 +163,7 @@
 #define IHOST_PROC_CLK_ARM_SWITCH_CLKGATE					0x19000210
 #define IHOST_PROC_CLK_ARM_PERIPH_CLKGATE					0x19000300
 #define IHOST_PROC_CLK_APB0_CLKGATE							0x19000400
+#define IHOST_PROC_CLK_PLLARMCTRL5                          0x19000c20
 #define DDR_BistStatuses									0x18010460
 #define DDR_BistStatuses__BistFinished						0
 #define DDR_BistErrorOccurred								0x1801046c
@@ -393,6 +382,17 @@
 #define ChipcommonB_MII_Management_Command_Data__RA_R		18
 #define ChipcommonB_MII_Management_Command_Data__TA_R		16
 #define ChipcommonB_MII_Management_Command_Data__OP_R		28
+#define TOP_AVS_SEL_REG										0x02074c00
+#define CMIC_I2CM_SMBus_Config								0x48000000
+#define CMIC_I2CM_SMBus_Config__SMB_EN						30
+#define CMIC_I2CM_SMBus_Master_FIFO_control					0x4800000c
+#define CMIC_I2CM_SMBus_Master_Command						0x48000030
+#define CMIC_I2CM_SMBus_Master_Data_Write					0x48000040
+#define CMIC_I2CM_SMBus_Master_Data_Read					0x48000044
 #define CMIC_DEV_REV_ID										0x48010224
+#define CMIC_SBUS_RING_MAP_0_7								0x48010098
+#define CMIC_CMC0_SCHAN_CTRL								0x48031000
+#define CMIC_CMC0_SCHAN_MESSAGE0							0x4803100c
+#define CMIC_CMC0_SCHAN_MESSAGE1							0x48031010
 
 #endif /* __SOCREGS_H */
diff --git a/arch/arm/include/asm/arch-helix4/spl.h b/arch/arm/include/asm/arch-helix4/spl.h
old mode 100644
new mode 100755
index 90aa3f7..2eb5fc6
--- a/arch/arm/include/asm/arch-helix4/spl.h
+++ b/arch/arm/include/asm/arch-helix4/spl.h
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  */
 #ifndef    __ASM_ARCH_HX4_SPL_H__
 #define    __ASM_ARCH_HX4_SPL_H__
@@ -20,5 +8,7 @@
 #define BOOT_DEVICE_NAND       1
 #define BOOT_DEVICE_ONE_NAND   2
 #define BOOT_DEVICE_SPI        3
+#define BOOT_DEVICE_CPGMAC     4
 
 #endif
+
diff --git a/arch/arm/include/asm/iproc/ddr40.h b/arch/arm/include/asm/iproc/ddr40.h
old mode 100644
new mode 100755
diff --git a/arch/arm/include/asm/iproc/ddr40_phy_custom.h b/arch/arm/include/asm/iproc/ddr40_phy_custom.h
old mode 100644
new mode 100755
index d1ccc2d..272bf0e
--- a/arch/arm/include/asm/iproc/ddr40_phy_custom.h
+++ b/arch/arm/include/asm/iproc/ddr40_phy_custom.h
@@ -1,4 +1,7 @@
 /*
+ * $Copyright Broadcom Corporation Dual License $
+ */
+/*
 ** Copyright 2000, 2001  Broadcom Corporation
 ** All Rights Reserved
 **
@@ -16,8 +19,8 @@
 ** ----------------------------------------------------------
 **
 **
-/*  $Id:: ddr40_phy_custom.h 1306 2012-06-21 14:10:10Z jeung      $:
-/*  $Rev::file =  : Global SVN Revision = 1780                    $:
+**  $Id:: ddr40_phy_custom.h 1306 2012-06-21 14:10:10Z jeung      $:
+**  $Rev::file =  : Global SVN Revision = 1780                    $:
 **
 */
 
diff --git a/arch/arm/include/asm/iproc/ddr40_phy_init.h b/arch/arm/include/asm/iproc/ddr40_phy_init.h
index 7e864bc..56a15e3 100644
--- a/arch/arm/include/asm/iproc/ddr40_phy_init.h
+++ b/arch/arm/include/asm/iproc/ddr40_phy_init.h
@@ -1,4 +1,7 @@
 /*
+ * $Copyright Broadcom Corporation Dual License $
+ */
+/*
 ** Copyright 2000, 2001  Broadcom Corporation
 ** All Rights Reserved
 **
diff --git a/arch/arm/include/asm/iproc/ddr40_phy_registers.h b/arch/arm/include/asm/iproc/ddr40_phy_registers.h
index 9b55789..f279ba0 100644
--- a/arch/arm/include/asm/iproc/ddr40_phy_registers.h
+++ b/arch/arm/include/asm/iproc/ddr40_phy_registers.h
@@ -1,3 +1,6 @@
+/*
+ * $Copyright Broadcom Corporation Dual License $
+ */
 /***************************************************************************
  *     Copyright (c) 1999-2013, Broadcom Corporation
  *     All Rights Reserved
diff --git a/arch/arm/include/asm/iproc/ddr40_variant.h b/arch/arm/include/asm/iproc/ddr40_variant.h
index b975972..6a4ee88 100644
--- a/arch/arm/include/asm/iproc/ddr40_variant.h
+++ b/arch/arm/include/asm/iproc/ddr40_variant.h
@@ -1,3 +1,6 @@
+/*
+ * $Copyright Broadcom Corporation Dual License $
+ */
 /*****************************************************************************
 *                                                                            *
 *                    Copyright (c) 2010 Broadcom, Inc.                       *
diff --git a/arch/arm/include/asm/iproc/ddr_bist.h b/arch/arm/include/asm/iproc/ddr_bist.h
old mode 100644
new mode 100755
index 183ae8f..f5c1183
--- a/arch/arm/include/asm/iproc/ddr_bist.h
+++ b/arch/arm/include/asm/iproc/ddr_bist.h
@@ -25,7 +25,16 @@ extern uint32_t iproc_get_ddr3_clock_mhz(uint32_t unit);
 #elif defined(CONFIG_NS_PLUS)
 #define DDR_SHMOO_PARAM_MEM_PTR		(0x1b000000) /*size ~0x300 */
 #define DDR_SHMOO_VREFW_MEM_PTR		(0x50000000) /* size ~0x30000 */
-#else
+#elif defined(CONFIG_CYGNUS)
+#define DDR_SHMOO_PARAM_MEM_PTR         (0x1b000000) /*size ~0x300 */
+#define DDR_SHMOO_VREFW_MEM_PTR         (0x50000000) /* size ~0x30000 */
+#elif (defined(CONFIG_GREYHOUND) || defined(CONFIG_SABER2))
+#define DDR_SHMOO_PARAM_MEM_PTR         (0x02000000)
+#define DDR_SHMOO_VREFW_MEM_PTR         (0x50000000)
+#elif defined(CONFIG_SABER2)
+#define DDR_SHMOO_PARAM_MEM_PTR         (0x02000000)
+#define DDR_SHMOO_VREFW_MEM_PTR         (0x50000000)
+#else 
 #error "DDR SHMOO memory allocation pointers are not set"
 #endif
 
@@ -35,6 +44,12 @@ extern uint32_t iproc_get_ddr3_clock_mhz(uint32_t unit);
 #define SOC_DDR3_NUM_MEMORIES		(1)
 #elif defined(CONFIG_NS_PLUS)
 #define SOC_DDR3_NUM_MEMORIES		(1)
+#elif defined(CONFIG_CYGNUS)
+#define SOC_DDR3_NUM_MEMORIES           (1)
+#elif (defined(CONFIG_GREYHOUND) || defined(CONFIG_SABER2))
+#define SOC_DDR3_NUM_MEMORIES           (1)
+#elif defined(CONFIG_SABER2)
+#define SOC_DDR3_NUM_MEMORIES           (1)
 #else
 #error "Number of DRAM memory chips must be defined"
 #endif
diff --git a/arch/arm/include/asm/iproc/iproc_common.h b/arch/arm/include/asm/iproc/iproc_common.h
old mode 100644
new mode 100755
index 2300263..78e85b7
--- a/arch/arm/include/asm/iproc/iproc_common.h
+++ b/arch/arm/include/asm/iproc/iproc_common.h
@@ -15,9 +15,6 @@
 #ifndef __IPROC_COMMON_H__
 #define __IPROC_COMMON_H__
 
-#define iproc_get_chipid()	((*(volatile unsigned int *)ChipcommonA_ChipID) & 0xFFFF)
-#define iproc_get_chiprev()	(((*(volatile unsigned int *)ChipcommonA_ChipID) >> 16) & 0xF)
-#define iproc_get_chipsku()	(((*(volatile unsigned int *)ChipcommonA_ChipID) >> 20) & 0xF)
 
 #define CHIP_ID_NS_10		53010
 #define CHIP_ID_NS_11		53011
@@ -53,10 +50,15 @@
 #define CHIP_REV_D2		(14)
 #define CHIP_REV_D3		(15)
 
-void bench_screen_test1(void);
-uint32_t iproc_get_axi_clk(uint32_t refclk);
-uint32_t iproc_read_ecc_syndrome(void);
-void iproc_clear_ecc_syndrome(void);
+extern void bench_screen_test1(void);
+extern uint32_t iproc_config_armpll(uint32_t clkmhz);
+extern uint32_t iproc_get_axi_clk(uint32_t refclk);
+extern void iproc_clk_enum(void);
+extern uint32_t iproc_read_ecc_syndrome(void);
+extern void iproc_clear_ecc_syndrome(void);
+extern void ddr_init2(void);
+extern int is_shmoo_data_valid(void);
+extern void save_shmoo_to_flash(void);
 
 #endif /* __IPROC_COMMON_H__ */
 
diff --git a/arch/arm/include/asm/iproc/iproc_nand.h b/arch/arm/include/asm/iproc/iproc_nand.h
old mode 100644
new mode 100755
index 5ac8a42..dea5445
--- a/arch/arm/include/asm/iproc/iproc_nand.h
+++ b/arch/arm/include/asm/iproc/iproc_nand.h
@@ -55,6 +55,8 @@
 #include <asm/arch/iproc_regs.h>
 #if defined(CONFIG_NORTHSTAR) || defined (CONFIG_NS_PLUS)
 #define IPROC_R_STRAPS_CONTROL_ADDR           (CRU_STRAPS_CONTROL_OFFSET) 
+#elif defined(CONFIG_CYGNUS)
+#define IPROC_R_STRAPS_CONTROL_ADDR           (NAND_IDM_IDM_IO_STATUS)
 #else
 #define IPROC_R_STRAPS_CONTROL_ADDR           (DMU_PCU_IPROC_STRAPS_CAPTURED) 
 #endif
@@ -129,6 +131,13 @@
 #define IPROC_NAND_STRAP_TYPE_SHIFT                     12
 #define IPROC_NAND_STRAP_PAGE_MASK                      0x00000c00
 #define IPROC_NAND_STRAP_PAGE_SHIFT                     10
+#elif defined(CONFIG_CYGNUS)
+#define IPROC_NAND_STRAP_TYPE_MASK                      0x000f0000
+#define IPROC_NAND_STRAP_TYPE_SHIFT                     16
+#define IPROC_NAND_STRAP_PAGE_MASK                      0x00300000
+#define IPROC_NAND_STRAP_PAGE_SHIFT                     20
+#define IPROC_NAND_STRAP_WIDTH_MASK                     0x01000000
+#define IPROC_NAND_STRAP_WIDTH_SHIFT                    24
 #else
 #define IPROC_NAND_STRAP_TYPE_MASK	        (0xf << DMU_PCU_IPROC_STRAPS_CAPTURED__strap_nand_type_R)
 #define IPROC_NAND_STRAP_TYPE_SHIFT         (DMU_PCU_IPROC_STRAPS_CAPTURED__strap_nand_type_R)
@@ -202,6 +211,7 @@ typedef enum
     NAND_PAGE_ALIGNMENT  = 10,
 	NAND_OPERATION_FAIL  = 11,
     NAND_TEST_ERROR      = 12,
+    NAND_BLOCK_ALIGN     = 13,
 } NAND_STATUS;
 
 int iproc_nand_init(uint32_t cs);
diff --git a/arch/arm/include/asm/iproc/platform.h b/arch/arm/include/asm/iproc/platform.h
index 6cbf6c0..70bad56 100644
--- a/arch/arm/include/asm/iproc/platform.h
+++ b/arch/arm/include/asm/iproc/platform.h
@@ -1,4 +1,7 @@
 /*
+ * $Copyright Broadcom Corporation Dual License $
+ */
+/*
 ** Copyright 2000, 2001  Broadcom Corporation
 ** All Rights Reserved
 **
diff --git a/arch/arm/include/asm/iproc/reg_utils.h b/arch/arm/include/asm/iproc/reg_utils.h
old mode 100644
new mode 100755
index cd8fecb..ba6f314
--- a/arch/arm/include/asm/iproc/reg_utils.h
+++ b/arch/arm/include/asm/iproc/reg_utils.h
@@ -1,16 +1,6 @@
-/*****************************************************************************
-* Copyright 2011 Broadcom Corporation.  All rights reserved.
-*
-* Unless you and Broadcom execute a separate written software license
-* agreement governing use of this software, this software is licensed to you
-* under the terms of the GNU General Public License version 2, available at
-* http://www.broadcom.com/licenses/GPLv2.php (the "GPL").
-*
-* Notwithstanding the above, under no circumstances may you combine this
-* software in any way with any other Broadcom software provided under a
-* license other than the GPL, without Broadcom's express prior written
-* consent.
-*****************************************************************************/
+/*
+ * $Copyright Open Broadcom Corporation$
+ */
 
 #ifndef REG_UTILS
 #define REG_UTILS
@@ -33,12 +23,32 @@
  *   32-bit register access functions
  */
 /****************************************************************************/
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
+#pragma message "Register access is normal"
+#else
+#pragma message "Register access swapped for big endian compile"
+#pragma GCC push_options
+#pragma GCC optimize ("O0")
+#endif
 
 extern uint32_t reg_debug;
 #define	REG_DEBUG(val) (reg_debug = val)
 
 //#define DEBUG_REG
 
+// NB: This is duplicated in arch/arm/cpu/armv7/iproc/iproc_nand.c
+// for writel and readl
+static uint32_t swap_u32(uint32_t i) {
+    uint8_t c1, c2, c3, c4;    
+ 
+    c1 = i & 255;
+    c2 = (i >> 8) & 255;
+    c3 = (i >> 16) & 255;
+    c4 = (i >> 24) & 255;
+ 
+    return ((uint32_t)c1 << 24) + ((uint32_t)c2 << 16) + ((uint32_t)c3 << 8) + c4;
+}
+
 static inline void 
 reg32_clear_bits(volatile uint32_t *reg, uint32_t value)
 {
@@ -46,7 +56,11 @@ reg32_clear_bits(volatile uint32_t *reg, uint32_t value)
 	if (reg_debug)
 		printf("%s reg (0x%x): 0x%x 0x%x\n", __FUNCTION__, (uint32_t)reg, *reg, (*reg & ~(value)));
 #endif
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
     *reg &= ~(value);
+#else
+    *reg &= ~(swap_u32(value));
+#endif
 }
 
 static inline void 
@@ -56,7 +70,11 @@ reg32_set_bits(volatile uint32_t *reg, uint32_t value)
 	if (reg_debug)
 		printf("%s reg (0x%x): 0x%x 0x%x\n", __FUNCTION__, (uint32_t)reg, *reg, (*reg | value));
 #endif
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
     *reg |= value;
+#else
+    *reg |= swap_u32(value);
+#endif
 }
 
 static inline void 
@@ -66,7 +84,11 @@ reg32_toggle_bits(volatile uint32_t *reg, uint32_t value)
 	if (reg_debug)
 		printf("%s reg (0x%x): 0x%x 0x%x\n", __FUNCTION__, (uint32_t)reg, *reg, (*reg ^ value));
 #endif
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
     *reg ^= value;
+#else
+    *reg ^= swap_u32(value);
+#endif
 }
 
 static inline void 
@@ -77,7 +99,11 @@ reg32_write_masked(volatile uint32_t *reg, uint32_t mask,
 	if (reg_debug)
 		printf("%s reg (0x%x): 0x%x 0x%x\n", __FUNCTION__, (uint32_t)reg, *reg, (*reg & (~mask)) | (value & mask));
 #endif
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
     *reg = (*reg & (~mask)) | (value & mask);
+#else
+    *reg = (*reg & swap_u32(~mask)) | swap_u32(value & mask);
+#endif
 }
 
 static inline void 
@@ -87,7 +113,11 @@ reg32_write(volatile uint32_t *reg, uint32_t value)
 	if (reg_debug)
 		printf("%s reg (0x%x, 0x%x)\n", __FUNCTION__, (uint32_t)reg, value);
 #endif
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
     *reg = value;
+#else
+    *reg = swap_u32(value);
+#endif
 }
 
 static inline uint32_t 
@@ -97,7 +127,11 @@ reg32_read(volatile uint32_t *reg)
 	if (reg_debug)
 		printf("%s reg (0x%x): 0x%x\n", __FUNCTION__, (uint32_t)reg, *reg);
 #endif
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
     return *reg;
+#else
+    return swap_u32(*reg);
+#endif
 }
 
 /****************************************************************************/
@@ -106,40 +140,73 @@ reg32_read(volatile uint32_t *reg)
  */
 /****************************************************************************/
 
+static inline uint16_t swap_u16(uint16_t i) {
+    uint8_t c1, c2;
+ 
+    c1 = i & 255;
+    c2 = (i >> 8) & 255;
+ 
+    return (c1 << 8) + c2;
+}
+
 static inline void 
 reg16_clear_bits(volatile uint16_t *reg, uint16_t value)
 {
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
     *reg &= ~(value);
+#else
+    *reg &= swap_u16(~(value));
+#endif
 }
 
 static inline void 
 reg16_set_bits(volatile uint16_t *reg, uint16_t value)
 {
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
     *reg |= value;
+#else
+    *reg |= swap_u16(value);
+#endif
 }
 
 static inline void 
 reg16_toggle_bits(volatile uint16_t *reg, uint16_t value)
 {
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
     *reg ^= value;
+#else
+    *reg ^= swap_u16(value);
+#endif
 }
 
 static inline void 
 reg16_write_masked(volatile uint16_t *reg, uint16_t mask, uint16_t value)
 {
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
     *reg = (*reg & (~mask)) | (value & mask);
+#else
+    *reg = (*reg & swap_u16(~mask)) | swap_u16(value & mask);
+#endif
 }
 
 static inline void 
 reg16_write(volatile uint16_t *reg, uint16_t value)
 {
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
     *reg = value;
+#else
+    *reg = swap_u16(value);
+#endif
 }
 
 static inline uint16_t 
 reg16_read(volatile uint16_t *reg)
 {
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
     return *reg;
+#else
+    return swap_u16(*reg);
+#endif
 }
 
 /****************************************************************************/
@@ -183,5 +250,9 @@ reg8_read(volatile uint8_t *reg)
 {
     return *reg;
 }
+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
+#else
+#pragma GCC pop_options
+#endif
 #endif /* REG_UTILS */
 
diff --git a/arch/arm/include/asm/iproc/shmoo.h b/arch/arm/include/asm/iproc/shmoo.h
index 77559b9..ae8b887 100644
--- a/arch/arm/include/asm/iproc/shmoo.h
+++ b/arch/arm/include/asm/iproc/shmoo.h
@@ -1,4 +1,7 @@
 /*
+ * $Copyright Broadcom Corporation Dual License $
+ */
+/*
 ** Copyright 2000, 2001  Broadcom Corporation
 ** All Rights Reserved
 **
diff --git a/arch/arm/include/asm/iproc/shmoo_ddr40.h b/arch/arm/include/asm/iproc/shmoo_ddr40.h
old mode 100644
new mode 100755
index 66a2b3a..e8113a1
--- a/arch/arm/include/asm/iproc/shmoo_ddr40.h
+++ b/arch/arm/include/asm/iproc/shmoo_ddr40.h
@@ -121,8 +121,10 @@ extern int soc_ddr40_write(int unit, int ci, uint32 addr, uint32 uData0,
 #define SHMOO_RD_DQ 2
 #define SHMOO_WR_DQ 3
 #define SHMOO_ADDRC 4
+#ifdef SHMOO_WR_DM
+#undef SHMOO_WR_DM
+#endif
 #define SHMOO_WR_DM 5 /* 13->9 */
-
 #define DDR_PHYTYPE_RSVP       0
 #define DDR_PHYTYPE_RSVP_STR   "rsvp"
 #define DDR_PHYTYPE_NS         1
diff --git a/arch/arm/include/asm/iproc/shmoo_public.h b/arch/arm/include/asm/iproc/shmoo_public.h
index 49b1e77..26d0a50 100644
--- a/arch/arm/include/asm/iproc/shmoo_public.h
+++ b/arch/arm/include/asm/iproc/shmoo_public.h
@@ -1,4 +1,7 @@
 /*
+ * $Copyright Broadcom Corporation Dual License $
+ */
+/*
 ** Copyright 2000, 2001  Broadcom Corporation
 ** All Rights Reserved
 **
diff --git a/arch/arm/lib/board.c b/arch/arm/lib/board.c
index d4c61aa..466de29 100755
--- a/arch/arm/lib/board.c
+++ b/arch/arm/lib/board.c
@@ -128,6 +128,10 @@ void blue_led_off(void) __attribute__((weak, alias("__blue_led_off")));
 
 static int init_baudrate(void)
 {
+#if defined(CONFIG_CYGNUS)
+	gd->baudrate = getenv_ulong("baudrate", 10, CONFIG_BAUDRATE);
+	return 0;
+#else
     int ret;
 
     ret = early_access_env_vars();
@@ -140,6 +144,7 @@ static int init_baudrate(void)
     }
 
 	return 0;
+#endif
 }
 
 static int display_banner(void)
@@ -476,10 +481,12 @@ void board_init_f(ulong bootflag)
 	debug("New Stack Pointer is: %08lx\n", addr_sp);
 
 #ifdef CONFIG_POST
-#ifndef IPROC_BOARD_DIAGS
-	post_bootmode_init();
-	post_run(NULL, POST_ROM | post_bootmode_get(0));
-#endif
+	#ifndef CONFIG_CYGNUS_EMULATION
+		#ifndef IPROC_BOARD_DIAGS
+			post_bootmode_init();
+			post_run(NULL, POST_ROM | post_bootmode_get(0));
+		#endif
+	#endif
 #endif
 
 	gd->bd->bi_baudrate = gd->baudrate;
@@ -492,7 +499,7 @@ void board_init_f(ulong bootflag)
 	gd->reloc_off = addr - _TEXT_BASE;
 	debug("relocation Offset is: %08lx\n", gd->reloc_off);
 	memcpy(id, (void *)gd, sizeof(gd_t));
-    debug("relocate_code: sp = %x, id = %x, addr = %x\n", addr_sp, id, addr);
+    debug("relocate_code: sp = %lx, id = %p, addr = %lx\n", addr_sp, id, addr);
 #ifndef CONFIG_NO_CODE_RELOC
 	relocate_code(addr_sp, id, addr);
 #else
@@ -711,15 +718,15 @@ static char *failed = "*** failed ***\n";
  *
  ************************************************************************
  */
-
+extern int post_check_board_cfg_env( void );
 void board_init_r(gd_t *id, ulong dest_addr)
 {
 	ulong malloc_start;
 #if !defined(CONFIG_SYS_NO_FLASH)
 	ulong flash_size;
+	volatile int *nor_enable;
 #endif
 	gd = id;
-        volatile int *nor_enable;
 
 	gd->flags |= GD_FLG_RELOC;	/* tell others: relocation done */
 	bootstage_mark_name(BOOTSTAGE_ID_START_UBOOT_R, "board_init_r");
@@ -791,11 +798,26 @@ void board_init_r(gd_t *id, ulong dest_addr)
 		print_size(flash_size, "\n");
 # endif /* CONFIG_SYS_FLASH_CHECKSUM */
 	} else {
+    
+#if defined(CONFIG_IPROC_P7) && CONFIG_IPROC_P7
+
+#if !defined(CONFIG_NOR_IPROC_BOOT) && !defined(CONFIG_NAND_IPROC_BOOT)
+		puts("PNOR flash is not present - switch decoding bit back for NAND\n");
+		nor_enable = (volatile int *)ICFG_IPROC_IOPAD_SW_OVERRIDE_CTRL;
+		*nor_enable &= cpu_to_le32(
+			~(1 << ICFG_IPROC_IOPAD_SW_OVERRIDE_CTRL__iproc_pnor_sel));
+		*nor_enable |= cpu_to_le32(
+			(1 << ICFG_IPROC_IOPAD_SW_OVERRIDE_CTRL__iproc_pnor_sel_sw_ovwr));
+#endif /* !CONFIG_NOR_IPROC_BOOT && !CONFIG_NAND_IPROC_BOOT */
+
+#else /* !CONFIG_IPROC_P7 */
                 puts("PNOR flash is not present - switch decoding bit back\n");
                 /* For Hurrican 2 - we need to enable flash decode lock */
                 nor_enable = (volatile int *)0x1803fc3c;
                *nor_enable &= 0x3;
                 printf("PNOR enable reg [0x1803fc3c] set to: 0x%x\n", *nor_enable);
+#endif /* !CONFIG_IPROC_P7 */
+
 /* PNOR flash not presenting workaround
 		puts(failed);
 		hang();
@@ -859,10 +881,16 @@ void board_init_r(gd_t *id, ulong dest_addr)
 	misc_init_r();
 #endif
 
+#if defined(CONFIG_USE_IRQ)
 	 /* set up exceptions */
 	interrupt_init();
 	/* enable exceptions */
 	enable_interrupts();
+#endif
+
+#if defined(CONFIG_CYGNUS)
+	pmInit();
+#endif
 
 	/* Perform network card initialisation if necessary */
 #if defined(CONFIG_DRIVER_SMC91111) || defined (CONFIG_DRIVER_LAN91C96)
@@ -903,6 +931,10 @@ void board_init_r(gd_t *id, ulong dest_addr)
 #ifndef IPROC_BOARD_DIAGS
 	post_run(NULL, POST_RAM | post_bootmode_get(0));
 #else
+
+#if (defined(CONFIG_CYGNUS))
+    post_check_board_cfg_env();
+#endif
 /* check the board types for NSP only */
 #if (defined(CONFIG_NS_PLUS))
 	post_check_board_cfg_env();
@@ -955,6 +987,10 @@ void board_init_r(gd_t *id, ulong dest_addr)
 	}
 #endif
 
+    printf("========== relocate address: 0x%lx, offset 0x%lx ==========\n",
+    		id->relocaddr, id->relocaddr - 0x1e000000);
+
+
 	/* main_loop() can return to retry autoboot, if so just run it again. */
 	for (;;) {
 		main_loop();
diff --git a/arch/arm/lib/bootm.c b/arch/arm/lib/bootm.c
index 9817946..2667db2 100755
--- a/arch/arm/lib/bootm.c
+++ b/arch/arm/lib/bootm.c
@@ -276,9 +276,9 @@ static void boot_prep_linux(bootm_headers_t *images)
 {
 #ifdef CONFIG_CMDLINE_TAG
 	char *commandline = getenv("bootargs");
+	printf("%s commandline: %s\n", __FUNCTION__, commandline);
 #endif
 
-	printf("%s commandline: %s\n", __FUNCTION__, commandline);
 #ifdef CONFIG_OF_LIBFDT
 	if (images->ft_len) {
 		debug("using: FDT\n");
diff --git a/arch/arm/lib/interrupts.c b/arch/arm/lib/interrupts.c
index 74ff5ce..3770b7f 100644
--- a/arch/arm/lib/interrupts.c
+++ b/arch/arm/lib/interrupts.c
@@ -84,10 +84,12 @@ int disable_interrupts (void)
 #else
 int interrupt_init (void)
 {
+#ifndef CONFIG_NO_CODE_RELOC
 	/*
 	 * setup up stacks if necessary
 	 */
 	IRQ_STACK_START_IN = gd->irq_sp + 8;
+#endif
 
 	return 0;
 }
diff --git a/board/broadcom/bcm95634x/bcm95634x.c b/board/broadcom/bcm95634x/bcm95634x.c
old mode 100644
new mode 100755
index 10a5ccd..a1d3cc9
--- a/board/broadcom/bcm95634x/bcm95634x.c
+++ b/board/broadcom/bcm95634x/bcm95634x.c
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved. 
- *  
- * Permission to use, copy, modify, and/or distribute this software for any 
- * purpose with or without fee is hereby granted, provided that the above 
- * copyright notice and this permission notice appear in all copies. 
- *  
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY 
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION 
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
+ * $Copyright Open Broadcom Corporation$ 
  */
 #include <common.h>
 #include <asm/io.h>
@@ -26,6 +14,180 @@ DECLARE_GLOBAL_DATA_PTR;
 
 extern int bcmiproc_eth_register(u8 dev_num);
 extern void iproc_save_shmoo_values(void);
+extern void bcmiproc_serdes_init_early(void);
+
+/* Returns core voltage in milli volts mV */
+/* Applicable only to core voltage ADC on Helix4 SVK */
+int get_core_voltage_adc(uint32_t *coreV) {
+    uint32_t val, i;
+	/* Enable SMBus */
+	reg32_set_bits((volatile uint32_t *)CMIC_I2CM_SMBus_Config, 1 << CMIC_I2CM_SMBus_Config__SMB_EN);
+	/* Write the ADC device address (0x28 on SVK), bit 7-1 is address and bit 0 is R/~W */
+	reg32_write((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Data_Write, 0x00000050);
+
+	/* Write ADC data aquisition command with channel0, 
+	   input volatage range 0 - 5V */ /* Indicate this is the end of write */
+	reg32_write((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Data_Write, 0x80000080);
+
+	/* Issue "Send Byte" command */
+
+	val  = reg32_read((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Command);
+	reg32_write((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Command, 0x80000200);
+
+	i = 10000;
+	do {
+		val  = reg32_read((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Command);
+	} while(--i && (val & 0x80000000));
+
+	/* Clear FIFOs */
+	reg32_write((volatile uint32_t *)CMIC_I2CM_SMBus_Master_FIFO_control, 0xc0000000);
+
+	if(i == 0 || (val & (0x7 << 25))) {
+		printf("i=%d, val = %x\n", i, val);
+		return (1); /* Command is not successful, return error */
+	}
+	/* Add some delay, just in case */
+	for(i = 0; i < 10000; i++)
+		val = i * 2;
+
+	/* Now read two bytes from ADC */
+	/* Write the ADC device address (0x28 on SVK), bit 7-1 is address and bit 0 is R/~W */
+	reg32_write((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Data_Write, 0x80000051);
+
+	/* Issue "Read Word" command */
+
+	val  = reg32_read((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Command);
+	reg32_write((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Command, 0x80000c00);
+
+	i = 10000;
+	do {
+		val  = reg32_read((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Command);
+	} while(--i && (val & 0x80000000));
+
+	if(i == 0 || (val & (0x7 << 25))) {
+		/* Clear FIFOs */
+		reg32_write((volatile uint32_t *)CMIC_I2CM_SMBus_Master_FIFO_control, 0xc0000000);
+		printf("i=%d, val = %x\n", i, val);
+		return (1); /* Command is not successful, return error */
+	}
+	/* Get 12 bit value */
+	*coreV = (reg32_read((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Data_Read) & 0xFF) << 4; /* MSB 8 bits */
+	//printf("coreV: %x\n", *coreV);
+	*coreV |= (reg32_read((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Data_Read) >> 4) & 0xF; /* LSB 4 bits */
+	//printf("coreV: %x\n", *coreV);
+	/* convert coreV into mV */
+	*coreV = (*coreV * 5000)/4096;
+	//printf("coreV: %x\n", *coreV);
+	 return(0);
+}
+
+
+
+/* Applicable only to core voltage ADC on Helix4 SVK */
+/* Pass coreV in milli volts, mV */
+int set_core_voltage_dac(uint32_t coreV) {
+    uint32_t val, i, steps;
+	if(coreV > 1050 || coreV < 900) {
+		printf("Error: Unsupported core voltage: %d mV\n", coreV);
+		return(1);
+	}
+
+	/* 1024 steps cover the range of 200mV, from 900mV to 1100mV */
+	steps = ((1100 - coreV) * 1024) / 200;
+	if(steps == 1024)
+		steps -= 1; /* to prevent rollover */
+
+	/* Enable SMBus */
+	reg32_set_bits((volatile uint32_t *)CMIC_I2CM_SMBus_Config, 1 << CMIC_I2CM_SMBus_Config__SMB_EN);
+	/* Clear FIFOs */
+	reg32_write((volatile uint32_t *)CMIC_I2CM_SMBus_Master_FIFO_control, 0xc0000000);
+	
+	/* Write the DAC device address (0x2C on SVK), bit 7-1 is address and bit 0 is R/~W */
+	reg32_write((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Data_Write, 0x00000058);
+
+	/* 0x3FF -> 0.9v, 0x300 -> 0.95v, 0x200 -> 1.00v, 0x100 -> 1.05v, 0x0 -> 1.1v */
+	/* Write BIT D9 - D8 */ 
+	reg32_write((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Data_Write, (steps >> 8) & 0xFF);
+
+	/* Write BIT D7 - D0 */ 
+	/* Indicate this is the end of write */
+	reg32_write((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Data_Write, 0x80000000 | (steps & 0xFF));
+
+	/* Issue "Write Byte" command */
+	val  = reg32_read((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Command);
+	reg32_write((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Command, 0x80000600);
+
+	i = 10000;
+	do {
+		val  = reg32_read((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Command);
+	} while(--i && (val & 0x80000000));
+
+
+	if(i == 0 || (val & (0x7 << 25))) {
+		printf("i=%d, val = %x\n", i, val);
+		return (1); /* Command is not successful, return error */
+	}
+	 return(0);
+}
+
+/* Applicable only to core voltage ADC on Helix4 SVK */
+/* Pass coreV in milli volts, mV */
+int set_smbus_mux(uint32_t channel) {
+    uint32_t val, i;
+
+	/* Enable SMBus */
+	reg32_set_bits((volatile uint32_t *)CMIC_I2CM_SMBus_Config, 1 << CMIC_I2CM_SMBus_Config__SMB_EN);
+	/* Clear FIFOs */
+	reg32_write((volatile uint32_t *)CMIC_I2CM_SMBus_Master_FIFO_control, 0xc0000000);
+	
+	/* Write the MUX device address (0x76 on SVK), bit 7-1 is address and bit 0 is R/~W */
+	reg32_write((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Data_Write, 0x000000E6);
+
+
+	/* Indicate this is the end of write */
+	reg32_write((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Data_Write, 0x80000000 | 1 << channel);
+
+	/* Issue "Send Byte" command */
+	val  = reg32_read((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Command);
+	reg32_write((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Command, 0x80000200);
+
+	i = 10000;
+	do {
+		val  = reg32_read((volatile uint32_t *)CMIC_I2CM_SMBus_Master_Command);
+	} while(--i && (val & 0x80000000));
+
+
+	if(i == 0 || (val & (0x7 << 25))) {
+		printf("i=%d, val = %x\n", i, val);
+		return (1); /* Command is not successful, return error */
+	}
+	 return(0);
+}
+
+
+uint32_t cmicd_schan_read_top(uint32_t addr) {
+    uint32_t read;
+    read=0x0;
+
+    reg32_write((volatile uint32_t *)CMIC_CMC0_SCHAN_MESSAGE0, 0x2c600200);
+    reg32_write((volatile uint32_t *)CMIC_CMC0_SCHAN_MESSAGE1, addr);
+
+    reg32_write((volatile uint32_t *)CMIC_CMC0_SCHAN_CTRL, 0x1);
+
+    while (read != 0x2) {
+       read = reg32_read((volatile uint32_t *)CMIC_CMC0_SCHAN_CTRL); 
+    }
+    read = reg32_read((volatile uint32_t *)CMIC_CMC0_SCHAN_MESSAGE1);
+    return read;
+}
+
+void cmicd_init_soc () {
+
+    uint32_t read_reg;
+
+    // Configure SBUS Ring Map
+    reg32_write((volatile uint32_t *)CMIC_SBUS_RING_MAP_0_7, 0x7752100);
+}
 
 /*****************************************
  * board_init -early hardware init
@@ -46,26 +208,81 @@ int misc_init_r (void)
     return(0);
 }
 
+/*****************Helix4 SKUs *************
+Device	Part Number	Frequency
+FireScout	56548	315MHz
+			56547	315MHz
+		
+Helix4	56344	315MHz
+		56342	215MHz
+		56340	250MHz
+		
+Spiral	56049	250MHz
+		56048	315MHz
+		56047	315MHz
+
+Ranger	56042	250MHz
+		56041	250MHz
+		56040	315MHz
+
+******************************************/
+
 /**********************************************
  * dram_init - sets uboots idea of sdram size
  **********************************************/
 int dram_init (void)
 {
-	uint32_t sku_id;
+	uint32_t sku_id, avs, coreV_req, coreV;
+	int status;
+
+	/* init serdes early */
+	bcmiproc_serdes_init_early();
 
 #if !defined(CONFIG_SPL) || defined(CONFIG_SPL_BUILD)
 	bench_screen_test1();
 //#ifdef CONFIG_RUN_DDR_SHMOO
+#if 1
+	/* Get the required core voltage from TOP_AVS_SEL register, 
+	   and set the VRM (DAC) accordingly */
+	cmicd_init_soc();
+	avs = cmicd_schan_read_top(TOP_AVS_SEL_REG) & 0x07;
+	/* AVS 0 -> 1.00V, 1 -> 0.95V, 2 -> 0.90V, 3 -> 0.85V, 4 -> 0.80V */
+	coreV_req = 1000 - (avs * 50); 
+	if(coreV_req < 900)
+		coreV_req = 900;
+	printf("AVS: 0x%x\n", avs);
+	status = set_smbus_mux(0);
+	if(status != 0) {
+		printf("Error: in set_smbus_mux\n");
+		return(status);
+	}
+
+	status = set_core_voltage_dac(coreV_req);
+	if(status != 0) {
+		printf("Error: in set_core_voltage_dac\n");
+		return(status);
+	}
+
+	status  = get_core_voltage_adc(&coreV);
+	if(status != 0) {
+		printf("Error: in get_core_voltage_adc\n");
+		return(status);
+	}
+	printf("Core Voltage set to: %d mV\n", coreV);
+
 	ddr_init2();
+#else
+	ddr_init();
+#endif
 #endif
 
 	sku_id = (reg32_read((volatile uint32_t *)CMIC_DEV_REV_ID)) & 0x0000ffff;
-	if(sku_id == 0xb040 || sku_id == 0xb042) {
+	if(sku_id == 0xb040 || sku_id == 0xb041 || sku_id == 0xb042) {
 		/* Ranger SVK board */
 		gd->ram_size = RANGER_SVK_SDRAM_SIZE - CONFIG_PHYS_SDRAM_RSVD_SIZE;
 	}
 	else {
-		/* default Helix4 */
+		/* default Helix4, Firescout and Spiral */
 		gd->ram_size = CONFIG_PHYS_SDRAM_1_SIZE - CONFIG_PHYS_SDRAM_RSVD_SIZE;
 	}
 
@@ -75,8 +292,10 @@ int dram_init (void)
 int board_early_init_f (void)
 {
 	int status = 0;
+	iproc_config_armpll(1000);
 	//ihost_pwrdown_cpu(1);
 	//ihost_pwrdown_cpu(0);
+
 	return(status);
 }
 
diff --git a/board/broadcom/bcm95634x/config.mk b/board/broadcom/bcm95634x/config.mk
index b3f9af6..98845cc 100644
--- a/board/broadcom/bcm95634x/config.mk
+++ b/board/broadcom/bcm95634x/config.mk
@@ -9,7 +9,11 @@ CONFIG_SYS_TEXT_BASE = 0x80000000
 endif
 
 ifdef CONFIG_NO_CODE_RELOC
+ifdef CONFIG_SYS_BIG_ENDIAN
+LDSCRIPT := $(SRCTREE)/board/$(BOARDDIR)/u-boot-nr-be.lds
+else
 LDSCRIPT := $(SRCTREE)/board/$(BOARDDIR)/u-boot-nr.lds
 endif
+endif
 
 #PLATFORM_RELFLAGS += -DSVN_REVISION=' " $(SVN_REV)"'
diff --git a/board/broadcom/bcm95634x/ddr_init_table.c b/board/broadcom/bcm95634x/ddr_init_table.c
index ebf2e74..5bf66ac 100644
--- a/board/broadcom/bcm95634x/ddr_init_table.c
+++ b/board/broadcom/bcm95634x/ddr_init_table.c
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved. 
- *  
- * Permission to use, copy, modify, and/or distribute this software for any 
- * purpose with or without fee is hereby granted, provided that the above 
- * copyright notice and this permission notice appear in all copies. 
- *  
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY 
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION 
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. 
+ * $Copyright Open Broadcom Corporation$ 
  */
 
 unsigned int ddr_init_tab[] = {
@@ -1421,4 +1409,4 @@ unsigned int ddr_clk_tab[] = {
 		750,	120,	30,	8,	0, 100, 15, 24,			
 		800,	128,	32,	8,	0, 80,  16, 24,			
 		0xffffffff
-};
+};
\ No newline at end of file
diff --git a/board/broadcom/bcm95634x/ddrsim2hex_hx4.pl b/board/broadcom/bcm95634x/ddrsim2hex_hx4.pl
old mode 100644
new mode 100755
diff --git a/board/broadcom/bcm95634x/mt47h128m16/ddr_reggen2hex_hx4.pl b/board/broadcom/bcm95634x/mt47h128m16/ddr_reggen2hex_hx4.pl
old mode 100644
new mode 100755
diff --git a/board/broadcom/bcm95634x/u-boot-nr-be.lds b/board/broadcom/bcm95634x/u-boot-nr-be.lds
new file mode 100644
index 0000000..8171c97
--- /dev/null
+++ b/board/broadcom/bcm95634x/u-boot-nr-be.lds
@@ -0,0 +1,99 @@
+/*
+ * January 2004 - Changed to support H4 device
+ * Copyright (c) 2004-2008 Texas Instruments
+ *
+ * (C) Copyright 2002
+ * Gary Jennejohn, DENX Software Engineering, <garyj@denx.de>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+OUTPUT_FORMAT("elf32-bigarm", "elf32-bigarm", "elf32-bigarm")
+OUTPUT_ARCH(arm)
+ENTRY(_start)
+SECTIONS
+{
+	. = 0x1E000000;
+
+	. = ALIGN(4);
+	.text	:
+	{
+		__image_copy_start = .;
+		arch/arm/cpu/armv7/start.o	(.text)
+		*(.text)
+	}
+
+	.mmu_table : {
+		. = ALIGN(0x10000);
+		*(section_mmu_table)
+	}
+
+	. = ALIGN(4);
+	.rodata : { *(SORT_BY_ALIGNMENT(SORT_BY_NAME(.rodata*))) }
+	. = ALIGN(4);
+	__data_start_load = .;
+	.data 0x90003000 :
+	  AT ( __data_start_load )
+	{
+		__data_start = .;
+		*(.data)
+	}
+
+	. = ALIGN(4);
+
+	. = .;
+	__u_boot_cmd_start = .;
+	.u_boot_cmd : { *(.u_boot_cmd) }
+	__u_boot_cmd_end = .;
+
+	. = ALIGN(4);
+
+	__image_copy_end = .;
+
+	.rel.dyn : {
+		__rel_dyn_start = .;
+		*(.rel*)
+		__rel_dyn_end = .;
+	}
+
+	.dynsym : {
+		__dynsym_start = .;
+		*(.dynsym)
+	}
+
+	.bss __rel_dyn_start (OVERLAY) : {
+		__bss_start = .;
+		*(.bss)
+		 . = ALIGN(4);
+		__bss_end__ = .;
+        _end = .;
+	}
+
+	.irqstack : {
+		__irqstack_end = .;
+		. = . + 0x2008;
+		__irqstack_start = .;
+	}
+
+	/DISCARD/ : { *(.dynstr*) }
+	/DISCARD/ : { *(.dynamic*) }
+	/DISCARD/ : { *(.plt*) }
+	/DISCARD/ : { *(.interp*) }
+	/DISCARD/ : { *(.gnu*) }
+}
diff --git a/common/serial.c b/common/serial.c
old mode 100644
new mode 100755
index 4f2bc7f..b118666
--- a/common/serial.c
+++ b/common/serial.c
@@ -46,7 +46,7 @@ void serial_register(struct serial_device *dev)
 	dev->next = serial_devices;
 	serial_devices = dev;
 }
-
+extern void iproc_uart_iomux(int op);
 void serial_initialize(void)
 {
 #if defined(CONFIG_8xx_CONS_SMC1) || defined(CONFIG_8xx_CONS_SMC2)
@@ -130,6 +130,28 @@ void serial_initialize(void)
 	serial_register(&uart_zynq_serial1_device);
 # endif
 #endif
+#if defined(CONFIG_SYS_SYNOPSYS)
+
+#ifndef CONFIG_CYGNUS_EMULATION  
+    iproc_uart_iomux(1);
+#endif  
+
+#if defined(CONFIG_SYS_SYNOPSYS_COM0)
+    serial_register(&synopsys_serial0_device);
+#endif
+#if defined(CONFIG_SYS_SYNOPSYS_COM1)
+    serial_register(&synopsys_serial1_device);
+#endif
+#if defined(CONFIG_SYS_SYNOPSYS_COM2)
+    serial_register(&synopsys_serial2_device);
+#endif
+#if defined(CONFIG_SYS_SYNOPSYS_COM3)
+    serial_register(&synopsys_serial3_device);
+#endif
+#if defined(CONFIG_SYS_SYNOPSYS_COM4)
+    serial_register(&synopsys_serial4_device);
+#endif
+#endif
 	serial_assign(default_serial_console()->name);
 }
 
diff --git a/drivers/net/Makefile b/drivers/net/Makefile
index ce3fbad..7c51947 100644
--- a/drivers/net/Makefile
+++ b/drivers/net/Makefile
@@ -99,6 +99,9 @@ endif
 ifeq ($(SOC),hurricane2)
 COBJS-$(CONFIG_BCMIPROC_ETH) += bcmiproc_phy5221.o
 endif
+ifeq ($(SOC),greyhound)
+COBJS-$(CONFIG_BCMIPROC_ETH) += bcmiproc_phy5481.o
+endif
 COBJS-$(CONFIG_BCMHANA_ETH) += bcm11160_ethHw.o
 COBJS-$(CONFIG_BCMRING_ETH) += bcm11107_ethHw.o
 COBJS-$(CONFIG_BCMRING_ETH) += bcm11107_chipcHw.o
diff --git a/drivers/net/bcmiproc_eth.c b/drivers/net/bcmiproc_eth.c
old mode 100644
new mode 100755
index 99d4a68..04158bb
--- a/drivers/net/bcmiproc_eth.c
+++ b/drivers/net/bcmiproc_eth.c
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  */
 /* debug/trace */
 //#define BCMDBG
@@ -99,6 +87,17 @@ bcmiproc_eth_write_hwaddr(struct eth_device* dev)
 	ET_TRACE(("%s enter\n", __FUNCTION__));
 
 	ET_TRACE(("%s Not going to change MAC address\n", __FUNCTION__));
+#if 0
+	printf("\nMAC: %02x:%02x:%02x:%02x:%02x:%02x\n",
+		dev->enetaddr[0], dev->enetaddr[1], dev->enetaddr[2],
+		dev->enetaddr[3], dev->enetaddr[4], dev->enetaddr[5]);
+
+	rc = ethHw_arlEntrySet(dev);
+	if (rc != ETHHW_RC_NONE) {
+		ET_ERROR(("ERROR setting MAC\n"));
+		return -1;
+	}
+#endif
 
 	ET_TRACE(("%s exit rc(0x%x)\n", __FUNCTION__, rc));
 	return rc;
@@ -118,14 +117,14 @@ bcmiproc_eth_open( struct eth_device *dev, bd_t * bt )
 	ethHw_dmaEnable(DMA_RX);
 	ethHw_dmaEnable(DMA_TX);
 
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_KATANA2))
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_KATANA2) || defined(CONFIG_GREYHOUND))
 	/* Check which port is connected and take PORT0 with priority */
 	if ( !ethHw_portLinkUp() ) {
 		error("Ethernet external port not connected");
 		return -1;
 	}
 	ethHw_checkPortSpeed();
-#endif /* (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_KATANA2)) */
+#endif /* (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_KATANA2) || defined(CONFIG_GREYHOUND)) */
 
 	ET_TRACE(("%s exit rc(0x%x)\n", __FUNCTION__, rc));
 	return rc;
@@ -185,7 +184,8 @@ bcmiproc_eth_register(u8 dev_num)
 
 	/* Initialization */
 	ET_TRACE(("Ethernet initialization...\n"));
-	rc = ethHw_Init();
+	rc = ethHw_Init();	
+	if (rc) {;}
 	ET_TRACE(("Ethernet initialization %s (rc=%i)\n",
 			(rc>=0) ? "successful" : "failed", rc));
 
@@ -208,3 +208,4 @@ bcmiproc_eth_register(u8 dev_num)
 	ET_TRACE(("%s exit\n", __FUNCTION__));
 	return 1;
 }
+
diff --git a/drivers/net/bcmiproc_ethHw.c b/drivers/net/bcmiproc_ethHw.c
old mode 100644
new mode 100755
index 9cd1121..1dc6dc6
--- a/drivers/net/bcmiproc_ethHw.c
+++ b/drivers/net/bcmiproc_ethHw.c
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  */
 /**
 *  @file    ethHw.c
@@ -41,16 +29,27 @@
 #include <asm/armv7.h>
 #include <asm/iproc/iproc_common.h>
 #include "ethHw_data.h"
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2))
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_SABER2))
 #include "bcmiproc_serdes.h"
 #include "bcmiproc_phy5461s.h"
-#endif /*(defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2))*/
+#endif /*(defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_SABER2))*/
 #if defined(CONFIG_HURRICANE2)
 #include "bcmiproc_phy5221.h"
 #endif
-#if defined(CONFIG_NS_PLUS)
+#if (defined(CONFIG_NS_PLUS))
 #include "bcmiproc_robo_serdes.h"
 #endif
+#if (defined(CONFIG_CYGNUS))
+#include "bcmiproc_phy.h"
+#endif /* (defined(CONFIG_CYGNUS)) */
+#if defined(CONFIG_GREYHOUND)
+#include "bcmiproc_phy.h"
+#include "bcmiproc_phy5481.h"
+#endif /* defined(CONFIG_GREYHOUND) */
+
+#if (defined(CONFIG_CYGNUS))
+#define ChipcommonA_ChipID     ICFG_CHIP_ID_REG
+#endif
 
 /* ---- External Variable Declarations ----------------------------------- */
 /* ---- External Function Prototypes ------------------------------------- */
@@ -74,8 +73,13 @@
 #undef BCMIPROC_ETH_DEBUG
 #endif /* BCMDBG */
 
-#define CHIP_HAS_ROBO(id) ( ((id) >= CHIP_ID_NS_10 && (id) <= CHIP_ID_CoNS_19) || ((id) == CHIP_ID_NSP_22) || ((id) == CHIP_ID_NSP_23) || ((id) == CHIP_ID_NSP_25))
+#if (defined(CONFIG_NORTHSTAR) || defined(CONFIG_NS_PLUS) || defined(CONFIG_CYGNUS))
+#define CHIP_HAS_ROBO(id) (1)
+#else
+#define CHIP_HAS_ROBO(id) (0)
+#endif /* (defined(CONFIG_NORTHSTAR) || defined(CONFIG_NS_PLUS) || defined(CONFIG_CYGNUS)) */
 
+uint32_t switch_bypass_mode = 0;
 uint32_t reg_debug = 0;
 
 bcm_eth_t g_eth_data;
@@ -99,6 +103,8 @@ int ethHw_dmaRxInit(bcm_eth_t *eth_data);
 int ethHw_dmaTxInit(bcm_eth_t *eth_data);
 int ethHw_dmaAttach(bcm_eth_t *eth_data);
 int ethHw_dmaDetach(dma_info_t *di);
+int ethHw_portLinkUp(void);
+void ethHw_checkPortSpeed(void);
 
 #ifdef BCMIPROC_ETH_DEBUG
 static void txDump(uint8_t *buf, int len);
@@ -128,43 +134,137 @@ static void gmac_tx_flowcontrol(bcm_eth_t *eth_data, bool on);
 static void gmac_promisc(bcm_eth_t *eth_data, bool mode);
 static void gmac_enable(bcm_eth_t *eth_data, bool en);
 static void gmac_core_reset(void);
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2))
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_SABER2))
 static void gmac_serdes_init(bcm_eth_t *eth_data);
-#endif /*(defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2))*/
+#endif /*(defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_SABER2))*/
+void chip_phy_wr(bcm_eth_t *eth_data, uint ext, uint phyaddr, uint reg, uint16_t v);
+uint16_t chip_phy_rd(bcm_eth_t *eth_data, uint ext, uint phyaddr, uint reg);
+#if defined(CONFIG_CYGNUS)
 void chip_phy_wr(bcm_eth_t *eth_data, uint ext, uint phyaddr, uint reg, uint16_t v);
 uint16_t chip_phy_rd(bcm_eth_t *eth_data, uint ext, uint phyaddr, uint reg);
+void chip_phy_init(bcm_eth_t *eth_data, int ext, uint phyaddr);
+int chip_phy_auto_negotiate_gcd(bcm_eth_t *eth_data, uint phyaddr, int *speed, int *duplex);
+int chip_phy_speed_get(bcm_eth_t *eth_data, uint phyaddr, int *speed, int *duplex);
+int chip_phy_link_get(bcm_eth_t *eth_data, uint phyaddr, int *link);
+#endif /* defined(CONFIG_CYGNUS) */
 static void chip_reset(bcm_eth_t *eth_data);
 static void chip_init(bcm_eth_t *eth_data, uint options);
 static uint32_t chip_getintr_events(bcm_eth_t *eth_data, bool in_isr);
 
+#if (defined(CONFIG_NS_PLUS) || defined(CONFIG_GREYHOUND))
 static u32 ethHw_readl(u32 addr);
 static void ethHw_writel(u32 val,u32 addr);
+#endif /* (defined(CONFIG_NS_PLUS) || defined(CONFIG_GREYHOUND)) */
 
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2))
+#if defined(CONFIG_CYGNUS)
 void gmac_set_amac_mdio(int en)
 {
 	u32 tmp;
-	tmp = *(volatile unsigned int *)IPROC_WRAP_MISC_CONTROL;
+	
+	/* set switch bypass mode*/
+	tmp = *(volatile unsigned int *)SWITCH_GLOBAL_CONFIG;
+	//printf("%s read 0x%x from SWITCH_GLOBAL_CONFIG(0x%x)\n", __FUNCTION__, tmp, SWITCH_GLOBAL_CONFIG);
+	if (en) {
+	     tmp |= (1 << SWITCH_GLOBAL_CONFIG__CDRU_SWITCH_BYPASS_SWITCH);
+    } else {
+    	 tmp &= ~(1 << SWITCH_GLOBAL_CONFIG__CDRU_SWITCH_BYPASS_SWITCH);
+    }
+	//printf("%s write 0x%x to SWITCH_GLOBAL_CONFIG(0x%x)\n", __FUNCTION__, tmp, SWITCH_GLOBAL_CONFIG);
+    *(volatile unsigned int *)SWITCH_GLOBAL_CONFIG = tmp;
+    
+	tmp = *(volatile unsigned int *)CRMU_CHIP_IO_PAD_CONTROL;
+	//printf("%s read 0x%x from CRMU_CHIP_IO_PAD_CONTROL(0x%x)\n", __FUNCTION__, tmp, CRMU_CHIP_IO_PAD_CONTROL);
+   	tmp &= ~(1 << CRMU_CHIP_IO_PAD_CONTROL__CDRU_IOMUX_FORCE_PAD_IN);
+    *(volatile unsigned int *)CRMU_CHIP_IO_PAD_CONTROL = tmp;
+	//printf("%s write 0x%x to SWITCH_GLOBAL_CONFIG(0x%x)\n", __FUNCTION__, tmp, CRMU_CHIP_IO_PAD_CONTROL);
+
+    /*Configure the ChipcommonG MII Management Control register 
+     for internal PHY registers access*/
+    tmp = *(volatile unsigned int *)ChipcommonG_MII_Management_Control;
+    /*select ChipcommonG MDC/MDIO as the MDC/MDIO master among internal MDC/MDIO bus*/
+    tmp &= ~(1 << ChipcommonG_MII_Management_Control__BYP);
+    *(volatile unsigned int *)ChipcommonG_MII_Management_Control = tmp;
+	//printf("%s write 0x%x to ChipcommonG_MII_Management_Control(0x%x)\n", __FUNCTION__, tmp, ChipcommonG_MII_Management_Control);
+    /*select MDC/MDIO connecting to on-chip internal PHYs*/
+    tmp &= ~(1 << ChipcommonG_MII_Management_Control__EXT);
+    *(volatile unsigned int *)ChipcommonG_MII_Management_Control = tmp;
+	//printf("%s write 0x%x to ChipcommonG_MII_Management_Control(0x%x)\n", __FUNCTION__, tmp, ChipcommonG_MII_Management_Control);
+    /* give bit[6:0](MDCDIV) with required divisor to set the MDC clock frequency, 
+    66MHZ/0x1A=2.5MHZ*/
+    tmp |= 0x9A;
+    *(volatile unsigned int *)ChipcommonG_MII_Management_Control = tmp;
+	//printf("%s write 0x%x to ChipcommonG_MII_Management_Control(0x%x)\n", __FUNCTION__, tmp, ChipcommonG_MII_Management_Control);
+
+	/* SET IO MUX CONTROL */
+    /* Get register base address */
+	tmp = *(volatile unsigned int *)CRMU_IOMUX_CTRL7;
+    //printf("%s read (0x%x) from CRMU_IOMUX_CTRL7(0x%x)\n", __FUNCTION__, tmp, CRMU_IOMUX_CTRL7);
+    tmp &= ~(7 << CRMU_IOMUX_CTRL7__CORE_TO_IOMUX_CAMERA_SRAM_RGMII_SEL_R);
+    tmp &= ~(7 << CRMU_IOMUX_CTRL7__CORE_TO_IOMUX_CAMERA_RGMII_SEL_R);
+    tmp |= (2 << CRMU_IOMUX_CTRL7__CORE_TO_IOMUX_CAMERA_SRAM_RGMII_SEL_R);
+    tmp |= (2 << CRMU_IOMUX_CTRL7__CORE_TO_IOMUX_CAMERA_RGMII_SEL_R);
+	//printf("%s write 0x%x to CRMU_IOMUX_CTRL7(0x%x)\n", __FUNCTION__, tmp, CRMU_IOMUX_CTRL7);
+	*(volatile unsigned int *)CRMU_IOMUX_CTRL7 = tmp;
+
+	/* SET RGMII IO CONFIG */
+    /* Get register base address */
+	tmp = *(volatile unsigned int *)CDRU_RGMII_IO_CONFIG;
+    //printf("%s read (0x%x) from CDRU_RGMII_IO_CONFIG(0x%x)\n", __FUNCTION__, tmp, CDRU_RGMII_IO_CONFIG);
+    tmp |= (7 << CDRU_RGMII_IO_CONFIG__IOMUX_RGMII_DRV_SEL_R);
+	//printf("%s write 0x%x to CDRU_RGMII_IO_CONFIG(0x%x)\n", __FUNCTION__, tmp, CDRU_RGMII_IO_CONFIG);
+	*(volatile unsigned int *)CDRU_RGMII_IO_CONFIG = tmp;
+}
+#endif
+
+int iproc_get_chipid(void)
+{
+	volatile u32 val;
+	val = reg32_read((volatile unsigned int *)ChipcommonA_ChipID);
+	return (val  & 0xFFFF);
+}
+int iproc_get_chiprev(void)
+{
+	volatile u32 val;
+	val = reg32_read((volatile unsigned int *)ChipcommonA_ChipID);
+	return ((val >> 16)  & 0xF);
+}
+
+int iproc_get_chipsku(void)
+{
+	volatile u32 val;
+	val = reg32_read((volatile unsigned int *)ChipcommonA_ChipID);
+	return ((val >> 20)  & 0xF);
+}
+
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_SABER2))
+void gmac_set_amac_mdio(int en)
+{
+	u32 tmp;
+	tmp = reg32_read((volatile unsigned int *)IPROC_WRAP_MISC_CONTROL);
 	//printf("%s read 0x%x from IPROC_WRAP_MISC_CONTROL(0x%x)\n", __FUNCTION__, tmp, IPROC_WRAP_MISC_CONTROL);
 	if (en) {
 		/* set bits 3&2 so AMAC can access the Serdes and Phy */
 #if defined(CONFIG_HELIX4)
 		tmp |= ((1<<IPROC_WRAP_MISC_CONTROL__QUAD_SERDES_MDIO_SEL)|(1<<IPROC_WRAP_MISC_CONTROL__QUAD_SERDES_CTRL_SEL)|
-#else
+#elif defined(CONFIG_KATANA2)
 		tmp |= ((1<<IPROC_WRAP_MISC_CONTROL__UNICORE_SERDES_MDIO_SEL)|(1<<IPROC_WRAP_MISC_CONTROL__UNICORE_SERDES_CTRL_SEL)|
-#endif /*defined(CONFIG_HELIX4)*/
+#elif defined(CONFIG_SABER2)
+    tmp |= (
+#endif
 				(1<<IPROC_WRAP_MISC_CONTROL__IPROC_MDIO_SEL));
 	} else {
 		/* clear bits 3&2 so CMIC can access the Serdes and Phy */
 #if defined(CONFIG_HELIX4)
 		tmp &= ~((1<<IPROC_WRAP_MISC_CONTROL__QUAD_SERDES_MDIO_SEL)|(1<<IPROC_WRAP_MISC_CONTROL__QUAD_SERDES_CTRL_SEL)|
-#else
+#elif defined(CONFIG_KATANA2)
 		tmp &= ~((1<<IPROC_WRAP_MISC_CONTROL__UNICORE_SERDES_MDIO_SEL)|(1<<IPROC_WRAP_MISC_CONTROL__UNICORE_SERDES_CTRL_SEL)|
+#elif defined(CONFIG_SABER2)
+    tmp &= ~(
 #endif /*defined(CONFIG_HELIX4)*/
 				(1<<IPROC_WRAP_MISC_CONTROL__IPROC_MDIO_SEL));
 	}
 	//printf("%s write 0x%x to IPROC_WRAP_MISC_CONTROL(0x%x)\n", __FUNCTION__, tmp, IPROC_WRAP_MISC_CONTROL);
-	*(volatile unsigned int *)IPROC_WRAP_MISC_CONTROL = tmp;
+	reg32_write((volatile uint32_t *)IPROC_WRAP_MISC_CONTROL, tmp);
 
 	//tmp = *(volatile unsigned int *)IPROC_WRAP_MISC_CONTROL;
 	//printf("%s read 0x%x from IPROC_WRAP_MISC_CONTROL(0x%x)\n", __FUNCTION__, tmp, IPROC_WRAP_MISC_CONTROL);
@@ -236,14 +336,14 @@ ethHw_Init(void)
 		case (ETHHW_MAC_2):
 			eth_data->regs = (gmacregs_t *)IPROC_GMAC2_REG_BASE;
 			break;
-#elif (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2))
+#elif (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_SABER2))
 		case (ETHHW_MAC_0):
 			eth_data->regs = (gmacregs_t *)IPROC_GMAC0_REG_BASE;
 			break;
 		case (ETHHW_MAC_1):
 			eth_data->regs = (gmacregs_t *)IPROC_GMAC1_REG_BASE;
 			break;
-#elif defined(CONFIG_HURRICANE2)
+#elif (defined(CONFIG_HURRICANE2) || defined(CONFIG_CYGNUS) || defined(CONFIG_GREYHOUND))
 		case (ETHHW_MAC_0):
 			eth_data->regs = (gmacregs_t *)IPROC_GMAC0_REG_BASE;
 			break;
@@ -254,6 +354,18 @@ ethHw_Init(void)
 
 	printf ("Using GMAC%d (0x%x)\n", eth_data->mac, (unsigned int)eth_data->regs);
 
+#ifdef CONFIG_IPROC_EMULATION
+	/* load options */
+	eth_data->loopback = false;
+    {
+        eth_data->enetaddr[0] = (unsigned char)0x0;
+        eth_data->enetaddr[1] = (unsigned char)0x1;
+        eth_data->enetaddr[2] = (unsigned char)0x2;
+        eth_data->enetaddr[3] = (unsigned char)0x3;
+        eth_data->enetaddr[4] = (unsigned char)0x4;
+        eth_data->enetaddr[5] = (unsigned char)0x5;
+    }
+#else
 	/* load options */
 	eth_data->loopback = false;
 
@@ -265,7 +377,7 @@ ethHw_Init(void)
 	} else {
 		ET_ERROR(("ERROR: could not get env ethaddr\n"));
 	}
-
+#endif
 	if (ethHw_dmaInit(eth_data)<0)
 		return -1;
 
@@ -303,6 +415,10 @@ ethHw_Exit(void)
 
 	/* allocate rx data buffer */
 	if (rxDataBuf) {
+#if 0	//defined(CONFIG_NORTHSTAR)
+		if(!(iproc_get_chipid() == 53010 && iproc_get_chiprev() < CHIP_REV_A2))
+			rxDataBuf -= 0x80000000;
+#endif
 		MFREE(0,(void*)rxDataBuf,0);
 		rxDataBuf = 0;
 	}
@@ -316,6 +432,10 @@ ethHw_Exit(void)
 
 	/* allocate tx data buffer */
 	if (txDataBuf) {
+#if 0	//defined(CONFIG_NORTHSTAR)
+		if(!(iproc_get_chipid() == 53010 && iproc_get_chiprev() < CHIP_REV_A2))
+			txDataBuf -= 0x80000000;
+#endif
 		MFREE(0,(void*)txDataBuf,0);
 		txDataBuf = 0;
 	}
@@ -382,18 +502,21 @@ ethHw_macEnableGet(int port, int *txp, int *rxp)
 
 	return ETHHW_RC_NONE;
 }
+
+#if (defined(CONFIG_NS_PLUS) || defined(CONFIG_GREYHOUND))
 void ethHw_writel(u32 val,u32 addr)
 {
 	debug("Write [0x%08x] = 0x%08x\n", (u32)addr, val);
-	*(volatile u32 *)(addr) = (volatile u32)val;
+	reg32_write((volatile uint32_t *)addr, val);
 }
 
 u32 ethHw_readl(u32 addr)
 {
-	volatile u32 val = *(volatile u32 *)(addr);
+	volatile u32 val = reg32_read((volatile uint32_t *)addr);
 	debug("Read  [0x%08x] = 0x%08x\n", (u32)addr, val);
 	return (u32)val;
 }
+#endif /* (defined(CONFIG_NS_PLUS) || defined(CONFIG_GREYHOUND)) */
 
 int
 ethHw_chipAttach(bcm_eth_t *eth_data)
@@ -403,8 +526,9 @@ ethHw_chipAttach(bcm_eth_t *eth_data)
 	int chipid;
 	char name[16];
 	char *strptr;
+#if (defined(CONFIG_NS_PLUS))
 	u32 GPIO_OUTENABLE =0x18000068;//GPIO OUT ENABLE
-
+#endif
 	ET_TRACE(("et%d: %s enter\n", eth_data->unit, __FUNCTION__));
 
 	BZERO_SM((char *)ch, sizeof(eth_data->bcmgmac));
@@ -412,6 +536,10 @@ ethHw_chipAttach(bcm_eth_t *eth_data)
 	/* get our phyaddr value */
 #if (defined(CONFIG_NORTHSTAR) || defined(CONFIG_NS_PLUS))
 	ch->phyaddr = PHY_ADDR;
+#elif (defined(CONFIG_CYGNUS))
+    ch->phyaddr = 0;
+#elif (defined(CONFIG_GREYHOUND))
+    ch->phyaddr = CONFIG_EXTERNAL_PHY_DEV_ID;
 #else
 	ch->phyaddr = CONFIG_GMAC_NUM+1;
 #endif
@@ -428,6 +556,16 @@ ethHw_chipAttach(bcm_eth_t *eth_data)
 		goto fail;
 	}
 
+#if defined(CONFIG_CYGNUS)
+	if (getenv ("swmode")) {
+		u32 swmode = getenv_ulong("swmode", 10, 0);
+		printf("et%d: %s: swmode = %d (Switch %s)\n", eth_data->unit, __FUNCTION__, swmode, swmode?"enabled":"bypassed");
+		if (swmode==0) {
+			switch_bypass_mode = 1;
+		}
+	}
+#endif
+
 	/* reset the gmac core */
 	chip_reset(eth_data);
 
@@ -442,7 +580,13 @@ ethHw_chipAttach(bcm_eth_t *eth_data)
 	/* reset phy: reset it once now */
 	chipid = iproc_get_chipid();
 	printf("et%d: %s: Chip ID: 0x%x; phyaddr: 0x%x\n", eth_data->unit, __FUNCTION__, chipid, eth_data->bcmgmac.phyaddr);
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2))
+
+#if defined(CONFIG_CYGNUS)
+    /* set switch bypass mode */	
+    gmac_set_amac_mdio(switch_bypass_mode);
+#endif
+
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_SABER2))
 	/* flip switch so AMAC can access serdes */
 	gmac_set_amac_mdio(1);
 
@@ -468,10 +612,14 @@ ethHw_chipAttach(bcm_eth_t *eth_data)
 	phy5221_init(eth_data, ch->phyaddr);
 	phy5221_enable_set(eth_data, ch->phyaddr, 1);
 #endif
+#if defined(CONFIG_GREYHOUND)
+    phy5481_init(eth_data, ch->phyaddr);
+#endif /* defined(CONFIG_GREYHOUND) */
+
 
 
 
-#if defined(CONFIG_NS_PLUS)
+#if (defined(CONFIG_NS_PLUS))
 #define GPIO_SFP0_TXDIS		26
 #define GPIO_SFP1_TXDIS		27
 	if ( robo_is_port_cfg(5, PORTCFG_SGMII)
@@ -617,24 +765,42 @@ ethHw_chipAttach(bcm_eth_t *eth_data)
 			ET_ERROR(("et%d: chipattach: robo_attach failed\n", eth_data->unit));
 			goto fail;
 		}
-		/* Enable the switch and set it to a known good state */
-		if (bcm_robo_enable_device(ch->robo)) {
-			ET_ERROR(("et%d: chipattach: robo_enable_device failed\n", eth_data->unit));
-			goto fail;
-		}
-		/* Configure the switch to do VLAN */
-		if (bcm_robo_config_vlan(ch->robo, eth_data->enetaddr)) {
-			ET_ERROR(("et%d: chipattach: robo_config_vlan failed\n", eth_data->unit));
-			goto fail;
+#if defined(CONFIG_CYGNUS)
+		/* enable the switch MDIO Direct Access mode so we can talk to the GPHYs */
+		bcm_robo_phy_access(ch->robo);
+#endif /* defined(CONFIG_CYGNUS) */
+		if (!switch_bypass_mode) {
+			/* Enable the switch and set it to a known good state */
+			if (bcm_robo_enable_device(ch->robo)) {
+				ET_ERROR(("et%d: chipattach: robo_enable_device failed\n", eth_data->unit));
+				goto fail;
+			}
+			/* Configure the switch to do VLAN */
+			if (bcm_robo_config_vlan(ch->robo, eth_data->enetaddr)) {
+				ET_ERROR(("et%d: chipattach: robo_config_vlan failed\n", eth_data->unit));
+				goto fail;
+			}
+			/* Enable switching/forwarding */
+			if (bcm_robo_enable_switch(ch->robo)) {
+				ET_ERROR(("et%d: chipattach: robo_enable_switch failed\n", eth_data->unit));
+				goto fail;
+			}
 		}
-		/* Enable switching/forwarding */
-		if (bcm_robo_enable_switch(ch->robo)) {
-			ET_ERROR(("et%d: chipattach: robo_enable_switch failed\n", eth_data->unit));
-			goto fail;
+	}
+#if defined(CONFIG_CYGNUS)
+	{
+		u32 lnswp = getenv_ulong("ethlaneswap", 10, 0);
+		printf("ethlaneswap = %d\n", lnswp);
+		if (lnswp) {
+			/* to get GPHYS to work need to perform lane swapping and polarity */
+			chip_phy_init(eth_data, 0, 0);		/* port 0 GPHY */
+			chip_phy_init(eth_data, 0, 1);		/* port 1 GPHY */
+			chip_phy_init(eth_data, 1, 0x10);	/* port 5 RGMII */
 		}
 	}
+#endif /* defined(CONFIG_CYGNUS) */
 
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_KATANA2))
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_HURRICANE2) || defined(CONFIG_KATANA2) || defined(CONFIG_CYGNUS) || defined(CONFIG_GREYHOUND) || defined(CONFIG_SABER2))
 	/* Check which port is connected and take PORT0 with priority */
 	if ( !ethHw_portLinkUp() ) {
 		//error("Ethernet external port not connected");
@@ -689,6 +855,10 @@ ethHw_dmaInit(bcm_eth_t *eth_data)
 		/* align buffer */
 		rxDescAlignedBuf = (rxDescBuf+0x10)&0xfffffff0;
 	}
+#if 0	//defined(CONFIG_NORTHSTAR)
+	if(!(iproc_get_chipid() == 53010 && iproc_get_chiprev() < CHIP_REV_A2))
+		rxDescAlignedBuf += 0x80000000; /* Move to ACP region */
+#endif
 	ET_TRACE(("RX Descriptor Buffer (aligned): 0x%x; length: 0x%x\n", rxDescAlignedBuf, RX_DESC_LEN));
 	//printf("RX Descriptor Buffer (aligned): 0x%x; length: 0x%x\n", rxDescAlignedBuf, RX_DESC_LEN);
 
@@ -701,6 +871,10 @@ ethHw_dmaInit(bcm_eth_t *eth_data)
 		ET_ERROR(("%s: Failed to allocate RX Data Buffer memory\n", __FUNCTION__));
 		return -1;
 	}
+#if 0	//defined(CONFIG_NORTHSTAR)
+	if(!(iproc_get_chipid() == 53010 && iproc_get_chiprev() < CHIP_REV_A2))
+		rxDataBuf += 0x80000000; /* Move to ACP region */
+#endif
 	ET_TRACE(("RX Data Buffer: 0x%x; length: 0x%x\n", rxDataBuf, buflen));
 	//printf("RX Data Buffer: 0x%x; length: 0x%x\n", rxDataBuf, buflen);
 
@@ -721,6 +895,10 @@ ethHw_dmaInit(bcm_eth_t *eth_data)
 		/* align buffer */
 		txDescAlignedBuf = (txDescBuf+0x10)&0xfffffff0;
 	}
+#if 0	//defined(CONFIG_NORTHSTAR)
+	if(!(iproc_get_chipid() == 53010 && iproc_get_chiprev() < CHIP_REV_A2))
+		txDescAlignedBuf += 0x80000000; /* Move to ACP region */
+#endif
 	ET_TRACE(("TX Descriptor Buffer (aligned): 0x%x; length: 0x%x\n", txDescAlignedBuf, TX_DESC_LEN));
 	//printf("TX Descriptor Buffer (aligned): 0x%x; length: 0x%x\n", txDescAlignedBuf, TX_DESC_LEN);
 
@@ -733,6 +911,10 @@ ethHw_dmaInit(bcm_eth_t *eth_data)
 		ET_ERROR(("%s: Failed to allocate TX Data Buffer memory\n", __FUNCTION__));
 		return -1;
 	}
+#if 0	//defined(CONFIG_NORTHSTAR)
+	if(!(iproc_get_chipid() == 53010 && iproc_get_chiprev() < CHIP_REV_A2))
+		txDataBuf += 0x80000000; /* Move to ACP region */
+#endif
 	ET_TRACE(("TX Data Buffer: 0x%x; length: 0x%x\n", txDataBuf, buflen));
 	//printf("TX Data Buffer: 0x%x; length: 0x%x\n", txDataBuf, buflen);
 
@@ -765,9 +947,9 @@ ethHw_dmaRxInit(bcm_eth_t *eth_data)
 		/* if last descr set endOfTable */
 		if (i==RX_BUF_NUM-1)
 			ctrl = D64_CTRL1_EOT;
-		descp->ctrl1 = ctrl;
-		descp->ctrl2 = RX_BUF_SIZE;
-		descp->addrlow = (uint32_t)bufp;
+		descp->ctrl1 = cpu_to_le32(ctrl);
+		descp->ctrl2 = cpu_to_le32(RX_BUF_SIZE);
+		descp->addrlow = cpu_to_le32((uint32_t)bufp);
 		descp->addrhigh = 0;
 		/* flush descriptor */
 		//gmac_cache_flush((u32)descp, sizeof(dma64dd_t));
@@ -811,9 +993,9 @@ ethHw_dmaTxInit(bcm_eth_t *eth_data)
 		/* if last descr set endOfTable */
 		if (i==TX_BUF_NUM-1)
 			ctrl = D64_CTRL1_EOT;
-		descp->ctrl1 = ctrl;
+		descp->ctrl1 = cpu_to_le32(ctrl);
 		descp->ctrl2 = 0;
-		descp->addrlow = (uint32_t)bufp;
+		descp->addrlow = cpu_to_le32((uint32_t)bufp);
 		descp->addrhigh = 0;
 		/* flush descriptor */
 		//gmac_cache_flush((u32)descp, sizeof(dma64dd_t));
@@ -846,7 +1028,7 @@ ethHw_dmaTx(size_t len, uint8_t * tx_buf)
 	uint32_t ctrl2;
 	uint32_t lastDscr = ((uint32_t)(TX_DESC(1)) & D64_XP_LD_MASK);
 	size_t buflen;
-
+	 
 	REG_DEBUG(1);
 	ET_TRACE(("et%d: %s enter\n", eth_data->unit, __FUNCTION__));
 
@@ -875,10 +1057,10 @@ ethHw_dmaTx(size_t len, uint8_t * tx_buf)
 	/* write the descriptor */
 	bufp = (uint8_t *) TX_BUF(txout);
 	descp = (dma64dd_t *) TX_DESC(txout);
-	descp->addrlow = (uint32_t)bufp;
+	descp->addrlow = cpu_to_le32((uint32_t)bufp);
 	descp->addrhigh = 0;
-	descp->ctrl1 = flags;
-	descp->ctrl2 = ctrl2;
+	descp->ctrl1 = cpu_to_le32(flags);
+	descp->ctrl2 = cpu_to_le32(ctrl2);
 
 	/* flush descriptor and buffer */
 	//gmac_cache_flush((u32)descp, sizeof(dma64dd_t));
@@ -893,6 +1075,26 @@ ethHw_dmaTx(size_t len, uint8_t * tx_buf)
 	di->txout = NEXTTXD(txout);
 	REG_DEBUG(0);
 
+#ifdef BCMINTERNAL
+#if 0 //defined(CONFIG_HELIX4)
+	{
+	bcmgmac_t *ch = &eth_data->bcmgmac;
+	serdes_disp_status(eth_data, ch->phyaddr);
+	phy5461_disp_status(eth_data, ch->phyaddr);
+	}
+#endif
+#endif /* BCMINTERNAL */
+#ifdef BCMINTERNAL
+#if defined(CONFIG_HURRICANE2)
+#if defined(CHK_ETH_ERRS)
+	{
+	bcmgmac_t *ch = &eth_data->bcmgmac;
+	phy5221_chk_err(eth_data, ch->phyaddr);
+	//phy5221_disp_status(eth_data, ch->phyaddr);
+	}
+#endif
+#endif
+#endif /* BCMINTERNAL */
 	return 0;
 }
 
@@ -1071,8 +1273,6 @@ ethHw_dmaRx(void)
 	//REG_DEBUG(1);
 	ET_TRACE(("et%d: %s enter\n", eth_data->unit, __FUNCTION__));
 
-	udelay(50);
-
 #if defined(CHK_ETH_ERRS)
 	check_errs(eth_data->regs);
 #endif
@@ -1093,6 +1293,7 @@ ethHw_dmaRx(void)
 			offset = (control&D64_RC_RO_MASK)>>D64_RC_RO_SHIFT;
 			rcvlen = ltoh16(*(uint16 *)bufp);
 
+			rcvlen = le16_to_cpu(rcvlen);
 			if ((rcvlen == 0) || (rcvlen > RX_BUF_SIZE)) {
 				ET_ERROR(("Wrong RX packet size 0x%x drop it\n", rcvlen));
 				/* refill buffre & descriptor */
@@ -1123,8 +1324,6 @@ ethHw_dmaRx(void)
             NetReceive(buf, rcvlen);
 #endif
 
-			udelay(50);
-
 			/* refill buffre & descriptor */
 			dma_rxrefill(ch->di[0], index);
 			rxdata = true;
@@ -1285,6 +1484,29 @@ ethHw_miiphy_read(unsigned int const phyaddr,
 
 	phy5221_rd_reg(&g_eth_data, addr, bank, reg, &tmp16);
 	printf("%s phyaddr(0x%x) bank(0x%x) reg(0x%x) data(0x%x)\n", __FUNCTION__, addr, bank, reg, tmp16);
+#elif defined(CONFIG_CYGNUS)
+    uint32 addr, ext, bank;
+    
+    printf("%s (addr&f):phyaddr (addr&f0):ext (addr&1f00):bank \n", __FUNCTION__);
+	printf("  ext:0(serdes)/1(ext PHY)\n");
+	
+	addr = phyaddr&0xf;
+	ext = phyaddr&0xf0;
+	bank = (phyaddr&0x1f00)>>8;
+
+	tmp16 = chip_phy_rd(&g_eth_data, ext, addr, reg);
+	printf("%s phyaddr(0x%x) ext(0x%x) bank(0x%x)  reg(0x%x) data(0x%x)\n",
+			 __FUNCTION__, addr, ext, bank,  reg, tmp16);
+#elif defined(CONFIG_GREYHOUND)
+    uint32 addr, bank, flags;
+
+    printf("%s (addr&f):phyaddr (addr&1f00):bank\n", __FUNCTION__);
+    addr = phyaddr&0x1f;
+    bank = (phyaddr&0x1f00)>>8;
+    flags = (phyaddr&0x10000)?SOC_PHY_REG_1000X:0;
+
+    phy5481_rd_reg(&g_eth_data, addr, flags, bank, reg, &tmp16);
+    printf("%s phyaddr(0x%x) bank(0x%x) reg(0x%x) data(0x%x)\n", __FUNCTION__, addr, bank, reg, tmp16);
 #endif
 	*value = tmp16;
 	return 0;
@@ -1327,6 +1549,30 @@ ethHw_miiphy_write(unsigned int const phyaddr,
 
 	printf("%s phyaddr(0x%x) bank(0x%x) reg(0x%x) data(0x%x)\n", __FUNCTION__, addr, bank, reg, *value);
 	phy5221_wr_reg(&g_eth_data, addr, bank, reg, &tmp16);
+#elif defined(CONFIG_CYGNUS)
+    uint32 addr, ext, bank;
+
+	printf("%s (addr&f):phyaddr (addr&f0):ext (addr&1f00):bank (addr&10000):flags\n", __FUNCTION__);
+	//printf("%s phyaddr(0x%x) reg(0x%x) *value(0x%x)\n", __FUNCTION__, phyaddr, reg, *value);
+	addr = phyaddr&0xf;
+	ext = phyaddr&0xf0;
+	bank = (phyaddr&0x1f00)>>8;
+
+	printf("%s phyaddr(0x%x) ext(0x%x) bank(0x%x) reg(0x%x) data(0x%x)\n",
+			 __FUNCTION__, addr, ext, bank, reg, *value);
+
+	chip_phy_wr(&g_eth_data, ext, addr, reg, tmp16);
+#elif defined(CONFIG_GREYHOUND)
+    uint32 addr, bank, flags;
+
+    printf("%s (addr&f):phyaddr (addr&1f00):bank\n", __FUNCTION__);
+    addr = phyaddr&0x1f;
+    bank = (phyaddr&0x1f00)>>8;
+    flags = (phyaddr&0x10000)?SOC_PHY_REG_1000X:0;
+
+    printf("%s phyaddr(0x%x) bank(0x%x) reg(0x%x) data(0x%x)\n", __FUNCTION__, addr, bank, reg, *value);
+    phy5481_wr_reg(&g_eth_data, addr, flags, bank, reg, &tmp16);
+
 #endif
 	return 0;
 }
@@ -1335,17 +1581,25 @@ int
 ethHw_portLinkUp(void)
 {
 	int link=0;
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_HURRICANE2))
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_HURRICANE2) || defined(CONFIG_CYGNUS) || defined(CONFIG_GREYHOUND))
 	bcm_eth_t *eth_data = &g_eth_data;
 	bcmgmac_t *ch = &eth_data->bcmgmac;
-#endif /* (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_HURRICANE2)) */
+#endif /* (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_HURRICANE2)  || defined(CONFIG_GREYHOUND)) */
 
 #if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2))
 	phy5461_link_get(eth_data, ch->phyaddr, &link);
 #elif defined(CONFIG_HURRICANE2)
 	phy5221_link_get(eth_data, ch->phyaddr, &link);
+#elif defined(CONFIG_CYGNUS)
+	chip_phy_link_get(eth_data, ch->phyaddr, &link);
+#elif defined(CONFIG_GREYHOUND)
+	phy5481_link_get(eth_data, ch->phyaddr, &link);
 #endif /* (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2)) */
 	/* printf("%s link: %d\n", __FUNCTION__, link); */
+
+#ifdef CONFIG_IPROC_EMULATION
+    link = 1;
+#endif
 	return link;
 }
 
@@ -1355,16 +1609,26 @@ ethHw_checkPortSpeed(void)
 {
 	int speed=0, duplex=0, speedcfg;
 	bcm_eth_t *eth_data = &g_eth_data;
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_HURRICANE2))
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_HURRICANE2) || defined(CONFIG_CYGNUS) || defined(CONFIG_GREYHOUND))
 	bcmgmac_t *ch = &eth_data->bcmgmac;
-#endif /* (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_HURRICANE2)) */
+#endif /* (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_HURRICANE2) || defined(CONFIG_GREYHOUND)) */
 	static int orgspd, orgdpx;
 
 #if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2))
 	phy5461_speed_get(eth_data, ch->phyaddr, &speed, &duplex);
 #elif defined(CONFIG_HURRICANE2)
 	phy5221_speed_get(eth_data, ch->phyaddr, &speed, &duplex);
+#elif defined(CONFIG_CYGNUS)
+	chip_phy_speed_get(eth_data, ch->phyaddr, &speed, &duplex);
+#elif defined(CONFIG_GREYHOUND)
+	phy5481_speed_get(eth_data, ch->phyaddr, &speed, &duplex);
 #endif /* (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2)) */
+
+#ifdef CONFIG_IPROC_EMULATION
+    speed = 1000;
+    duplex = 1;
+#endif
+
 	if (speed) {
 		if (speed == 1000) {
 			if (duplex)
@@ -1667,6 +1931,7 @@ dma_txreset(dma_info_t *di)
 	if (di->ntxd == 0)
 		return TRUE;
 
+	/* address PR8249/PR7577 issue */
 	/* suspend tx DMA first */
 	reg32_write(&di->d64txregs->control, D64_XC_SE);
 	SPINWAIT(((status = (reg32_read(&di->d64txregs->status0) & D64_XS0_XS_MASK)) !=
@@ -1675,6 +1940,7 @@ dma_txreset(dma_info_t *di)
 	         (status != D64_XS0_XS_STOPPED),
 	         10000);
 
+	/* PR2414 WAR: DMA engines are not disabled until transfer finishes */
 	reg32_write(&di->d64txregs->control, 0);
 	SPINWAIT(((status = (reg32_read(&di->d64txregs->status0) & D64_XS0_XS_MASK)) !=
 	          D64_XS0_XS_DISABLED),
@@ -1697,6 +1963,7 @@ dma_rxreset(dma_info_t *di)
 	if (di->nrxd == 0)
 		return TRUE;
 
+	/* PR2414 WAR: DMA engines are not disabled until transfer finishes */
 	reg32_write(&di->d64rxregs->control, 0);
 	SPINWAIT(((status = (reg32_read(&di->d64rxregs->status0) & D64_RS0_RS_MASK)) !=
 	          D64_RS0_RS_DISABLED), 10000);
@@ -1724,7 +1991,7 @@ dma_txload(int index, size_t len, uint8_t * tx_buf)
 	/* copy buffer */
 	memcpy((uint8_t *) TX_BUF(index), tx_buf, len);
 
-#if (defined(CONFIG_NORTHSTAR) || defined(CONFIG_NS_PLUS))
+#if (defined(CONFIG_NORTHSTAR) || defined(CONFIG_NS_PLUS) || defined(CONFIG_GREYHOUND) || defined(CONFIG_SABER2))
 	/* The Ethernet packet has to be >= 64 bytes required by switch 
 	* padding it with zeros
 	*/
@@ -1821,8 +2088,8 @@ dma_rxrefill(dma_info_t *di, int index)
 	descp = (dma64dd_t *)RX_DESC(index);
 
 	/* update descriptor that is being added back on ring */
-	descp->ctrl2 = RX_BUF_SIZE;
-	descp->addrlow = (uint32_t)bufp;
+	descp->ctrl2 = cpu_to_le32(RX_BUF_SIZE);
+	descp->addrlow = cpu_to_le32((uint32_t)bufp);
 	descp->addrhigh = 0;
 	/* flush descriptor */
 	//gmac_cache_flush((u32)descp, sizeof(dma64dd_t));
@@ -1867,16 +2134,62 @@ gmac_core_reset(void)
 	//printf("%s write 0x%x to AMAC_IDM1_IO_CONTROL_DIRECT\n", __FUNCTION__, tmp);
 	reg32_write((uint32_t*)(AMAC_IDM1_IO_CONTROL_DIRECT),tmp);
 #endif /*(defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2))*/
-#if defined(CONFIG_HURRICANE2)
+#if (defined(CONFIG_HURRICANE2) || defined(CONFIG_GREYHOUND))
 	uint32 tmp;
 	/* write 0 to core reset control reg */
 	/* write command config reg */
 	reg32_write((uint32_t*)(AMAC_IDM0_IDM_RESET_CONTROL),0);
 	tmp = reg32_read((uint32_t*)(AMAC_IDM0_IO_CONTROL_DIRECT));
+	//printf("%s read 0x%x from AMAC_IDM1_IO_CONTROL_DIRECT\n", __FUNCTION__, tmp);
 	tmp &= ~(1<<AMAC_IDM0_IO_CONTROL_DIRECT__CLK_250_SEL);
 	tmp |= (1<<AMAC_IDM0_IO_CONTROL_DIRECT__DIRECT_GMII_MODE);
 	tmp |= (1<<AMAC_IDM0_IO_CONTROL_DIRECT__DEST_SYNC_MODE_EN);
 	reg32_write((uint32_t*)(AMAC_IDM0_IO_CONTROL_DIRECT),tmp);
+	//printf("%s write 0x%x to AMAC_IDM1_IO_CONTROL_DIRECT\n", __FUNCTION__, tmp);
+#endif
+#if defined(CONFIG_CYGNUS)
+	uint32 tmp;
+	/* write 0 to core reset control reg */
+	/* write command config reg */
+	reg32_write((uint32_t*)(AMAC_IDM0_IDM_RESET_CONTROL),0);
+	tmp = reg32_read((uint32_t*)(AMAC_IDM0_IO_CONTROL_DIRECT));
+	//printf("%s read 0x%x from AMAC_IDM1_IO_CONTROL_DIRECT\n", __FUNCTION__, tmp);
+	tmp &= ~(1<<AMAC_IDM0_IO_CONTROL_DIRECT__CLK_250_SEL);
+	tmp |= (1<<AMAC_IDM0_IO_CONTROL_DIRECT__DIRECT_GMII_MODE);
+	 /* to get tx working */
+	tmp &= ~(1<<AMAC_IDM0_IO_CONTROL_DIRECT__DEST_SYNC_MODE_EN);
+	reg32_write((uint32_t*)(AMAC_IDM0_IO_CONTROL_DIRECT),tmp);
+	//printf("%s write 0x%x to AMAC_IDM1_IO_CONTROL_DIRECT\n", __FUNCTION__, tmp);
+#endif
+#if  defined(CONFIG_SABER2)
+
+	uint32 tmp;
+	/* write 0 to core reset control reg */
+	/* write command config reg */
+	//tmp = reg32_read((uint32_t*)(AMAC_IDM0_IDM_RESET_CONTROL));
+	//printf("%s read 0x%x from AMAC_IDM0_IDM_RESET_CONTROL\n", __FUNCTION__, tmp);
+	//printf("%s write 0 to AMAC_IDM0_IDM_RESET_CONTROL\n", __FUNCTION__);
+	reg32_write((uint32_t*)(AMAC_IDM0_IDM_RESET_CONTROL),0);
+	//tmp = reg32_read((uint32_t*)(AMAC_IDM1_IDM_RESET_CONTROL));
+	//printf("%s read 0x%x from AMAC_IDM1_IDM_RESET_CONTROL\n", __FUNCTION__, tmp);
+	//printf("%s write 0 to AMAC_IDM1_IDM_RESET_CONTROL\n", __FUNCTION__);
+	reg32_write((uint32_t*)(AMAC_IDM1_IDM_RESET_CONTROL),0);
+	tmp = reg32_read((uint32_t*)(AMAC_IDM0_IO_CONTROL_DIRECT));
+	//printf("%s read 0x%x from AMAC_IDM0_IO_CONTROL_DIRECT\n", __FUNCTION__, tmp);
+	tmp &= ~(1<<AMAC_IDM0_IO_CONTROL_DIRECT__CLK_250_SEL);
+    //tmp &= ~(1<<2);
+	tmp |= (1<<AMAC_IDM0_IO_CONTROL_DIRECT__DIRECT_GMII_MODE);
+	tmp |= (1<<AMAC_IDM0_IO_CONTROL_DIRECT__DEST_SYNC_MODE_EN);
+	//printf("%s write 0x%x to AMAC_IDM0_IO_CONTROL_DIRECT\n", __FUNCTION__, tmp);
+	reg32_write((uint32_t*)(AMAC_IDM0_IO_CONTROL_DIRECT),tmp);
+	tmp = reg32_read((uint32_t*)(AMAC_IDM1_IO_CONTROL_DIRECT));
+	//printf("%s read 0x%x from AMAC_IDM1_IO_CONTROL_DIRECT\n", __FUNCTION__, tmp);
+	tmp &= ~(1<<AMAC_IDM1_IO_CONTROL_DIRECT__CLK_250_SEL);
+    //tmp &= ~(1<<2);
+	tmp |= (1<<AMAC_IDM1_IO_CONTROL_DIRECT__DIRECT_GMII_MODE);
+	tmp |= (1<<AMAC_IDM1_IO_CONTROL_DIRECT__DEST_SYNC_MODE_EN);
+	//printf("%s write 0x%x to AMAC_IDM1_IO_CONTROL_DIRECT\n", __FUNCTION__, tmp);
+	reg32_write((uint32_t*)(AMAC_IDM1_IO_CONTROL_DIRECT),tmp);
 #endif
 }
 
@@ -1992,6 +2305,9 @@ gmac_speed(bcm_eth_t *eth_data, uint32_t speed)
 	gmacregs_t *regs = eth_data->regs;
 	uint32_t cmdcfg, ocmdcfg;
 	uint32_t hd_ena = 0;
+#if defined(CONFIG_GREYHOUND)
+    uint32_t sdctl;
+#endif /* CONFIG_GREYHOUND */
 
 	ET_TRACE(("%s enter\n", __FUNCTION__));
 
@@ -2036,6 +2352,9 @@ gmac_speed(bcm_eth_t *eth_data, uint32_t speed)
 	cmdcfg |= ((speed << CC_ES_SHIFT) | hd_ena);
 #if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2))
 	cmdcfg |= CC_AE;
+#elif (defined(CONFIG_CYGNUS))
+	if (switch_bypass_mode)
+		cmdcfg |= CC_AE;
 #endif
 
 	if (cmdcfg!=ocmdcfg) {
@@ -2047,6 +2366,23 @@ gmac_speed(bcm_eth_t *eth_data, uint32_t speed)
 		gmac_clear_reset(eth_data);
 	}
 
+#if defined(CONFIG_GREYHOUND)
+    sdctl = reg32_read(&regs->serdes_ctl);
+    sdctl &= ~(SC_FORCE_SPD_STRAP_MASK);
+    switch (speed) {
+        case 2:
+            sdctl |= SC_FORCE_SPD_1G_VAL;
+            break;
+        case 1:
+            sdctl |= SC_FORCE_SPD_100M_VAL;
+            break;
+        default:
+            break;
+    }
+	reg32_write(&regs->serdes_ctl, sdctl);
+
+    udelay(1000);
+#endif /* CONFIG_GREYHOUND */
 	return (SUCCESS);
 }
 
@@ -2149,10 +2485,137 @@ gmac_enable(bcm_eth_t *eth_data, bool en)
 }
 
 
-#if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2))
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2) || defined(CONFIG_SABER2))
 static void
 gmac_serdes_init(bcm_eth_t *eth_data)
 {
+#if defined(CONFIG_SABER2)	
+	/* config SERDES as SGMII 1G */
+  uint16_t data;
+  bcmgmac_t *ch = &eth_data->bcmgmac;
+  uint phyaddr = ch->phyaddr;
+  
+  /* SET_PORT_MODE */
+  data = serdes_rd_reg(eth_data, phyaddr, 0x833c);
+  serdes_wr_reg(eth_data, phyaddr, 0x833c, (data & !0x0040) | 0x0000);
+  
+  data = serdes_rd_reg(eth_data, phyaddr, 0x8440);
+  serdes_wr_reg(eth_data, phyaddr, 0x8440, (data & !0x0001) | 0x0001);
+  
+  data = serdes_rd_reg(eth_data, phyaddr, 0x8000);
+  serdes_wr_reg(eth_data, phyaddr, 0x8000, (data & !0x0f00) | 0x0600);
+  
+  data = serdes_rd_reg(eth_data, phyaddr, 0x8308);
+  serdes_wr_reg(eth_data, phyaddr, 0x8308, (data & !0x1f00) | 0x1000);
+  
+  data = serdes_rd_reg(eth_data, phyaddr, 0x8308);
+  serdes_wr_reg(eth_data, phyaddr, 0x8308, (data & !0xe000) | 0x6000);
+  
+  data = serdes_rd_reg(eth_data, phyaddr, 0x8308);
+  serdes_wr_reg(eth_data, phyaddr, 0x8308, (data & !0x000f) | 0x0000);
+  
+  data = serdes_rd_reg(eth_data, phyaddr, 0x833c);
+  serdes_wr_reg(eth_data, phyaddr, 0x833c, (data & !0x0080) | 0x0000);
+  
+  data = serdes_rd_reg(eth_data, phyaddr, 0x0000);
+  serdes_wr_reg(eth_data, phyaddr, 0x0000, (data & !0x2040) | 0x0040);
+  
+  /* disable PLL */
+  data = serdes_rd_reg(eth_data, phyaddr, 0x8000);
+  serdes_wr_reg(eth_data, phyaddr, 0x8000, (data & !0x2000) | 0x0000);
+  
+  /* turn off RX sequencer */
+  data = serdes_rd_reg(eth_data, phyaddr, 0x821e);
+  serdes_wr_reg(eth_data, phyaddr, 0x821e, (data & !0x8000) | 0x8000);
+  
+  /* turn off clause 72 */
+  data = serdes_rd_reg(eth_data, phyaddr, 0x08000096);
+  serdes_wr_reg(eth_data, phyaddr, 0x08000096, (data & !0x0002) | 0x0000);
+  
+  data = serdes_rd_reg(eth_data, phyaddr, 0x82e3);
+  serdes_wr_reg(eth_data, phyaddr, 0x82e3, (data & !0xc000) | 0x0000);
+  
+  /* disable AN on all lanes */
+  data = serdes_rd_reg(eth_data, phyaddr, 0x0000);
+  serdes_wr_reg(eth_data, phyaddr, 0x0000, (data & !0x1000) | 0x0000);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x38000000);
+	serdes_wr_reg(eth_data, phyaddr, 0x38000000, (data & !0x1000) | 0x0000);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x8372);
+  serdes_wr_reg(eth_data, phyaddr, 0x8372, (data & !0xc000) | 0x0000);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x8350);
+  serdes_wr_reg(eth_data, phyaddr, 0x8350, (data & !0x0007) | 0x0000);
+  
+  /* disable parallel detect on all lanes */
+	data = serdes_rd_reg(eth_data, phyaddr, 0x8300);
+  serdes_wr_reg(eth_data, phyaddr, 0x8300, (data & !0x0011) | 0x0001);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x8300);
+  serdes_wr_reg(eth_data, phyaddr, 0x8300, (data & !0x0010) | 0x0000);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x8301);
+  serdes_wr_reg(eth_data, phyaddr, 0x8301, (data & !0x0043) | 0x0042);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x8131);
+  serdes_wr_reg(eth_data, phyaddr, 0x8131, (data & !0x0001) | 0x0000);
+  
+  /* disable 100FX on all lanes */
+	data = serdes_rd_reg(eth_data, phyaddr, 0x8400);
+  serdes_wr_reg(eth_data, phyaddr, 0x8400, (data & !0x0001) | 0x0000);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x8402);
+  serdes_wr_reg(eth_data, phyaddr, 0x8402, (data & !0x0080) | 0x0080);
+  
+  /* set XAUI speed */
+	data = serdes_rd_reg(eth_data, phyaddr, 0x8309);
+  serdes_wr_reg(eth_data, phyaddr, 0x8309, (data & !0x0020) | 0x0000);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x8308);
+  serdes_wr_reg(eth_data, phyaddr, 0x8308, (data & !0x001f) | 0x0000);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x8150);
+  serdes_wr_reg(eth_data, phyaddr, 0x8150, (data & !0x0003) | 0x0003);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x833e);
+  serdes_wr_reg(eth_data, phyaddr, 0x833e, (data & !0xc000) | 0xc000);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x833c);
+  serdes_wr_reg(eth_data, phyaddr, 0x833c, (data & !0x0080) | 0x0000);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x834a);
+  serdes_wr_reg(eth_data, phyaddr, 0x834a, (data & !0x000f) | 0x0003);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x800e);
+  serdes_wr_reg(eth_data, phyaddr, 0x800e, (data & !0x0001) | 0xfffe);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x0000);
+  serdes_wr_reg(eth_data, phyaddr, 0x0000, (data & !0x2040) | 0x0040);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x8015);
+  serdes_wr_reg(eth_data, phyaddr, 0x8015, (data & !0x00ff) | 0x00ff);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x8360);
+  serdes_wr_reg(eth_data, phyaddr, 0x8360, (data & !0x0040) | 0x0040);
+  
+	data = serdes_rd_reg(eth_data, phyaddr, 0x8360);
+  serdes_wr_reg(eth_data, phyaddr, 0x8360, (data & !0x0800) | 0x0800);
+  
+  /* enable PLL sequencer */
+	data = serdes_rd_reg(eth_data, phyaddr, 0x8000);
+  serdes_wr_reg(eth_data, phyaddr, 0x8000, (data & !0x2000) | 0x2000);
+  
+  /* enable RX sequencer */
+	data = serdes_rd_reg(eth_data, phyaddr, 0x821e);
+  serdes_wr_reg(eth_data, phyaddr, 0x821e, (data & !0x8000) | 0x0000);
+  
+  /* CARRIER_EXTENSION_DISABLED */
+	data = serdes_rd_reg(eth_data, phyaddr, 0x8301);
+  serdes_wr_reg(eth_data, phyaddr, 0x8301, (data & !0x0080) | 0x0080);
+  
+#else
+  
 	/* bring serdes out of reset */
 	gmacregs_t *regs =	eth_data->regs;
 	uint32_t sdctl, sdstat0, sdstat1;
@@ -2161,11 +2624,18 @@ gmac_serdes_init(bcm_eth_t *eth_data)
 	//printf("et%d: %s enter\n", eth_data->unit, __FUNCTION__);
 
 	sdctl = reg32_read(&regs->serdes_ctl);
-	//printf("et%d: %s read sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
+	printf("et%d: %s read sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
 	sdstat0 = reg32_read(&regs->serdes_status0);
 	sdstat1 = reg32_read(&regs->serdes_status1);
-	//printf("et%d: %s read sdstat0(0x%x); sdstat1(0x%x)\n", eth_data->unit, __FUNCTION__, sdstat0, sdstat1);
+	printf("et%d: %s() serdes_status0: 0x%x; serdes_status1: 0x%x\n", eth_data->unit, __FUNCTION__, sdstat0, sdstat1);
 
+    /* Check is PLL already brought up */
+	if (sdstat0 & SS0_TXPLL_LOCK)
+	{
+		printf("et%d: %s() PLL ready brought up exit\n", eth_data->unit, __FUNCTION__);
+		return;
+	}
+  
     /*
      * Bring up both digital and analog clocks
      *
@@ -2174,59 +2644,322 @@ gmac_serdes_init(bcm_eth_t *eth_data)
      */
 
 	sdctl = 0;
+#if defined(CONFIG_HELIX4)
+    sdctl |= (SC_TX1G_FIFO_RST_VAL|SC_FORCE_SPD_STRAP_VAL|SC_REFSEL_VAL|SC_REF_TERM_SEL_MASK); 
+#elif defined(CONFIG_CYGNUS)
 	sdctl |= (SC_TX1G_FIFO_RST_VAL|SC_FORCE_SPD_STRAP_VAL|SC_REFSEL_VAL);
-	//printf("et%d: %s write sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
+#else
+	sdctl |= (SC_TX1G_FIFO_RST_VAL|SC_FORCE_SPD_STRAP_VAL|SC_REF_TERM_SEL_MASK);
+#endif /* (defined(CONFIG_HELIX4) || defined(CONFIG_CYGNUS)) */
+
+	printf("et%d: %s write sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
+
 	reg32_write(&regs->serdes_ctl, sdctl);
 
 	udelay(1000);
 
 	sdctl = reg32_read(&regs->serdes_ctl);
-	//printf("et%d: %s read sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
+	printf("et%d: %s read sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
 	sdctl |= (SC_IDDQ_MASK|SC_PWR_DOWN_MASK);
-	//printf("et%d: %s write sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
+	printf("et%d: %s write sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
 	reg32_write(&regs->serdes_ctl, sdctl);
 
 	sdctl = reg32_read(&regs->serdes_ctl);
-	//printf("et%d: %s read sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
+	printf("et%d: %s read sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
 	sdctl &= ~(SC_IDDQ_MASK|SC_PWR_DOWN_MASK);
-	//printf("et%d: %s write sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
+	printf("et%d: %s write sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
 	reg32_write(&regs->serdes_ctl, sdctl);
 
     /* Bring hardware out of reset */
 	sdctl = reg32_read(&regs->serdes_ctl);
-	//printf("et%d: %s read sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
+	printf("et%d: %s read sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
 	sdctl |= (SC_RSTB_HW_MASK);
-	//printf("et%d: %s write sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
+	printf("et%d: %s write sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
 	reg32_write(&regs->serdes_ctl, sdctl);
 
     /* Bring MDIOREGS out of reset */
 	sdctl = reg32_read(&regs->serdes_ctl);
-	//printf("et%d: %s read sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
+	printf("et%d: %s read sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
 	sdctl |= (SC_RSTB_MDIOREGS_MASK);
-	//printf("et%d: %s write sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
+	printf("et%d: %s write sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
 	reg32_write(&regs->serdes_ctl, sdctl);
 
 	udelay(1000);
 
     /* Bring PLL out of reset */
 	sdctl = reg32_read(&regs->serdes_ctl);
-	//printf("et%d: %s read sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
+	printf("et%d: %s read sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
 	sdctl |= (SC_RSTB_PLL_MASK);
-	//printf("et%d: %s write sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
+	printf("et%d: %s write sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
 	reg32_write(&regs->serdes_ctl, sdctl);
 
 	udelay(1000);
 
 	sdctl = reg32_read(&regs->serdes_ctl);
-	//printf("et%d: %s read sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
+	printf("et%d: %s read sdctl(0x%x)\n", eth_data->unit, __FUNCTION__, sdctl);
 	sdstat0 = reg32_read(&regs->serdes_status0);
 	sdstat1 = reg32_read(&regs->serdes_status1);
-	//printf("et%d: %s read sdstat0(0x%x); sdstat1(0x%x)\n", eth_data->unit, __FUNCTION__, sdstat0, sdstat1);
+	printf("et%d: %s read sdstat0(0x%x); sdstat1(0x%x)\n", eth_data->unit, __FUNCTION__, sdstat0, sdstat1);
 
+#endif
 	return;
 }
+#endif /*(defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2))*/
+
+#if (defined(CONFIG_CYGNUS))
+#define ChipcommonB_MII_Management_Control       ChipcommonG_MII_Management_Control    
+#define ChipcommonB_MII_Management_Command_Data  ChipcommonG_MII_Management_Command_Data
+
+#define ChipcommonB_MII_Management_Control__BSY        ChipcommonG_MII_Management_Control__BSY
+#define ChipcommonB_MII_Management_Control__EXT        ChipcommonG_MII_Management_Control__EXT
+#define ChipcommonB_MII_Management_Command_Data__SB_R  ChipcommonG_MII_Management_Command_Data__SB_R
+#define ChipcommonB_MII_Management_Command_Data__OP_R  ChipcommonG_MII_Management_Command_Data__OP_R
+#define ChipcommonB_MII_Management_Command_Data__PA_R  ChipcommonG_MII_Management_Command_Data__PA_R
+#define ChipcommonB_MII_Management_Command_Data__TA_R  ChipcommonG_MII_Management_Command_Data__TA_R
+#define ChipcommonB_MII_Management_Command_Data__RA_R  ChipcommonG_MII_Management_Command_Data__RA_R
+#define ChipcommonB_MII_Management_Control__PRE        ChipcommonG_MII_Management_Control__PRE
 #endif
 
+#if defined(CONFIG_GREYHOUND)
+/* Implement the PHY read/write via CMICD */
+#define CMICD_BASE_ADDRESS		0x3200000
+#define CMC2_OFFSET			    0x33000
+
+#define MIIM_PARAM_REG 			CMIC_CMC2_MIIM_PARAM_BASE
+#define MIIM_PARAM__MIIM_CYCLE_SHIFT	CMIC_CMC2_MIIM_PARAM__MIIM_CYCLE_R
+#define MIIM_PARAM__MIIM_CYCLE_MASK	((1 << CMIC_CMC2_MIIM_PARAM__MIIM_CYCLE_WIDTH) - 1)
+#define MIIM_PARAM__INTERNAL_SEL_SHIFT	CMIC_CMC2_MIIM_PARAM__INTERNAL_SEL
+#define MIIM_PARAM__INTERNAL_SEL_MASK	((1 << CMIC_CMC2_MIIM_PARAM__INTERNAL_SEL_WIDTH) - 1)
+#define MIIM_PARAM__BUS_ID_SHIFT	CMIC_CMC2_MIIM_PARAM__BUS_ID_R
+#define MIIM_PARAM__BUS_ID_MASK		((1 << CMIC_CMC2_MIIM_PARAM__BUS_ID_WIDTH) - 1)
+#define MIIM_PARAM__C45_SEL_SHIFT	CMIC_CMC2_MIIM_PARAM__C45_SEL
+#define MIIM_PARAM__C45_SEL_MASK	((1 << CMIC_CMC2_MIIM_PARAM__C45_SEL_WIDTH) - 1)
+#define MIIM_PARAM__PHY_ID_SHIFT	CMIC_CMC2_MIIM_PARAM__PHY_ID_R
+#define MIIM_PARAM__PHY_ID_MASK		((1 << CMIC_CMC2_MIIM_PARAM__PHY_ID_WIDTH) - 1)
+#define MIIM_PARAM__PHY_DATA_SHIFT 	CMIC_CMC2_MIIM_PARAM__PHY_DATA_R
+#define MIIM_PARAM__PHY_DATA_MASK	((1 << CMIC_CMC2_MIIM_PARAM__PHY_DATA_WIDTH) - 1)
+
+#define MIIM_READ_DATA_REG 		CMIC_CMC2_MIIM_READ_DATA_BASE
+#define MIIM_READ_DATA__DATA_SHIFT	CMIC_CMC2_MIIM_READ_DATA__DATA_R
+#define MIIM_READ_DATA__DATA_MASK	((1 << CMIC_CMC2_MIIM_READ_DATA__DATA_WIDTH) - 1)
+
+#define MIIM_ADDRESS_REG 			CMIC_CMC2_MIIM_ADDRESS_BASE
+#define MIIM_ADDRESS__CLAUSE_45_DTYPE_SHIFT	CMIC_CMC2_MIIM_ADDRESS__CLAUSE_45_DTYPE_R
+#define MIIM_ADDRESS__CLAUSE_45_DTYPE_MASK	((1 << CMIC_CMC2_MIIM_ADDRESS__CLAUSE_45_DTYPE_WIDTH) - 1)
+#define MIIM_ADDRESS__CLAUSE_45_REGADR_SHIFT	CMIC_CMC2_MIIM_ADDRESS__CLAUSE_45_REGADR_R
+#define MIIM_ADDRESS__CLAUSE_45_REGADR_MASK	((1 << CMIC_CMC2_MIIM_ADDRESS__CLAUSE_45_REGADR_WIDTH) - 1)
+#define MIIM_ADDRESS__CLAUSE_22_REGADR_SHIFT	CMIC_CMC2_MIIM_ADDRESS__CLAUSE_22_REGADR_R
+#define MIIM_ADDRESS__CLAUSE_22_REGADR_MASK	((1 << CMIC_CMC2_MIIM_ADDRESS__CLAUSE_22_REGADR_WIDTH) - 1)
+
+#define MIIM_CTRL_REG 			CMIC_CMC2_MIIM_CTRL_BASE
+#define MIIM_CTRL__MIIM_RD_START_SHIFT	CMIC_CMC2_MIIM_CTRL__MIIM_RD_START
+#define MIIM_CTRL__MIIM_RD_START_MASK	((1 << CMIC_CMC2_MIIM_CTRL__MIIM_RD_START_WIDTH) - 1)
+#define MIIM_CTRL__MIIM_WR_START_SHIFT	CMIC_CMC2_MIIM_CTRL__MIIM_WR_START
+#define MIIM_CTRL__MIIM_WR_START_MASK	((1 << CMIC_CMC2_MIIM_CTRL__MIIM_WR_START_WIDTH) - 1)
+
+#define MIIM_STAT_REG 			CMIC_CMC2_MIIM_STAT_BASE
+#define MIIM_STAT__MIIM_OPN_DONE_SHIFT	CMIC_CMC2_MIIM_STAT__MIIM_OPN_DONE
+#define MIIM_STAT__MIIM_OPN_DONE_MASK	((1 << CMIC_CMC2_MIIM_STAT__MIIM_OPN_DONE_WIDTH) - 1)
+
+#define SET_REG_FIELD(reg_value, fshift, fmask, fvalue)	\
+	(reg_value) = ((reg_value) & ~((fmask) << (fshift))) |  \
+			(((fvalue) & (fmask)) << (fshift))
+#define ISET_REG_FIELD(reg_value, fshift, fmask, fvalue) \
+		(reg_value) = (reg_value) | (((fvalue) & (fmask)) << (fshift))			
+#define GET_REG_FIELD(reg_value, fshift, fmask)	\
+	(((reg_value) & ((fmask) << (fshift))) >> (fshift))
+
+#define MIIM_OP_MAX_HALT_USEC	500	
+
+enum {
+	MIIM_OP_MODE_READ,
+	MIIM_OP_MODE_WRITE,
+	MIIM_OP_MODE_MAX	
+};
+
+struct cmicd_miim_cmd {
+	int bus_id;
+	int int_sel;
+	int phy_id;
+	int regnum;
+	int c45_sel;
+	uint16_t op_mode;
+	uint16_t val;
+};
+
+
+
+static inline uint32_t cmicd_miim_reg_read(uint32_t reg)
+{
+	return ethHw_readl((CMICD_BASE_ADDRESS + CMC2_OFFSET) + reg);
+}
+
+static inline void cmicd_miim_reg_write(uint32_t reg, uint32_t data)
+{
+	ethHw_writel(data, (CMICD_BASE_ADDRESS + CMC2_OFFSET) + reg);
+}
+
+static inline void cmicd_miim_set_op_read(uint32_t *data, uint32_t set)
+{
+	SET_REG_FIELD(*data, MIIM_CTRL__MIIM_RD_START_SHIFT, 
+			MIIM_CTRL__MIIM_RD_START_MASK, set);
+}
+
+static inline void cmicd_miim_set_op_write(uint32_t *data, uint32_t set)
+{
+	SET_REG_FIELD(*data, MIIM_CTRL__MIIM_WR_START_SHIFT, 
+			MIIM_CTRL__MIIM_WR_START_MASK, set);
+}
+
+static inline int do_cmicd_miim_op(uint32_t op, uint32_t param, uint32_t addr, uint16_t *reg_val)
+{
+	uint32_t val, op_done;
+	int ret = 0;
+	int usec = MIIM_OP_MAX_HALT_USEC;
+
+	if (op >= MIIM_OP_MODE_MAX) {
+        ET_ERROR(("%s : invalid op code %d\n",__FUNCTION__,op));
+		return SOC_E_INIT;
+	}
+
+	cmicd_miim_reg_write(MIIM_PARAM_REG, param);
+	cmicd_miim_reg_write(MIIM_ADDRESS_REG, addr);
+	val = cmicd_miim_reg_read(MIIM_CTRL_REG);
+	if(op == MIIM_OP_MODE_READ)
+		cmicd_miim_set_op_read(&val, 1);
+	else
+		cmicd_miim_set_op_write(&val, 1);
+	cmicd_miim_reg_write(MIIM_CTRL_REG, val);
+
+	do {
+		op_done = GET_REG_FIELD(cmicd_miim_reg_read(MIIM_STAT_REG),
+				MIIM_STAT__MIIM_OPN_DONE_SHIFT, MIIM_STAT__MIIM_OPN_DONE_MASK);
+		if (op_done)
+			break;
+		
+		udelay(1);
+		usec--;
+	} while (usec > 0);
+
+	if (op_done) {
+		if(op == MIIM_OP_MODE_READ)
+			*reg_val = cmicd_miim_reg_read(MIIM_READ_DATA_REG);
+	}
+	else
+		ret = SOC_E_TIMEOUT;
+
+	val = cmicd_miim_reg_read(MIIM_CTRL_REG);
+	if(op == MIIM_OP_MODE_READ)
+		cmicd_miim_set_op_read(&val, 0);
+	else
+		cmicd_miim_set_op_write(&val, 0);
+	cmicd_miim_reg_write(MIIM_CTRL_REG, val);
+
+	return ret;
+}
+
+
+static int cmicd_miim_op(struct cmicd_miim_cmd *cmd)
+{
+	uint32_t miim_param =0, miim_addr = 0;
+    int rv = 0;
+	
+	ISET_REG_FIELD(miim_param, MIIM_PARAM__BUS_ID_SHIFT, 
+			MIIM_PARAM__BUS_ID_MASK, cmd->bus_id);
+
+	if (cmd->int_sel)
+		ISET_REG_FIELD(miim_param, MIIM_PARAM__INTERNAL_SEL_SHIFT, 
+				MIIM_PARAM__INTERNAL_SEL_MASK, 1);
+
+	ISET_REG_FIELD(miim_param, MIIM_PARAM__PHY_ID_SHIFT, 
+			MIIM_PARAM__PHY_ID_MASK, cmd->phy_id);
+
+	if (cmd->op_mode == MIIM_OP_MODE_WRITE)
+		ISET_REG_FIELD(miim_param, MIIM_PARAM__PHY_DATA_SHIFT, 
+				MIIM_PARAM__PHY_DATA_MASK, cmd->val);
+
+	if (cmd->c45_sel) {
+		ISET_REG_FIELD(miim_param, MIIM_PARAM__C45_SEL_SHIFT, 
+				MIIM_PARAM__C45_SEL_MASK, 1);
+
+		ISET_REG_FIELD(miim_addr, MIIM_ADDRESS__CLAUSE_45_REGADR_SHIFT, 
+				MIIM_ADDRESS__CLAUSE_45_REGADR_MASK, cmd->regnum);
+		ISET_REG_FIELD(miim_addr, MIIM_ADDRESS__CLAUSE_45_DTYPE_SHIFT, 
+				MIIM_ADDRESS__CLAUSE_45_REGADR_MASK, cmd->regnum >> 16);
+	}
+	else {
+		ISET_REG_FIELD(miim_addr, MIIM_ADDRESS__CLAUSE_22_REGADR_SHIFT, 
+				MIIM_ADDRESS__CLAUSE_22_REGADR_MASK, cmd->regnum);
+	}
+
+    rv = do_cmicd_miim_op(cmd->op_mode, miim_param, miim_addr, &cmd->val);
+
+    return rv;
+}
+
+
+void
+chip_phy_wr(bcm_eth_t *eth_data, uint ext, uint phyaddr, uint reg, uint16_t v)
+{
+	struct cmicd_miim_cmd cmd = {0};
+    int rv;
+
+    ET_TRACE(("%s enter\n", __FUNCTION__));
+
+	ASSERT(phyaddr < MAXEPHY);
+	ASSERT(reg < MAXPHYREG);
+    
+	cmd.bus_id = CONFIG_EXTERNAL_PHY_BUS_ID;
+	if (!ext) {
+		cmd.int_sel = 1;
+    }
+	cmd.phy_id = phyaddr;
+	cmd.regnum = reg;
+	cmd.val = v;
+
+	cmd.op_mode = MIIM_OP_MODE_WRITE;
+
+    rv = cmicd_miim_op(&cmd); 
+    if (rv < 0) {
+        ET_ERROR(("%s : PHY register write is failed! error code is %d\n",
+            __FUNCTION__, rv)); 
+    }
+	
+	return;
+}
+
+
+uint16_t
+chip_phy_rd(bcm_eth_t *eth_data, uint ext, uint phyaddr, uint reg)
+{
+	struct cmicd_miim_cmd cmd = {0};
+    int rv;
+
+    ET_TRACE(("%s enter\n", __FUNCTION__));
+    
+    ASSERT(phyaddr < MAXEPHY);
+	ASSERT(reg < MAXPHYREG);
+    
+	cmd.bus_id = CONFIG_EXTERNAL_PHY_BUS_ID;
+	if (!ext) {
+		cmd.int_sel = 1;
+    }
+	cmd.phy_id = phyaddr;
+	cmd.regnum = reg; 
+
+	cmd.op_mode = MIIM_OP_MODE_READ;
+
+    rv = cmicd_miim_op(&cmd); 
+    if (rv < 0) {
+        ET_ERROR(("%s : PHY register read is failed! error code is %d\n",
+            __FUNCTION__, rv)); 
+    }
+	return cmd.val;
+    
+}
+
+
+#else /* !CONFIG_GREYHOUND */
 
 void
 chip_phy_wr(bcm_eth_t *eth_data, uint ext, uint phyaddr, uint reg, uint16_t v)
@@ -2241,7 +2974,7 @@ chip_phy_wr(bcm_eth_t *eth_data, uint ext, uint phyaddr, uint reg, uint16_t v)
 	ASSERT(reg < MAXPHYREG);
 
 	/* wait until Mii mgt interface not busy */
-	SPINWAIT((*phy_ctrl & (1<<ChipcommonB_MII_Management_Control__BSY)), 1000);
+        SPINWAIT((reg32_read(phy_ctrl) & (1<<ChipcommonB_MII_Management_Control__BSY)), 1000);
 	tmp = reg32_read(phy_ctrl);
 	if (tmp & (1<<ChipcommonB_MII_Management_Control__BSY)) {
 		ET_ERROR(("et%d: %s: busy\n", eth_data->unit, __FUNCTION__));
@@ -2254,12 +2987,14 @@ chip_phy_wr(bcm_eth_t *eth_data, uint ext, uint phyaddr, uint reg, uint16_t v)
 	if (ext) {
 		/* ext phy */
 		tmp |= (1<<ChipcommonB_MII_Management_Control__EXT);
+	}  else {
+		tmp &= ~(1 << ChipcommonB_MII_Management_Control__EXT);
 	}
 	reg32_write(phy_ctrl, tmp);
 	//printf("%s wrt phy_ctrl: 0x%x\n", __FUNCTION__, tmp);
 
 	/* wait for it to complete */
-	SPINWAIT((*phy_ctrl & (1<<ChipcommonB_MII_Management_Control__BSY)), 1000);
+        SPINWAIT((reg32_read(phy_ctrl) & (1<<ChipcommonB_MII_Management_Control__BSY)), 1000);
 	tmp = reg32_read(phy_ctrl);
 	if (tmp & (1<<ChipcommonB_MII_Management_Control__BSY)) {
 		ET_ERROR(("et%d: %s ChipcommonB_MII_Management_Control did not complete\n", eth_data->unit, __FUNCTION__));
@@ -2278,7 +3013,7 @@ chip_phy_wr(bcm_eth_t *eth_data, uint ext, uint phyaddr, uint reg, uint16_t v)
 	reg32_write(phy_data, tmp);
 
 	/* wait for it to complete */
-	SPINWAIT((*phy_ctrl & (1<<ChipcommonB_MII_Management_Control__BSY)), 1000);
+        SPINWAIT((reg32_read(phy_ctrl) & (1<<ChipcommonB_MII_Management_Control__BSY)), 1000);
 	tmp = reg32_read(phy_ctrl);
 	if (tmp & (1<<ChipcommonB_MII_Management_Control__BSY)) {
 		ET_ERROR(("et%d: %s ChipcommonB_MII_Management_Command_Data did not complete\n", eth_data->unit, __FUNCTION__));
@@ -2299,7 +3034,7 @@ chip_phy_rd(bcm_eth_t *eth_data, uint ext, uint phyaddr, uint reg)
 	ASSERT(reg < MAXPHYREG);
 
 	/* wait until Mii mgt interface not busy */
-	SPINWAIT((*phy_ctrl & (1<<ChipcommonB_MII_Management_Control__BSY)), 1000);
+        SPINWAIT((reg32_read(phy_ctrl) & (1<<ChipcommonB_MII_Management_Control__BSY)), 1000);
 	tmp = reg32_read(phy_ctrl);
 	if (tmp & (1<<ChipcommonB_MII_Management_Control__BSY)) {
 		ET_ERROR(("et%d: %s: busy\n", eth_data->unit, __FUNCTION__));
@@ -2312,12 +3047,14 @@ chip_phy_rd(bcm_eth_t *eth_data, uint ext, uint phyaddr, uint reg)
 	if (ext) {
 		/* ext phy */
 		tmp |= (1<<ChipcommonB_MII_Management_Control__EXT);
+	}  else {
+		tmp &= ~(1 << ChipcommonB_MII_Management_Control__EXT);
 	}
 	reg32_write(phy_ctrl, tmp);
-	//printf("%s wrt phy_ctrl: 0x%x\n", __FUNCTION__, tmp);
+	//printf("%s wrt phy_ctrl(0x%x): 0x%x\n", __FUNCTION__, phy_ctrl, tmp);
 
 	/* wait for it to complete */
-	SPINWAIT((*phy_ctrl & (1<<ChipcommonB_MII_Management_Control__BSY)), 1000);
+        SPINWAIT((reg32_read(phy_ctrl) & (1<<ChipcommonB_MII_Management_Control__BSY)), 1000);
 	tmp = reg32_read(phy_ctrl);
 	if (tmp & (1<<ChipcommonB_MII_Management_Control__BSY)) {
 		ET_ERROR(("et%d: %s ChipcommonB_MII_Management_Control did not complete\n", eth_data->unit, __FUNCTION__));
@@ -2335,7 +3072,7 @@ chip_phy_rd(bcm_eth_t *eth_data, uint ext, uint phyaddr, uint reg)
 	reg32_write(phy_data, tmp);
 
 	/* wait for it to complete */
-	SPINWAIT((*phy_ctrl & (1<<ChipcommonB_MII_Management_Control__BSY)), 1000);
+        SPINWAIT((reg32_read(phy_ctrl) & (1<<ChipcommonB_MII_Management_Control__BSY)), 1000);
 	tmp = reg32_read(phy_ctrl);
 	if (tmp & (1<<ChipcommonB_MII_Management_Control__BSY)) {
 		ET_ERROR(("et%d: %s ChipcommonB_MII_Management_Command_Data did not complete\n", eth_data->unit, __FUNCTION__));
@@ -2343,11 +3080,264 @@ chip_phy_rd(bcm_eth_t *eth_data, uint ext, uint phyaddr, uint reg)
 
 	/* read data */
 	tmp = reg32_read(phy_data);
-	//printf("%s rd phyaddr(0x%x) reg(0x%x) data: 0x%x\n", __FUNCTION__, phyaddr, reg, tmp);
+	//printf("%s rd phyaddr(0x%x) reg(0x%x) phy_data(0x%x) data: 0x%x\n", __FUNCTION__, phyaddr, reg, phy_data, tmp);
 
 	return (tmp & 0xffff);
 }
 
+#endif /* CONFIG_GREYHOUND */
+
+#if defined(CONFIG_CYGNUS)
+void
+chip_phy_init(bcm_eth_t *eth_data, int ext, uint phyaddr)
+{
+	uint16		rd0, rd1;
+	uint		reg;
+	uint16		val;
+
+	//printf("et%d: %s: ext:%d phyaddr:%d\n", eth_data->unit, __FUNCTION__, ext, phyaddr);
+
+	reg = 0x17;
+	val = 0x0F09;
+	rd0 = chip_phy_rd(eth_data, ext, phyaddr, reg);
+	chip_phy_wr(eth_data, ext, phyaddr, reg, val);
+	rd1 = chip_phy_rd(eth_data, ext, phyaddr, reg);
+	//printf("et%d: %s: ext:%d phyaddr:%d reg:0x%x rd0:0x%x rd1:0x%x\n", eth_data->unit, __FUNCTION__, ext, phyaddr, reg, rd0, rd1);
+
+	reg = 0x15;
+	if (phyaddr==0)
+		val = 0x5193;
+	else if (phyaddr==1)
+		val = 0x11C9;
+	else
+		val = 0x11B;
+	rd0 = chip_phy_rd(eth_data, ext, phyaddr, reg);
+	chip_phy_wr(eth_data, ext, phyaddr, reg, val);
+	rd1 = chip_phy_rd(eth_data, ext, phyaddr, reg);
+	//printf("et%d: %s: ext:%d phyaddr:%d reg:0x%x rd0:0x%x rd1:0x%x\n", eth_data->unit, __FUNCTION__, ext, phyaddr, reg, rd0, rd1);
+
+	reg = 0x17;
+	val = 0x0F09;
+	rd0 = chip_phy_rd(eth_data, ext, phyaddr, reg);
+	chip_phy_wr(eth_data, ext, phyaddr, reg, val);
+	rd1 = chip_phy_rd(eth_data, ext, phyaddr, reg);
+	//printf("et%d: %s: ext:%d phyaddr:%d reg:0x%x rd0:0x%x rd1:0x%x\n", eth_data->unit, __FUNCTION__, ext, phyaddr, reg, rd0, rd1);
+
+	reg = 0x15;
+	rd0 = chip_phy_rd(eth_data, ext, phyaddr, reg);
+	//printf("et%d: %s: ext:%d phyaddr:%d reg:0x%x rd0:0x%x\n", eth_data->unit, __FUNCTION__, ext, phyaddr, reg, rd0);
+
+	if (phyaddr==0x10) {
+		/* for port 5 */
+		reg = 0x18;
+		val = 0x7007;
+		rd0 = chip_phy_rd(eth_data, ext, phyaddr, reg);
+		chip_phy_wr(eth_data, ext, phyaddr, reg, val);
+		rd1 = chip_phy_rd(eth_data, ext, phyaddr, reg);
+		//printf("et%d: %s: ext:%d phyaddr:%d reg:0x%x rd0:0x%x rd1:0x%x\n", eth_data->unit, __FUNCTION__, ext, phyaddr, reg, rd0, rd1);
+		val = rd0 = rd1;
+        val |= (1 << 15);
+        val &= ~(1 << 8);
+		chip_phy_wr(eth_data, ext, phyaddr, reg, val);
+		//rd1 = chip_phy_rd(eth_data, ext, phyaddr, reg);
+		//printf("et%d: %s: ext:%d phyaddr:%d reg:0x%x rd0:0x%x rd1:0x%x\n", eth_data->unit, __FUNCTION__, ext, phyaddr, reg, rd0, rd1);
+
+
+		/* disable clk125*/
+	    reg = 0x1c;
+		val = 0x1400;
+		chip_phy_wr(eth_data, ext, phyaddr, reg, val);
+		rd0 = chip_phy_rd(eth_data, ext, phyaddr, reg);
+		val = rd0;
+        val |= (1 << 15);
+        val &= ~(1 << 0);
+		chip_phy_wr(eth_data, ext, phyaddr, reg, val);
+		//rd1 = chip_phy_rd(eth_data, ext, phyaddr, reg);
+		//printf("et%d: %s: ext:%d phyaddr:%d reg:0x%x rd0:0x%x rd1:0x%x\n", eth_data->unit, __FUNCTION__, ext, phyaddr, reg, rd0, rd1);
+	}
+}
+
+int
+chip_phy_auto_negotiate_gcd(bcm_eth_t *eth_data, uint phyaddr, int *speed, int *duplex)
+{
+	int		   ext = 0;
+    int        t_speed, t_duplex;
+    uint16     mii_ana, mii_anp, mii_stat;
+    uint16     mii_gb_stat, mii_esr, mii_gb_ctrl;
+
+    mii_gb_stat = 0;            /* Start off 0 */
+    mii_gb_ctrl = 0;            /* Start off 0 */
+
+	mii_ana = chip_phy_rd(eth_data, ext, phyaddr, 0x04);
+	mii_anp = chip_phy_rd(eth_data, ext, phyaddr, 0x05);
+	mii_stat = chip_phy_rd(eth_data, ext, phyaddr, 0x01);
+
+    if (mii_stat & MII_STAT_ES) {    /* Supports extended status */
+        /*
+         * If the PHY supports extended status, check if it is 1000MB
+         * capable.  If it is, check the 1000Base status register to see
+         * if 1000MB negotiated.
+         */
+		mii_esr = chip_phy_rd(eth_data, ext, phyaddr, 0x0f);
+
+        if (mii_esr & (MII_ESR_1000_X_FD | MII_ESR_1000_X_HD | 
+                       MII_ESR_1000_T_FD | MII_ESR_1000_T_HD)) {
+			mii_gb_stat = chip_phy_rd(eth_data, ext, phyaddr, 0x0a);
+			mii_gb_ctrl = chip_phy_rd(eth_data, ext, phyaddr, 0x09);
+        }
+    }
+
+    /*
+     * At this point, if we did not see Gig status, one of mii_gb_stat or 
+     * mii_gb_ctrl will be 0. This will cause the first 2 cases below to 
+     * fail and fall into the default 10/100 cases.
+     */
+
+    mii_ana &= mii_anp;
+
+    if ((mii_gb_ctrl & MII_GB_CTRL_ADV_1000FD) &&
+        (mii_gb_stat & MII_GB_STAT_LP_1000FD)) {
+        t_speed  = 1000;
+        t_duplex = 1;
+    } else if ((mii_gb_ctrl & MII_GB_CTRL_ADV_1000HD) &&
+               (mii_gb_stat & MII_GB_STAT_LP_1000HD)) {
+        t_speed  = 1000;
+        t_duplex = 0;
+    } else if (mii_ana & MII_ANA_FD_100) {         /* [a] */
+        t_speed = 100;
+        t_duplex = 1;
+    } else if (mii_ana & MII_ANA_T4) {            /* [b] */
+        t_speed = 100;
+        t_duplex = 0;
+    } else if (mii_ana & MII_ANA_HD_100) {        /* [c] */
+        t_speed = 100;
+        t_duplex = 0;
+    } else if (mii_ana & MII_ANA_FD_10) {        /* [d] */
+        t_speed = 10;
+        t_duplex = 1 ;
+    } else if (mii_ana & MII_ANA_HD_10) {        /* [e] */
+        t_speed = 10;
+        t_duplex = 0;
+    } else {
+        return(SOC_E_FAIL);
+    }
+
+    if (speed)  *speed  = t_speed;
+    if (duplex)    *duplex = t_duplex;
+
+    return(SOC_E_NONE);
+}
+
+
+int
+chip_phy_speed_get(bcm_eth_t *eth_data, uint phyaddr, int *speed, int *duplex)
+{
+	int		ext = 0;
+    int     rv;
+    uint16  mii_ctrl, mii_stat;
+
+	ET_TRACE(("et%d: %s: phyaddr %d\n", eth_data->unit, __FUNCTION__, phyaddr));
+
+	mii_ctrl = chip_phy_rd(eth_data, ext, phyaddr, 0x00);
+	mii_stat = chip_phy_rd(eth_data, ext, phyaddr, 0x01);
+
+    *speed = 0;
+    *duplex = 0;
+    if (mii_ctrl & MII_CTRL_AE) {   /* Auto-negotiation enabled */
+        if (!(mii_stat & MII_STAT_AN_DONE)) { /* Auto-neg NOT complete */
+            rv = SOC_E_NONE;
+        } else {
+	        rv = chip_phy_auto_negotiate_gcd(eth_data, phyaddr, speed, duplex);
+		}
+    } else {                /* Auto-negotiation disabled */
+	    /*
+	     * Simply pick up the values we force in CTRL register.
+	     */
+		if (mii_ctrl & MII_CTRL_FD)
+			*duplex = 1;
+
+	    switch(MII_CTRL_SS(mii_ctrl)) {
+	    case MII_CTRL_SS_10:
+	        *speed = 10;
+	        break;
+	    case MII_CTRL_SS_100:
+	        *speed = 100;
+	        break;
+	    case MII_CTRL_SS_1000:
+	        *speed = 1000;
+	        break;
+	    default:            /* Just pass error back */
+	        return(SOC_E_UNAVAIL);
+	    }
+    	rv = SOC_E_NONE;
+    }
+
+    return(rv);
+}
+
+int
+chip_phy_link_get(bcm_eth_t *eth_data, uint phyaddr, int *link)
+{
+	int			  ext = 0;
+	uint16        mii_ctrl, mii_stat;
+	unsigned long init_time;
+
+    *link = FALSE;      /* Default */
+
+	mii_stat = chip_phy_rd(eth_data, ext, phyaddr, 0x01);
+	/* the first read of status register will not show link up, second read will show link up */
+    if (!(mii_stat & MII_STAT_LA) ) {
+		mii_stat = chip_phy_rd(eth_data, ext, phyaddr, 0x01);
+	}
+
+    if (!(mii_stat & MII_STAT_LA) || (mii_stat == 0xffff)) {
+    /* mii_stat == 0xffff check is to handle removable PHY daughter cards */
+        return SOC_E_NONE;
+    }
+
+    /* Link appears to be up; we are done if autoneg is off. */
+
+	mii_ctrl = chip_phy_rd(eth_data, ext, phyaddr, 0x00);
+
+    if (!(mii_ctrl & MII_CTRL_AE)) {
+		*link = TRUE;
+		return SOC_E_NONE;
+    }
+
+    /*
+     * If link appears to be up but autonegotiation is still in
+     * progress, wait for it to complete.  For BCM5228, autoneg can
+     * still be busy up to about 200 usec after link is indicated.  Also
+     * continue to check link state in case it goes back down.
+     */
+	init_time = get_timer(0);
+    for (;;) {
+
+		mii_stat = chip_phy_rd(eth_data, ext, phyaddr, 0x01);
+
+	    if (!(mii_stat & MII_STAT_LA)) {
+			/* link is down */
+	        return SOC_E_NONE;
+	    }
+
+	    if (mii_stat & MII_STAT_AN_DONE) {
+			/* AutoNegotiation done */
+	        break;
+	    }
+
+		if(get_timer(init_time) > 1) {
+			/* timeout */
+	        return SOC_E_BUSY;
+		}
+    }
+
+    /* Return link state at end of polling */
+    *link = ((mii_stat & MII_STAT_LA) != 0);
+
+    return SOC_E_NONE;
+}
+#endif /* defined(CONFIG_CYGNUS) */
+
 
 static void
 chip_reset(bcm_eth_t *eth_data)
@@ -2458,3 +3448,21 @@ chip_getintr_events(bcm_eth_t *eth_data, bool in_isr)
 	/* return intstatus */
 	return intstatus;
 }
+
+#if (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2))
+void bcmiproc_serdes_init_early(void)
+{
+	bcm_eth_t eth_data;
+
+	gmac_set_amac_mdio(1);
+
+	/* initialize GMAC0 serdes control */
+	eth_data.regs = (gmacregs_t *)IPROC_GMAC0_REG_BASE;
+	eth_data.unit = 0;
+
+	/* reset cores */
+	gmac_core_reset();
+
+	gmac_serdes_init(&eth_data);
+}
+#endif /* (defined(CONFIG_HELIX4) || defined(CONFIG_KATANA2)) */
diff --git a/drivers/net/bcmiproc_phy.h b/drivers/net/bcmiproc_phy.h
old mode 100644
new mode 100755
index 90fd95a..eec201c
--- a/drivers/net/bcmiproc_phy.h
+++ b/drivers/net/bcmiproc_phy.h
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  *
  * These routines provide access to the external phy
  *
diff --git a/drivers/net/bcmiproc_phy5221.c b/drivers/net/bcmiproc_phy5221.c
old mode 100644
new mode 100755
index 75f95cf..c9e3d64
--- a/drivers/net/bcmiproc_phy5221.c
+++ b/drivers/net/bcmiproc_phy5221.c
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  *
  * These routines provide access to the external phy
  *
@@ -214,6 +202,54 @@ phy5221_fe_init(bcm_eth_t *eth_data, uint phyaddr)
 }
 
 
+#ifdef BCMINTERNAL
+/*
+ * Function:    
+ *  phy5221_fe_speed_set
+ * Purpose: 
+ *  Set the current operating speed (forced).
+ * Parameters:
+ *  unit - StrataSwitch unit #.
+ *  port - StrataSwitch port #. 
+ *  duplex - (OUT) Boolean, true indicates full duplex, false 
+ *      indicates half.
+ * Returns: 
+ *  SOC_E_XXX
+ * Notes: 
+ *  No synchronization performed at this level. Autonegotiation is 
+ *  not manipulated. 
+ */
+int
+phy5221_fe_speed_set(bcm_eth_t *eth_data, uint phyaddr, int speed)
+{
+    uint16     mii_ctrl;
+
+    if (speed == 0) {
+        return SOC_E_NONE;
+    }
+
+	phy5221_rd_reg(eth_data, phyaddr, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &mii_ctrl);
+
+    mii_ctrl &= ~(MII_CTRL_SS_LSB | MII_CTRL_SS_MSB);
+    switch(speed) {
+    case 10:
+	    mii_ctrl |= MII_CTRL_SS_10;
+	    break;
+    case 100:
+	    mii_ctrl |= MII_CTRL_SS_100;
+	    break;
+    case 1000:  
+	    mii_ctrl |= MII_CTRL_SS_1000;
+	    break;
+    default:
+	    return SOC_E_CONFIG;
+    }
+
+	phy5221_wr_reg(eth_data, phyaddr, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &mii_ctrl);
+
+    return SOC_E_NONE;
+}
+#endif /* BCMINTERNAL */
 
 
 /*
@@ -359,6 +395,29 @@ phy5221_enable_set(bcm_eth_t *eth_data, uint phyaddr, int enable)
 }
 
 
+#ifdef BCMINTERNAL
+/*
+ * Function:
+ *      phy5221_speed_set
+ * Purpose:
+ *      Set PHY speed
+ * Parameters:
+ *      eth_data - ethernet data
+ *      phyaddr - physical address
+ *      speed - link speed in Mbps
+ * Returns:
+ *      0
+ */
+int
+phy5221_speed_set(bcm_eth_t *eth_data, uint phyaddr, int speed)
+{
+	NET_TRACE(("et%d: %s: phyaddr %d\n", eth_data->unit, __FUNCTION__, phyaddr));
+
+	phy5221_fe_speed_set(eth_data, phyaddr, speed);
+
+	return 0;
+}
+#endif /* BCMINTERNAL */
 
 
 /*
@@ -505,3 +564,119 @@ phy5221_speed_get(bcm_eth_t *eth_data, uint phyaddr, int *speed, int *duplex)
 
     return(rv);
 }
+
+
+#ifdef BCMINTERNAL
+int
+phy5221_lb_set(bcm_eth_t *eth_data, uint phyaddr, int enable)
+{
+	uint16  mii_ctrl;
+
+	/* set reset flag */
+	phy5221_rd_reg(eth_data, phyaddr, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &mii_ctrl);
+    mii_ctrl &= ~MII_CTRL_LE;
+    mii_ctrl |= enable ? MII_CTRL_LE : 0;
+	phy5221_wr_reg(eth_data, phyaddr, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &mii_ctrl);
+
+    return 0;
+}
+#endif /* BCMINTERNAL */
+
+
+#ifdef BCMINTERNAL
+void
+phy5221_disp_status(bcm_eth_t *eth_data, uint phyaddr)
+{
+	uint16		tmp0, tmp1, tmp2;
+	int			speed, duplex;
+
+	printf("et%d: %s: phyaddr:%d\n", eth_data->unit, __FUNCTION__, phyaddr);
+
+#if 0
+	phy5221_rd_reg(eth_data, phyaddr, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &tmp0);
+	phy5221_rd_reg(eth_data, phyaddr, PHY_MII_STATr_BANK, PHY_MII_STATr_ADDR, &tmp1);
+	printf("  MII-Control: 0x%x; MII-Status: 0x%x\n", tmp0, tmp1);
+
+	phy5221_rd_reg(eth_data, phyaddr, PHY_MII_PHY_ID0r_BANK, PHY_MII_PHY_ID0r_ADDR, &tmp0);
+	phy5221_rd_reg(eth_data, phyaddr, PHY_MII_PHY_ID1r_BANK, PHY_MII_PHY_ID1r_ADDR, &tmp1);
+	printf("  Phy ChipID: 0x%04x:0x%04x\n", tmp0, tmp1);
+
+	phy5221_rd_reg(eth_data, phyaddr, PHY_MII_ANAr_BANK, PHY_MII_ANAr_ADDR, &tmp0);
+	phy5221_rd_reg(eth_data, phyaddr, PHY_MII_ANPr_BANK, PHY_MII_ANPr_ADDR, &tmp1);
+	phy5221_speed_get(eth_data, phyaddr, &speed, &duplex);
+	printf("  AutoNeg Ad: 0x%x; AutoNeg Partner: 0x%x; speed:%d; duplex:%d\n", tmp0, tmp1, speed, duplex);
+
+	phy5221_rd_reg(eth_data, phyaddr, PHY_MII_ESRr_BANK, PHY_MII_ESRr_ADDR, &tmp0);
+	phy5221_rd_reg(eth_data, phyaddr, PHY_MII_ECRr_BANK, PHY_MII_ECRr_ADDR, &tmp1);
+	phy5221_rd_reg(eth_data, phyaddr, 0x0000, 0x11, &tmp2);
+	printf("  Reg0x0f: 0x%x; 100Base-X AUX ctrl: 0x%x; 100Base-X AUX stat: 0x%x\n", tmp0, tmp1, tmp2);
+
+	phy5221_rd_reg(eth_data, phyaddr, 0x0000, 0x12, &tmp0);
+	phy5221_rd_reg(eth_data, phyaddr, 0x0000, 0x13, &tmp1);
+	phy5221_rd_reg(eth_data, phyaddr, 0x0000, 0x14, &tmp2);
+	printf("  100Base-X RCV ERR: 0x%x; 100Base-X FALSE CARRIER: 0x%x; 100Base-X DISCON: 0x%x\n", tmp0, tmp1, tmp2);
+#endif
+
+	phy5221_rd_reg(eth_data, phyaddr, PHY_MII_ANAr_BANK, PHY_MII_ANAr_ADDR, &tmp0);
+	phy5221_rd_reg(eth_data, phyaddr, PHY_MII_ANPr_BANK, PHY_MII_ANPr_ADDR, &tmp1);
+	phy5221_speed_get(eth_data, phyaddr, &speed, &duplex);
+	printf("  AutoNeg Ad: 0x%x; AutoNeg Partner: 0x%x; speed:%d; duplex:%d\n", tmp0, tmp1, speed, duplex);
+
+	for (tmp0=0; tmp0<0x20; tmp0++) {
+		phy5221_rd_reg(eth_data, phyaddr, 0, tmp0, &tmp1);
+		//printf("reg0x%02x: 0x%04x, ", tmp0, tmp1);
+		//if ((tmp&0x3) == 0x3)
+		//	printf("\n");
+	}
+	phy5221_rd_reg(eth_data, phyaddr, 1, 0x18, &tmp1);
+	for (tmp0=0x1a; tmp0<0x1f; tmp0++) {
+		phy5221_rd_reg(eth_data, phyaddr, 1, tmp0, &tmp1);
+		//printf("reg0x%02x: 0x%04x, ", tmp0, tmp1);
+		//if ((tmp&0x3) == 0x3)
+		//	printf("\n");
+	}
+
+}
+#endif /* BCMINTERNAL */
+
+
+#ifdef BCMINTERNAL
+void
+phy5221_chk_err(bcm_eth_t *eth_data, uint phyaddr)
+{
+	uint16		tmp0;
+
+	phy5221_rd_reg(eth_data, phyaddr, PHY_MII_STATr_BANK, PHY_MII_STATr_ADDR, &tmp0);
+	if (!(tmp0 & MII_STAT_LA))
+		printf("ERROR: reg 0x01 (LINK down): 0x%x\n", tmp0);
+//	if (tmp0 & (MII_STAT_JBBR|MII_STAT_RF))
+	if (tmp0 & MII_STAT_RF)
+		printf("ERROR: reg 0x01: 0x%x\n", tmp0);
+
+	phy5221_rd_reg(eth_data, phyaddr, 0, 0x11, &tmp0);
+	if (!(tmp0 & 0x100))
+		printf("ERROR: reg 0x11 (LINK down): 0x%x\n", tmp0);
+	if (tmp0 & 0x8bf)
+		printf("ERROR: reg 0x11: 0x%x\n", tmp0);
+
+	phy5221_rd_reg(eth_data, phyaddr, 0, 0x12, &tmp0);
+	if (tmp0)
+		printf("ERROR: reg 0x12 (RCV ERR CNT): 0x%x\n", tmp0);
+
+	phy5221_rd_reg(eth_data, phyaddr, 0, 0x13, &tmp0);
+	if (tmp0)
+		printf("ERROR: reg 0x13 (FALSE CARRIER CNT): 0x%x\n", tmp0);
+
+	phy5221_rd_reg(eth_data, phyaddr, 0, 0x14, &tmp0);
+	if (tmp0 & 0xc000)
+		printf("ERROR: reg 0x14: 0x%x\n", tmp0);
+
+	phy5221_rd_reg(eth_data, phyaddr, 0, 0x19, &tmp0);
+	if (!(tmp0 & 0x4))
+		printf("ERROR: reg 0x19 (LINK down): 0x%x\n", tmp0);
+//	if (tmp0 & 0xc1)
+	if (tmp0 & 0xc0)
+		printf("ERROR: reg 0x19: 0x%x\n", tmp0);
+}
+#endif /* BCMINTERNAL */
+
diff --git a/drivers/net/bcmiproc_phy5221.h b/drivers/net/bcmiproc_phy5221.h
old mode 100644
new mode 100755
index 39479d1..638d118
--- a/drivers/net/bcmiproc_phy5221.h
+++ b/drivers/net/bcmiproc_phy5221.h
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  *
  * These routines provide access to the external phy
  *
@@ -49,6 +37,14 @@ extern int phy5221_mod_reg(bcm_eth_t *eth_data, uint phyaddr, uint16 reg_bank,
 extern int phy5221_init(bcm_eth_t *eth_data, uint phyaddr);
 extern int phy5221_link_get(bcm_eth_t *eth_data, uint phyaddr, int *link);
 extern int phy5221_enable_set(bcm_eth_t *eth_data, uint phyaddr, int enable);
+#ifdef BCMINTERNAL
+extern int phy5221_speed_set(bcm_eth_t *eth_data, uint phyaddr, int speed);
+#endif /* BCMINTERNAL */
 extern int phy5221_speed_get(bcm_eth_t *eth_data, uint phyaddr, int *speed, int *duplex);
+#ifdef BCMINTERNAL
+extern int phy5221_lb_set(bcm_eth_t *eth_data, uint phyaddr, int enable);
+extern void phy5221_disp_status(bcm_eth_t *eth_data, uint phyaddr);
+extern void phy5221_chk_err(bcm_eth_t *eth_data, uint phyaddr);
+#endif /* BCMINTERNAL */
 
 #endif	/* _bcm_iproc_phy5221_h_ */
diff --git a/drivers/net/bcmiproc_phy5461s.c b/drivers/net/bcmiproc_phy5461s.c
old mode 100644
new mode 100755
index a633e00..0dc74bf
--- a/drivers/net/bcmiproc_phy5461s.c
+++ b/drivers/net/bcmiproc_phy5461s.c
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  *
  * These routines provide access to the external phy
  *
@@ -91,6 +79,11 @@ phy5461_wr_reg(bcm_eth_t *eth_data, uint phyaddr, uint32 flags, uint16 reg_bank,
     } else {
         switch(reg_addr) {
         /* Map shadow registers */
+#ifdef BCMINTERNAL
+        case 0x15:
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, 0x17, reg_bank);
+            break;
+#endif /* BCMINTERNAL */
         case 0x18:
             if (reg_bank <= 0x0007) {
                 if (reg_bank == 0x0007) {
@@ -108,6 +101,15 @@ phy5461_wr_reg(bcm_eth_t *eth_data, uint phyaddr, uint32 flags, uint16 reg_bank,
                 rv = SOC_E_PARAM;
             }
             break;
+#ifdef BCMINTERNAL
+        case 0x1D:
+            if (reg_bank == 0x0000) {
+                wr_data = wr_data & 0x07FFF;
+            } else {
+                rv = SOC_E_PARAM;
+            }
+            break;
+#endif /* BCMINTERNAL */
         default:
             if (!(flags & SOC_PHY_REG_RESERVE_ACCESS)) {
                 /* Must not write to reserved registers */ 
@@ -161,6 +163,11 @@ phy5461_rd_reg(bcm_eth_t *eth_data, uint phyaddr, uint32 flags, uint16 reg_bank,
     } else {
         switch(reg_addr) {
         /* Map shadow registers */
+#ifdef BCMINTERNAL
+        case 0x15:
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, 0x17, reg_bank);
+            break;
+#endif /* BCMINTERNAL */
         case 0x18:
             if (reg_bank <= 0x0007) {
 				chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, reg_addr, (reg_bank << 12) | 0x7);
@@ -175,6 +182,15 @@ phy5461_rd_reg(bcm_eth_t *eth_data, uint phyaddr, uint32 flags, uint16 reg_bank,
                 rv = SOC_E_PARAM;
             }
             break;
+#ifdef BCMINTERNAL
+        case 0x1D:
+            if (reg_bank <= 0x0001) {
+				chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, reg_addr, (reg_bank << 15));
+            } else {
+                rv = SOC_E_PARAM;
+            }
+            break;
+#endif /* BCMINTERNAL */
         default:
             if (!(flags & SOC_PHY_REG_RESERVE_ACCESS)) {
                 /* Must not read from reserved registers */ 
@@ -207,7 +223,7 @@ phy5461_mod_reg(bcm_eth_t *eth_data, uint phyaddr, uint32 flags, uint16 reg_bank
 			uint8 reg_addr, uint16 data, uint16 mask)
 {
 	int     rv = SOC_E_NONE;
-	uint16  org_data, rd_data;
+	uint16  rd_data = 0;
 
 	NET_TRACE(("%s enter\n", __FUNCTION__));
 
@@ -224,7 +240,7 @@ phy5461_mod_reg(bcm_eth_t *eth_data, uint phyaddr, uint32 flags, uint16 reg_bank
 			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, 0x1c, blk_sel | 0x8001);
 
             /* Modify 1000X IEEE register */
-			org_data = rd_data = chip_phy_rd(eth_data, PHY_EXTERNAL, phyaddr, reg_addr);
+			rd_data = chip_phy_rd(eth_data, PHY_EXTERNAL, phyaddr, reg_addr);
 			NET_REG_TRACE(("%s rd phyaddr(0x%x) reg_bank(0x%x) reg_addr(0x%x) data(0x%x)\n",
 					 __FUNCTION__, phyaddr, reg_bank, reg_addr, rd_data));
 			rd_data &= ~(mask);
@@ -241,6 +257,11 @@ phy5461_mod_reg(bcm_eth_t *eth_data, uint phyaddr, uint32 flags, uint16 reg_bank
     } else {
         switch(reg_addr) {
         /* Map shadow registers */
+#ifdef BCMINTERNAL
+        case 0x15:
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, 0x17, reg_bank);
+            break;
+#endif /* BCMINTERNAL */
         case 0x18:
             if (reg_bank <= 0x0007) {
 				chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, reg_addr, (reg_bank << 12) | 0x7);
@@ -264,6 +285,15 @@ phy5461_mod_reg(bcm_eth_t *eth_data, uint phyaddr, uint32 flags, uint16 reg_bank
                 rv = SOC_E_PARAM;
             }
             break;
+#ifdef BCMINTERNAL
+        case 0x1D:
+            if (reg_bank == 0x0000) {
+                mask &= 0x07FFF;
+            } else {
+                rv = SOC_E_PARAM;
+            }
+            break;
+#endif /* BCMINTERNAL */
         default:
             if (!(flags & SOC_PHY_REG_RESERVE_ACCESS)) {
                 /* Must not write to reserved registers */ 
@@ -274,7 +304,7 @@ phy5461_mod_reg(bcm_eth_t *eth_data, uint phyaddr, uint32 flags, uint16 reg_bank
             break;
         }
         if (SOC_SUCCESS(rv)) {
-			org_data = rd_data = chip_phy_rd(eth_data, PHY_EXTERNAL, phyaddr, reg_addr);
+			rd_data = chip_phy_rd(eth_data, PHY_EXTERNAL, phyaddr, reg_addr);
 			NET_REG_TRACE(("%s rd phyaddr(0x%x) reg_bank(0x%x) reg_addr(0x%x) data(0x%x)\n",
 					 __FUNCTION__, phyaddr, reg_bank, reg_addr, rd_data));
 			rd_data &= ~(mask);
@@ -421,6 +451,54 @@ phy5461_ge_init(bcm_eth_t *eth_data, uint phyaddr)
 }
 
 
+#ifdef BCMINTERNAL
+/*
+ * Function:    
+ *  phy5461_ge_speed_set
+ * Purpose: 
+ *  Set the current operating speed (forced).
+ * Parameters:
+ *  unit - StrataSwitch unit #.
+ *  port - StrataSwitch port #. 
+ *  duplex - (OUT) Boolean, true indicates full duplex, false 
+ *      indicates half.
+ * Returns: 
+ *  SOC_E_XXX
+ * Notes: 
+ *  No synchronization performed at this level. Autonegotiation is 
+ *  not manipulated. 
+ */
+int
+phy5461_ge_speed_set(bcm_eth_t *eth_data, uint phyaddr, int speed)
+{
+    uint16     mii_ctrl;
+
+    if (speed == 0) {
+        return SOC_E_NONE;
+    }
+
+	phy5461_rd_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &mii_ctrl);
+
+    mii_ctrl &= ~(MII_CTRL_SS_LSB | MII_CTRL_SS_MSB);
+    switch(speed) {
+    case 10:
+	    mii_ctrl |= MII_CTRL_SS_10;
+	    break;
+    case 100:
+	    mii_ctrl |= MII_CTRL_SS_100;
+	    break;
+    case 1000:  
+	    mii_ctrl |= MII_CTRL_SS_1000;
+	    break;
+    default:
+	    return SOC_E_CONFIG;
+    }
+
+	phy5461_wr_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &mii_ctrl);
+
+    return SOC_E_NONE;
+}
+#endif /* BCMINTERNAL */
 
 
 void
@@ -564,6 +642,56 @@ phy5461_link_get(bcm_eth_t *eth_data, uint phyaddr, int *link)
 }
 
 
+#ifdef BCMINTERNAL
+/*
+ * Function:
+ *      phy5461_enable_set
+ * Purpose:
+ *      Enable/Disable phy
+ * Parameters:
+ *      eth_data - ethernet data
+ *      phyaddr - physical address
+ *      enable - on/off state to set
+ * Returns:
+ *      0
+ */
+int
+phy5461_enable_set(bcm_eth_t *eth_data, uint phyaddr, int enable)
+{
+	uint16 power_down;
+
+	NET_TRACE(("et%d: %s: phyaddr %d\n", eth_data->unit, __FUNCTION__, phyaddr));
+
+    power_down = (enable) ? 0 : MII_CTRL_PD;
+
+	phy5461_mod_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, power_down, MII_CTRL_PD);
+
+    return SOC_E_NONE;
+}
+
+
+/*
+ * Function:
+ *      phy5461_speed_set
+ * Purpose:
+ *      Set PHY speed
+ * Parameters:
+ *      eth_data - ethernet data
+ *      phyaddr - physical address
+ *      speed - link speed in Mbps
+ * Returns:
+ *      0
+ */
+int
+phy5461_speed_set(bcm_eth_t *eth_data, uint phyaddr, int speed)
+{
+	NET_TRACE(("et%d: %s: phyaddr %d\n", eth_data->unit, __FUNCTION__, phyaddr));
+
+	phy5461_ge_speed_set(eth_data, phyaddr, speed);
+
+	return 0;
+}
+#endif /* BCMINTERNAL */
 
 
 /*
@@ -710,3 +838,64 @@ phy5461_speed_get(bcm_eth_t *eth_data, uint phyaddr, int *speed, int *duplex)
 
     return(rv);
 }
+
+
+#ifdef BCMINTERNAL
+int
+phy5461_lb_set(bcm_eth_t *eth_data, uint phyaddr, int enable)
+{
+	uint16  mii_ctrl;
+
+	/* set reset flag */
+	phy5461_rd_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &mii_ctrl);
+    mii_ctrl &= ~MII_CTRL_LE;
+    mii_ctrl |= enable ? MII_CTRL_LE : 0;
+	phy5461_wr_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &mii_ctrl);
+
+    return 0;
+}
+
+
+void
+phy5461_disp_status(bcm_eth_t *eth_data, uint phyaddr)
+{
+	uint16		tmp0, tmp1, tmp2;
+	int			speed, duplex;
+
+	printf("et%d: %s: phyaddr:%d\n", eth_data->unit, __FUNCTION__, phyaddr);
+
+	phy5461_rd_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &tmp0);
+	phy5461_rd_reg(eth_data, phyaddr, PHY_MII_STATr_FLAGS, PHY_MII_STATr_BANK, PHY_MII_STATr_ADDR, &tmp1);
+	printf("  MII-Control: 0x%x; MII-Status: 0x%x\n", tmp0, tmp1);
+
+	phy5461_rd_reg(eth_data, phyaddr, PHY_MII_PHY_ID0r_FLAGS, PHY_MII_PHY_ID0r_BANK, PHY_MII_PHY_ID0r_ADDR, &tmp0);
+	phy5461_rd_reg(eth_data, phyaddr, PHY_MII_PHY_ID1r_FLAGS, PHY_MII_PHY_ID1r_BANK, PHY_MII_PHY_ID1r_ADDR, &tmp1);
+	printf("  Phy ChipID: 0x%04x:0x%04x\n", tmp0, tmp1);
+
+	phy5461_rd_reg(eth_data, phyaddr, PHY_MII_ANAr_FLAGS, PHY_MII_ANAr_BANK, PHY_MII_ANAr_ADDR, &tmp0);
+	phy5461_rd_reg(eth_data, phyaddr, PHY_MII_ANPr_FLAGS, PHY_MII_ANPr_BANK, PHY_MII_ANPr_ADDR, &tmp1);
+	phy5461_speed_get(eth_data, phyaddr, &speed, &duplex);
+	printf("  AutoNeg Ad: 0x%x; AutoNeg Partner: 0x%x; speed:%d; duplex:%d\n", tmp0, tmp1, speed, duplex);
+
+	phy5461_rd_reg(eth_data, phyaddr, PHY_MII_GB_CTRLr_FLAGS, PHY_MII_GB_CTRLr_BANK, PHY_MII_GB_CTRLr_ADDR, &tmp0);
+	phy5461_rd_reg(eth_data, phyaddr, PHY_MII_GB_STATr_FLAGS, PHY_MII_GB_STATr_BANK, PHY_MII_GB_STATr_ADDR, &tmp1);
+	printf("  MII GB ctrl: 0x%x; MII GB stat: 0x%x\n", tmp0, tmp1);
+
+	phy5461_rd_reg(eth_data, phyaddr, PHY_MII_ESRr_FLAGS, PHY_MII_ESRr_BANK, PHY_MII_ESRr_ADDR, &tmp0);
+	phy5461_rd_reg(eth_data, phyaddr, PHY_MII_ECRr_FLAGS, PHY_MII_ECRr_BANK, PHY_MII_ECRr_ADDR, &tmp1);
+	phy5461_rd_reg(eth_data, phyaddr, 0x00, 0x0000, 0x11, &tmp2);
+	printf("  IEEE Ext stat: 0x%x; PHY Ext ctrl: 0x%x; PHY Ext stat: 0x%x\n", tmp0, tmp1, tmp2);
+
+	phy5461_rd_reg(eth_data, phyaddr, PHY_MODE_CTRLr_FLAGS, PHY_MODE_CTRLr_BANK, PHY_MODE_CTRLr_ADDR, &tmp0);
+	printf("  Mode Control (Addr 1c shadow 1f): 0x%x\n", tmp0);
+
+	phy5461_rd_reg(eth_data, phyaddr, PHY_1000X_MII_CTRLr_FLAGS, PHY_1000X_MII_CTRLr_BANK, PHY_1000X_MII_CTRLr_ADDR, &tmp0);
+	phy5461_rd_reg(eth_data, phyaddr, PHY_1000X_MII_CTRLr_FLAGS, PHY_1000X_MII_CTRLr_BANK, 0x01, &tmp1);
+	printf("  1000-x MII ctrl: 0x%x; 1000-x MII stat: 0x%x\n", tmp0, tmp1);
+
+	phy5461_rd_reg(eth_data, phyaddr, PHY_1000X_MII_CTRLr_FLAGS, PHY_1000X_MII_CTRLr_BANK, 0x04, &tmp0);
+	phy5461_rd_reg(eth_data, phyaddr, PHY_1000X_MII_CTRLr_FLAGS, PHY_1000X_MII_CTRLr_BANK, 0x05, &tmp1);
+	printf("  1000-x AutoNeg Ad: 0x%x; 1000-x AutoNeg Partner: 0x%x\n", tmp0, tmp1);
+
+}
+#endif /* BCMINTERNAL */
diff --git a/drivers/net/bcmiproc_phy5461s.h b/drivers/net/bcmiproc_phy5461s.h
old mode 100644
new mode 100755
index 6179aad..6c21f54
--- a/drivers/net/bcmiproc_phy5461s.h
+++ b/drivers/net/bcmiproc_phy5461s.h
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  *
  * These routines provide access to the external phy
  *
@@ -49,6 +37,14 @@ extern int phy5461_mod_reg(bcm_eth_t *eth_data, uint phyaddr, uint32 flags, uint
 			uint8 reg_addr, uint16 data, uint16 mask);
 extern int phy5461_init(bcm_eth_t *eth_data, uint phyaddr);
 extern int phy5461_link_get(bcm_eth_t *eth_data, uint phyaddr, int *link);
+#ifdef BCMINTERNAL
+extern int phy5461_enable_set(bcm_eth_t *eth_data, uint phyaddr, int enable);
+extern int phy5461_speed_set(bcm_eth_t *eth_data, uint phyaddr, int speed);
+#endif /* BCMINTERNAL */
 extern int phy5461_speed_get(bcm_eth_t *eth_data, uint phyaddr, int *speed, int *duplex);
+#ifdef BCMINTERNAL
+extern int phy5461_lb_set(bcm_eth_t *eth_data, uint phyaddr, int enable);
+extern void phy5461_disp_status(bcm_eth_t *eth_data, uint phyaddr);
+#endif /* BCMINTERNAL */
 
 #endif	/* _bcm_iproc_phy5461s_h_ */
diff --git a/drivers/net/bcmiproc_phy5481.c b/drivers/net/bcmiproc_phy5481.c
new file mode 100755
index 0000000..79050a2
--- /dev/null
+++ b/drivers/net/bcmiproc_phy5481.c
@@ -0,0 +1,944 @@
+/*
+ * $Copyright Open Broadcom Corporation$
+ *
+ * These routines provide access to the external phy
+ *
+ */
+
+/* ---- Include Files ---------------------------------------------------- */
+#include "bcmiproc_phy.h"
+#include "bcmiproc_phy5481.h"
+
+/* ---- External Variable Declarations ----------------------------------- */
+/* ---- External Function Prototypes ------------------------------------- */
+/* ---- Public Variables ------------------------------------------------- */
+/* ---- Private Constants and Types -------------------------------------- */
+/* ---- Private Variables ------------------------------------------------ */
+
+/* debug/trace */
+//#define BCMDBG
+#define BCMDBG_ERR
+#ifdef BCMDBG
+#define	NET_ERROR(args) printf args
+#define	NET_TRACE(args) printf args
+#elif defined(BCMDBG_ERR)
+#define	NET_ERROR(args) printf args
+#define NET_TRACE(args)
+#else
+#define	NET_ERROR(args)
+#define	NET_TRACE(args)
+#endif /* BCMDBG */
+#define	NET_REG_TRACE(args)
+
+
+#ifndef ASSERT
+#define ASSERT(exp)
+#endif
+
+#define	PHY_EXTERNAL	1
+
+extern void chip_phy_wr(bcm_eth_t *eth_data, uint ext, uint phyaddr, uint reg, uint16_t v);
+extern uint16_t chip_phy_rd(bcm_eth_t *eth_data, uint ext, uint phyaddr, uint reg);
+
+
+/* ==== Public Functions ================================================= */
+
+int
+phy5481_wr_reg(bcm_eth_t *eth_data, uint phyaddr, uint32 flags, uint16 reg_bank,
+                uint8 reg_addr, uint16 *data)
+{
+	int     rv = SOC_E_NONE;
+	uint16  wr_data=*data;
+
+	NET_TRACE(("%s enter\n", __FUNCTION__));
+
+	NET_REG_TRACE(("%s going to write phyaddr(0x%x) flags(0x%x) reg_bank(0x%x) reg_addr(0x%x) data(0x%x)\n",
+		 __FUNCTION__, phyaddr, flags, reg_bank, reg_addr, wr_data));
+
+    if (flags & SOC_PHY_REG_1000X) {
+        if (reg_addr <= 0x000f) {
+            uint16 blk_sel;
+
+            /* Map 1000X page */
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, 0x1c, 0x7c00);
+			blk_sel = chip_phy_rd(eth_data, PHY_EXTERNAL, phyaddr, 0x1c);
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, 0x1c, blk_sel | 0x8001);
+
+            /* write 1000X IEEE register */
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, reg_addr, wr_data);
+
+           /* Restore IEEE mapping */
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, 0x1c, (blk_sel & 0xfffe) | 0x8000);
+        } else if (flags & _SOC_PHY_REG_DIRECT) {
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, reg_addr, wr_data);
+        } else {
+            rv = SOC_E_PARAM;
+        }
+    } else {
+        switch(reg_addr) {
+        /* Map shadow registers */
+#ifdef BCMINTERNAL
+        case 0x15:
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, 0x17, reg_bank);
+            break;
+#endif /* BCMINTERNAL */
+        case 0x18:
+            if (reg_bank <= 0x0007) {
+                if (reg_bank == 0x0007) {
+                    wr_data |= 0x8000;
+                }
+                wr_data = (wr_data & ~(0x0007)) | reg_bank;
+            } else {
+                rv = SOC_E_PARAM;
+            }
+            break;
+        case 0x1C:
+            if (reg_bank <= 0x001F) {
+                wr_data = 0x8000 | (reg_bank << 10) | (wr_data & 0x03FF);
+            } else {
+                rv = SOC_E_PARAM;
+            }
+            break;
+#ifdef BCMINTERNAL
+        case 0x1D:
+            if (reg_bank == 0x0000) {
+                wr_data = wr_data & 0x07FFF;
+            } else {
+                rv = SOC_E_PARAM;
+            }
+            break;
+#endif /* BCMINTERNAL */
+        default:
+            if (!(flags & SOC_PHY_REG_RESERVE_ACCESS)) {
+                /* Must not write to reserved registers */ 
+                if (reg_addr > 0x001e) {
+                    rv = SOC_E_PARAM;
+                }
+            }
+            break;
+        }
+        if (SOC_SUCCESS(rv)) {
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, reg_addr, wr_data);
+        }
+    } 
+    if (SOC_FAILURE(rv)) {
+		NET_ERROR(("%s ERROR phyaddr(0x%x) reg_bank(0x%x) reg_addr(0x%x) rv(%d)\n",
+				 __FUNCTION__, phyaddr, reg_bank, reg_addr, rv));
+    }
+    return rv;
+}
+
+
+int
+phy5481_rd_reg(bcm_eth_t *eth_data, uint phyaddr, uint32 flags, uint16 reg_bank,
+			uint8 reg_addr, uint16 *data)
+{
+	int     rv = SOC_E_NONE;
+
+	NET_TRACE(("%s enter\n", __FUNCTION__));
+
+	NET_REG_TRACE(("%s going to read phyaddr(0x%x) flags(0x%x) reg_bank(0x%x) reg_addr(0x%x)\n",
+			 __FUNCTION__, phyaddr, flags, reg_bank, reg_addr));
+    if (flags & SOC_PHY_REG_1000X) {
+        if (reg_addr <= 0x000f) {
+            uint16 blk_sel;
+
+            /* Map 1000X page */
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, 0x1c, 0x7c00);
+			blk_sel = chip_phy_rd(eth_data, PHY_EXTERNAL, phyaddr, 0x1c);
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, 0x1c, blk_sel | 0x8001);
+
+            /* Read 1000X IEEE register */
+			*data = chip_phy_rd(eth_data, PHY_EXTERNAL, phyaddr, reg_addr);
+			NET_REG_TRACE(("%s rd phyaddr(0x%x) flags(0x%x) reg_bank(0x%x) reg_addr(0x%x) data(0x%x)\n",
+					 __FUNCTION__, phyaddr, flags, reg_bank, reg_addr, *data));
+
+           /* Restore IEEE mapping */
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, 0x1c, (blk_sel & 0xfffe) | 0x8000);
+        } else {
+            rv = SOC_E_PARAM;
+        }
+    } else {
+        switch(reg_addr) {
+        /* Map shadow registers */
+#ifdef BCMINTERNAL
+        case 0x15:
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, 0x17, reg_bank);
+            break;
+#endif /* BCMINTERNAL */
+        case 0x18:
+            if (reg_bank <= 0x0007) {
+				chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, reg_addr, (reg_bank << 12) | 0x7);
+            } else {
+                rv = SOC_E_PARAM;
+            }
+            break;
+        case 0x1C:
+            if (reg_bank <= 0x001F) {
+				chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, reg_addr, (reg_bank << 10));
+            } else {
+                rv = SOC_E_PARAM;
+            }
+            break;
+#ifdef BCMINTERNAL
+        case 0x1D:
+            if (reg_bank <= 0x0001) {
+				chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, reg_addr, (reg_bank << 15));
+            } else {
+                rv = SOC_E_PARAM;
+            }
+            break;
+#endif /* BCMINTERNAL */
+        default:
+            if (!(flags & SOC_PHY_REG_RESERVE_ACCESS)) {
+                /* Must not read from reserved registers */ 
+                if (reg_addr > 0x001e) {
+                   rv = SOC_E_PARAM;
+                }
+            }
+            break;
+        }
+        if (SOC_SUCCESS(rv)) {
+			*data = chip_phy_rd(eth_data, PHY_EXTERNAL, phyaddr, reg_addr);
+			NET_REG_TRACE(("%s rd phyaddr(0x%x) flags(0x%x) reg_bank(0x%x) reg_addr(0x%x) data(0x%x)\n",
+					 __FUNCTION__, phyaddr, flags, reg_bank, reg_addr, *data));
+        }
+    } 
+    if (SOC_FAILURE(rv)) {
+		NET_ERROR(("%s ERROR phyaddr(0x%x) reg_bank(0x%x) reg_addr(0x%x) rv(%d)\n",
+				 __FUNCTION__, phyaddr, reg_bank, reg_addr, rv));
+    }
+	
+    return rv;
+}
+
+
+int
+phy5481_mod_reg(bcm_eth_t *eth_data, uint phyaddr, uint32 flags, uint16 reg_bank,
+			uint8 reg_addr, uint16 data, uint16 mask)
+{
+	int     rv = SOC_E_NONE;
+	uint16  org_data, rd_data;
+
+	NET_TRACE(("%s enter\n", __FUNCTION__));
+
+	NET_REG_TRACE(("%s going to modify phyaddr(0x%x) flags(0x%x) reg_bank(0x%x) reg_addr(0x%x) data(0x%x) mask(0x%x)\n",
+		 __FUNCTION__, phyaddr, flags, reg_bank, reg_addr, data, mask));
+
+    if (flags & SOC_PHY_REG_1000X) {
+        if (reg_addr <= 0x000f) {
+            uint16 blk_sel;
+
+            /* Map 1000X page */
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, 0x1c, 0x7c00);
+			blk_sel = chip_phy_rd(eth_data, PHY_EXTERNAL, phyaddr, 0x1c);
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, 0x1c, blk_sel | 0x8001);
+
+            /* Modify 1000X IEEE register */
+			org_data = rd_data = chip_phy_rd(eth_data, PHY_EXTERNAL, phyaddr, reg_addr);
+			NET_REG_TRACE(("%s rd phyaddr(0x%x) reg_bank(0x%x) reg_addr(0x%x) data(0x%x)\n",
+					 __FUNCTION__, phyaddr, reg_bank, reg_addr, rd_data));
+			rd_data &= ~(mask);
+			rd_data |= data;
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, reg_addr, rd_data);
+			NET_REG_TRACE(("%s wrt phyaddr(0x%x) reg_bank(0x%x) reg_addr(0x%x) data(0x%x)\n",
+					 __FUNCTION__, phyaddr, reg_bank, reg_addr, rd_data));
+
+           /* Restore IEEE mapping */
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, 0x1c, (blk_sel & 0xfffe) | 0x8000);
+        } else {
+            rv = SOC_E_PARAM;
+        }
+    } else {
+        switch(reg_addr) {
+        /* Map shadow registers */
+#ifdef BCMINTERNAL
+        case 0x15:
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, 0x17, reg_bank);
+            break;
+#endif /* BCMINTERNAL */
+        case 0x18:
+            if (reg_bank <= 0x0007) {
+				chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, reg_addr, (reg_bank << 12) | 0x7);
+
+                if (reg_bank == 0x0007) {
+                    data |= 0x8000;
+                    mask |= 0x8000;
+                }
+                mask &= ~(0x0007);
+            } else {
+                rv = SOC_E_PARAM;
+            }
+            break;
+        case 0x1C:
+            if (reg_bank <= 0x001F) {
+				chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, reg_addr, (reg_bank << 10));
+                data |= 0x8000;
+                mask |= 0x8000;
+                mask &= ~(0x1F << 10);
+            } else {
+                rv = SOC_E_PARAM;
+            }
+            break;
+#ifdef BCMINTERNAL
+        case 0x1D:
+            if (reg_bank == 0x0000) {
+                mask &= 0x07FFF;
+            } else {
+                rv = SOC_E_PARAM;
+            }
+            break;
+#endif /* BCMINTERNAL */
+        default:
+            if (!(flags & SOC_PHY_REG_RESERVE_ACCESS)) {
+                /* Must not write to reserved registers */ 
+                if (reg_addr > 0x001e) {
+                    rv = SOC_E_PARAM;
+                }
+            }
+            break;
+        }
+        if (SOC_SUCCESS(rv)) {
+			org_data = rd_data = chip_phy_rd(eth_data, PHY_EXTERNAL, phyaddr, reg_addr);
+			NET_REG_TRACE(("%s rd phyaddr(0x%x) reg_bank(0x%x) reg_addr(0x%x) data(0x%x)\n",
+					 __FUNCTION__, phyaddr, reg_bank, reg_addr, rd_data));
+			rd_data &= ~(mask);
+			rd_data |= data;
+			chip_phy_wr(eth_data, PHY_EXTERNAL, phyaddr, reg_addr, rd_data);
+			NET_REG_TRACE(("%s wrt phyaddr(0x%x) reg_bank(0x%x) reg_addr(0x%x) data(0x%x)\n",
+					 __FUNCTION__, phyaddr, reg_bank, reg_addr, rd_data));
+        }
+    } 
+
+    if (SOC_FAILURE(rv)) {
+		NET_ERROR(("%s ERROR phyaddr(0x%x) reg_bank(0x%x) reg_addr(0x%x) rv(%d)\n",
+				 __FUNCTION__, phyaddr, reg_bank, reg_addr, rv));
+    }
+    return rv;
+}
+
+
+void
+phy5481_ge_reset(bcm_eth_t *eth_data, uint phyaddr)
+{
+	uint16 ctrl;
+	unsigned long init_time;
+
+	NET_TRACE(("et%d: %s: phyaddr %d\n", eth_data->unit, __FUNCTION__, phyaddr));
+
+	/* set reset flag */
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &ctrl);
+	ctrl |= MII_CTRL_RESET;
+	phy5481_wr_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &ctrl);
+	init_time = get_timer(0);
+    for (;;) {
+
+		udelay(100);
+
+		/* check if out of reset */
+		if (!(phy5481_rd_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &ctrl) & MII_CTRL_RESET)) {
+			NET_TRACE(("et%d: %s reset complete\n", eth_data->unit, __FUNCTION__));
+			return;
+		}
+
+		if (get_timer(init_time) > 10) {
+			/* timeout */
+			NET_ERROR(("et%d: %s reset not complete\n", eth_data->unit, __FUNCTION__));
+			return;
+		}
+	}
+}
+
+#if 0
+
+/*
+ * Function:
+ *  phy5481_ge_interface_set
+ * Purpose:
+ *  Set the current operating mode of the PHY.
+ *  (Pertaining to the MAC/PHY interface, not the line interface).
+ *      For example: TBI or MII/GMII.
+ * Parameters:
+ *  unit - StrataSwitch unit #.
+ *  port - StrataSwitch port #. 
+ *  pif - one of SOC_PORT_IF_*
+ * Returns:
+ *  SOC_E_XXX
+ */
+int
+phy5481_ge_interface_set(bcm_eth_t *eth_data, uint phyaddr, soc_port_if_t pif)
+{
+    uint16      mii_ecr;
+    int         mii;            /* MII if true, TBI otherwise */
+
+    switch (pif) {
+    case SOC_PORT_IF_MII:
+    case SOC_PORT_IF_GMII:
+    case SOC_PORT_IF_RGMII:
+        mii = TRUE;
+        break;
+    case SOC_PORT_IF_NOCXN:
+    	return (SOC_E_NONE);
+    case SOC_PORT_IF_TBI:
+    case SOC_PORT_IF_SGMII:
+        mii = FALSE;
+        break;
+    default:
+        return SOC_E_UNAVAIL;
+    }
+
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_ECRr_FLAGS, PHY_MII_ECRr_BANK, PHY_MII_ECRr_ADDR, &mii_ecr);
+
+    if (mii) {
+        mii_ecr &= ~MII_ECR_10B;
+    } else {
+        mii_ecr |= MII_ECR_10B;
+    }
+
+	phy5481_wr_reg(eth_data, phyaddr, PHY_MII_ECRr_FLAGS, PHY_MII_ECRr_BANK, PHY_MII_ECRr_ADDR, &mii_ecr);
+
+    return(SOC_E_NONE);
+}
+
+#endif
+
+/*
+ * Function:
+ *  phy5481_ge_init
+ * Purpose: 
+ *  Initialize the PHY (MII mode) to a known good state.
+ * Parameters:
+ *  unit - StrataSwitch unit #.
+ *  port - StrataSwitch port #. 
+ * Returns: 
+ *  SOC_E_XXX
+
+ * Notes: 
+ *  No synchronization performed at this level.
+ */
+int
+phy5481_ge_init(bcm_eth_t *eth_data, uint phyaddr)
+{
+    uint16          mii_ctrl, mii_gb_ctrl;
+    uint16          mii_ana;
+    soc_port_if_t   pif;
+
+    /* Reset PHY */
+	phy5481_ge_reset(eth_data, phyaddr);
+
+	/* set advertized bits */
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_ANAr_FLAGS, PHY_MII_ANAr_BANK, PHY_MII_ANAr_ADDR, &mii_ana);
+	mii_ana |= MII_ANA_FD_100 | MII_ANA_FD_10;
+	mii_ana |= MII_ANA_HD_100 | MII_ANA_HD_10;
+	phy5481_wr_reg(eth_data, phyaddr, PHY_MII_ANAr_FLAGS, PHY_MII_ANAr_BANK, PHY_MII_ANAr_ADDR, &mii_ana);
+
+    mii_ctrl = MII_CTRL_FD | MII_CTRL_SS_1000 | MII_CTRL_AE | MII_CTRL_RAN;
+    mii_gb_ctrl = MII_GB_CTRL_ADV_1000FD | MII_GB_CTRL_PT;
+
+	phy5481_wr_reg(eth_data, phyaddr, PHY_MII_GB_CTRLr_FLAGS, PHY_MII_GB_CTRLr_BANK, PHY_MII_GB_CTRLr_ADDR, &mii_gb_ctrl);
+	phy5481_wr_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &mii_ctrl);
+
+    return(SOC_E_NONE);
+}
+
+
+#ifdef BCMINTERNAL
+/*
+ * Function:    
+ *  phy5481_ge_speed_set
+ * Purpose: 
+ *  Set the current operating speed (forced).
+ * Parameters:
+ *  unit - StrataSwitch unit #.
+ *  port - StrataSwitch port #. 
+ *  duplex - (OUT) Boolean, true indicates full duplex, false 
+ *      indicates half.
+ * Returns: 
+ *  SOC_E_XXX
+ * Notes: 
+ *  No synchronization performed at this level. Autonegotiation is 
+ *  not manipulated. 
+ */
+int
+phy5481_ge_speed_set(bcm_eth_t *eth_data, uint phyaddr, int speed)
+{
+    uint16     mii_ctrl;
+
+    if (speed == 0) {
+        return SOC_E_NONE;
+    }
+
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &mii_ctrl);
+
+    mii_ctrl &= ~(MII_CTRL_SS_LSB | MII_CTRL_SS_MSB);
+    switch(speed) {
+    case 10:
+	    mii_ctrl |= MII_CTRL_SS_10;
+	    break;
+    case 100:
+	    mii_ctrl |= MII_CTRL_SS_100;
+	    break;
+    case 1000:  
+	    mii_ctrl |= MII_CTRL_SS_1000;
+	    break;
+    default:
+	    return SOC_E_CONFIG;
+    }
+
+	phy5481_wr_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &mii_ctrl);
+
+    return SOC_E_NONE;
+}
+#endif /* BCMINTERNAL */
+
+
+void
+phy5481_reset_setup(bcm_eth_t *eth_data, uint phyaddr)
+{
+    uint16             tmp;
+
+	NET_TRACE(("%s enter\n", __FUNCTION__));
+
+    phy5481_ge_init(eth_data, phyaddr);
+
+    /* remove power down */
+	phy5481_mod_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, 0, MII_CTRL_PD);
+    /* Disable super-isolate */
+	phy5481_mod_reg(eth_data, phyaddr, PHY_MII_POWER_CTRLr_FLAGS, PHY_MII_POWER_CTRLr_BANK, PHY_MII_POWER_CTRLr_ADDR, 0, 1U<<5);
+    /* Enable extended packet length */
+	phy5481_mod_reg(eth_data, phyaddr, PHY_MII_AUX_CTRLr_FLAGS, PHY_MII_AUX_CTRLr_BANK, PHY_MII_AUX_CTRLr_ADDR, 0x4000, 0x4000);
+
+    return;
+}
+
+/*
+ * Function:
+ *      phy5481_init
+ * Purpose:
+ *      Initialize xgxs6 phys
+ * Parameters:
+ *      eth_data - ethernet data
+ *      phyaddr - physical address
+ * Returns:
+ *      0
+ */
+int
+phy5481_init(bcm_eth_t *eth_data, uint phyaddr)
+{
+	uint16	phyid0, phyid1;
+
+	NET_TRACE(("et%d: %s: phyaddr %d\n", eth_data->unit, __FUNCTION__, phyaddr));
+
+    phyid0 = 0;
+	phy5481_rd_reg(eth_data, phyaddr, 
+        PHY_MII_PHY_ID0r_FLAGS, PHY_MII_PHY_ID0r_BANK, 
+        PHY_MII_PHY_ID0r_ADDR, &phyid0);
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_PHY_ID1r_FLAGS, PHY_MII_PHY_ID1r_BANK, PHY_MII_PHY_ID1r_ADDR, &phyid1);
+
+	phy5481_reset_setup(eth_data, phyaddr);
+
+	return 0;
+}
+
+
+/*
+ * Function:    
+ *  phy5481_link_get
+ * Purpose: 
+ *  Determine the current link up/down status
+ * Parameters:
+ *  unit - StrataSwitch unit #.
+ *  port - StrataSwitch port #. 
+ *  link - (OUT) Boolean, true indicates link established.
+ * Returns:
+ *  SOC_E_XXX
+ * Notes: 
+ *  No synchronization performed at this level.
+ */
+int
+phy5481_link_get(bcm_eth_t *eth_data, uint phyaddr, int *link)
+{
+	uint16        mii_ctrl, mii_stat;
+	unsigned long init_time;
+
+    *link = FALSE;      /* Default */
+
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_STATr_FLAGS, PHY_MII_STATr_BANK, PHY_MII_STATr_ADDR, &mii_stat);
+	/* the first read of status register will not show link up, second read will show link up */
+    if (!(mii_stat & MII_STAT_LA) ) {
+		phy5481_rd_reg(eth_data, phyaddr, PHY_MII_STATr_FLAGS, PHY_MII_STATr_BANK, PHY_MII_STATr_ADDR, &mii_stat);
+	}
+
+    if (!(mii_stat & MII_STAT_LA) || (mii_stat == 0xffff)) {
+    /* mii_stat == 0xffff check is to handle removable PHY daughter cards */
+        return SOC_E_NONE;
+    }
+
+    /* Link appears to be up; we are done if autoneg is off. */
+
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &mii_ctrl);
+
+    if (!(mii_ctrl & MII_CTRL_AE)) {
+		*link = TRUE;
+		return SOC_E_NONE;
+    }
+
+    /*
+     * If link appears to be up but autonegotiation is still in
+     * progress, wait for it to complete.  For BCM5228, autoneg can
+     * still be busy up to about 200 usec after link is indicated.  Also
+     * continue to check link state in case it goes back down.
+     */
+	init_time = get_timer(0);
+    for (;;) {
+
+		phy5481_rd_reg(eth_data, phyaddr, PHY_MII_STATr_FLAGS, PHY_MII_STATr_BANK, PHY_MII_STATr_ADDR, &mii_stat);
+
+	    if (!(mii_stat & MII_STAT_LA)) {
+			/* link is down */
+	        return SOC_E_NONE;
+	    }
+
+	    if (mii_stat & MII_STAT_AN_DONE) {
+			/* AutoNegotiation done */
+	        break;
+	    }
+
+		if(get_timer(init_time) > 1) {
+			/* timeout */
+	        return SOC_E_BUSY;
+		}
+    }
+
+    /* Return link state at end of polling */
+    *link = ((mii_stat & MII_STAT_LA) != 0);
+
+    return SOC_E_NONE;
+}
+
+
+#ifdef BCMINTERNAL
+/*
+ * Function:
+ *      phy5481_enable_set
+ * Purpose:
+ *      Enable/Disable phy
+ * Parameters:
+ *      eth_data - ethernet data
+ *      phyaddr - physical address
+ *      enable - on/off state to set
+ * Returns:
+ *      0
+ */
+int
+phy5481_enable_set(bcm_eth_t *eth_data, uint phyaddr, int enable)
+{
+	uint16 power_down;
+
+	NET_TRACE(("et%d: %s: phyaddr %d\n", eth_data->unit, __FUNCTION__, phyaddr));
+
+    power_down = (enable) ? 0 : MII_CTRL_PD;
+
+	phy5481_mod_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, power_down, MII_CTRL_PD);
+
+    return SOC_E_NONE;
+}
+
+
+/*
+ * Function:
+ *      phy5481_speed_set
+ * Purpose:
+ *      Set PHY speed
+ * Parameters:
+ *      eth_data - ethernet data
+ *      phyaddr - physical address
+ *      speed - link speed in Mbps
+ * Returns:
+ *      0
+ */
+int
+phy5481_speed_set(bcm_eth_t *eth_data, uint phyaddr, int speed)
+{
+	NET_TRACE(("et%d: %s: phyaddr %d\n", eth_data->unit, __FUNCTION__, phyaddr));
+
+	phy5481_ge_speed_set(eth_data, phyaddr, speed);
+
+	return 0;
+}
+#endif /* BCMINTERNAL */
+
+
+/*
+ * Function:     
+ *    phy5481_auto_negotiate_gcd (greatest common denominator).
+ * Purpose:    
+ *    Determine the current greatest common denominator between 
+ *    two ends of a link
+ * Parameters:
+ *    unit - StrataSwitch unit #.
+ *    port - StrataSwitch port #. 
+ *    speed - (OUT) greatest common speed.
+ *    duplex - (OUT) greatest common duplex.
+ *    link - (OUT) Boolean, true indicates link established.
+ * Returns:    
+ *    SOC_E_XXX
+ * Notes: 
+ *    No synchronization performed at this level.
+ */
+static int
+phy5481_auto_negotiate_gcd(bcm_eth_t *eth_data, uint phyaddr, int *speed, int *duplex)
+{
+    int        t_speed, t_duplex;
+    uint16     mii_ana, mii_anp, mii_stat;
+    uint16     mii_gb_stat, mii_esr, mii_gb_ctrl;
+
+    mii_gb_stat = 0;            /* Start off 0 */
+    mii_gb_ctrl = 0;            /* Start off 0 */
+
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_ANAr_FLAGS, PHY_MII_ANAr_BANK, PHY_MII_ANAr_ADDR, &mii_ana);
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_ANPr_FLAGS, PHY_MII_ANPr_BANK, PHY_MII_ANPr_ADDR, &mii_anp);
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_STATr_FLAGS, PHY_MII_STATr_BANK, PHY_MII_STATr_ADDR, &mii_stat);
+
+    if (mii_stat & MII_STAT_ES) {    /* Supports extended status */
+        /*
+         * If the PHY supports extended status, check if it is 1000MB
+         * capable.  If it is, check the 1000Base status register to see
+         * if 1000MB negotiated.
+         */
+		phy5481_rd_reg(eth_data, phyaddr, PHY_MII_ESRr_FLAGS, PHY_MII_ESRr_BANK, PHY_MII_ESRr_ADDR, &mii_esr);
+
+        if (mii_esr & (MII_ESR_1000_X_FD | MII_ESR_1000_X_HD | 
+                       MII_ESR_1000_T_FD | MII_ESR_1000_T_HD)) {
+			phy5481_rd_reg(eth_data, phyaddr, PHY_MII_GB_STATr_FLAGS, PHY_MII_GB_STATr_BANK, PHY_MII_GB_STATr_ADDR, &mii_gb_stat);
+			phy5481_rd_reg(eth_data, phyaddr, PHY_MII_GB_CTRLr_FLAGS, PHY_MII_GB_CTRLr_BANK, PHY_MII_GB_CTRLr_ADDR, &mii_gb_ctrl);
+        }
+    }
+
+    /*
+     * At this point, if we did not see Gig status, one of mii_gb_stat or 
+     * mii_gb_ctrl will be 0. This will cause the first 2 cases below to 
+     * fail and fall into the default 10/100 cases.
+     */
+
+    mii_ana &= mii_anp;
+
+    if ((mii_gb_ctrl & MII_GB_CTRL_ADV_1000FD) &&
+        (mii_gb_stat & MII_GB_STAT_LP_1000FD)) {
+        t_speed  = 1000;
+        t_duplex = 1;
+    } else if ((mii_gb_ctrl & MII_GB_CTRL_ADV_1000HD) &&
+               (mii_gb_stat & MII_GB_STAT_LP_1000HD)) {
+        t_speed  = 1000;
+        t_duplex = 0;
+    } else if (mii_ana & MII_ANA_FD_100) {         /* [a] */
+        t_speed = 100;
+        t_duplex = 1;
+    } else if (mii_ana & MII_ANA_T4) {            /* [b] */
+        t_speed = 100;
+        t_duplex = 0;
+    } else if (mii_ana & MII_ANA_HD_100) {        /* [c] */
+        t_speed = 100;
+        t_duplex = 0;
+    } else if (mii_ana & MII_ANA_FD_10) {        /* [d] */
+        t_speed = 10;
+        t_duplex = 1 ;
+    } else if (mii_ana & MII_ANA_HD_10) {        /* [e] */
+        t_speed = 10;
+        t_duplex = 0;
+    } else {
+        return(SOC_E_FAIL);
+    }
+
+    if (speed)  *speed  = t_speed;
+    if (duplex)    *duplex = t_duplex;
+
+    return(SOC_E_NONE);
+}
+
+/*
+ * Function:     
+ *    phy5481_auto_negotiate_ew (Autoneg-ed mode with E@W on).
+ * Purpose:    
+ *    Determine autoneg-ed mode between
+ *    two ends of a link
+ * Parameters:
+ *    unit - StrataSwitch unit #.
+ *    port - StrataSwitch port #. 
+ *    speed - (OUT) greatest common speed.
+ *    duplex - (OUT) greatest common duplex.
+ *    link - (OUT) Boolean, true indicates link established.
+ * Returns:    
+ *    SOC_E_XXX
+ * Notes: 
+ *    No synchronization performed at this level.
+ */
+static int
+phy5481_auto_negotiate_ew(bcm_eth_t *eth_data, uint phyaddr, int *speed, int *duplex)
+{
+    int        t_speed, t_duplex;
+    uint16     mii_assr;
+
+    phy5481_rd_reg(eth_data, phyaddr, 0x00, 0x0000, 0x19, &mii_assr);
+
+    switch ((mii_assr >> 8) & 0x7) {
+    case 0x7:
+        t_speed = 1000;
+        t_duplex = TRUE;
+        break;
+    case 0x6:
+        t_speed = 1000;
+        t_duplex = FALSE;
+        break;
+    case 0x5:
+        t_speed = 100;
+        t_duplex = TRUE;
+        break;
+    case 0x3:
+        t_speed = 100;
+        t_duplex = FALSE;
+        break;
+    case 0x2:
+        t_speed = 10;
+        t_duplex = TRUE;
+        break;
+    case 0x1:
+        t_speed = 10;
+        t_duplex = FALSE;
+        break;
+    default:
+        t_speed = 0; /* 0x4 is 100BASE-T4 which is not supported */
+        t_duplex = FALSE;
+        break;
+    }
+
+    if (speed)  *speed  = t_speed;
+    if (duplex)    *duplex = t_duplex;
+
+    return(SOC_E_NONE);
+}
+
+
+/*
+ * Function:
+ *      phy5481_speed_get
+ * Purpose:
+ *      Get PHY speed
+ * Parameters:
+ *      eth_data - ethernet data
+ *      phyaddr - physical address
+ *      speed - current link speed in Mbps
+ * Returns:
+ *      0
+ */
+int
+phy5481_speed_get(bcm_eth_t *eth_data, uint phyaddr, int *speed, int *duplex)
+{
+    int     rv;
+    uint16  mii_ctrl, mii_stat, misc_ctrl;
+
+	NET_TRACE(("et%d: %s: phyaddr %d\n", eth_data->unit, __FUNCTION__, phyaddr));
+
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &mii_ctrl);
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_STATr_FLAGS, PHY_MII_STATr_BANK, PHY_MII_STATr_ADDR, &mii_stat);
+
+    *speed = 0;
+    *duplex = 0;
+    if (mii_ctrl & MII_CTRL_AE) {   /* Auto-negotiation enabled */
+        if (!(mii_stat & MII_STAT_AN_DONE)) { /* Auto-neg NOT complete */
+            rv = SOC_E_NONE;
+        } else {
+            /* First check for Ethernet@Wirespeed */
+            phy5481_rd_reg(eth_data, phyaddr, 0x0, 0x0007, 0x18, &misc_ctrl);
+            if (misc_ctrl & (1U << 4)) {   /* Ethernet@Wirespeed enabled */
+                rv = phy5481_auto_negotiate_ew(eth_data, phyaddr, speed, duplex);
+            } else {
+                rv = phy5481_auto_negotiate_gcd(eth_data, phyaddr, speed, duplex);
+            }
+		}
+    } else {                /* Auto-negotiation disabled */
+	    /*
+	     * Simply pick up the values we force in CTRL register.
+	     */
+		if (mii_ctrl & MII_CTRL_FD)
+			*duplex = 1;
+
+	    switch(MII_CTRL_SS(mii_ctrl)) {
+	    case MII_CTRL_SS_10:
+	        *speed = 10;
+	        break;
+	    case MII_CTRL_SS_100:
+	        *speed = 100;
+	        break;
+	    case MII_CTRL_SS_1000:
+	        *speed = 1000;
+	        break;
+	    default:            /* Just pass error back */
+	        return(SOC_E_UNAVAIL);
+	    }
+    	rv = SOC_E_NONE;
+    }
+
+    return(rv);
+}
+
+
+#ifdef BCMINTERNAL
+int
+phy5481_lb_set(bcm_eth_t *eth_data, uint phyaddr, int enable)
+{
+	uint16  mii_ctrl;
+
+	/* set reset flag */
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &mii_ctrl);
+    mii_ctrl &= ~MII_CTRL_LE;
+    mii_ctrl |= enable ? MII_CTRL_LE : 0;
+	phy5481_wr_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &mii_ctrl);
+
+    return 0;
+}
+
+
+void
+phy5481_disp_status(bcm_eth_t *eth_data, uint phyaddr)
+{
+	uint16		tmp0, tmp1, tmp2;
+	int			speed, duplex;
+
+	printf("et%d: %s: phyaddr:%d\n", eth_data->unit, __FUNCTION__, phyaddr);
+
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_CTRLr_FLAGS, PHY_MII_CTRLr_BANK, PHY_MII_CTRLr_ADDR, &tmp0);
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_STATr_FLAGS, PHY_MII_STATr_BANK, PHY_MII_STATr_ADDR, &tmp1);
+	printf("  MII-Control: 0x%x; MII-Status: 0x%x\n", tmp0, tmp1);
+
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_PHY_ID0r_FLAGS, PHY_MII_PHY_ID0r_BANK, PHY_MII_PHY_ID0r_ADDR, &tmp0);
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_PHY_ID1r_FLAGS, PHY_MII_PHY_ID1r_BANK, PHY_MII_PHY_ID1r_ADDR, &tmp1);
+	printf("  Phy ChipID: 0x%04x:0x%04x\n", tmp0, tmp1);
+
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_ANAr_FLAGS, PHY_MII_ANAr_BANK, PHY_MII_ANAr_ADDR, &tmp0);
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_ANPr_FLAGS, PHY_MII_ANPr_BANK, PHY_MII_ANPr_ADDR, &tmp1);
+	phy5481_speed_get(eth_data, phyaddr, &speed, &duplex);
+	printf("  AutoNeg Ad: 0x%x; AutoNeg Partner: 0x%x; speed:%d; duplex:%d\n", tmp0, tmp1, speed, duplex);
+
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_GB_CTRLr_FLAGS, PHY_MII_GB_CTRLr_BANK, PHY_MII_GB_CTRLr_ADDR, &tmp0);
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_GB_STATr_FLAGS, PHY_MII_GB_STATr_BANK, PHY_MII_GB_STATr_ADDR, &tmp1);
+	printf("  MII GB ctrl: 0x%x; MII GB stat: 0x%x\n", tmp0, tmp1);
+
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_ESRr_FLAGS, PHY_MII_ESRr_BANK, PHY_MII_ESRr_ADDR, &tmp0);
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MII_ECRr_FLAGS, PHY_MII_ECRr_BANK, PHY_MII_ECRr_ADDR, &tmp1);
+	phy5481_rd_reg(eth_data, phyaddr, 0x00, 0x0000, 0x11, &tmp2);
+	printf("  IEEE Ext stat: 0x%x; PHY Ext ctrl: 0x%x; PHY Ext stat: 0x%x\n", tmp0, tmp1, tmp2);
+
+	phy5481_rd_reg(eth_data, phyaddr, PHY_MODE_CTRLr_FLAGS, PHY_MODE_CTRLr_BANK, PHY_MODE_CTRLr_ADDR, &tmp0);
+	printf("  Mode Control (Addr 1c shadow 1f): 0x%x\n", tmp0);
+
+	phy5481_rd_reg(eth_data, phyaddr, PHY_1000X_MII_CTRLr_FLAGS, PHY_1000X_MII_CTRLr_BANK, PHY_1000X_MII_CTRLr_ADDR, &tmp0);
+	phy5481_rd_reg(eth_data, phyaddr, PHY_1000X_MII_CTRLr_FLAGS, PHY_1000X_MII_CTRLr_BANK, 0x01, &tmp1);
+	printf("  1000-x MII ctrl: 0x%x; 1000-x MII stat: 0x%x\n", tmp0, tmp1);
+
+	phy5481_rd_reg(eth_data, phyaddr, PHY_1000X_MII_CTRLr_FLAGS, PHY_1000X_MII_CTRLr_BANK, 0x04, &tmp0);
+	phy5481_rd_reg(eth_data, phyaddr, PHY_1000X_MII_CTRLr_FLAGS, PHY_1000X_MII_CTRLr_BANK, 0x05, &tmp1);
+	printf("  1000-x AutoNeg Ad: 0x%x; 1000-x AutoNeg Partner: 0x%x\n", tmp0, tmp1);
+
+}
+#endif /* BCMINTERNAL */
diff --git a/drivers/net/bcmiproc_phy5481.h b/drivers/net/bcmiproc_phy5481.h
new file mode 100755
index 0000000..d4c9b04
--- /dev/null
+++ b/drivers/net/bcmiproc_phy5481.h
@@ -0,0 +1,50 @@
+/*
+ * $Copyright Open Broadcom Corporation$
+ *
+ * These routines provide access to the external phy
+ *
+ */
+
+#ifndef _bcm_iproc_phy5481_h_
+#define _bcm_iproc_phy5481_h_
+
+
+/* ---- Include Files ---------------------------------------------------- */
+#include <config.h>
+#include <common.h>
+#include <net.h>
+#include <asm/arch/bcmenetphy.h>
+#include <asm/arch/iproc_regs.h>
+#include <asm/arch/iproc_gmac_regs.h>
+#include <asm/iproc/reg_utils.h>
+#include <asm/arch/ethHw.h>
+#include <asm/arch/bcmutils.h>
+#include "ethHw_data.h"
+
+/* Indirect PHY register address flags */
+#define SOC_PHY_REG_RESERVE_ACCESS    0x20000000
+#define SOC_PHY_REG_1000X             0x40000000
+#define SOC_PHY_REG_INDIRECT          0x80000000
+#define _SOC_PHY_REG_DIRECT ((SOC_PHY_REG_1000X << 1) | (SOC_PHY_REG_1000X >> 1))
+
+/* ---- External Function Prototypes ------------------------------------- */
+
+extern int phy5481_wr_reg(bcm_eth_t *eth_data, uint phyaddr, uint32 flags, uint16 reg_bank,
+                uint8 reg_addr, uint16 *data);
+extern int phy5481_rd_reg(bcm_eth_t *eth_data, uint phyaddr, uint32 flags, uint16 reg_bank,
+			uint8 reg_addr, uint16 *data);
+extern int phy5481_mod_reg(bcm_eth_t *eth_data, uint phyaddr, uint32 flags, uint16 reg_bank,
+			uint8 reg_addr, uint16 data, uint16 mask);
+extern int phy5481_init(bcm_eth_t *eth_data, uint phyaddr);
+extern int phy5481_link_get(bcm_eth_t *eth_data, uint phyaddr, int *link);
+#ifdef BCMINTERNAL
+extern int phy5481_enable_set(bcm_eth_t *eth_data, uint phyaddr, int enable);
+extern int phy5481_speed_set(bcm_eth_t *eth_data, uint phyaddr, int speed);
+#endif /* BCMINTERNAL */
+extern int phy5481_speed_get(bcm_eth_t *eth_data, uint phyaddr, int *speed, int *duplex);
+#ifdef BCMINTERNAL
+extern int phy5481_lb_set(bcm_eth_t *eth_data, uint phyaddr, int enable);
+extern void phy548_disp_status(bcm_eth_t *eth_data, uint phyaddr);
+#endif /* BCMINTERNAL */
+
+#endif	/* _bcm_iproc_phy5481_h_ */
diff --git a/drivers/net/bcmiproc_robo.c b/drivers/net/bcmiproc_robo.c
old mode 100644
new mode 100755
index f8ec497..35b7041
--- a/drivers/net/bcmiproc_robo.c
+++ b/drivers/net/bcmiproc_robo.c
@@ -1,21 +1,9 @@
 /*
  * Broadcom 53xx RoboSwitch device driver.
  *
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  *
- * $Id: bcmrobo.c 312061 2012-02-01 06:59:04Z $
+ * $Id: bcmrobo.c 312061 2012-02-01 06:59:04Z kenlo $
  */
 
 
@@ -74,6 +62,7 @@
 #define PAGE_MMR	0x02	/* 5397 Management/Mirroring page */
 #define PAGE_VTBL	0x05	/* ARL/VLAN Table access page */
 #define PAGE_VLAN	0x34	/* VLAN page */
+#define PAGE_IOCTRL 0xe4	/* IO Port Informantion Control page */
 
 /* Control page registers */
 #define REG_CTRL_PORT0	0x00	/* Port 0 traffic control register */
@@ -88,13 +77,18 @@
 #define REG_CTRL_MODE	0x0B	/* Switch Mode register */
 #define REG_CTRL_MIIPO	0x0E	/* 5325: MII Port Override register */
 #define REG_CTRL_PWRDOWN 0x0F   /* 5325: Power Down Mode register */
+#define REG_CTRL_SWCTL	0x22
 #define REG_CTRL_PPORT	0x24	/* Protected port register */
+#define REG_CTRL_P5RGMIICTL	0x2A	/* Port5 RGMII Control register */
+#define REG_CTRL_MDIO_DA 0x6f	/* MDIO Direct Access Enable register */
 #define REG_CTRL_SRST	0x79	/* Software reset control register */
 
 /* Status Page Registers */
 #define REG_STATUS_LINK	0x00	/* Link Status Summary */
 #define REG_STATUS_REV	0x50	/* Revision Register */
 
+#define REG_MGMT_CFG	0x00	/* Global Management Configuration */
+#define REG_BRCM_HDR	0x03	/* BRCM Header Control */
 #define REG_DEVICE_ID	0x30	/* 539x Device id: */
 
 /* VLAN page registers */
@@ -152,16 +146,51 @@
 #define REG_CTRL_PORT5_GMIIPO	0x5d	/* 53012: GMII Port5 Override register */
 #define REG_CTRL_PORT7_GMIIPO	0x5f	/* 53012: GMII Port7 Override register */
 
+/* IO Port Informantion Control page registers*/
+#define REG_IOCTRL_PORT0	0x00	/* Port 0 traffic control register */
+#define REG_IOCTRL_PORT1	0x02	/* Port 1 traffic control register */
+#define REG_IOCTRL_PORT2	0x04	/* Port 2 traffic control register */
+#define REG_IOCTRL_PORT3	0x06	/* Port 3 traffic control register */
+#define REG_IOCTRL_PORT4	0x08	/* Port 4 traffic control register */
+#define REG_IOCTRL_PORT5	0x0a	/* Port 5 traffic control register */
+#define REG_IOCTRL_PORT7	0x0e	/* Port 7 traffic control register */
+#define REG_IOCTRL_PORTIMP	0x10	/* Port 8 traffic control register */
+
+#if (defined(CONFIG_CYGNUS))
+#define CHIPCB_SRAB_BASE        IPROC_SRAU_REG_BASE
+#else
 #define CHIPCB_SRAB_BASE		IPROC_CCB_SRAU_REG_BASE /*(0x18007000)*/
+#endif /* (defined(CONFIG_CYGNUS)) */
 
 /* Command and status register of the SRAB */
+#if (defined(CONFIG_IPROC_P7))
+#define CFG_R_SRAB_CMDSTAT_MEMADDR      (ChipcommonG_SRAB_CMDSTAT)
+#else
 #define CFG_R_SRAB_CMDSTAT_MEMADDR	(CHIPCB_SRAB_BASE + 0x2c)
+#endif /* CONFIG_IPROC_P7 */
 #define CFG_F_sra_rst_MASK		(1 << 2)
 #define CFG_F_sra_write_MASK		(1 << 1)
 #define CFG_F_sra_gordyn_MASK		(1 << 0)
 #define CFG_F_sra_page_R		24
 #define CFG_F_sra_offset_R		16
 
+#ifdef CONFIG_IPROC_P7
+/* High order word of write data to switch register */
+#define CFG_R_SRAB_WDH_MEMADDR		(ChipcommonG_SRAB_WDH)
+
+/* Low order word of write data to switch register */
+#define CFG_R_SRAB_WDL_MEMADDR		(ChipcommonG_SRAB_WDL)
+
+/* High order word of read data from switch register */
+#define CFG_R_SRAB_RDH_MEMADDR		(ChipcommonG_SRAB_RDH)
+
+/* Low order word of read data from switch register */
+#define CFG_R_SRAB_RDL_MEMADDR		(ChipcommonG_SRAB_RDL)
+
+/* Switch interface controls */
+#define CFG_R_SW_IF_MEMADDR		    (ChipcommonG_SRAB_SW_IF)
+
+#else /* !CONFIG_IPROC_P7 */
 /* High order word of write data to switch register */
 #define CFG_R_SRAB_WDH_MEMADDR		(CHIPCB_SRAB_BASE + 0x30)
 
@@ -176,6 +205,7 @@
 
 /* Switch interface controls */
 #define CFG_R_SW_IF_MEMADDR		(CHIPCB_SRAB_BASE + 0x40)
+#endif /* CONFIG_IPROC_P7 */
 #define CFG_F_sw_init_done_MASK		(1 << 6)
 #define CFG_F_rcareq_MASK		(1 << 3)
 #define CFG_F_rcagnt_MASK		(1 << 4)
@@ -198,6 +228,7 @@
 #define ASSERT(exp)
 #endif
 
+#if 0
 static int
 srab_request_grant(void)
 {
@@ -233,6 +264,7 @@ srab_release_grant(void)
 	val32 &= ~CFG_F_rcareq_MASK;
 	writel(CFG_R_SW_IF_MEMADDR, val32);
 }
+#endif  /* 0 */
 
 static int
 srab_interface_reset(void)
@@ -240,7 +272,7 @@ srab_interface_reset(void)
 	int i, ret = 0;
 	uint32 val32;
 
-#if defined(CONFIG_NS_PLUS)
+#if (defined(CONFIG_NS_PLUS))
 	/* Verify that switch is out of reset */
 	val32 = readl(CRU_RESET_OFFSET);
 	val32 |= 1<<CRU_RESET__ROBOSW_RESET_N;
@@ -248,6 +280,21 @@ srab_interface_reset(void)
 #endif
 
 
+#if 0
+	/* Wait for switch initialization complete */
+	for (i = SRAB_MAX_RETRY * 10; i > 0; i --) {
+		val32 = readl(CFG_R_SW_IF_MEMADDR);
+		if ((val32 & CFG_F_sw_init_done_MASK))
+			break;
+	}
+
+	/* timed out */
+	if (!i) {
+		ET_ERROR(("srab_interface_reset: timeout sw_init_done\n"));
+		ret = -1;
+	}
+#endif
+
 	/* Set the SRAU reset bit */
 	writel(CFG_R_SRAB_CMDSTAT_MEMADDR, CFG_F_sra_rst_MASK);
 
@@ -267,7 +314,7 @@ srab_interface_reset(void)
 	return ret;
 }
 
-static int
+int
 srab_wreg(robo_info_t *robo, uint8 page, uint8 reg, void *val, int len)
 {
 	uint16 val16;
@@ -284,6 +331,19 @@ srab_wreg(robo_info_t *robo, uint8 page, uint8 reg, void *val, int len)
 	ET_TRACE(("%s: [0x%x-0x%x] := 0x%x (len %d)\n", __FUNCTION__, page, reg,
 	       VARG(val, len), len));
 
+#if 0
+	if (len>=6) {
+		int idx=0;
+		printf("%s: [0x%x-0x%x] <= 0x", __FUNCTION__, page, reg);
+		for (idx=len-1; idx>=0; idx--)
+			printf("%02x", ptr[idx]);
+		printf(" (len %d)\n", len);
+	} else {
+		printf("%s: [0x%x-0x%x] <= 0x%x (len %d)\n", __FUNCTION__, page, reg,
+			VARG(val, len), len);
+	}
+#endif
+
 	//srab_request_grant();
 
 	/* Load the value to write */
@@ -352,7 +412,7 @@ srab_wreg(robo_info_t *robo, uint8 page, uint8 reg, void *val, int len)
 	return ret;
 }
 
-static int
+int
 srab_rreg(robo_info_t *robo, uint8 page, uint8 reg, void *val, int len)
 {
 	uint32 val32;
@@ -426,6 +486,18 @@ srab_rreg(robo_info_t *robo, uint8 page, uint8 reg, void *val, int len)
 		break;
 	}
 
+#if 0
+	if (len>=6) {
+		int idx=0;
+		printf("%s: [0x%x-0x%x] => 0x", __FUNCTION__, page, reg);
+		for (idx=len-1; idx>=0; idx--)
+			printf("%02x", ptr[idx]);
+		printf(" (len %d)\n", len);
+	} else {
+		printf("%s: [0x%x-0x%x] => 0x%x (len %d)\n", __FUNCTION__, page, reg,
+			VARG(val, len), len);
+	}
+#endif
 	ET_TRACE(("%s: [0x%x-0x%x] => 0x%x (len %d)\n", __FUNCTION__, page, reg,
 	       VARG(val, len), len));
 
@@ -444,7 +516,7 @@ static dev_ops_t srab = {
 	"SRAB"
 };
 
-#if defined(CONFIG_NS_PLUS)
+#if (defined(CONFIG_NS_PLUS))
 void
 srab_sgmii_set_blk(robo_info_t *robo, uint page, uint blk)
 {
@@ -509,6 +581,19 @@ srab_sgmii_wreg(robo_info_t *robo, uint8 page, uint16 reg, uint16 *val)
 #endif //(defined(CONFIG_NS_PLUS))
 /////////////////////-SRAB-/////////////////////
 
+#if defined(CONFIG_CYGNUS)
+static void robo_switch_reset(robo_info_t *robo)
+{
+    char tmp;
+    srab_rreg(robo, PAGE_CTRL, REG_CTRL_SRST, &tmp, 1);
+    tmp |= (1 << 4);
+    srab_wreg(robo, PAGE_CTRL, REG_CTRL_SRST, &tmp, 1);
+    tmp |= (1 << 7);
+    srab_wreg(robo, PAGE_CTRL, REG_CTRL_SRST, &tmp, 1);
+    mdelay(1);
+}
+#endif 
+
 /* High level switch configuration functions. */
 
 /* Get access to the RoboSwitch */
@@ -516,6 +601,9 @@ robo_info_t *
 bcm_robo_attach(si_t *sih, void *h, char *vars, miird_f miird, miiwr_f miiwr)
 {
 	robo_info_t *robo;
+#if 0
+	uint32 idx;
+#endif
 	int rc;
 
 	ET_TRACE(("%s: enter\n", __FUNCTION__));
@@ -534,10 +622,20 @@ bcm_robo_attach(si_t *sih, void *h, char *vars, miird_f miird, miiwr_f miiwr)
 	robo->miiwr = miiwr;
 	robo->page = -1;
 
+#if 0
+	/* In case we need it */
+	idx = si_coreidx(sih);
+#endif
 
 	srab_interface_reset();
+#if defined(CONFIG_CYGNUS)
+    robo_switch_reset(robo);
+#endif 
 	srab_rreg(robo, PAGE_MMR, REG_VERSION_ID, &robo->corerev, 1);
 
+#if 0
+	si_setcoreidx(sih, idx);
+#endif
 
 	ET_TRACE(("%s: Internal robo rev %d\n", __FUNCTION__, robo->corerev));
 
@@ -630,11 +728,13 @@ bcm_robo_config_vlan(robo_info_t *robo, uint8 *mac_addr)
 	uint16 vid;
 	uint8 arl_entry[8] = { 0 };
 /* only enable lan ports */
-#ifdef CONFIG_FOUR_PORTS
+#if defined(CONFIG_CYGNUS)
+	char vlan1ports[] = "0 1 5 8*";
+#elif defined(CONFIG_FOUR_PORTS)
 	char vlan1ports[] = "0 1 2 7*";
 #else
 	char vlan1ports[] = "0 1 2 3 4 5 7*";
-#endif
+#endif /* defined(CONFIG_CYGNUS) */
 	uint8 vtble, vtbli, vtbla;
 
 	ET_TRACE(("%s: enter\n", __FUNCTION__));
@@ -667,6 +767,13 @@ bcm_robo_config_vlan(robo_info_t *robo, uint8 *mac_addr)
 
 	//Port 5 is already configured as non-CPU port
 	//in pdesc97 table above
+#if 0
+	if (ROBO_IS_BCM5301X(robo->devid32)) {
+		/* 5301x use port 5 as mii port connect to GMAC0 */
+		pdesc[5].cpu = 1;
+		pdescsz -= 3;
+	}
+#endif
 
 	/* setup each vlan. max. 16 vlans. */
 	/* force vlan id to be equal to vlan number */
@@ -865,6 +972,7 @@ bcm_robo_enable_switch(robo_info_t *robo)
 			robo->ops->write_reg(robo, PAGE_CTRL, i, &val8, sizeof(val8));
 		}
 #endif
+#if (!defined(CONFIG_CYGNUS))
 		/* Over ride GMAC0 Port5 status to make it link by default */
 		val8 = 0;
 		robo->ops->read_reg(robo, PAGE_CTRL, REG_CTRL_PORT5_GMIIPO, &val8, sizeof(val8));
@@ -877,16 +985,63 @@ bcm_robo_enable_switch(robo_info_t *robo)
 		val8 |= 0x71;	/* Make Link pass and override it. */
 		robo->ops->write_reg(robo, PAGE_CTRL, REG_CTRL_PORT7_GMIIPO, &val8, sizeof(val8));
 
+		/* Over ride GMAC2 IMP(Port8) status to make it link by default */
+		val8 = 0;
+		robo->ops->read_reg(robo, PAGE_CTRL, REG_CTRL_MIIPO, &val8, sizeof(val8));
+		val8 |= 0xb1;	/* Make Link pass and override it. */
+		robo->ops->write_reg(robo, PAGE_CTRL, REG_CTRL_MIIPO, &val8, sizeof(val8));
+#else
+		val16 = 0;
+		robo->ops->read_reg(robo, PAGE_IOCTRL, REG_IOCTRL_PORT5, &val16, sizeof(val16));
+		val16 |= 0x71;	/* Make Link pass and override it. */
+		robo->ops->write_reg(robo, PAGE_IOCTRL, REG_IOCTRL_PORT5, &val16, sizeof(val16));
+
+		/* Over ride GMAC2 IMP(Port8) status to make it link by default */
+		val16 = 0;
+		robo->ops->read_reg(robo, PAGE_IOCTRL, REG_IOCTRL_PORTIMP, &val16, sizeof(val16));
+		val16 |= 0xb1;	/* Make Link pass and override it. */
+		robo->ops->write_reg(robo, PAGE_IOCTRL, REG_IOCTRL_PORTIMP, &val16, sizeof(val16));
+#endif /* (!defined(CONFIG_CYGNUS)) */
+
+		/* GMAC2 IMP(Port8) disable BRCM tag */
+		val8 = 0;
+		robo->ops->read_reg(robo, PAGE_MMR, REG_BRCM_HDR, &val8, sizeof(val8));
+		val8 &= 0xfe;
+		robo->ops->write_reg(robo, PAGE_MMR, REG_BRCM_HDR, &val8, sizeof(val8));
+
+		/* GMAC2 IMP(Port8) Enable receive all packets */
+		val8 = 0;
+		robo->ops->read_reg(robo, PAGE_CTRL, REG_CTRL_IMP, &val8, sizeof(val8));
+		val8 |= 0x1c; 
+		robo->ops->write_reg(robo, PAGE_CTRL, REG_CTRL_IMP, &val8, sizeof(val8));
+
+		/* GMAC2 IMP(Port8) IMP port Enable */
+		val8 = 0;
+		robo->ops->read_reg(robo, PAGE_MMR, REG_MGMT_CFG, &val8, sizeof(val8));
+		val8 |= 0x80; 
+		robo->ops->write_reg(robo, PAGE_MMR, REG_MGMT_CFG, &val8, sizeof(val8));
 	}
 
+	/* put port 8 in dump forwarding mode (Page 0, Address 0x22) */
+	robo->ops->read_reg(robo, PAGE_CTRL, REG_CTRL_SWCTL, &val16, sizeof(val16));
+	/* set external ports */
+	val16 |= 0x40;
+	robo->ops->write_reg(robo, PAGE_CTRL, REG_CTRL_SWCTL, &val16, sizeof(val16));
+
 	/* put external ports into protected mode (Page 0, Address 0x24) */
 	robo->ops->read_reg(robo, PAGE_CTRL, REG_CTRL_PPORT, &val16, sizeof(val16));
 	/* set external ports */
 	val16 |= 0x1f;	/* ports 0 - 4 */
 	robo->ops->write_reg(robo, PAGE_CTRL, REG_CTRL_PPORT, &val16, sizeof(val16));
 
+#if defined(CONFIG_CYGNUS)
+	/* enable Port 5 RGMII delay mode */
+	robo->ops->read_reg(robo, PAGE_IOCTRL, REG_CTRL_P5RGMIICTL, &val8, sizeof(val8));
+	val8 |= 0x02;
+	robo->ops->write_reg(robo, PAGE_IOCTRL, REG_CTRL_P5RGMIICTL, &val8, sizeof(val8));
+#endif /* defined(CONFIG_CYGNUS) */
 
-#if defined(CONFIG_NS_PLUS)
+#if (defined(CONFIG_NS_PLUS))
 	if ( robo_is_port_cfg(5, PORTCFG_SGMII)
 		 	|| robo_is_port_cfg(4, PORTCFG_SGMII) ) {
 		/* either port5 or port4 SGMII enabled */
@@ -929,7 +1084,7 @@ bcm_robo_enable_switch(robo_info_t *robo)
 }
 
 
-#if defined(CONFIG_NS_PLUS)
+#if (defined(CONFIG_NS_PLUS))
 int
 robo_is_port_cfg(int port, char *cfg)
 {
@@ -976,6 +1131,13 @@ robo_dump_regs(robo_info_t *robo)
 	pdesc = pdesc97;
 	pdescsz = sizeof(pdesc97) / sizeof(pdesc_t);
 
+#if 0
+	if (ROBO_IS_BCM5301X(robo->devid32)) {
+		/* 5301x use port 5 as mii port connect to GMAC0 */
+		pdesc[5].cpu = 1;
+		pdescsz -= 3;
+	}
+#endif
 
 	robo->ops->read_reg(robo, PAGE_VLAN, REG_VLAN_CTRL0, &val8, sizeof(val8));
 	printf("(0x34,0x00)VLAN control 0 register: 0x%02x\n", val8);
@@ -987,6 +1149,7 @@ robo_dump_regs(robo_info_t *robo)
 	vtbli = REG_VTBL_INDX_5395;
 	vtbla = REG_VTBL_ACCESS_5395;
 
+	/* XXX: Show the VLAN Table from 539x */
 	for (i = 0; i <= VLAN_MAXVID; i++) {
 		/* VLAN Table Address Index Register (Page 0x05, Address 0x61-0x62/0x81-0x82) */
 		val16 = i;		/* vlan id */
@@ -1010,3 +1173,22 @@ robo_dump_regs(robo_info_t *robo)
 	}
 }
 #endif /* BCMDBG */
+
+#if defined(CONFIG_CYGNUS)
+/* Configure the switch to enable MDIO Direct Access for the GPHYS */
+int
+bcm_robo_phy_access(robo_info_t *robo)
+{
+	uint8 val8;
+
+	ET_TRACE(("%s: enter\n", __FUNCTION__));
+
+	/* MDIO Directo Access Enable Register (Page 0x0, Address 00x6f) */
+	robo->ops->read_reg(robo, PAGE_CTRL, REG_CTRL_MDIO_DA, &val8, sizeof(val8));
+	//printf("%s() page(0x%x) register(0x%x) read value: 0x%x\n", __FUNCTION__, PAGE_CTRL, REG_CTRL_MDIO_DA, val8);
+	val8 |= 01;		/* enable MDIO direct access */
+	robo->ops->write_reg(robo, PAGE_CTRL, REG_CTRL_MDIO_DA, &val8, sizeof(val8));
+	//printf("%s() page(0x%x) register(0x%x) write value: 0x%x\n", __FUNCTION__, PAGE_CTRL, REG_CTRL_MDIO_DA, val8);
+	return 0;
+}
+#endif /* defined(CONFIG_CYGNUS) */
diff --git a/drivers/net/bcmiproc_robo_serdes.c b/drivers/net/bcmiproc_robo_serdes.c
index 1965f3f..bb91ec8 100644
--- a/drivers/net/bcmiproc_robo_serdes.c
+++ b/drivers/net/bcmiproc_robo_serdes.c
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  *
  * These routines provide access to the serdes
  *
@@ -125,6 +113,13 @@ robo_serdes_reset_core(robo_info_t *robo, uint page)
 		}
 		srab_sgmii_wreg(robo, page, XGXS16G_XGXSBLK0_MISCCONTROL1r, &data16);
 
+#if 0 //dgb
+		/* disable in-band MDIO. PHY-443 */
+		srab_sgmii_rreg(robo, page, 0x8111, &data16);
+		/* rx_inBandMdio_rst */
+		data16 |= 1 << 3;
+		srab_sgmii_wreg(robo, page, 0x8111, &data16);
+#endif
 	}
 	return 0;
 }
@@ -426,3 +421,169 @@ robo_serdes_speed_get(robo_info_t *robo, uint page, int *speed)
 
 	return 0;
 }
+
+
+#ifdef BCMINTERNAL
+/*
+ * Function:
+ *      robo_serdes_lb_set
+ * Purpose:
+ *      Put XGXS6/FusionCore in PHY loopback
+ * Parameters:
+ *      robo - robo handle
+ *      page - port page
+ *      enable - binary value for on/off (1/0)
+ * Returns:
+ *      0
+ */
+int
+robo_serdes_lb_set(robo_info_t *robo, uint gpage, int enable)
+{
+	uint16      misc_ctrl, data16;
+	uint16      lb_bit;
+	uint16      lb_mask;
+
+
+	uint		page=gpage;
+
+	if ( page == PAGE_P4_SGMII ) {
+		printf("%s access page4 via page5 lane1\n", __FUNCTION__);
+		page = PAGE_P5_SGMII;
+		// try to access p4 registers via lane1
+		data16 = 1;
+		srab_sgmii_wreg(robo, page, 0xffde, &data16);
+	}
+
+
+	/* Configure Loopback in XAUI */
+	srab_sgmii_rreg(robo, page, XGXS16G_XGXSBLK0_MISCCONTROL1r, &misc_ctrl);
+	if (misc_ctrl & XGXSBLK0_MISCCONTROL1_PCS_DEV_EN_OVERRIDE_MASK) {
+		/* PCS */
+		lb_bit  = (enable) ? IEEE0BLK_IEEECONTROL0_GLOOPBACK_MASK : 0;
+		lb_mask = IEEE0BLK_IEEECONTROL0_GLOOPBACK_MASK;
+	} else if (misc_ctrl & XGXSBLK0_MISCCONTROL1_PMD_DEV_EN_OVERRIDE_MASK) {
+		/* PMA/PMD */
+		lb_bit  = (enable) ? 1 : 0;
+		lb_mask = 1;
+	} else {
+		/* PHY XS, DTE XS */
+		lb_bit  = (enable) ? IEEE0BLK_IEEECONTROL0_GLOOPBACK_MASK : 0;
+		lb_mask = IEEE0BLK_IEEECONTROL0_GLOOPBACK_MASK;
+	}
+
+	srab_sgmii_rreg(robo, page, XGXS16G_IEEE0BLK_IEEECONTROL0r, &data16);
+	data16 &= ~(lb_mask);
+	data16 |= lb_bit;
+	srab_sgmii_wreg(robo, page, XGXS16G_IEEE0BLK_IEEECONTROL0r, &data16);
+
+	/* Configure Loopback in SerDes */
+	lb_bit  = (enable) ? MII_CTRL_LE : 0;
+	lb_mask = MII_CTRL_LE;
+	srab_sgmii_rreg(robo, page, XGXS16G_COMBO_IEEE0_MIICNTLr, &data16);
+	data16 &= ~(lb_mask);
+	data16 |= lb_bit;
+	srab_sgmii_wreg(robo, page, XGXS16G_COMBO_IEEE0_MIICNTLr, &data16);
+
+	srab_sgmii_rreg(robo, page, XGXS16G_XGXSBLK0_XGXSCONTROLr, &data16);
+//	data16 |= 0x10;
+	data16 |= 0x50;
+	srab_sgmii_wreg(robo, page, XGXS16G_XGXSBLK0_XGXSCONTROLr, &data16);
+
+	srab_sgmii_rreg(robo, page, 0x8017, &data16);
+	data16 = 0xff0f;
+	srab_sgmii_wreg(robo, page, 0x8017, &data16);
+
+    return 0;
+}
+
+void
+robo_serdes_disp_status(robo_info_t *robo, uint page)
+{
+	uint16		tmp0, tmp1, tmp2, tmp3;
+
+	printf("%s: page:%d\n", __FUNCTION__, page);
+
+	tmp0 = robo_serdes_get_id(robo, page, 0);
+	tmp1 = robo_serdes_get_id(robo, page, 1);
+	tmp2 = robo_serdes_get_id(robo, page, 2);
+	printf("  id0(0x%x) id1(0x%x) id2(0x%x)\n", tmp0, tmp1, tmp2);
+
+	srab_sgmii_rreg(robo, page, XGXS16G_IEEE0BLK_IEEECONTROL0r, &tmp0);
+	srab_sgmii_rreg(robo, page, XGXS16G_IEEE0BLK_IEEECONTROL0r+1, &tmp1);
+	printf("  MII-Control(0): 0x%x; MII-Status(1): 0x%x\n", tmp0, tmp1);
+
+	srab_sgmii_rreg(robo, page, 2, &tmp0);
+	srab_sgmii_rreg(robo, page, 3, &tmp1);
+	printf("  Phy ChipID(2:3): 0x%04x:0x%04x\n", tmp0, tmp1);
+
+	srab_sgmii_rreg(robo, page, 4, &tmp0);
+	srab_sgmii_rreg(robo, page, 5, &tmp1);
+	srab_sgmii_rreg(robo, page, 0xf, &tmp2);
+	printf("  AN AD(4): 0x%x; AN LNK PARTNER(5): 0x%x; EXT STAT(f): 0x%x\n", tmp0, tmp1, tmp2);
+
+	srab_sgmii_rreg(robo, page, XGXS16G_XGXSBLK0_XGXSCONTROLr, &tmp0);
+	srab_sgmii_rreg(robo, page, XGXS16G_XGXSBLK0_XGXSSTATUSr, &tmp1);
+	printf("  XGXS-Control(8000): 0x%x; XGXS-Status(8001): 0x%x\n", tmp0, tmp1);
+
+	srab_sgmii_rreg(robo, page, XGXS16G_XGXSBLK0_MMDSELECTr, &tmp0);
+	srab_sgmii_rreg(robo, page, XGXS16G_XGXSBLK0_MISCCONTROL1r, &tmp1);
+	printf("  XGXS BLK0 MMD Select(800d): 0x%x; XGXS BLK0 MISC CTRL(800e): 0x%x\n", tmp0, tmp1);
+
+	srab_sgmii_rreg(robo, page, XGXS16G_XGXSBLK1_LANECTRL0r, &tmp0);
+	srab_sgmii_rreg(robo, page, XGXS16G_XGXSBLK1_LANECTRL3r, &tmp1);
+	printf("  XGXS BLK1 LNCTRL0(8015): 0x%x; XGXS BLK1_LNCTRL3(8018): 0x%x\n", tmp0, tmp1);
+
+	srab_sgmii_rreg(robo, page, XGXS16G_RX0_RX_CONTROLr, &tmp0);
+	srab_sgmii_rreg(robo, page, XGXS16G_AN73_PDET_PARDET10GCONTROLr, &tmp1);
+	srab_sgmii_rreg(robo, page, XGXS16G_XGXSBLK7_EEECONTROLr, &tmp2);
+	printf("  XGXS RX0 CTRL(80b1): 0x%x; XGXS AN73 PARDET CTRL(8131): 0x%x; XGXS BLK7 EEECTRL(8150): 0x%x\n", tmp0, tmp1, tmp2);
+
+	srab_sgmii_rreg(robo, page, 0x8111, &tmp0);
+	srab_sgmii_rreg(robo, page, 0x8372, &tmp1);
+	printf("  (8111): 0x%x; (8372): 0x%x\n", tmp0, tmp1);
+
+	srab_sgmii_rreg(robo, page, XGXS16G_SERDESDIGITAL_CONTROL1000X1r, &tmp0);
+	srab_sgmii_rreg(robo, page, XGXS16G_SERDESDIGITAL_CONTROL1000X2r, &tmp1);
+	srab_sgmii_rreg(robo, page, XGXS16G_SERDESDIGITAL_CONTROL1000X3r, &tmp2);
+	printf("  XGXS SERDES DIG CTRL 1000X1(8300): 0x%x; XGXS SERDES DIG CTRL 1000X2(8301): 0x%x; XGXS SERDES DIGITAL CTRL 1000X3r(8302): 0x%x\n", tmp0, tmp1, tmp2);
+
+	srab_sgmii_rreg(robo, page, XGXS16G_SERDESDIGITAL_STATUS1000X1r, &tmp0);
+	srab_sgmii_rreg(robo, page, XGXS16G_SERDESDIGITAL_MISC1r, &tmp1);
+	printf("  XGXS SERDES DIG STATUS 1000X1(8304): 0x%x; XGXS SERDES DIG MISC1(8308): 0x%x\n", tmp0, tmp1);
+
+	srab_sgmii_rreg(robo, page, XGXS16G_SERDESID_SERDESID0r, &tmp0);
+	srab_sgmii_rreg(robo, page, XGXS16G_SERDESID_SERDESID1r, &tmp1);
+	printf("  XGXS SERDESID0(8310): 0x%x; XGXS SERDESID1(8311): 0x%x\n", tmp0, tmp1);
+
+	srab_sgmii_rreg(robo, page, XGXS16G_SERDESID_SERDESID2r, &tmp0);
+	srab_sgmii_rreg(robo, page, XGXS16G_SERDESID_SERDESID3r, &tmp1);
+	printf("  XGXS SERDESID0(8312): 0x%x; XGXS SERDESID1(8313): 0x%x\n", tmp0, tmp1);
+
+	srab_sgmii_rreg(robo, page, XGXS16G_REMOTEPHY_MISC3r, &tmp0);
+	srab_sgmii_rreg(robo, page, XGXS16G_REMOTEPHY_MISC5r, &tmp1);
+	printf("  XGXS REMOTEPHY MISC3(833c): 0x%x; XGXS REMOTEPHY MISC5(833e): 0x%x\n", tmp0, tmp1);
+
+	srab_sgmii_rreg(robo, page, XGXS16G_BAM_NEXTPAGE_MP5_NEXTPAGECTRLr, &tmp0);
+	srab_sgmii_rreg(robo, page, XGXS16G_BAM_NEXTPAGE_UD_FIELDr, &tmp1);
+	printf("  XGXS BAM MP5_NEXTPAGECTRL(8350): 0x%x; XGXS BAM NP UD FIELDr(8357): 0x%x\n", tmp0, tmp1);
+
+	srab_sgmii_rreg(robo, page, XGXS16G_COMBO_IEEE0_MIICNTLr, &tmp0);
+	srab_sgmii_rreg(robo, page, XGXS16G_COMBO_IEEE0_AUTONEGADVr, &tmp1);
+	printf("  XGXS COMBO IEEE0 MIICNTL(ffe0): 0x%x; XGXS COMBO IEEE0 AUTONEGADVr(ffe4): 0x%x\n", tmp0, tmp1);
+
+   srab_sgmii_rreg(robo, page, 0x8050, &tmp0);
+   srab_sgmii_rreg(robo, page, 0x8122, &tmp1);
+	printf("  (8050): 0x%x; (8122): 0x%x\n", tmp0, tmp1);
+
+	srab_sgmii_rreg(robo, page, 0x80b0, &tmp0);
+	srab_sgmii_rreg(robo, page, 0x80c0, &tmp1);
+	srab_sgmii_rreg(robo, page, 0x80d0, &tmp2);
+	srab_sgmii_rreg(robo, page, 0x80e0, &tmp3);
+	printf("  (80b0): 0x%x; (80c0): 0x%x; (80d0): 0x%x, (80e0): 0x%x\n", tmp0, tmp1, tmp2, tmp3);
+
+	srab_sgmii_rreg(robo, page, 0xffe1, &tmp0);
+	printf("  (ffe1): 0x%x\n", tmp0);
+
+}
+#endif /* BCMINTERNAL */
+
diff --git a/drivers/net/bcmiproc_robo_serdes.h b/drivers/net/bcmiproc_robo_serdes.h
index 8bfaace..50219a2 100644
--- a/drivers/net/bcmiproc_robo_serdes.h
+++ b/drivers/net/bcmiproc_robo_serdes.h
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  *
  * These routines provide access to the serdes
  *
@@ -72,5 +60,9 @@ extern int robo_serdes_init(robo_info_t *robo, uint page);
 extern int robo_serdes_enable_set(robo_info_t *robo, uint page, int enable);
 extern int robo_serdes_speed_set(robo_info_t *robo, uint page, int speed);
 extern int robo_serdes_speed_get(robo_info_t *robo, uint page, int *speed);
+#ifdef BCMINTERNAL
+extern int robo_serdes_lb_set(robo_info_t *robo, uint page, int enable);
+extern void robo_serdes_disp_status(robo_info_t *robo, uint page);
+#endif /* BCMINTERNAL */
 
 #endif	/* _bcm_iproc_serdes_h_ */
diff --git a/drivers/net/bcmiproc_serdes.c b/drivers/net/bcmiproc_serdes.c
old mode 100644
new mode 100755
index cc617bc..a76e992
--- a/drivers/net/bcmiproc_serdes.c
+++ b/drivers/net/bcmiproc_serdes.c
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  *
  * These routines provide access to the serdes
  *
@@ -80,9 +68,30 @@ serdes_set_blk(bcm_eth_t *eth_data, uint phyaddr, uint blk)
 }
 
 
+#if defined(CONFIG_SABER2)
+/* CL22 register access for VIPERCORE in Saber2 */
+#define PHY_AER_REG_ADDR_AER(_addr)    (((_addr) >> 16) & 0x0000FFFF)  
+#define PHY_AER_REG_ADDR_BLK(_addr)    (((_addr) & 0x0000FFF0))
+#define PHY_AER_REG_ADDR_REGAD(_addr)  ((((_addr) & 0x00008000) >> 11) | \
+                                        ((_addr) & 0x0000000F))
+#endif
+
+
 void
 serdes_wr_reg(bcm_eth_t *eth_data, uint phyaddr, uint reg, uint data)
 {
+#if defined(CONFIG_SABER2)
+  uint32 phy_reg_aer = 0, phy_reg_blk = 0, phy_reg_addr = 0;
+	
+	phy_reg_aer  = PHY_AER_REG_ADDR_AER(reg);    /* upper 16 bits */
+  phy_reg_blk  = PHY_AER_REG_ADDR_BLK(reg);    /* 12 bits mask=0xfff0 */
+  phy_reg_addr = PHY_AER_REG_ADDR_REGAD(reg);  /* 5 bits {15,3,2,1,0} */
+  
+  chip_phy_wr(eth_data, SERDES_INTERNAL, phyaddr, 0x001f, 0xffd0);
+  chip_phy_wr(eth_data, SERDES_INTERNAL, phyaddr, 0x001e, phy_reg_aer);
+  chip_phy_wr(eth_data, SERDES_INTERNAL, phyaddr, 0x001f, phy_reg_blk);  /* Map block */
+  chip_phy_wr(eth_data, SERDES_INTERNAL, phyaddr, phy_reg_addr, data);   /* write register */
+#else
 	uint blk = reg&0x7ff0;
 	uint off = reg&0x000f;
 
@@ -101,15 +110,29 @@ serdes_wr_reg(bcm_eth_t *eth_data, uint phyaddr, uint reg, uint data)
 
 	/* write register */
 	chip_phy_wr(eth_data, SERDES_INTERNAL, phyaddr, off, data);
+#endif
 }
 
 
 uint16
 serdes_rd_reg(bcm_eth_t *eth_data, uint phyaddr, uint reg)
 {
+	uint16	data;
+	
+#if defined(CONFIG_SABER2)
+  uint32 phy_reg_aer = 0, phy_reg_blk = 0, phy_reg_addr = 0;
+	
+	phy_reg_aer  = PHY_AER_REG_ADDR_AER(reg);    /* upper 16 bits */
+  phy_reg_blk  = PHY_AER_REG_ADDR_BLK(reg);    /* 12 bits mask=0xfff0 */
+  phy_reg_addr = PHY_AER_REG_ADDR_REGAD(reg);  /* 5 bits {15,3,2,1,0} */
+  
+  chip_phy_wr(eth_data, SERDES_INTERNAL, phyaddr, 0x001f, 0xffd0);
+  chip_phy_wr(eth_data, SERDES_INTERNAL, phyaddr, 0x001e, phy_reg_aer);
+  chip_phy_wr(eth_data, SERDES_INTERNAL, phyaddr, 0x001f, phy_reg_blk);  /* Map block */
+  data = chip_phy_rd(eth_data, SERDES_INTERNAL, phyaddr, phy_reg_addr);  /* read register */
+#else
 	uint blk = reg&0x7ff0;
 	uint off = reg&0x000f;
-	uint16	data;
 
 	NET_TRACE(("%s enter\n", __FUNCTION__));
 
@@ -128,7 +151,7 @@ serdes_rd_reg(bcm_eth_t *eth_data, uint phyaddr, uint reg)
 		 __FUNCTION__, phyaddr, reg, data));
 	//printf("%s read(0x%x) from phyaddr(0x%x) reg(0x%x)\n",
 	//	 __FUNCTION__, data, phyaddr, reg);
-
+#endif
 	return data;
 }
 
@@ -266,19 +289,19 @@ int
 serdes_init(bcm_eth_t *eth_data, uint phyaddr)
 {
 	uint16		data16;
-	uint16		serdes_id0, serdes_id1, serdes_id2;
+	//uint16		serdes_id0, serdes_id1, serdes_id2;
 
 	NET_TRACE(("et%d: %s: phyaddr %d\n", eth_data->unit, __FUNCTION__, phyaddr));
 
 	/* get serdes id */
-	serdes_id0 = serdes_get_id(eth_data, phyaddr, 0);
-	serdes_id1 = serdes_get_id(eth_data, phyaddr, 1);
-	serdes_id2 = serdes_get_id(eth_data, phyaddr, 2);
+	//serdes_id0 = serdes_get_id(eth_data, phyaddr, 0);
+	//serdes_id1 = serdes_get_id(eth_data, phyaddr, 1);
+	//serdes_id2 = serdes_get_id(eth_data, phyaddr, 2);
 	//printf("%s pbyaddr(0x%x) id0(0x%x) id1(0x%x) id2(0x%x)\n", __FUNCTION__, phyaddr, serdes_id0, serdes_id1, serdes_id2);
 
 	/* get more ids */
-	serdes_id0 = serdes_rd_reg(eth_data, phyaddr, 2);
-	serdes_id1 = serdes_rd_reg(eth_data, phyaddr, 3);
+	//serdes_id0 = serdes_rd_reg(eth_data, phyaddr, 2);
+	//serdes_id1 = serdes_rd_reg(eth_data, phyaddr, 3);
 	//printf("%s pbyaddr(0x%x) SERDES PhyID_MS(0x%x) PhyID_LS(0x%x)\n", __FUNCTION__, phyaddr, serdes_id0, serdes_id1);
 
 	/* unlock lane */
@@ -343,3 +366,310 @@ serdes_init(bcm_eth_t *eth_data, uint phyaddr)
 
 	return 0;
 }
+
+
+#ifdef BCMINTERNAL
+/*
+ * Function:
+ *      serdes_enable_set
+ * Purpose:
+ *      Enable/Disable phy
+ * Parameters:
+ *      eth_data - ethernet data
+ *      phyaddr - physical address
+ *      enable - on/off state to set
+ * Returns:
+ *      0
+ */
+int
+serdes_enable_set(bcm_eth_t *eth_data, uint phyaddr, int enable)
+{
+	uint16	data16, mask16;
+
+	NET_TRACE(("et%d: %s: phyaddr %d\n", eth_data->unit, __FUNCTION__, phyaddr));
+
+	data16 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_XGXSBLK1_LANECTRL3r);
+	mask16 = (1 << (phyaddr-1));	/* rx lane */
+	mask16 |= (mask16 << 4);	/* add tx lane */
+	mask16 |= 0x800;
+	if (enable) {
+		data16 &= ~(mask16);
+	} else {
+		data16 &= ~(mask16);
+		data16 |= mask16;
+	}
+	serdes_wr_reg(eth_data, phyaddr, XGXS16G_XGXSBLK1_LANECTRL3r, data16);
+
+	return 0;
+}
+
+
+/*
+ * Function:
+ *      serdes_speed_set
+ * Purpose:
+ *      Set PHY speed
+ * Parameters:
+ *      eth_data - ethernet data
+ *      phyaddr - physical address
+ *      speed - link speed in Mbps
+ * Returns:
+ *      0
+ */
+int
+serdes_speed_set(bcm_eth_t *eth_data, uint phyaddr, int speed)
+{
+	uint16		speed_val, mask;
+	uint16		data16;
+	uint16		speed_mii;
+
+	NET_TRACE(("et%d: %s: phyaddr %d\n", eth_data->unit, __FUNCTION__, phyaddr));
+
+	if (speed > 1000) {
+		return -1;
+	}
+
+	speed_val = 0;
+	speed_mii = 0;
+	mask      = SERDESDIGITAL_MISC1_FORCE_SPEED_SEL_MASK |
+				SERDESDIGITAL_MISC1_FORCE_SPEED_MASK;
+
+	switch (speed) {
+	case 0:
+		/* Do not change speed */
+		return 0;
+	case 10:
+		speed_mii = MII_CTRL_SS_10;
+		break;
+	case 100:
+		speed_mii = MII_CTRL_SS_100;
+		break;
+	case 1000:
+		speed_mii = MII_CTRL_SS_1000;
+		break;
+	default:
+		return -1;
+	}
+
+	/* Hold rxSeqStart */
+	data16 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_RX0_RX_CONTROLr);
+	data16 |= DSC_2_0_DSC_CTRL0_RXSEQSTART_MASK;
+	serdes_wr_reg(eth_data, phyaddr, XGXS16G_RX0_RX_CONTROLr, data16);
+
+	/* hold TX FIFO in reset */
+	data16 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_SERDESDIGITAL_CONTROL1000X3r);
+	data16 |= SERDESDIGITAL_CONTROL1000X3_TX_FIFO_RST_MASK;
+	serdes_wr_reg(eth_data, phyaddr, XGXS16G_SERDESDIGITAL_CONTROL1000X3r, data16);
+
+	data16 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_SERDESDIGITAL_MISC1r);
+	data16 &= ~(mask);
+	data16 |= speed_val;
+	serdes_wr_reg(eth_data, phyaddr, XGXS16G_SERDESDIGITAL_MISC1r, data16);
+
+	data16 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_COMBO_IEEE0_MIICNTLr);
+	data16 &= ~(MII_CTRL_SS_LSB | MII_CTRL_SS_MSB);
+	data16 |= speed_mii;
+	serdes_wr_reg(eth_data, phyaddr, XGXS16G_COMBO_IEEE0_MIICNTLr, data16);
+
+	/* release rxSeqStart */
+	data16 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_RX0_RX_CONTROLr);
+	data16 &= ~(DSC_2_0_DSC_CTRL0_RXSEQSTART_MASK);
+	serdes_wr_reg(eth_data, phyaddr, XGXS16G_RX0_RX_CONTROLr, data16);
+                                                                               
+	/* release TX FIFO reset */
+	data16 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_SERDESDIGITAL_CONTROL1000X3r);
+	data16 &= ~(SERDESDIGITAL_CONTROL1000X3_TX_FIFO_RST_MASK);
+	serdes_wr_reg(eth_data, phyaddr, XGXS16G_SERDESDIGITAL_CONTROL1000X3r, data16);
+
+	return 0;
+}
+
+
+/*
+ * Function:
+ *      serdes_speed_get
+ * Purpose:
+ *      Get PHY speed
+ * Parameters:
+ *      eth_data - ethernet data
+ *      phyaddr - physical address
+ *      speed - current link speed in Mbps
+ * Returns:
+ *      0
+ */
+int
+serdes_speed_get(bcm_eth_t *eth_data, uint phyaddr, int *speed)
+{
+	uint16	data16;
+
+	NET_TRACE(("et%d: %s: phyaddr %d\n", eth_data->unit, __FUNCTION__, phyaddr));
+
+	data16 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_SERDESDIGITAL_STATUS1000X1r);
+
+	data16 &= SERDESDIGITAL_STATUS1000X1_SPEED_STATUS_MASK;
+	data16 >>= SERDESDIGITAL_STATUS1000X1_SPEED_STATUS_SHIFT;
+
+	if (data16 == 3) {
+		*speed= 2500;
+	} else if (data16 == 2) {
+		*speed= 1000;
+	} else if (data16 == 1) {
+		*speed= 100;
+	} else {
+		*speed= 10;
+	}
+
+	return 0;
+}
+
+
+/*
+ * Function:
+ *      phy_xgxs16g1l_lb_set
+ * Purpose:
+ *      Put XGXS6/FusionCore in PHY loopback
+ * Parameters:
+ *      unit - StrataSwitch unit #.
+ *      port - StrataSwitch port #. 
+ *      enable - binary value for on/off (1/0)
+ * Returns:
+ *      0
+ */
+int
+serdes_lb_set(bcm_eth_t *eth_data, uint phyaddr, int enable)
+{
+	uint16      misc_ctrl, data16;
+	uint16      lb_bit;
+	uint16      lb_mask;
+
+	/* Configure Loopback in XAUI */
+	misc_ctrl = serdes_rd_reg(eth_data, phyaddr, XGXS16G_XGXSBLK0_MISCCONTROL1r);
+	if (misc_ctrl & XGXSBLK0_MISCCONTROL1_PCS_DEV_EN_OVERRIDE_MASK) {
+		/* PCS */
+		lb_bit  = (enable) ? IEEE0BLK_IEEECONTROL0_GLOOPBACK_MASK : 0;
+		lb_mask = IEEE0BLK_IEEECONTROL0_GLOOPBACK_MASK;
+	} else if (misc_ctrl & XGXSBLK0_MISCCONTROL1_PMD_DEV_EN_OVERRIDE_MASK) {
+		/* PMA/PMD */
+		lb_bit  = (enable) ? 1 : 0;
+		lb_mask = 1;
+	} else {
+		/* PHY XS, DTE XS */
+		lb_bit  = (enable) ? IEEE0BLK_IEEECONTROL0_GLOOPBACK_MASK : 0;
+		lb_mask = IEEE0BLK_IEEECONTROL0_GLOOPBACK_MASK;
+	}
+
+	data16 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_IEEE0BLK_IEEECONTROL0r);
+	data16 &= ~(lb_mask);
+	data16 |= lb_bit;
+	serdes_wr_reg(eth_data, phyaddr, XGXS16G_IEEE0BLK_IEEECONTROL0r, data16);
+
+	/* Configure Loopback in SerDes */
+	lb_bit  = (enable) ? MII_CTRL_LE : 0;
+	lb_mask = MII_CTRL_LE;
+	data16 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_COMBO_IEEE0_MIICNTLr);
+	data16 &= ~(lb_mask);
+	data16 |= lb_bit;
+	serdes_wr_reg(eth_data, phyaddr, XGXS16G_COMBO_IEEE0_MIICNTLr, data16);
+
+	data16 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_XGXSBLK0_XGXSCONTROLr);
+	data16 |= 0x10;
+	serdes_wr_reg(eth_data, phyaddr, XGXS16G_XGXSBLK0_XGXSCONTROLr, data16);
+
+	data16 = serdes_rd_reg(eth_data, phyaddr, 0x8017);
+	data16 = 0xff0f;
+	serdes_wr_reg(eth_data, phyaddr, 0x8017, data16);
+
+    return 0;
+}
+
+
+void
+serdes_disp_status(bcm_eth_t *eth_data, uint phyaddr)
+{
+	uint16		tmp0, tmp1, tmp2, tmp3;
+
+	printf("et%d: %s: phyaddr:%d\n", eth_data->unit, __FUNCTION__, phyaddr);
+
+	tmp0 = serdes_get_id(eth_data, phyaddr, 0);
+	tmp1 = serdes_get_id(eth_data, phyaddr, 1);
+	tmp2 = serdes_get_id(eth_data, phyaddr, 2);
+	printf("  id0(0x%x) id1(0x%x) id2(0x%x)\n", tmp0, tmp1, tmp2);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_IEEE0BLK_IEEECONTROL0r);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_IEEE0BLK_IEEECONTROL0r+1);
+	printf("  MII-Control(0): 0x%x; MII-Status(1): 0x%x\n", tmp0, tmp1);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, 2);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, 3);
+	printf("  Phy ChipID(2:3): 0x%04x:0x%04x\n", tmp0, tmp1);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, 4);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, 5);
+	tmp2 = serdes_rd_reg(eth_data, phyaddr, 0xf);
+	printf("  AN AD(4): 0x%x; AN LNK PARTNER(5): 0x%x; EXT STAT(f): 0x%x\n", tmp0, tmp1, tmp2);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_XGXSBLK0_XGXSCONTROLr);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_XGXSBLK0_XGXSSTATUSr);
+	printf("  XGXS-Control(8000): 0x%x; XGXS-Status(8001): 0x%x\n", tmp0, tmp1);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_XGXSBLK0_MMDSELECTr);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_XGXSBLK0_MISCCONTROL1r);
+	printf("  XGXS BLK0 MMD Select(800d): 0x%x; XGXS BLK0 MISC CTRL(800e): 0x%x\n", tmp0, tmp1);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_XGXSBLK1_LANECTRL0r);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_XGXSBLK1_LANECTRL3r);
+	printf("  XGXS BLK1 LNCTRL0(8015): 0x%x; XGXS BLK1_LNCTRL3(8018): 0x%x\n", tmp0, tmp1);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_RX0_RX_CONTROLr);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_AN73_PDET_PARDET10GCONTROLr);
+	tmp2 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_XGXSBLK7_EEECONTROLr);
+	printf("  XGXS RX0 CTRL(80b1): 0x%x; XGXS AN73 PARDET CTRL(8131): 0x%x; XGXS BLK7 EEECTRL(8150): 0x%x\n", tmp0, tmp1, tmp2);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, 0x8111);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, 0x8372);
+	printf("  (8111): 0x%x; (8372): 0x%x\n", tmp0, tmp1);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_SERDESDIGITAL_CONTROL1000X1r);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_SERDESDIGITAL_CONTROL1000X2r);
+	tmp2 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_SERDESDIGITAL_CONTROL1000X3r);
+	printf("  XGXS SERDES DIG CTRL 1000X1(8300): 0x%x; XGXS SERDES DIG CTRL 1000X2(8301): 0x%x; XGXS SERDES DIGITAL CTRL 1000X3r(8302): 0x%x\n", tmp0, tmp1, tmp2);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_SERDESDIGITAL_STATUS1000X1r);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_SERDESDIGITAL_MISC1r);
+	printf("  XGXS SERDES DIG STATUS 1000X1(8304): 0x%x; XGXS SERDES DIG MISC1(8308): 0x%x\n", tmp0, tmp1);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_SERDESID_SERDESID0r);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_SERDESID_SERDESID1r);
+	printf("  XGXS SERDESID0(8310): 0x%x; XGXS SERDESID1(8311): 0x%x\n", tmp0, tmp1);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_SERDESID_SERDESID2r);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_SERDESID_SERDESID3r);
+	printf("  XGXS SERDESID0(8312): 0x%x; XGXS SERDESID1(8313): 0x%x\n", tmp0, tmp1);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_REMOTEPHY_MISC3r);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_REMOTEPHY_MISC5r);
+	printf("  XGXS REMOTEPHY MISC3(833c): 0x%x; XGXS REMOTEPHY MISC5(833e): 0x%x\n", tmp0, tmp1);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_BAM_NEXTPAGE_MP5_NEXTPAGECTRLr);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_BAM_NEXTPAGE_UD_FIELDr);
+	printf("  XGXS BAM MP5_NEXTPAGECTRL(8350): 0x%x; XGXS BAM NP UD FIELDr(8357): 0x%x\n", tmp0, tmp1);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_COMBO_IEEE0_MIICNTLr);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, XGXS16G_COMBO_IEEE0_AUTONEGADVr);
+	printf("  XGXS COMBO IEEE0 MIICNTL(ffe0): 0x%x; XGXS COMBO IEEE0 AUTONEGADVr(ffe4): 0x%x\n", tmp0, tmp1);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, 0x8050);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, 0x8122);
+	printf("  (8050): 0x%x; (8122): 0x%x\n", tmp0, tmp1);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, 0x80b0);
+	tmp1 = serdes_rd_reg(eth_data, phyaddr, 0x80c0);
+	tmp2 = serdes_rd_reg(eth_data, phyaddr, 0x80d0);
+	tmp3 = serdes_rd_reg(eth_data, phyaddr, 0x80e0);
+	printf("  (80b0): 0x%x; (80c0): 0x%x; (80d0): 0x%x, (80e0): 0x%x\n", tmp0, tmp1, tmp2, tmp3);
+
+	tmp0 = serdes_rd_reg(eth_data, phyaddr, 0xffe1);
+	printf("  (ffe1): 0x%x\n", tmp0);
+
+}
+#endif /* BCMINTERNAL */
diff --git a/drivers/net/bcmiproc_serdes.h b/drivers/net/bcmiproc_serdes.h
old mode 100644
new mode 100755
index 3b0ef4f..26f87fd
--- a/drivers/net/bcmiproc_serdes.h
+++ b/drivers/net/bcmiproc_serdes.h
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  *
  * These routines provide access to the serdes
  *
@@ -77,5 +65,12 @@ extern void serdes_reset(bcm_eth_t *eth_data, uint phyaddr);
 extern int serdes_reset_core(bcm_eth_t *eth_data, uint phyaddr);
 extern int serdes_start_pll(bcm_eth_t *eth_data, uint phyaddr);
 extern int serdes_init(bcm_eth_t *eth_data, uint phyaddr);
+#ifdef BCMINTERNAL
+extern int serdes_enable_set(bcm_eth_t *eth_data, uint phyaddr, int enable);
+extern int serdes_speed_set(bcm_eth_t *eth_data, uint phyaddr, int speed);
+extern int serdes_speed_get(bcm_eth_t *eth_data, uint phyaddr, int *speed);
+extern int serdes_lb_set(bcm_eth_t *eth_data, uint phyaddr, int enable);
+extern void serdes_disp_status(bcm_eth_t *eth_data, uint phyaddr);
+#endif /* BCMINTERNAL */
 
 #endif	/* _bcm_iproc_serdes_h_ */
diff --git a/drivers/net/bcmiproc_serdes_def.h b/drivers/net/bcmiproc_serdes_def.h
old mode 100644
new mode 100755
index 8687719..d2ef9cf
--- a/drivers/net/bcmiproc_serdes_def.h
+++ b/drivers/net/bcmiproc_serdes_def.h
@@ -1,17 +1,5 @@
 /*
- * Copyright (C) 2013, Broadcom Corporation. All Rights Reserved.
- * 
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
- * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
- * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
- * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ * $Copyright Open Broadcom Corporation$
  *
  * These are serdes defines
  *
@@ -302,3 +290,4 @@
 #endif /*  _PHY_XGXS16G_H_ */
 
 /* End of File */
+
diff --git a/drivers/net/phy/broadcom.c b/drivers/net/phy/broadcom.c
index 16c813f..427ac60 100644
--- a/drivers/net/phy/broadcom.c
+++ b/drivers/net/phy/broadcom.c
@@ -23,7 +23,26 @@
 #include <config.h>
 #include <common.h>
 #include <phy.h>
-#include <broadcom_phy.h>
+
+/* Broadcom BCM54xx -- taken from linux sungem_phy */
+#define MIIM_BCM54xx_AUXCNTL			0x18
+#define MIIM_BCM54xx_AUXCNTL_ENCODE(val) (((val & 0x7) << 12)|(val & 0x7))
+#define MIIM_BCM54xx_AUXSTATUS			0x19
+#define MIIM_BCM54xx_AUXSTATUS_LINKMODE_MASK	0x0700
+#define MIIM_BCM54xx_AUXSTATUS_LINKMODE_SHIFT	8
+
+#define MIIM_BCM54XX_SHD			0x1c
+#define MIIM_BCM54XX_SHD_WRITE			0x8000
+#define MIIM_BCM54XX_SHD_VAL(x)			((x & 0x1f) << 10)
+#define MIIM_BCM54XX_SHD_DATA(x)		((x & 0x3ff) << 0)
+#define MIIM_BCM54XX_SHD_WR_ENCODE(val, data)	\
+	(MIIM_BCM54XX_SHD_WRITE | MIIM_BCM54XX_SHD_VAL(val) | \
+	 MIIM_BCM54XX_SHD_DATA(data))
+
+#define MIIM_BCM54XX_EXP_DATA		0x15	/* Expansion register data */
+#define MIIM_BCM54XX_EXP_SEL		0x17	/* Expansion register select */
+#define MIIM_BCM54XX_EXP_SEL_SSD	0x0e00	/* Secondary SerDes select */
+#define MIIM_BCM54XX_EXP_SEL_ER		0x0f00	/* Expansion register select */
 
 /* Broadcom BCM5461S */
 static int bcm5461_config(struct phy_device *phydev)
@@ -86,121 +105,6 @@ static int bcm54xx_startup(struct phy_device *phydev)
 	return 0;
 }
 
-/* Broadcom BCM54616S */
-/*
- * "Ethernet@Wirespeed" needs to be enabled to achieve link in certain
- * circumstances.  eg a gigabit TSEC connected to a gigabit switch with
- * a 4-wire ethernet cable.  Both ends advertise gigabit, but can't
- * link.  "Ethernet@Wirespeed" reduces advertised speed until link
- * can be achieved.
- */
-static u32 bcm54616_read_wirespeed(struct phy_device *phydev, u32 reg)
-{
-	return (phy_read(phydev, MDIO_DEVAD_NONE, reg) & 0x8FFF) | 0x8010;
-}
-
-static int bcm54616_config(struct phy_device *phydev)
-{
-	unsigned int reg;
-
-	/* reset the PHY */
-	reg = phy_read(phydev, MDIO_DEVAD_NONE, MII_BMCR);
-	reg |= BMCR_RESET;
-	phy_write(phydev, MDIO_DEVAD_NONE, MII_BMCR, reg);
-
-	/* Setup read from auxilary control shadow register 7 */
-	phy_write(phydev, MDIO_DEVAD_NONE, MIIM_BCM54xx_AUXCNTL,
-			MIIM_BCM54xx_AUXCNTL_ENCODE(7));
-	/* Read Misc Control register and or in Ethernet@Wirespeed */
-	reg = bcm54616_read_wirespeed(phydev, MIIM_BCM54xx_AUXCNTL);
-	phy_write(phydev, MDIO_DEVAD_NONE, MIIM_BCM54xx_AUXCNTL, reg);
-
-	/* Enable copper/fiber auto-detect */
-	phy_write(phydev, MDIO_DEVAD_NONE, MIIM_BCM54XX_SHD,
-			MIIM_BCM54XX_SHD_WR_ENCODE(0x1e, 0x027));
-
-	genphy_config_aneg(phydev);
-
-	return 0;
-}
-
-/*
- * Find out if PHY is in copper or serdes mode by looking at Shadow Reg
- * 0x1F - "Mode Control Register"
- */
-static int bcm54616_is_serdes(struct phy_device *phydev)
-{
-	u16 val;
-
-	phy_write(phydev, MDIO_DEVAD_NONE, MIIM_BCM54XX_SHD,
-			MIIM_BCM54XX_SHD_VAL(0x1F));
-	val = phy_read(phydev, MDIO_DEVAD_NONE, MIIM_BCM54XX_SHD);
-	return (val & 0x0001);
-}
-
-/*
- * Determine SerDes link speed and duplex from Expansion reg 0x42 "Operating
- * Mode Status Register"
- */
-static u32 bcm54616_parse_serdes_sr(struct phy_device *phydev)
-{
-	u16 val;
-	int i = 0;
-
-	/* Wait 1s for link - Clause 37 autonegotiation happens very fast */
-	while (1) {
-		phy_write(phydev, MDIO_DEVAD_NONE, MIIM_BCM54XX_SHD,
-			MIIM_BCM54XX_SHD_VAL(0x15));
-		val = phy_read(phydev, MDIO_DEVAD_NONE, MIIM_BCM54XX_SHD);
-
-		if (val & 0x0200)
-			break;
-
-		if (i++ > 1000) {
-			phydev->link = 0;
-			return 1;
-		}
-
-		udelay(1000);	/* 1 ms */
-	}
-
-	phydev->link = 1;
-	switch ((val >> 6) & 0x3) {
-	case (0x00):
-		phydev->speed = 10;
-		break;
-	case (0x01):
-		phydev->speed = 100;
-		break;
-	case (0x02):
-		phydev->speed = 1000;
-		break;
-	}
-
-	phydev->duplex = (val & 0x0100) == 0x0100;
-
-	return 0;
-}
-
-/*
- * Figure out if BCM54616 is in serdes or copper mode and determine link
- * configuration accordingly
- */
-static int bcm54616_startup(struct phy_device *phydev)
-{
-	if (bcm54616_is_serdes(phydev)) {
-		bcm54616_parse_serdes_sr(phydev);
-		phydev->port = PORT_FIBRE;
-	} else {
-		/* Wait for auto-negotiation to complete or fail */
-		genphy_update_link(phydev);
-		/* Parse BCM54xx copper aux status register */
-		bcm54xx_parse_status(phydev);
-	}
-
-	return 0;
-}
-
 /* Broadcom BCM5482S */
 /*
  * "Ethernet@Wirespeed" needs to be enabled to achieve link in certain
@@ -374,44 +278,11 @@ static struct phy_driver BCM5482S_driver = {
 	.shutdown = &genphy_shutdown,
 };
 
-static struct phy_driver BCM54610_A3_driver = {
-	.name = "Broadcom BCM54610_A3",
-	.uid = 0x0143bd63,
-	.mask = 0xfffff0,
-	.features = PHY_GBIT_FEATURES,
-	.config = &bcm5461_config,
-	.startup = &bcm54xx_startup,
-	.shutdown = &genphy_shutdown,
-};
-
-static struct phy_driver BCM5481_A2_driver = {
-	.name = "Broadcom BCM5481_A2",
-	.uid = 0x0143bca2,
-	.mask = 0xfffff0,
-	.features = PHY_GBIT_FEATURES,
-	.config = &bcm5461_config,
-	.startup = &bcm54xx_startup,
-	.shutdown = &genphy_shutdown,
-};
-
-static struct phy_driver BCM54616S_driver = {
-	.name = "Broadcom BCM54616S",
-	.uid = 0x03625D10,
-	.mask = 0xfffffff0,
-	.features = PHY_GBIT_FEATURES,
-	.config = &bcm54616_config,
-	.startup = &bcm54616_startup,
-	.shutdown = &genphy_shutdown,
-};
-
 int phy_broadcom_init(void)
 {
 	phy_register(&BCM5482S_driver);
 	phy_register(&BCM5464S_driver);
 	phy_register(&BCM5461S_driver);
-	phy_register(&BCM54610_A3_driver);
-	phy_register(&BCM5481_A2_driver);
-	phy_register(&BCM54616S_driver);
 
 	return 0;
 }
