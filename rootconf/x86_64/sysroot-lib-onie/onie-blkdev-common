
onie_boot_mnt="/mnt/onie-boot"
#  Copyright (C) 2014 Curt Brune <curt@cumulusnetworks.com>
#
#  SPDX-License-Identifier:     GPL-2.0

onie_root_dir="${onie_boot_mnt}/onie"
onie_config_dir="${onie_root_dir}/config"

grub_root_dir="${onie_boot_mnt}/grub"
grub_env_file="${grub_root_dir}/grubenv"

# gfdisk types and GPT UUIDs from gptfdisk-0.8.8/parttypes.cc
grub_boot_gfdisk_type="0xEF02"
onie_boot_gfdisk_type="0x3000"

grub_boot_gpt_uuid="21686148-6449-6E6F-744E-656564454649"
onie_boot_gpt_uuid="7412F7D5-A156-4B13-81DC-867174929325"

onie_boot_fs_type="ext4"
[ -f /lib/onie/onie-blkdev-platform ] && {
    . /lib/onie/onie-blkdev-platform
    type onie_boot_fs_type_platform > /dev/null && {
        onie_boot_fs_type=$(onie_boot_fs_type_platform)
    }
}

grub_boot_label="GRUB-BOOT"
onie_boot_label="ONIE-BOOT"

# Return the /dev device corresponding to $onie_boot_label if it
# exists.
onie_get_boot_dev()
{
    device=$(blkid | grep "$onie_boot_label" | sed -e 's/:.*$//')
    [ -n "$device" ] && echo -n "$device"
}

#
# FSCK the given partition with retries.
#
run_fsck()
{

    DEV="$1"

    if grep -s -w -i "forcefsck" /proc/cmdline >& /dev/null ; then
        force="-f"
    else
        force=""
    fi

    if [ "$FSCKFIX" = yes ] ; then
        fix="-y"
    else
        fix="-p"
    fi

    FSCK=/usr/sbin/fsck
    if [ "$verbose" = "yes" ] ; then
        echo "Running fsck on $DEV ..."
        $FSCK $force $fix $DEV
        retval=$?
    else
        $FSCK $force $fix $DEV > /dev/null 2>&1
        retval=$?
    fi

    if [ $retval -gt 3 ]; then
        echo "ERROR  : fsck encountered fatal errors"
        echo "WARNING: Retrying fsck with -y option on $DEV"
        $FSCK -f -y $DEV
        retval=$?
        if [ $retval -gt 2 ]; then
            echo "ERROR: RUN fsck MANUALLY on $DEV without -y or -p options"
            return 1
        fi
    elif [ $retval -eq 2 ]; then
        echo "ERROR: fsck corrected errors, reboot requested."
    elif [ $retval -eq 1 ]; then
        echo "ERROR: fsck corrected errors."
    fi

    return 0
}

# Set ONIE environment variables.  The underlying store uses grubenv.
#
# arg $1 - variable name
# arg $2 - variable value [optional]
#
# If the variable value is not specified the effect is to delete the
# named variable.
onie_setenv()
{
    var="$1"
    val="$2"
    if [ -n "$val" ] ; then
        grub-editenv $grub_env_file set "$var"="$val"
    else
        # delete $var
        grub-editenv $grub_env_file unset "$var"
    fi
}

# Get an ONIE environment variable.  The underlying store uses
# grubenv.
#
# arg $1 - variable name
#
# If the variable name is not found the empty string "" is returned.
onie_getenv()
{
    var="$1"
    val=$(grub-editenv $grub_env_file list | grep "${var}=")
    val=${val#*=}
    echo -n $val
}



# Local Variables:
# mode: shell-script
# eval: (sh-set-shell "/bin/sh" t nil)
# End:
